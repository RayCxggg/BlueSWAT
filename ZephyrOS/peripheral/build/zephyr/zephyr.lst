
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003c10 	.word	0x20003c10
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00005ccd 	.word	0x00005ccd
   8:	0001e335 	.word	0x0001e335
		if (fdtable[fd].obj == NULL) {
   c:	00005bbd 	.word	0x00005bbd
  10:	00005bbd 	.word	0x00005bbd
  14:	00005bbd 	.word	0x00005bbd
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00005bbd 	.word	0x00005bbd
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00005bbd 	.word	0x00005bbd
	errno = ENFILE;
  20:	00005bbd 	.word	0x00005bbd
	return -1;
  24:	00005bbd 	.word	0x00005bbd
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  28:	00005bbd 	.word	0x00005bbd
  2c:	00005a59 	.word	0x00005a59
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00005bbd 	.word	0x00005bbd
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00005bbd 	.word	0x00005bbd
  38:	00005a11 	.word	0x00005a11
  3c:	0001e317 	.word	0x0001e317

00000040 <_irq_vector_table>:
  40:	00005c8d 00017305 00005c8d 00005c8d     .\...s...\...\..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  60:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  70:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  80:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  90:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  a0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  b0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  c0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  d0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  e0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..
  f0:	00005c8d 00005c8d 00005c8d 00005c8d     .\...\...\...\..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_BT_RPA_TIMEOUT+0x2e>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_BT_RPA_TIMEOUT+0x2e>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_BT_RPA_TIMEOUT+0x32>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_BT_RPA_TIMEOUT+0x32>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x52>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x50>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_BT_RPA_TIMEOUT+0x62>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x7a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x78>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_BT_RPA_TIMEOUT+0x58>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_BT_RPA_TIMEOUT+0x28>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xac>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_BT_RPA_TIMEOUT+0x5e>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_BT_RPA_TIMEOUT+0x54>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_BT_RPA_TIMEOUT+0x54>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_BT_RPA_TIMEOUT+0x4c>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_BT_RPA_TIMEOUT+0x4c>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_BT_RPA_TIMEOUT+0x50>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_BT_RPA_TIMEOUT+0x50>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_RPA_TIMEOUT+0x48>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_BT_RPA_TIMEOUT+0x48>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_BT_RPA_TIMEOUT+0x3a>
     38c:	d015      	beq.n	3ba <CONFIG_BT_RPA_TIMEOUT+0x36>
     38e:	b375      	cbz	r5, 3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_BT_RPA_TIMEOUT+0xa>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_BT_RPA_TIMEOUT+0xa>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x7a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x52>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3fc:	4d42      	ldr	r5, [pc, #264]	; (508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>)
     3fe:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
     402:	6899      	ldr	r1, [r3, #8]
     404:	f011 0101 	ands.w	r1, r1, #1
{
     408:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     40a:	d11f      	bne.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     40c:	aa01      	add	r2, sp, #4
     40e:	f640 4003 	movw	r0, #3075	; 0xc03
     412:	f007 fddb 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     416:	4604      	mov	r4, r0
     418:	2800      	cmp	r0, #0
     41a:	d171      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		hci_reset_complete(rsp);
     41c:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     41e:	689b      	ldr	r3, [r3, #8]
	if (status) {
     420:	781b      	ldrb	r3, [r3, #0]
     422:	b983      	cbnz	r3, 446 <CONFIG_FLASH_SIZE+0x46>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     424:	f105 0370 	add.w	r3, r5, #112	; 0x70
     428:	4618      	mov	r0, r3
     42a:	f01e fa32 	bl	1e892 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     42e:	f3bf 8f5b 	dmb	ish
     432:	f000 0005 	and.w	r0, r0, #5
     436:	e853 2f00 	ldrex	r2, [r3]
     43a:	e843 0100 	strex	r1, r0, [r3]
     43e:	2900      	cmp	r1, #0
     440:	d1f9      	bne.n	436 <CONFIG_FLASH_SIZE+0x36>
     442:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     446:	9801      	ldr	r0, [sp, #4]
     448:	f019 fbd6 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     44c:	aa01      	add	r2, sp, #4
     44e:	2100      	movs	r1, #0
     450:	f241 0003 	movw	r0, #4099	; 0x1003
     454:	f007 fdba 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     458:	4604      	mov	r4, r0
     45a:	2800      	cmp	r0, #0
     45c:	d150      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	read_local_features_complete(rsp);
     45e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     460:	482a      	ldr	r0, [pc, #168]	; (50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc0>)
     462:	6899      	ldr	r1, [r3, #8]
     464:	2208      	movs	r2, #8
     466:	3101      	adds	r1, #1
     468:	f01e f83e 	bl	1e4e8 <memcpy>
	net_buf_unref(rsp);
     46c:	9801      	ldr	r0, [sp, #4]
     46e:	f019 fbc3 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     472:	4621      	mov	r1, r4
     474:	aa01      	add	r2, sp, #4
     476:	f241 0001 	movw	r0, #4097	; 0x1001
     47a:	f007 fda7 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     47e:	4604      	mov	r4, r0
     480:	2800      	cmp	r0, #0
     482:	d13d      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	read_local_ver_complete(rsp);
     484:	9801      	ldr	r0, [sp, #4]
     486:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     488:	785a      	ldrb	r2, [r3, #1]
     48a:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     48c:	78d9      	ldrb	r1, [r3, #3]
     48e:	789a      	ldrb	r2, [r3, #2]
     490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     494:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
     496:	791a      	ldrb	r2, [r3, #4]
     498:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     49a:	7a19      	ldrb	r1, [r3, #8]
     49c:	79da      	ldrb	r2, [r3, #7]
     49e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4a2:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     4a4:	795a      	ldrb	r2, [r3, #5]
     4a6:	799b      	ldrb	r3, [r3, #6]
     4a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     4ac:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
     4ae:	f019 fba3 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     4b2:	4621      	mov	r1, r4
     4b4:	aa01      	add	r2, sp, #4
     4b6:	f241 0002 	movw	r0, #4098	; 0x1002
     4ba:	f007 fd87 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     4be:	4604      	mov	r4, r0
     4c0:	b9f0      	cbnz	r0, 500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	read_supported_commands_complete(rsp);
     4c2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     4c4:	4812      	ldr	r0, [pc, #72]	; (510 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc4>)
     4c6:	6899      	ldr	r1, [r3, #8]
     4c8:	2240      	movs	r2, #64	; 0x40
     4ca:	3101      	adds	r1, #1
     4cc:	f01e f80c 	bl	1e4e8 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     4d0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     4d4:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
     4d6:	f043 0306 	orr.w	r3, r3, #6
     4da:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
     4de:	f019 fb8b 	bl	19bf8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4e2:	7f2b      	ldrb	r3, [r5, #28]
     4e4:	0658      	lsls	r0, r3, #25
     4e6:	d41b      	bmi.n	520 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd4>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     4e8:	4b0a      	ldr	r3, [pc, #40]	; (514 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc8>)
     4ea:	490b      	ldr	r1, [pc, #44]	; (518 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xcc>)
		BT_ERR("Non-LE capable controller detected!");
     4ec:	480b      	ldr	r0, [pc, #44]	; (51c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd0>)
     4ee:	1ac9      	subs	r1, r1, r3
     4f0:	08c9      	lsrs	r1, r1, #3
     4f2:	0189      	lsls	r1, r1, #6
     4f4:	f041 0101 	orr.w	r1, r1, #1
     4f8:	f01d f8d6 	bl	1d6a8 <log_0>
		return -ENODEV;
     4fc:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     500:	4620      	mov	r0, r4
     502:	b006      	add	sp, #24
     504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     508:	20005888 	.word	0x20005888
     50c:	200058a0 	.word	0x200058a0
     510:	200058a8 	.word	0x200058a8
     514:	00021114 	.word	0x00021114
     518:	000211d4 	.word	0x000211d4
     51c:	00023e3b 	.word	0x00023e3b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     520:	4621      	mov	r1, r4
     522:	aa01      	add	r2, sp, #4
     524:	f242 0003 	movw	r0, #8195	; 0x2003
     528:	f007 fd50 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     52c:	4604      	mov	r4, r0
     52e:	2800      	cmp	r0, #0
     530:	d1e6      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	read_le_features_complete(rsp);
     532:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     534:	48b6      	ldr	r0, [pc, #728]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     536:	6899      	ldr	r1, [r3, #8]
     538:	2208      	movs	r2, #8
     53a:	3101      	adds	r1, #1
     53c:	f01d ffd4 	bl	1e4e8 <memcpy>
	net_buf_unref(rsp);
     540:	9801      	ldr	r0, [sp, #4]
     542:	f019 fb59 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     546:	4621      	mov	r1, r4
     548:	aa01      	add	r2, sp, #4
     54a:	f242 0002 	movw	r0, #8194	; 0x2002
     54e:	f007 fd3d 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     552:	4604      	mov	r4, r0
     554:	2800      	cmp	r0, #0
     556:	d1d3      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	le_read_buffer_size_complete(rsp);
     558:	9b01      	ldr	r3, [sp, #4]
     55a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     55c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     560:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
     564:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     566:	b121      	cbz	r1, 572 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x126>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     568:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     56a:	48aa      	ldr	r0, [pc, #680]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     56c:	4611      	mov	r1, r2
     56e:	f020 f9f3 	bl	20958 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     572:	9801      	ldr	r0, [sp, #4]
     574:	f019 fb40 	bl	19bf8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     578:	7f2e      	ldrb	r6, [r5, #28]
     57a:	f016 0620 	ands.w	r6, r6, #32
     57e:	f000 80ca 	beq.w	716 <CONFIG_BT_COMPANY_ID+0x125>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     582:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
     586:	0719      	lsls	r1, r3, #28
     588:	d511      	bpl.n	5ae <CONFIG_BT_HCI_ECC_STACK_SIZE+0x162>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     58a:	aa01      	add	r2, sp, #4
     58c:	2100      	movs	r1, #0
     58e:	f242 001c 	movw	r0, #8220	; 0x201c
     592:	f007 fd1b 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     596:	4604      	mov	r4, r0
     598:	2800      	cmp	r0, #0
     59a:	d1b1      	bne.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		le_read_supp_states_complete(rsp);
     59c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     59e:	6883      	ldr	r3, [r0, #8]
     5a0:	f853 2f01 	ldr.w	r2, [r3, #1]!
     5a4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     5a6:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
     5aa:	f019 fb25 	bl	19bf8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     5ae:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     5b2:	069a      	lsls	r2, r3, #26
     5b4:	f100 80cb 	bmi.w	74e <CONFIG_BT_COMPANY_ID+0x15d>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5b8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     5bc:	065b      	lsls	r3, r3, #25
     5be:	f100 80f2 	bmi.w	7a6 <CONFIG_BT_COMPANY_ID+0x1b5>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     5c2:	2108      	movs	r1, #8
     5c4:	f242 0001 	movw	r0, #8193	; 0x2001
     5c8:	f007 fba6 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
     5cc:	4604      	mov	r4, r0
     5ce:	2800      	cmp	r0, #0
     5d0:	f000 80a8 	beq.w	724 <CONFIG_BT_COMPANY_ID+0x133>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     5d4:	2108      	movs	r1, #8
     5d6:	4408      	add	r0, r1
     5d8:	f01f fdb3 	bl	20142 <net_buf_simple_add>
		    BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5dc:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     5e0:	f011 0f40 	tst.w	r1, #64	; 0x40
     5e4:	f240 2302 	movw	r3, #514	; 0x202
     5e8:	bf08      	it	eq
     5ea:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     5ec:	078f      	lsls	r7, r1, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     5ee:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     5f0:	bf4c      	ite	mi
     5f2:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     5f6:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     5fa:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     5fe:	068e      	lsls	r6, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     600:	bf48      	it	mi
     602:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     606:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     60a:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     60e:	bf18      	it	ne
     610:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     614:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     618:	07c9      	lsls	r1, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     61a:	bf48      	it	mi
     61c:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     620:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     622:	bf08      	it	eq
     624:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     628:	2100      	movs	r1, #0
     62a:	f01e f98e 	bl	1e94a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     62e:	4621      	mov	r1, r4
     630:	2200      	movs	r2, #0
     632:	f242 0001 	movw	r0, #8193	; 0x2001
     636:	f007 fcc9 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     63a:	4604      	mov	r4, r0
     63c:	2800      	cmp	r0, #0
     63e:	f47f af5f 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     642:	7f2b      	ldrb	r3, [r5, #28]
     644:	069a      	lsls	r2, r3, #26
     646:	d41e      	bmi.n	686 <CONFIG_BT_COMPANY_ID+0x95>
	if (bt_dev.le.mtu) {
     648:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
     64c:	b9d9      	cbnz	r1, 686 <CONFIG_BT_COMPANY_ID+0x95>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     64e:	aa01      	add	r2, sp, #4
     650:	f241 0005 	movw	r0, #4101	; 0x1005
     654:	f007 fcba 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     658:	4604      	mov	r4, r0
     65a:	2800      	cmp	r0, #0
     65c:	f47f af50 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	if (bt_dev.le.mtu) {
     660:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
     664:	b963      	cbnz	r3, 680 <CONFIG_BT_COMPANY_ID+0x8f>
	read_buffer_size_complete(rsp);
     666:	9b01      	ldr	r3, [sp, #4]
     668:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     66a:	785a      	ldrb	r2, [r3, #1]
     66c:	7899      	ldrb	r1, [r3, #2]
     66e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     672:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     676:	889a      	ldrh	r2, [r3, #4]
     678:	4866      	ldr	r0, [pc, #408]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     67a:	4611      	mov	r1, r2
     67c:	f020 f96c 	bl	20958 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     680:	9801      	ldr	r0, [sp, #4]
     682:	f019 fab9 	bl	19bf8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     686:	2108      	movs	r1, #8
     688:	f640 4001 	movw	r0, #3073	; 0xc01
     68c:	f007 fb44 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
     690:	4604      	mov	r4, r0
     692:	2800      	cmp	r0, #0
     694:	d046      	beq.n	724 <CONFIG_BT_COMPANY_ID+0x133>
	ev = net_buf_add(buf, sizeof(*ev));
     696:	2108      	movs	r1, #8
     698:	4408      	add	r0, r1
     69a:	f01f fd52 	bl	20142 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     69e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
     6a2:	07db      	lsls	r3, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     6a4:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     6a6:	f140 80ab 	bpl.w	800 <CONFIG_ISR_STACK_SIZE>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     6aa:	a157      	add	r1, pc, #348	; (adr r1, 808 <CONFIG_ISR_STACK_SIZE+0x8>)
     6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     6b0:	f01e f94b 	bl	1e94a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     6b4:	4621      	mov	r1, r4
     6b6:	2200      	movs	r2, #0
     6b8:	f640 4001 	movw	r0, #3073	; 0xc01
     6bc:	f007 fc86 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     6c0:	4604      	mov	r4, r0
     6c2:	2800      	cmp	r0, #0
     6c4:	f47f af1c 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     6c8:	4601      	mov	r1, r0
     6ca:	466a      	mov	r2, sp
     6cc:	f64f 4001 	movw	r0, #64513	; 0xfc01
     6d0:	f007 fc7c 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     6d4:	4e50      	ldr	r6, [pc, #320]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     6d6:	4b51      	ldr	r3, [pc, #324]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     6d8:	1af6      	subs	r6, r6, r3
     6da:	08f6      	lsrs	r6, r6, #3
     6dc:	01b6      	lsls	r6, r6, #6
     6de:	2800      	cmp	r0, #0
     6e0:	f000 80a8 	beq.w	834 <CONFIG_ISR_STACK_SIZE+0x34>
		BT_WARN("Vendor HCI extensions not available");
     6e4:	484e      	ldr	r0, [pc, #312]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     6e6:	f046 0102 	orr.w	r1, r6, #2
		BT_WARN("Failed to read supported vendor features");
     6ea:	f01c ffdd 	bl	1d6a8 <log_0>
		err = bt_conn_init();
     6ee:	f009 fedb 	bl	a4a8 <bt_conn_init>
		if (err) {
     6f2:	4604      	mov	r4, r0
     6f4:	2800      	cmp	r0, #0
     6f6:	f47f af03 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
     6fa:	494a      	ldr	r1, [pc, #296]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     6fc:	484a      	ldr	r0, [pc, #296]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     6fe:	f020 f9bd 	bl	20a7c <k_delayed_work_init>
		if (!bt_dev.id_count) {
     702:	79eb      	ldrb	r3, [r5, #7]
     704:	2b00      	cmp	r3, #0
     706:	f040 80fd 	bne.w	904 <CONFIG_BT_RX_STACK_SIZE+0x6c>
			BT_INFO("No ID address. App must call settings_load()");
     70a:	4848      	ldr	r0, [pc, #288]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     70c:	f046 0103 	orr.w	r1, r6, #3
     710:	f01c ffca 	bl	1d6a8 <log_0>
			return 0;
     714:	e6f4      	b.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     716:	2102      	movs	r1, #2
     718:	f640 406d 	movw	r0, #3181	; 0xc6d
     71c:	f007 fafc 	bl	7d18 <bt_hci_cmd_create>
		if (!buf) {
     720:	4604      	mov	r4, r0
     722:	b910      	cbnz	r0, 72a <CONFIG_BT_COMPANY_ID+0x139>
		return -ENOBUFS;
     724:	f06f 0436 	mvn.w	r4, #54	; 0x36
     728:	e6ea      	b.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     72a:	2102      	movs	r1, #2
     72c:	3008      	adds	r0, #8
     72e:	f01f fd08 	bl	20142 <net_buf_simple_add>
		cp_le->le = 0x01;
     732:	2301      	movs	r3, #1
     734:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     736:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     738:	4621      	mov	r1, r4
     73a:	4632      	mov	r2, r6
     73c:	f640 406d 	movw	r0, #3181	; 0xc6d
     740:	f007 fc44 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     744:	4604      	mov	r4, r0
     746:	2800      	cmp	r0, #0
     748:	f43f af1b 	beq.w	582 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x136>
     74c:	e6d8      	b.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
     74e:	aa01      	add	r2, sp, #4
     750:	2100      	movs	r1, #0
     752:	f242 002f 	movw	r0, #8239	; 0x202f
     756:	f007 fc39 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     75a:	4604      	mov	r4, r0
     75c:	2800      	cmp	r0, #0
     75e:	f47f aecf 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		rp = (void *)rsp->data;
     762:	9801      	ldr	r0, [sp, #4]
     764:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
     766:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
     76a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
     76e:	f019 fa43 	bl	19bf8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     772:	2104      	movs	r1, #4
     774:	f242 0024 	movw	r0, #8228	; 0x2024
     778:	f007 face 	bl	7d18 <bt_hci_cmd_create>
		if (!buf) {
     77c:	4606      	mov	r6, r0
     77e:	2800      	cmp	r0, #0
     780:	d0d0      	beq.n	724 <CONFIG_BT_COMPANY_ID+0x133>
		cp = net_buf_add(buf, sizeof(*cp));
     782:	2104      	movs	r1, #4
     784:	3008      	adds	r0, #8
     786:	f01f fcdc 	bl	20142 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     78a:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     78c:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     790:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     792:	4631      	mov	r1, r6
     794:	f242 0024 	movw	r0, #8228	; 0x2024
     798:	f007 fc18 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     79c:	4604      	mov	r4, r0
     79e:	2800      	cmp	r0, #0
     7a0:	f43f af0a 	beq.w	5b8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16c>
     7a4:	e6ac      	b.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     7a6:	2102      	movs	r1, #2
     7a8:	f242 002e 	movw	r0, #8238	; 0x202e
     7ac:	f007 fab4 	bl	7d18 <bt_hci_cmd_create>
		if (!buf) {
     7b0:	4604      	mov	r4, r0
     7b2:	2800      	cmp	r0, #0
     7b4:	d0b6      	beq.n	724 <CONFIG_BT_COMPANY_ID+0x133>
		cp = net_buf_add(buf, sizeof(*cp));
     7b6:	2102      	movs	r1, #2
     7b8:	3008      	adds	r0, #8
     7ba:	f01f fcc2 	bl	20142 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     7be:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     7c2:	7003      	strb	r3, [r0, #0]
     7c4:	2303      	movs	r3, #3
     7c6:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     7c8:	4621      	mov	r1, r4
     7ca:	2200      	movs	r2, #0
     7cc:	f242 002e 	movw	r0, #8238	; 0x202e
     7d0:	f007 fbfc 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     7d4:	4604      	mov	r4, r0
     7d6:	2800      	cmp	r0, #0
     7d8:	f47f ae92 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     7dc:	4601      	mov	r1, r0
     7de:	aa01      	add	r2, sp, #4
     7e0:	f242 002a 	movw	r0, #8234	; 0x202a
     7e4:	f007 fbf2 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
     7e8:	4604      	mov	r4, r0
     7ea:	2800      	cmp	r0, #0
     7ec:	f47f ae88 	bne.w	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
		le_read_resolving_list_size_complete(rsp);
     7f0:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     7f2:	6883      	ldr	r3, [r0, #8]
     7f4:	785b      	ldrb	r3, [r3, #1]
     7f6:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
		net_buf_unref(rsp);
     7fa:	f019 f9fd 	bl	19bf8 <net_buf_unref>
     7fe:	e6e0      	b.n	5c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x176>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     800:	480b      	ldr	r0, [pc, #44]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     802:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     806:	e753      	b.n	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     808:	02008890 	.word	0x02008890
     80c:	20008000 	.word	0x20008000
     810:	20005900 	.word	0x20005900
     814:	20005914 	.word	0x20005914
     818:	000211d4 	.word	0x000211d4
     81c:	00021114 	.word	0x00021114
     820:	00023e5f 	.word	0x00023e5f
     824:	0000816d 	.word	0x0000816d
     828:	20005970 	.word	0x20005970
     82c:	00023f33 	.word	0x00023f33
     830:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     834:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
     836:	4837      	ldr	r0, [pc, #220]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
	rp.info = (void *)rsp->data;
     838:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     83a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     83e:	2a03      	cmp	r2, #3
		return plat_str[platform];
     840:	bf96      	itet	ls
     842:	4935      	ldrls	r1, [pc, #212]	; (918 <CONFIG_BT_RX_STACK_SIZE+0x80>)
	return "unknown";
     844:	4935      	ldrhi	r1, [pc, #212]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
		return plat_str[platform];
     846:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     84a:	f046 0303 	orr.w	r3, r6, #3
     84e:	f01c ff4c 	bl	1d6ea <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     852:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     856:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     85a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     85c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     860:	d12e      	bne.n	8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>
	if (variant < ARRAY_SIZE(nordic_str)) {
     862:	2a03      	cmp	r2, #3
     864:	d82c      	bhi.n	8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>
		return nordic_str[variant];
     866:	492e      	ldr	r1, [pc, #184]	; (920 <CONFIG_BT_RX_STACK_SIZE+0x88>)
     868:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     86c:	482d      	ldr	r0, [pc, #180]	; (924 <CONFIG_BT_RX_STACK_SIZE+0x8c>)
     86e:	f01c ff3c 	bl	1d6ea <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     872:	7962      	ldrb	r2, [r4, #5]
     874:	482c      	ldr	r0, [pc, #176]	; (928 <CONFIG_BT_RX_STACK_SIZE+0x90>)
	if (variant < ARRAY_SIZE(var_str)) {
     876:	2a03      	cmp	r2, #3
		return var_str[variant];
     878:	bf96      	itet	ls
     87a:	492c      	ldrls	r1, [pc, #176]	; (92c <CONFIG_BT_RX_STACK_SIZE+0x94>)
	return "unknown";
     87c:	4927      	ldrhi	r1, [pc, #156]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
		return var_str[variant];
     87e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     882:	e9cd 1201 	strd	r1, r2, [sp, #4]
     886:	79a2      	ldrb	r2, [r4, #6]
     888:	9203      	str	r2, [sp, #12]
     88a:	f8b4 2007 	ldrh.w	r2, [r4, #7]
     88e:	9204      	str	r2, [sp, #16]
     890:	f8d4 2009 	ldr.w	r2, [r4, #9]
     894:	9205      	str	r2, [sp, #20]
     896:	f046 0303 	orr.w	r3, r6, #3
     89a:	2205      	movs	r2, #5
     89c:	a901      	add	r1, sp, #4
     89e:	f01c ff59 	bl	1d754 <log_n>
	net_buf_unref(rsp);
     8a2:	9800      	ldr	r0, [sp, #0]
     8a4:	f019 f9a8 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     8a8:	466a      	mov	r2, sp
     8aa:	2100      	movs	r1, #0
     8ac:	f64f 4002 	movw	r0, #64514	; 0xfc02
     8b0:	f007 fb8c 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     8b4:	4604      	mov	r4, r0
     8b6:	b128      	cbz	r0, 8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>
		BT_WARN("Failed to read supported vendor commands");
     8b8:	481d      	ldr	r0, [pc, #116]	; (930 <CONFIG_BT_RX_STACK_SIZE+0x98>)
     8ba:	f046 0102 	orr.w	r1, r6, #2
     8be:	e714      	b.n	6ea <CONFIG_BT_COMPANY_ID+0xf9>
		return "unknown";
     8c0:	4916      	ldr	r1, [pc, #88]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
     8c2:	e7d3      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
	rp.cmds = (void *)rsp->data;
     8c4:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     8c6:	481b      	ldr	r0, [pc, #108]	; (934 <CONFIG_BT_RX_STACK_SIZE+0x9c>)
     8c8:	6899      	ldr	r1, [r3, #8]
     8ca:	2202      	movs	r2, #2
     8cc:	3101      	adds	r1, #1
     8ce:	f01d fe0b 	bl	1e4e8 <memcpy>
	net_buf_unref(rsp);
     8d2:	9800      	ldr	r0, [sp, #0]
     8d4:	f019 f990 	bl	19bf8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8d8:	466a      	mov	r2, sp
     8da:	4621      	mov	r1, r4
     8dc:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8e0:	f007 fb74 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
     8e4:	b118      	cbz	r0, 8ee <CONFIG_BT_RX_STACK_SIZE+0x56>
		BT_WARN("Failed to read supported vendor features");
     8e6:	4814      	ldr	r0, [pc, #80]	; (938 <CONFIG_BT_RX_STACK_SIZE+0xa0>)
     8e8:	f046 0102 	orr.w	r1, r6, #2
     8ec:	e6fd      	b.n	6ea <CONFIG_BT_COMPANY_ID+0xf9>
	rp.feat = (void *)rsp->data;
     8ee:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
     8f0:	4812      	ldr	r0, [pc, #72]	; (93c <CONFIG_BT_RX_STACK_SIZE+0xa4>)
     8f2:	6899      	ldr	r1, [r3, #8]
     8f4:	2201      	movs	r2, #1
     8f6:	4411      	add	r1, r2
     8f8:	f01d fdf6 	bl	1e4e8 <memcpy>
	net_buf_unref(rsp);
     8fc:	9800      	ldr	r0, [sp, #0]
     8fe:	f019 f97b 	bl	19bf8 <net_buf_unref>
	if (err) {
     902:	e6f4      	b.n	6ee <CONFIG_BT_COMPANY_ID+0xfd>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     904:	2104      	movs	r1, #4
     906:	480e      	ldr	r0, [pc, #56]	; (940 <CONFIG_BT_RX_STACK_SIZE+0xa8>)
     908:	f01d ffcf 	bl	1e8aa <atomic_or>
	bt_finalize_init();
     90c:	f008 f96e 	bl	8bec <bt_finalize_init>
	return 0;
     910:	e5f6      	b.n	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
     912:	bf00      	nop
     914:	00023e83 	.word	0x00023e83
     918:	00021988 	.word	0x00021988
     91c:	00023894 	.word	0x00023894
     920:	00021950 	.word	0x00021950
     924:	00023e9c 	.word	0x00023e9c
     928:	00023eb4 	.word	0x00023eb4
     92c:	000219b8 	.word	0x000219b8
     930:	00023ee1 	.word	0x00023ee1
     934:	200058e9 	.word	0x200058e9
     938:	00023f0a 	.word	0x00023f0a
     93c:	200058e8 	.word	0x200058e8
     940:	200058f8 	.word	0x200058f8
     944:	00000000 	.word	0x00000000

00000948 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     94c:	4ca7      	ldr	r4, [pc, #668]	; (bec <ll_adv_enable+0x2a4>)
     94e:	b08f      	sub	sp, #60	; 0x3c
     950:	f894 50cc 	ldrb.w	r5, [r4, #204]	; 0xcc
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     954:	2302      	movs	r3, #2
     956:	f005 0501 	and.w	r5, r5, #1
     95a:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     95c:	2800      	cmp	r0, #0
     95e:	f000 80bd 	beq.w	adc <ll_adv_enable+0x194>
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     962:	bbad      	cbnz	r5, 9d0 <ll_adv_enable+0x88>
		ull_filter_adv_update(lll->filter_policy);
     964:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     968:	f894 707c 	ldrb.w	r7, [r4, #124]	; 0x7c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     96c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
     970:	2627      	movs	r6, #39	; 0x27
     972:	232d      	movs	r3, #45	; 0x2d
     974:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     978:	fb06 4707 	mla	r7, r6, r7, r4
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     97c:	fb16 3602 	smlabb	r6, r6, r2, r3
     980:	f015 ff3e 	bl	16800 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     984:	f894 00da 	ldrb.w	r0, [r4, #218]	; 0xda
     988:	0781      	lsls	r1, r0, #30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     98a:	f107 077d 	add.w	r7, r7, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     98e:	eb04 0906 	add.w	r9, r4, r6
     992:	d422      	bmi.n	9da <ll_adv_enable+0x92>
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     994:	5da0      	ldrb	r0, [r4, r6]
     996:	4629      	mov	r1, r5
     998:	f3c0 1080 	ubfx	r0, r0, #6, #1
     99c:	f00f f95e 	bl	fc5c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     9a0:	2206      	movs	r2, #6
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     9a2:	4680      	mov	r8, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     9a4:	4601      	mov	r1, r0
     9a6:	f109 0002 	add.w	r0, r9, #2
     9aa:	f01d fd9d 	bl	1e4e8 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     9ae:	4641      	mov	r1, r8
     9b0:	2206      	movs	r2, #6
     9b2:	1cb8      	adds	r0, r7, #2
     9b4:	f01d fd98 	bl	1e4e8 <memcpy>
		if (pdu_adv->tx_addr &&
     9b8:	5da3      	ldrb	r3, [r4, r6]
     9ba:	065a      	lsls	r2, r3, #25
	u8_t   rl_idx = FILTER_IDX_NONE;
     9bc:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (pdu_adv->tx_addr &&
     9c0:	d423      	bmi.n	a0a <ll_adv_enable+0xc2>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     9c2:	f013 0f0e 	tst.w	r3, #14
     9c6:	d12c      	bne.n	a22 <ll_adv_enable+0xda>
		if (lll->conn) {
     9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     9ca:	2b00      	cmp	r3, #0
     9cc:	f000 811c 	beq.w	c08 <ll_adv_enable+0x2c0>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_mark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     9d0:	250c      	movs	r5, #12
}
     9d2:	4628      	mov	r0, r5
     9d4:	b00f      	add	sp, #60	; 0x3c
     9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     9da:	f3c0 0080 	ubfx	r0, r0, #2, #1
     9de:	462a      	mov	r2, r5
     9e0:	f104 01db 	add.w	r1, r4, #219	; 0xdb
     9e4:	f015 ffb0 	bl	16948 <ull_filter_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
     9e8:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ull_filter_rl_find(adv->id_addr_type,
     9ea:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
     9ec:	f040 81dc 	bne.w	da8 <ll_adv_enable+0x460>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_adv);
     9f0:	487e      	ldr	r0, [pc, #504]	; (bec <ll_adv_enable+0x2a4>)
     9f2:	464a      	mov	r2, r9
     9f4:	4641      	mov	r1, r8
     9f6:	f015 ff1d 	bl	16834 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, rl_idx, pdu_scan);
     9fa:	463a      	mov	r2, r7
     9fc:	487b      	ldr	r0, [pc, #492]	; (bec <ll_adv_enable+0x2a4>)
     9fe:	4641      	mov	r1, r8
     a00:	f015 ff18 	bl	16834 <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
     a04:	5da3      	ldrb	r3, [r4, r6]
     a06:	065a      	lsls	r2, r3, #25
     a08:	d5db      	bpl.n	9c2 <ll_adv_enable+0x7a>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     a0a:	2106      	movs	r1, #6
     a0c:	f109 0002 	add.w	r0, r9, #2
     a10:	f00e f854 	bl	eabc <mem_nz>
		if (pdu_adv->tx_addr &&
     a14:	2800      	cmp	r0, #0
     a16:	f000 8261 	beq.w	edc <ll_adv_enable+0x594>
     a1a:	5da3      	ldrb	r3, [r4, r6]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a1c:	f013 0f0e 	tst.w	r3, #14
     a20:	d0d2      	beq.n	9c8 <ll_adv_enable+0x80>
	u8_t ch_map = lll->chan_map;
     a22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	lll->rl_idx = rl_idx;
     a26:	f884 802a 	strb.w	r8, [r4, #42]	; 0x2a
	u8_t ch_map = lll->chan_map;
     a2a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     a2e:	2101      	movs	r1, #1
     a30:	a80d      	add	r0, sp, #52	; 0x34
	u8_t ch_map = lll->chan_map;
     a32:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     a36:	f00e f9c5 	bl	edc4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     a3a:	b1e0      	cbz	r0, a76 <ll_adv_enable+0x12e>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     a3c:	5da2      	ldrb	r2, [r4, r6]
		const u8_t adv_data_len = pdu_adv->len;
     a3e:	f899 3001 	ldrb.w	r3, [r9, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     a42:	787f      	ldrb	r7, [r7, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     a44:	f002 020f 	and.w	r2, r2, #15
     a48:	2a02      	cmp	r2, #2
     a4a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     a4e:	f000 81af 	beq.w	db0 <ll_adv_enable+0x468>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     a52:	2a01      	cmp	r2, #1
     a54:	f000 824c 	beq.w	ef0 <ll_adv_enable+0x5a8>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     a58:	00ff      	lsls	r7, r7, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     a5a:	3780      	adds	r7, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     a5c:	2a00      	cmp	r2, #0
     a5e:	f040 823f 	bne.w	ee0 <ll_adv_enable+0x598>
				adv_size += adv_data_len;
     a62:	3310      	adds	r3, #16
     a64:	00da      	lsls	r2, r3, #3
     a66:	f502 704d 	add.w	r0, r2, #820	; 0x334
     a6a:	4438      	add	r0, r7
     a6c:	f502 739a 	add.w	r3, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     a70:	fb03 0001 	mla	r0, r3, r1, r0
     a74:	e1a6      	b.n	dc4 <ll_adv_enable+0x47c>
	if (adv->lll.conn) {
     a76:	6a65      	ldr	r5, [r4, #36]	; 0x24
     a78:	2d00      	cmp	r5, #0
     a7a:	d0a9      	beq.n	9d0 <ll_adv_enable+0x88>
	LL_ASSERT(!lll->link_tx_free);
     a7c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
     a7e:	b163      	cbz	r3, a9a <ll_adv_enable+0x152>
     a80:	4a5b      	ldr	r2, [pc, #364]	; (bf0 <ll_adv_enable+0x2a8>)
     a82:	495c      	ldr	r1, [pc, #368]	; (bf4 <ll_adv_enable+0x2ac>)
     a84:	485c      	ldr	r0, [pc, #368]	; (bf8 <ll_adv_enable+0x2b0>)
     a86:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
     a8a:	f01b fcbf 	bl	1c40c <printk>
     a8e:	4040      	eors	r0, r0
     a90:	f380 8811 	msr	BASEPRI, r0
     a94:	f04f 0003 	mov.w	r0, #3
     a98:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
     a9a:	f105 0150 	add.w	r1, r5, #80	; 0x50
     a9e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
     aa2:	f00e f81b 	bl	eadc <memq_deinit>
	LL_ASSERT(link);
     aa6:	4606      	mov	r6, r0
     aa8:	2800      	cmp	r0, #0
     aaa:	f000 8257 	beq.w	f5c <ll_adv_enable+0x614>
	ll_conn_release(lll->hdr.parent);
     aae:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
     ab0:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
     ab2:	f012 fe91 	bl	137d8 <ll_conn_release>
	adv->lll.conn = NULL;
     ab6:	2600      	movs	r6, #0
	ll_rx_release(adv->node_rx_cc_free);
     ab8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
     abc:	6266      	str	r6, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
     abe:	f011 fc49 	bl	12354 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
     ac2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->node_rx_cc_free = NULL;
     ac6:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
     aca:	f011 fc37 	bl	1233c <ll_rx_link_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
     ace:	250c      	movs	r5, #12
}
     ad0:	4628      	mov	r0, r5
	adv->link_cc_free = NULL;
     ad2:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
}
     ad6:	b00f      	add	sp, #60	; 0x3c
     ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     adc:	930d      	str	r3, [sp, #52]	; 0x34
	if (!adv || !adv->is_enabled) {
     ade:	2d00      	cmp	r5, #0
     ae0:	f43f af76 	beq.w	9d0 <ll_adv_enable+0x88>
	mark = ull_disable_mark(adv);
     ae4:	4620      	mov	r0, r4
     ae6:	f011 fce9 	bl	124bc <ull_disable_mark>
	LL_ASSERT(mark == adv);
     aea:	4284      	cmp	r4, r0
     aec:	d00c      	beq.n	b08 <ll_adv_enable+0x1c0>
     aee:	4a40      	ldr	r2, [pc, #256]	; (bf0 <ll_adv_enable+0x2a8>)
     af0:	4942      	ldr	r1, [pc, #264]	; (bfc <ll_adv_enable+0x2b4>)
     af2:	4841      	ldr	r0, [pc, #260]	; (bf8 <ll_adv_enable+0x2b0>)
     af4:	f240 43e4 	movw	r3, #1252	; 0x4e4
     af8:	f01b fc88 	bl	1c40c <printk>
     afc:	4040      	eors	r0, r0
     afe:	f380 8811 	msr	BASEPRI, r0
     b02:	f04f 0003 	mov.w	r0, #3
     b06:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     b08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     b0c:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     b0e:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     b10:	d50e      	bpl.n	b30 <ll_adv_enable+0x1e8>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     b12:	2103      	movs	r1, #3
     b14:	4b3a      	ldr	r3, [pc, #232]	; (c00 <ll_adv_enable+0x2b8>)
     b16:	9500      	str	r5, [sp, #0]
     b18:	2201      	movs	r2, #1
     b1a:	2000      	movs	r0, #0
     b1c:	f00f f856 	bl	fbcc <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     b20:	4629      	mov	r1, r5
     b22:	f011 fcbf 	bl	124a4 <ull_ticker_status_take>
		if (ret) {
     b26:	2800      	cmp	r0, #0
     b28:	f040 8258 	bne.w	fdc <ll_adv_enable+0x694>
		ret_cb = TICKER_STATUS_BUSY;
     b2c:	2302      	movs	r3, #2
     b2e:	930d      	str	r3, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     b30:	2103      	movs	r1, #3
     b32:	4b33      	ldr	r3, [pc, #204]	; (c00 <ll_adv_enable+0x2b8>)
     b34:	9500      	str	r5, [sp, #0]
     b36:	2202      	movs	r2, #2
     b38:	2000      	movs	r0, #0
     b3a:	f00f f847 	bl	fbcc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     b3e:	4629      	mov	r1, r5
     b40:	f011 fcb0 	bl	124a4 <ull_ticker_status_take>
	if (ret) {
     b44:	2800      	cmp	r0, #0
     b46:	f040 81ed 	bne.w	f24 <ll_adv_enable+0x5dc>
	}

	ret = ull_disable(&adv->lll);
     b4a:	482e      	ldr	r0, [pc, #184]	; (c04 <ll_adv_enable+0x2bc>)
     b4c:	f011 fcf2 	bl	12534 <ull_disable>
	LL_ASSERT(!ret);
     b50:	2800      	cmp	r0, #0
     b52:	f040 81d2 	bne.w	efa <ll_adv_enable+0x5b2>

	mark = ull_disable_unmark(adv);
     b56:	4825      	ldr	r0, [pc, #148]	; (bec <ll_adv_enable+0x2a4>)
     b58:	f011 fcbc 	bl	124d4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     b5c:	4284      	cmp	r4, r0
     b5e:	d00c      	beq.n	b7a <ll_adv_enable+0x232>
     b60:	4a23      	ldr	r2, [pc, #140]	; (bf0 <ll_adv_enable+0x2a8>)
     b62:	4926      	ldr	r1, [pc, #152]	; (bfc <ll_adv_enable+0x2b4>)
     b64:	4824      	ldr	r0, [pc, #144]	; (bf8 <ll_adv_enable+0x2b0>)
     b66:	f240 5306 	movw	r3, #1286	; 0x506
     b6a:	f01b fc4f 	bl	1c40c <printk>
     b6e:	4040      	eors	r0, r0
     b70:	f380 8811 	msr	BASEPRI, r0
     b74:	f04f 0003 	mov.w	r0, #3
     b78:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     b7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
     b7c:	b355      	cbz	r5, bd4 <ll_adv_enable+0x28c>
	LL_ASSERT(!lll->link_tx_free);
     b7e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
     b80:	b163      	cbz	r3, b9c <ll_adv_enable+0x254>
     b82:	4a1b      	ldr	r2, [pc, #108]	; (bf0 <ll_adv_enable+0x2a8>)
     b84:	491b      	ldr	r1, [pc, #108]	; (bf4 <ll_adv_enable+0x2ac>)
     b86:	481c      	ldr	r0, [pc, #112]	; (bf8 <ll_adv_enable+0x2b0>)
     b88:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
     b8c:	f01b fc3e 	bl	1c40c <printk>
     b90:	4040      	eors	r0, r0
     b92:	f380 8811 	msr	BASEPRI, r0
     b96:	f04f 0003 	mov.w	r0, #3
     b9a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
     b9c:	f105 0150 	add.w	r1, r5, #80	; 0x50
     ba0:	f105 004c 	add.w	r0, r5, #76	; 0x4c
     ba4:	f00d ff9a 	bl	eadc <memq_deinit>
	LL_ASSERT(link);
     ba8:	4606      	mov	r6, r0
     baa:	2800      	cmp	r0, #0
     bac:	f000 81e4 	beq.w	f78 <ll_adv_enable+0x630>
	ll_conn_release(lll->hdr.parent);
     bb0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
     bb2:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
     bb4:	f012 fe10 	bl	137d8 <ll_conn_release>
	adv->lll.conn = NULL;
     bb8:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
     bba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
     bbe:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
     bc0:	f011 fbc8 	bl	12354 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
     bc4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->node_rx_cc_free = NULL;
     bc8:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
     bcc:	f011 fbb6 	bl	1233c <ll_rx_link_release>
	adv->link_cc_free = NULL;
     bd0:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	adv->is_enabled = 0U;
     bd4:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     bd8:	2500      	movs	r5, #0
	adv->is_enabled = 0U;
     bda:	f36f 0300 	bfc	r3, #0, #1
}
     bde:	4628      	mov	r0, r5
	adv->is_enabled = 0U;
     be0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
}
     be4:	b00f      	add	sp, #60	; 0x3c
     be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bea:	bf00      	nop
     bec:	2000111c 	.word	0x2000111c
     bf0:	00022074 	.word	0x00022074
     bf4:	0002215c 	.word	0x0002215c
     bf8:	00021ce0 	.word	0x00021ce0
     bfc:	00022150 	.word	0x00022150
     c00:	00012499 	.word	0x00012499
     c04:	20001138 	.word	0x20001138
		link = ll_rx_link_alloc();
     c08:	f011 fb92 	bl	12330 <ll_rx_link_alloc>
		if (!link) {
     c0c:	4682      	mov	sl, r0
     c0e:	2800      	cmp	r0, #0
     c10:	f000 8186 	beq.w	f20 <ll_adv_enable+0x5d8>
		node_rx = ll_rx_alloc();
     c14:	f011 fb98 	bl	12348 <ll_rx_alloc>
		if (!node_rx) {
     c18:	900a      	str	r0, [sp, #40]	; 0x28
     c1a:	2800      	cmp	r0, #0
     c1c:	f000 8199 	beq.w	f52 <ll_adv_enable+0x60a>
		conn = ll_conn_acquire();
     c20:	f012 fdd4 	bl	137cc <ll_conn_acquire>
		if (!conn) {
     c24:	4683      	mov	fp, r0
     c26:	2800      	cmp	r0, #0
     c28:	f000 8190 	beq.w	f4c <ll_adv_enable+0x604>
		if (!conn_lll->link_tx_free) {
     c2c:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		conn_lll = &conn->lll;
     c32:	f10b 031c 	add.w	r3, fp, #28
		conn_lll->handle = 0xFFFF;
     c36:	f8ab 202c 	strh.w	r2, [fp, #44]	; 0x2c
		conn_lll = &conn->lll;
     c3a:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     c3c:	2800      	cmp	r0, #0
     c3e:	f000 816a 	beq.w	f16 <ll_adv_enable+0x5ce>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     c42:	f10b 026c 	add.w	r2, fp, #108	; 0x6c
     c46:	f10b 0168 	add.w	r1, fp, #104	; 0x68
     c4a:	f00d ff43 	bl	ead4 <memq_init>
		conn_lll->phy_tx = BIT(0);
     c4e:	f8bb 2064 	ldrh.w	r2, [fp, #100]	; 0x64
     c52:	49d3      	ldr	r1, [pc, #844]	; (fa0 <ll_adv_enable+0x658>)
		conn_lll->data_chan_sel = 0;
     c54:	f89b e03d 	ldrb.w	lr, [fp, #61]	; 0x3d
		conn->common.fex_valid = 0;
     c58:	f89b 00dc 	ldrb.w	r0, [fp, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     c5c:	f89b c040 	ldrb.w	ip, [fp, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
     c60:	f8cb a12c 	str.w	sl, [fp, #300]	; 0x12c
		conn_lll->phy_tx = BIT(0);
     c64:	400a      	ands	r2, r1
     c66:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c6a:	f89b 1122 	ldrb.w	r1, [fp, #290]	; 0x122
		conn_lll->phy_tx = BIT(0);
     c6e:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     c72:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
		conn_lll->phy_tx = BIT(0);
     c76:	f8ab 2064 	strh.w	r2, [fp, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
     c7a:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn_lll->data_chan_use = 0;
     c7e:	2200      	movs	r2, #0
		conn->common.fex_valid = 0;
     c80:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c84:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->slave.latency_enabled = 0;
     c88:	f362 0c00 	bfi	ip, r2, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     c8c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
     c90:	f88b e03d 	strb.w	lr, [fp, #61]	; 0x3d
		conn->common.fex_valid = 0;
     c94:	f88b 00dc 	strb.w	r0, [fp, #220]	; 0xdc
		conn->connect_expire = 6;
     c98:	f04f 0e06 	mov.w	lr, #6
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     c9c:	f88b 1122 	strb.w	r1, [fp, #290]	; 0x122
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     ca0:	48c0      	ldr	r0, [pc, #768]	; (fa4 <ll_adv_enable+0x65c>)
		conn->llcp_feature.features = LL_FEAT;
     ca2:	49c1      	ldr	r1, [pc, #772]	; (fa8 <ll_adv_enable+0x660>)
		conn_lll->data_chan_use = 0;
     ca4:	f88b 203f 	strb.w	r2, [fp, #63]	; 0x3f
		conn_lll->slave.window_widening_event_us = 0;
     ca8:	e9cb 2213 	strd	r2, r2, [fp, #76]	; 0x4c
		conn_lll->latency_prepare = 0;
     cac:	f8ab 2032 	strh.w	r2, [fp, #50]	; 0x32
		conn_lll->latency_event = 0;
     cb0:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     cb4:	f8cb 2054 	str.w	r2, [fp, #84]	; 0x54
		conn->supervision_expire = 0;
     cb8:	f8ab 20c8 	strh.w	r2, [fp, #200]	; 0xc8
		conn->procedure_expire = 0;
     cbc:	f8ab 20cc 	strh.w	r2, [fp, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     cc0:	f8ab 20e8 	strh.w	r2, [fp, #232]	; 0xe8
     cc4:	f88b 20ea 	strb.w	r2, [fp, #234]	; 0xea
		conn->llcp_rx = NULL;
     cc8:	f8cb 2100 	str.w	r2, [fp, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     ccc:	f8ab 2104 	strh.w	r2, [fp, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     cd0:	f8ab 2118 	strh.w	r2, [fp, #280]	; 0x118
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     cd4:	f8ab 2120 	strh.w	r2, [fp, #288]	; 0x120
		conn->llcp_terminate.reason_peer = 0;
     cd8:	f88b 212b 	strb.w	r2, [fp, #299]	; 0x12b
		conn_lll->link_tx_free = NULL;
     cdc:	f8cb 2078 	str.w	r2, [fp, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     ce0:	f8ab 207c 	strh.w	r2, [fp, #124]	; 0x7c
		conn->connect_expire = 6;
     ce4:	f8ab e0c4 	strh.w	lr, [fp, #196]	; 0xc4
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ce8:	f8cb 305c 	str.w	r3, [fp, #92]	; 0x5c
		conn_lll->slave.latency_enabled = 0;
     cec:	f88b c040 	strb.w	ip, [fp, #64]	; 0x40
		conn->llcp_feature.features = LL_FEAT;
     cf0:	f8cb 111c 	str.w	r1, [fp, #284]	; 0x11c
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
     cf4:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
		conn_lll->sn = 0;
     cf8:	f89b 007e 	ldrb.w	r0, [fp, #126]	; 0x7e
		conn->llcp_conn_param.disabled = 0;
     cfc:	f89b c172 	ldrb.w	ip, [fp, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     d00:	f89b 1152 	ldrb.w	r1, [fp, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     d04:	f8ab 2150 	strh.w	r2, [fp, #336]	; 0x150
		conn->llcp_conn_param.disabled = 0;
     d08:	f362 1c04 	bfi	ip, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     d0c:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
     d10:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_conn_param.req = 0;
     d14:	f8ab 2170 	strh.w	r2, [fp, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     d18:	f8ab 2198 	strh.w	r2, [fp, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     d1c:	f8ab 21a4 	strh.w	r2, [fp, #420]	; 0x1a4
		conn->llcp_conn_param.disabled = 0;
     d20:	f88b c172 	strb.w	ip, [fp, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     d24:	f88b 1152 	strb.w	r1, [fp, #338]	; 0x152
		conn_lll->sn = 0;
     d28:	f88b 007e 	strb.w	r0, [fp, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     d2c:	f013 f87e 	bl	13e2c <ull_conn_default_tx_octets_get>
     d30:	f8ab 00d6 	strh.w	r0, [fp, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     d34:	f013 f880 	bl	13e38 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     d38:	f8db 31a8 	ldr.w	r3, [fp, #424]	; 0x1a8
     d3c:	499b      	ldr	r1, [pc, #620]	; (fac <ll_adv_enable+0x664>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     d3e:	f8ab 00d8 	strh.w	r0, [fp, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     d42:	4019      	ands	r1, r3
     d44:	f8cb 11a8 	str.w	r1, [fp, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     d48:	f013 f87c 	bl	13e44 <ull_conn_default_phy_tx_get>
     d4c:	f89b 11ac 	ldrb.w	r1, [fp, #428]	; 0x1ac
     d50:	f360 0102 	bfi	r1, r0, #0, #3
     d54:	f88b 11ac 	strb.w	r1, [fp, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     d58:	f013 f87a 	bl	13e50 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d5e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		lll->conn = conn_lll;
     d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		adv->link_cc_free = link;
     d64:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
		lll->conn = conn_lll;
     d68:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     d6a:	f89b c1ac 	ldrb.w	ip, [fp, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     d6e:	f89b e020 	ldrb.w	lr, [fp, #32]
	hdr->parent = parent;
     d72:	f8cb b01c 	str.w	fp, [fp, #28]
     d76:	0101      	lsls	r1, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
     d78:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
     d7a:	f02c 0c78 	bic.w	ip, ip, #120	; 0x78
     d7e:	f001 0170 	and.w	r1, r1, #112	; 0x70
     d82:	ea41 010c 	orr.w	r1, r1, ip
	hdr->is_stop = 0U;
     d86:	f362 0e00 	bfi	lr, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     d8a:	e9cb 226e 	strd	r2, r2, [fp, #440]	; 0x1b8
     d8e:	e9cb 226c 	strd	r2, r2, [fp, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     d92:	e9cb 2205 	strd	r2, r2, [fp, #20]
		conn->tx_data = conn->tx_data_last = 0;
     d96:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     d9a:	f88b 11ac 	strb.w	r1, [fp, #428]	; 0x1ac
     d9e:	f88b e020 	strb.w	lr, [fp, #32]
		lll_clock_wait();
     da2:	f017 fa67 	bl	18274 <lll_clock_wait>
     da6:	e63c      	b.n	a22 <ll_adv_enable+0xda>
				ull_filter_rpa_update(false);
     da8:	4628      	mov	r0, r5
     daa:	f016 f83d 	bl	16e28 <ull_filter_rpa_update>
     dae:	e61f      	b.n	9f0 <ll_adv_enable+0xa8>
			adv_size += adv_data_len;
     db0:	f103 0210 	add.w	r2, r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     db4:	00d2      	lsls	r2, r2, #3
     db6:	fb00 f002 	mul.w	r0, r0, r2
     dba:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     dbe:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     dc0:	fb03 0001 	mla	r0, r3, r1, r0
     dc4:	f894 c020 	ldrb.w	ip, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     dc8:	4a79      	ldr	r2, [pc, #484]	; (fb0 <ll_adv_enable+0x668>)
	hdr->parent = parent;
     dca:	61e4      	str	r4, [r4, #28]
     dcc:	2700      	movs	r7, #0
	hdr->is_stop = 0U;
     dce:	f367 0c00 	bfi	ip, r7, #0, #1
	adv->evt.ticks_xtal_to_start =
     dd2:	2331      	movs	r3, #49	; 0x31
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     dd4:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     dd8:	6023      	str	r3, [r4, #0]
     dda:	f884 c020 	strb.w	ip, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     dde:	a36e      	add	r3, pc, #440	; (adr r3, f98 <ll_adv_enable+0x650>)
     de0:	e9d3 2300 	ldrd	r2, r3, [r3]
     de4:	e9c4 7705 	strd	r7, r7, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     de8:	e9c4 7701 	strd	r7, r7, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     dec:	f7ff f988 	bl	100 <__aeabi_uldivmod>
	u16_t interval = adv->interval;
     df0:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     df4:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     df6:	f00e ff2b 	bl	fc50 <ticker_ticks_now_get>
     dfa:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     dfc:	f1b9 0f00 	cmp.w	r9, #0
     e00:	d107      	bne.n	e12 <ll_adv_enable+0x4ca>
     e02:	5da7      	ldrb	r7, [r4, r6]
     e04:	f007 070f 	and.w	r7, r7, #15
     e08:	f1a7 0701 	sub.w	r7, r7, #1
     e0c:	fab7 f787 	clz	r7, r7
     e10:	097f      	lsrs	r7, r7, #5
     e12:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
     e16:	68e3      	ldr	r3, [r4, #12]
     e18:	f367 0000 	bfi	r0, r7, #0, #1
	if (lll->is_hdcd) {
     e1c:	f010 0601 	ands.w	r6, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     e20:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     e24:	d03a      	beq.n	e9c <ll_adv_enable+0x554>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e26:	4e63      	ldr	r6, [pc, #396]	; (fb4 <ll_adv_enable+0x66c>)
     e28:	4a63      	ldr	r2, [pc, #396]	; (fb8 <ll_adv_enable+0x670>)
     e2a:	9304      	str	r3, [sp, #16]
     e2c:	2000      	movs	r0, #0
     e2e:	af0c      	add	r7, sp, #48	; 0x30
     e30:	9301      	str	r3, [sp, #4]
     e32:	9205      	str	r2, [sp, #20]
     e34:	2103      	movs	r1, #3
     e36:	e9cd 6707 	strd	r6, r7, [sp, #28]
     e3a:	e9cd 0002 	strd	r0, r0, [sp, #8]
     e3e:	9406      	str	r4, [sp, #24]
     e40:	9000      	str	r0, [sp, #0]
     e42:	4643      	mov	r3, r8
     e44:	2202      	movs	r2, #2
     e46:	f00e fe1b 	bl	fa80 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     e4a:	4639      	mov	r1, r7
     e4c:	f011 fb2a 	bl	124a4 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     e50:	2800      	cmp	r0, #0
     e52:	f47f ae10 	bne.w	a76 <ll_adv_enable+0x12e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e56:	4959      	ldr	r1, [pc, #356]	; (fbc <ll_adv_enable+0x674>)
     e58:	9105      	str	r1, [sp, #20]
     e5a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     e5e:	e9cd 6707 	strd	r6, r7, [sp, #28]
     e62:	9200      	str	r2, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
     e64:	2602      	movs	r6, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e66:	e9cd 0003 	strd	r0, r0, [sp, #12]
     e6a:	e9cd 0001 	strd	r0, r0, [sp, #4]
     e6e:	9406      	str	r4, [sp, #24]
     e70:	4643      	mov	r3, r8
     e72:	2201      	movs	r2, #1
     e74:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     e76:	960c      	str	r6, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e78:	f00e fe02 	bl	fa80 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     e7c:	4639      	mov	r1, r7
     e7e:	f011 fb11 	bl	124a4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     e82:	2800      	cmp	r0, #0
     e84:	f47f adf7 	bne.w	a76 <ll_adv_enable+0x12e>
	adv->is_enabled = 1;
     e88:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
}
     e8c:	4628      	mov	r0, r5
	adv->is_enabled = 1;
     e8e:	f043 0301 	orr.w	r3, r3, #1
     e92:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
}
     e96:	b00f      	add	sp, #60	; 0x3c
     e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     e9c:	4848      	ldr	r0, [pc, #288]	; (fc0 <ll_adv_enable+0x678>)
		ret = ticker_start(
     e9e:	4a45      	ldr	r2, [pc, #276]	; (fb4 <ll_adv_enable+0x66c>)
     ea0:	f8df c114 	ldr.w	ip, [pc, #276]	; fb8 <ll_adv_enable+0x670>
     ea4:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     ea6:	fba9 0100 	umull	r0, r1, r9, r0
     eaa:	2791      	movs	r7, #145	; 0x91
     eac:	fb07 1109 	mla	r1, r7, r9, r1
		ret = ticker_start(
     eb0:	af0c      	add	r7, sp, #48	; 0x30
     eb2:	e9cd 6303 	strd	r6, r3, [sp, #12]
     eb6:	e9cd 2707 	strd	r2, r7, [sp, #28]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     eba:	a337      	add	r3, pc, #220	; (adr r3, f98 <ll_adv_enable+0x650>)
     ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start(
     ec0:	9602      	str	r6, [sp, #8]
     ec2:	f8cd c014 	str.w	ip, [sp, #20]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     ec6:	f7ff f91b 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start(
     eca:	4643      	mov	r3, r8
     ecc:	e9cd 6000 	strd	r6, r0, [sp]
     ed0:	2202      	movs	r2, #2
     ed2:	4630      	mov	r0, r6
     ed4:	2103      	movs	r1, #3
     ed6:	f00e fdd3 	bl	fa80 <ticker_start>
     eda:	e7cf      	b.n	e7c <ll_adv_enable+0x534>
			return BT_HCI_ERR_INVALID_PARAM;
     edc:	2512      	movs	r5, #18
     ede:	e578      	b.n	9d2 <ll_adv_enable+0x8a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     ee0:	2a06      	cmp	r2, #6
     ee2:	f43f adbe 	beq.w	a62 <ll_adv_enable+0x11a>
     ee6:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     eea:	f44f 701b 	mov.w	r0, #620	; 0x26c
     eee:	e5bf      	b.n	a70 <ll_adv_enable+0x128>
     ef0:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     ef4:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     ef8:	e5ba      	b.n	a70 <ll_adv_enable+0x128>
	LL_ASSERT(!ret);
     efa:	4a32      	ldr	r2, [pc, #200]	; (fc4 <ll_adv_enable+0x67c>)
     efc:	4932      	ldr	r1, [pc, #200]	; (fc8 <ll_adv_enable+0x680>)
     efe:	4833      	ldr	r0, [pc, #204]	; (fcc <ll_adv_enable+0x684>)
     f00:	f240 5303 	movw	r3, #1283	; 0x503
     f04:	f01b fa82 	bl	1c40c <printk>
     f08:	4040      	eors	r0, r0
     f0a:	f380 8811 	msr	BASEPRI, r0
     f0e:	f04f 0003 	mov.w	r0, #3
     f12:	df02      	svc	2
     f14:	e61f      	b.n	b56 <ll_adv_enable+0x20e>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     f16:	f10b 0070 	add.w	r0, fp, #112	; 0x70
     f1a:	f8cb 0078 	str.w	r0, [fp, #120]	; 0x78
     f1e:	e690      	b.n	c42 <ll_adv_enable+0x2fa>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     f20:	2507      	movs	r5, #7
     f22:	e556      	b.n	9d2 <ll_adv_enable+0x8a>
		mark = ull_disable_mark(adv);
     f24:	482a      	ldr	r0, [pc, #168]	; (fd0 <ll_adv_enable+0x688>)
     f26:	f011 fac9 	bl	124bc <ull_disable_mark>
		LL_ASSERT(mark == adv);
     f2a:	4284      	cmp	r4, r0
     f2c:	f43f ad50 	beq.w	9d0 <ll_adv_enable+0x88>
     f30:	f240 43fd 	movw	r3, #1277	; 0x4fd
     f34:	4a23      	ldr	r2, [pc, #140]	; (fc4 <ll_adv_enable+0x67c>)
     f36:	4927      	ldr	r1, [pc, #156]	; (fd4 <ll_adv_enable+0x68c>)
     f38:	4824      	ldr	r0, [pc, #144]	; (fcc <ll_adv_enable+0x684>)
     f3a:	f01b fa67 	bl	1c40c <printk>
     f3e:	4040      	eors	r0, r0
     f40:	f380 8811 	msr	BASEPRI, r0
     f44:	f04f 0003 	mov.w	r0, #3
     f48:	df02      	svc	2
     f4a:	e541      	b.n	9d0 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
     f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
     f4e:	f011 fa01 	bl	12354 <ll_rx_release>
			ll_rx_link_release(link);
     f52:	4650      	mov	r0, sl
     f54:	f011 f9f2 	bl	1233c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     f58:	2507      	movs	r5, #7
     f5a:	e53a      	b.n	9d2 <ll_adv_enable+0x8a>
	LL_ASSERT(link);
     f5c:	4a19      	ldr	r2, [pc, #100]	; (fc4 <ll_adv_enable+0x67c>)
     f5e:	491e      	ldr	r1, [pc, #120]	; (fd8 <ll_adv_enable+0x690>)
     f60:	481a      	ldr	r0, [pc, #104]	; (fcc <ll_adv_enable+0x684>)
     f62:	f240 43ca 	movw	r3, #1226	; 0x4ca
     f66:	f01b fa51 	bl	1c40c <printk>
     f6a:	4040      	eors	r0, r0
     f6c:	f380 8811 	msr	BASEPRI, r0
     f70:	f04f 0003 	mov.w	r0, #3
     f74:	df02      	svc	2
     f76:	e59a      	b.n	aae <ll_adv_enable+0x166>
     f78:	4a12      	ldr	r2, [pc, #72]	; (fc4 <ll_adv_enable+0x67c>)
     f7a:	4917      	ldr	r1, [pc, #92]	; (fd8 <ll_adv_enable+0x690>)
     f7c:	4813      	ldr	r0, [pc, #76]	; (fcc <ll_adv_enable+0x684>)
     f7e:	f240 43ca 	movw	r3, #1226	; 0x4ca
     f82:	f01b fa43 	bl	1c40c <printk>
     f86:	4040      	eors	r0, r0
     f88:	f380 8811 	msr	BASEPRI, r0
     f8c:	f04f 0003 	mov.w	r0, #3
     f90:	df02      	svc	2
     f92:	e60d      	b.n	bb0 <ll_adv_enable+0x268>
     f94:	f3af 8000 	nop.w
     f98:	1afd498d 	.word	0x1afd498d
     f9c:	00000007 	.word	0x00000007
     fa0:	fffff880 	.word	0xfffff880
     fa4:	01480148 	.word	0x01480148
     fa8:	0001497f 	.word	0x0001497f
     fac:	feff0000 	.word	0xfeff0000
     fb0:	3b9aca00 	.word	0x3b9aca00
     fb4:	00012499 	.word	0x00012499
     fb8:	0001297d 	.word	0x0001297d
     fbc:	00012b75 	.word	0x00012b75
     fc0:	84e72a00 	.word	0x84e72a00
     fc4:	00022074 	.word	0x00022074
     fc8:	00021f64 	.word	0x00021f64
     fcc:	00021ce0 	.word	0x00021ce0
     fd0:	2000111c 	.word	0x2000111c
     fd4:	00022150 	.word	0x00022150
     fd8:	000221ec 	.word	0x000221ec
			mark = ull_disable_mark(adv);
     fdc:	4804      	ldr	r0, [pc, #16]	; (ff0 <ll_adv_enable+0x6a8>)
     fde:	f011 fa6d 	bl	124bc <ull_disable_mark>
			LL_ASSERT(mark == adv);
     fe2:	4284      	cmp	r4, r0
     fe4:	f43f acf4 	beq.w	9d0 <ll_adv_enable+0x88>
     fe8:	f240 43ee 	movw	r3, #1262	; 0x4ee
     fec:	e7a2      	b.n	f34 <ll_adv_enable+0x5ec>
     fee:	bf00      	nop
     ff0:	2000111c 	.word	0x2000111c
     ff4:	00000000 	.word	0x00000000

00000ff8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
     ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ffc:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     ffe:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    1000:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1004:	4298      	cmp	r0, r3
{
    1006:	b08d      	sub	sp, #52	; 0x34
    1008:	460e      	mov	r6, r1
    100a:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    100c:	f000 8089 	beq.w	1122 <ull_conn_llcp+0x12a>

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1010:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1014:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1018:	4282      	cmp	r2, r0
    101a:	d00e      	beq.n	103a <ull_conn_llcp+0x42>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    101c:	1a80      	subs	r0, r0, r2
    101e:	f000 0003 	and.w	r0, r0, #3
    1022:	2802      	cmp	r0, #2
    1024:	d01b      	beq.n	105e <ull_conn_llcp+0x66>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    1026:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
    102a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    102e:	429a      	cmp	r2, r3
    1030:	d130      	bne.n	1094 <ull_conn_llcp+0x9c>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1032:	2000      	movs	r0, #0
}
    1034:	b00d      	add	sp, #52	; 0x34
    1036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
    103a:	f894 c152 	ldrb.w	ip, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
    103e:	f01c 0801 	ands.w	r8, ip, #1
    1042:	d1f0      	bne.n	1026 <ull_conn_llcp+0x2e>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1044:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
    1048:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    104c:	428b      	cmp	r3, r1
    104e:	f000 83cc 	beq.w	17ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x462>
			conn->llcp_ack -= 2U;
    1052:	1e90      	subs	r0, r2, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1054:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
    1056:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
    105a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    105e:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    1062:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1066:	429a      	cmp	r2, r3
    1068:	d006      	beq.n	1078 <ull_conn_llcp+0x80>
			if ((conn->llcp_length.state ==
    106a:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    106e:	f002 0106 	and.w	r1, r2, #6
    1072:	2904      	cmp	r1, #4
    1074:	f000 8401 	beq.w	187a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f2>
		switch (conn->llcp_type) {
    1078:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
    107c:	1e7b      	subs	r3, r7, #1
    107e:	2b05      	cmp	r3, #5
    1080:	f200 83a5 	bhi.w	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
    1084:	e8df f013 	tbh	[pc, r3, lsl #1]
    1088:	033c0070 	.word	0x033c0070
    108c:	03a302af 	.word	0x03a302af
    1090:	01de0366 	.word	0x01de0366
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1094:	4830      	ldr	r0, [pc, #192]	; (1158 <ull_conn_llcp+0x160>)
    1096:	f00d fcc7 	bl	ea28 <mem_acquire>
		if (tx) {
    109a:	b358      	cbz	r0, 10f4 <ull_conn_llcp+0xfc>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    109c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    10a0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    10a4:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    10a6:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    10a8:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    10ac:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    10ae:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    10b0:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    10b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    10b6:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
    10ba:	7202      	strb	r2, [r0, #8]
	if (
    10bc:	b32b      	cbz	r3, 110a <ull_conn_llcp+0x112>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    10be:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    10c2:	0791      	lsls	r1, r2, #30
    10c4:	d421      	bmi.n	110a <ull_conn_llcp+0x112>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    10c6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    10ca:	07d2      	lsls	r2, r2, #31
    10cc:	d41d      	bmi.n	110a <ull_conn_llcp+0x112>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    10ce:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    10d2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    10d4:	bf04      	itt	eq
    10d6:	681a      	ldreq	r2, [r3, #0]
    10d8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    10dc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    10e0:	b9b2      	cbnz	r2, 1110 <ull_conn_llcp+0x118>
			tx->next = conn->tx_head->next;
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    10e6:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    10e8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    10ea:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    10ee:	b90b      	cbnz	r3, 10f4 <ull_conn_llcp+0xfc>
		conn->tx_data_last = tx;
    10f0:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    10f4:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    10f8:	2800      	cmp	r0, #0
    10fa:	d19a      	bne.n	1032 <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
    10fc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    1100:	2b01      	cmp	r3, #1
    1102:	d91c      	bls.n	113e <ull_conn_llcp+0x146>
			conn->procedure_expire = conn->supervision_reload;
    1104:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1108:	e793      	b.n	1032 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    110a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    110e:	b1e2      	cbz	r2, 114a <ull_conn_llcp+0x152>
	tx->next = conn->tx_ctrl_last->next;
    1110:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1114:	681a      	ldr	r2, [r3, #0]
    1116:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1118:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    111a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    111e:	6803      	ldr	r3, [r0, #0]
}
    1120:	e7e5      	b.n	10ee <ull_conn_llcp+0xf6>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1122:	4a0e      	ldr	r2, [pc, #56]	; (115c <ull_conn_llcp+0x164>)
    1124:	490e      	ldr	r1, [pc, #56]	; (1160 <ull_conn_llcp+0x168>)
    1126:	480f      	ldr	r0, [pc, #60]	; (1164 <ull_conn_llcp+0x16c>)
    1128:	f240 3303 	movw	r3, #771	; 0x303
    112c:	f01b f96e 	bl	1c40c <printk>
    1130:	4040      	eors	r0, r0
    1132:	f380 8811 	msr	BASEPRI, r0
    1136:	f04f 0003 	mov.w	r0, #3
    113a:	df02      	svc	2
    113c:	e768      	b.n	1010 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
    113e:	3301      	adds	r3, #1
    1140:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    1144:	b00d      	add	sp, #52	; 0x34
    1146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    114a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    114c:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1150:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1154:	e7cb      	b.n	10ee <ull_conn_llcp+0xf6>
    1156:	bf00      	nop
    1158:	2000145c 	.word	0x2000145c
    115c:	00022180 	.word	0x00022180
    1160:	00022324 	.word	0x00022324
    1164:	00021ce0 	.word	0x00021ce0
	struct ll_conn *conn_upd;
	u16_t instant_latency;
	u16_t event_counter;


	conn_upd = conn_upd_curr;
    1168:	4fa9      	ldr	r7, [pc, #676]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)

	/* set mutex */
	if (!conn_upd) {
    116a:	683b      	ldr	r3, [r7, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	f000 8536 	beq.w	1bde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x856>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1172:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    1176:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1178:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    117c:	4490      	add	r8, r2
    117e:	44a8      	add	r8, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1180:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1184:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1188:	f040 841c 	bne.w	19c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63c>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    118c:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1190:	eba8 0209 	sub.w	r2, r8, r9
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    1194:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1196:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
    119a:	f53f af44 	bmi.w	1026 <ull_conn_llcp+0x2e>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    119e:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    11a2:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    11a6:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    11aa:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    11ae:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    11b0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    11b4:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    11b8:	d009      	beq.n	11ce <ull_conn_llcp+0x1d6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    11ba:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    11be:	f002 0207 	and.w	r2, r2, #7
    11c2:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    11c4:	bf04      	itt	eq
    11c6:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    11ca:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    11ce:	683b      	ldr	r3, [r7, #0]
    11d0:	429c      	cmp	r4, r3
			conn_upd_curr = NULL;
    11d2:	bf04      	itt	eq
    11d4:	2300      	moveq	r3, #0
    11d6:	603b      	streq	r3, [r7, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    11d8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    11dc:	2f00      	cmp	r7, #0
    11de:	f000 85d2 	beq.w	1d86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9fe>
    11e2:	6838      	ldr	r0, [r7, #0]
    11e4:	2800      	cmp	r0, #0
    11e6:	f000 85ce 	beq.w	1d86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9fe>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    11ea:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    11ee:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    11f0:	6841      	ldr	r1, [r0, #4]
    11f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    11f6:	4293      	cmp	r3, r2
    11f8:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
    11fc:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
    1200:	f000 871c 	beq.w	203c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcb4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1204:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1206:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1208:	f04f 0e0a 	mov.w	lr, #10

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    120c:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    120e:	847b      	strh	r3, [r7, #34]	; 0x22
			cu->latency = conn->llcp_cu.latency;
    1210:	84b9      	strh	r1, [r7, #36]	; 0x24
			cu->timeout = conn->llcp_cu.timeout;
    1212:	f8a7 c026 	strh.w	ip, [r7, #38]	; 0x26
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1216:	f887 e004 	strb.w	lr, [r7, #4]
			cu->status = 0x00;
    121a:	f887 2020 	strb.w	r2, [r7, #32]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    121e:	4639      	mov	r1, r7
    1220:	f011 f89e 	bl	12360 <ll_rx_put>
		ll_rx_sched();
    1224:	f011 f8a6 	bl	12374 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1228:	6823      	ldr	r3, [r4, #0]
    122a:	2b00      	cmp	r3, #0
    122c:	da09      	bge.n	1242 <ull_conn_llcp+0x24a>
			u32_t ticks_prepare_to_start =
    122e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1236:	428a      	cmp	r2, r1
    1238:	bf2c      	ite	cs
    123a:	18b6      	addcs	r6, r6, r2
    123c:	1876      	addcc	r6, r6, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    123e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1240:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1242:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    1244:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    1248:	fb13 f30b 	smulbb	r3, r3, fp
    124c:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    124e:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
    1252:	fb17 f201 	smulbb	r2, r7, r1
    1256:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1258:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    125a:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    125e:	f080 8580 	bcs.w	1d62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9da>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1262:	1ad3      	subs	r3, r2, r3
    1264:	486b      	ldr	r0, [pc, #428]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1266:	f240 42e2 	movw	r2, #1250	; 0x4e2
    126a:	fb02 f303 	mul.w	r3, r2, r3
    126e:	fba3 0100 	umull	r0, r1, r3, r0
    1272:	a365      	add	r3, pc, #404	; (adr r3, 1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    1274:	e9d3 2300 	ldrd	r2, r3, [r3]
    1278:	f7fe ff42 	bl	100 <__aeabi_uldivmod>
    127c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1280:	4406      	add	r6, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    1282:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    1284:	eba9 0808 	sub.w	r8, r9, r8
		lll->latency_prepare += lazy;
    1288:	441d      	add	r5, r3
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    128a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    128e:	44d0      	add	r8, sl
    1290:	44a8      	add	r8, r5
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1292:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    1296:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1298:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    129c:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
    12a0:	f2c0 8581 	blt.w	1da6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa1e>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    12a4:	4a5c      	ldr	r2, [pc, #368]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    12a6:	495d      	ldr	r1, [pc, #372]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    12a8:	485d      	ldr	r0, [pc, #372]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    12aa:	f640 132b 	movw	r3, #2347	; 0x92b
    12ae:	f01b f8ad 	bl	1c40c <printk>
    12b2:	4040      	eors	r0, r0
    12b4:	f380 8811 	msr	BASEPRI, r0
    12b8:	f04f 0003 	mov.w	r0, #3
    12bc:	df02      	svc	2
		u32_t ticks_win_offset = 0;
    12be:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    12c2:	46ba      	mov	sl, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    12c4:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    12c8:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    12cc:	4b55      	ldr	r3, [pc, #340]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    12ce:	4856      	ldr	r0, [pc, #344]	; (1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>)
		lll->latency = conn->llcp_cu.latency;
    12d0:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    12d2:	f242 7c10 	movw	ip, #10000	; 0x2710
    12d6:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    12da:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    12dc:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    12de:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    12e2:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    12e6:	3a01      	subs	r2, #1
    12e8:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    12ec:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    12f0:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    12f2:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    12f6:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
    12f8:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    12fc:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1300:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
    1304:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1306:	dd02      	ble.n	130e <ull_conn_llcp+0x316>
				     (conn->apto_reload - (lll->latency + 6)) :
    1308:	1a40      	subs	r0, r0, r1
    130a:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    130c:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    130e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1312:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    1316:	0759      	lsls	r1, r3, #29
			conn->supervision_expire = 0U;
    1318:	bf44      	itt	mi
    131a:	2300      	movmi	r3, #0
    131c:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		u32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1320:	2102      	movs	r1, #2
    1322:	2001      	movs	r0, #1
    1324:	f018 fac0 	bl	198a8 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1328:	2200      	movs	r2, #0
    132a:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    132c:	4607      	mov	r7, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    132e:	2001      	movs	r0, #1
    1330:	f00d fc1e 	bl	eb70 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1334:	493d      	ldr	r1, [pc, #244]	; (142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>)
    1336:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    133a:	4620      	mov	r0, r4
    133c:	f00d fbaa 	bl	ea94 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1340:	1cc2      	adds	r2, r0, #3
    1342:	fa5f f982 	uxtb.w	r9, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1346:	4b3a      	ldr	r3, [pc, #232]	; (1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>)
    1348:	9400      	str	r4, [sp, #0]
    134a:	464a      	mov	r2, r9
    134c:	2101      	movs	r1, #1
    134e:	2000      	movs	r0, #0
    1350:	f00e fc3c 	bl	fbcc <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1354:	f030 0302 	bics.w	r3, r0, #2
    1358:	d00c      	beq.n	1374 <ull_conn_llcp+0x37c>
    135a:	4a2f      	ldr	r2, [pc, #188]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    135c:	4935      	ldr	r1, [pc, #212]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    135e:	4830      	ldr	r0, [pc, #192]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    1360:	f640 135a 	movw	r3, #2394	; 0x95a
    1364:	f01b f852 	bl	1c40c <printk>
    1368:	4040      	eors	r0, r0
    136a:	f380 8811 	msr	BASEPRI, r0
    136e:	f04f 0003 	mov.w	r0, #3
    1372:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1374:	4b27      	ldr	r3, [pc, #156]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1376:	fbaa ab03 	umull	sl, fp, sl, r3
    137a:	4650      	mov	r0, sl
    137c:	a322      	add	r3, pc, #136	; (adr r3, 1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    137e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1382:	4659      	mov	r1, fp
    1384:	f7fe febc 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1388:	4a2b      	ldr	r2, [pc, #172]	; (1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    138a:	68e3      	ldr	r3, [r4, #12]
    138c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    138e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1392:	fba5 2302 	umull	r2, r3, r5, r2
    1396:	2007      	movs	r0, #7
    1398:	fb00 3305 	mla	r3, r0, r5, r3
    139c:	ebba 0002 	subs.w	r0, sl, r2
    13a0:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    13a4:	f8df e094 	ldr.w	lr, [pc, #148]	; 143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    13a8:	f8df c094 	ldr.w	ip, [pc, #148]	; 1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>
    13ac:	9408      	str	r4, [sp, #32]
    13ae:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    13b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    13b4:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    13b6:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    13b8:	f8cd e01c 	str.w	lr, [sp, #28]
    13bc:	f8cd c014 	str.w	ip, [sp, #20]
    13c0:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    13c2:	f7fe fe9d 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    13c6:	4633      	mov	r3, r6
    13c8:	e9cd 5001 	strd	r5, r0, [sp, #4]
    13cc:	f8cd 8000 	str.w	r8, [sp]
    13d0:	4620      	mov	r0, r4
    13d2:	464a      	mov	r2, r9
    13d4:	2101      	movs	r1, #1
    13d6:	f00e fb53 	bl	fa80 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    13da:	f030 0302 	bics.w	r3, r0, #2
    13de:	d00c      	beq.n	13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    13e0:	4a0d      	ldr	r2, [pc, #52]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    13e2:	4914      	ldr	r1, [pc, #80]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    13e4:	480e      	ldr	r0, [pc, #56]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    13e6:	f640 1374 	movw	r3, #2420	; 0x974
    13ea:	f01b f80f 	bl	1c40c <printk>
    13ee:	4040      	eors	r0, r0
    13f0:	f380 8811 	msr	BASEPRI, r0
    13f4:	f04f 0003 	mov.w	r0, #3
    13f8:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    13fa:	2f00      	cmp	r7, #0
    13fc:	f040 8637 	bne.w	206e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xce6>
				return -ECANCELED;
    1400:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1404:	e616      	b.n	1034 <ull_conn_llcp+0x3c>
    1406:	bf00      	nop
    1408:	1afd498d 	.word	0x1afd498d
    140c:	00000007 	.word	0x00000007
    1410:	200013dc 	.word	0x200013dc
    1414:	3b9aca00 	.word	0x3b9aca00
    1418:	00022180 	.word	0x00022180
    141c:	00021c84 	.word	0x00021c84
    1420:	00021ce0 	.word	0x00021ce0
    1424:	01c9c37f 	.word	0x01c9c37f
    1428:	026259ff 	.word	0x026259ff
    142c:	20001214 	.word	0x20001214
    1430:	000133c1 	.word	0x000133c1
    1434:	00022260 	.word	0x00022260
    1438:	1afd498d 	.word	0x1afd498d
    143c:	00013369 	.word	0x00013369
    1440:	00016319 	.word	0x00016319
			event_counter = lll->event_counter +
    1444:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1446:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  u16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1448:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    144c:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    144e:	441d      	add	r5, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1450:	07ce      	lsls	r6, r1, #31
			event_counter = lll->event_counter +
    1452:	b2ad      	uxth	r5, r5
	if (conn->llcp.phy_upd_ind.initiate) {
    1454:	460a      	mov	r2, r1
    1456:	f100 8323 	bmi.w	1aa0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x718>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    145a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    145e:	1aed      	subs	r5, r5, r3
    1460:	042b      	lsls	r3, r5, #16
    1462:	f53f ade0 	bmi.w	1026 <ull_conn_llcp+0x2e>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    1466:	f894 6064 	ldrb.w	r6, [r4, #100]	; 0x64
	if (!conn->common.fex_valid ||
    146a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
		conn->llcp_ack = conn->llcp_req;
    146e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		old_rx = lll->phy_rx;
    1472:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1476:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    147a:	07df      	lsls	r7, r3, #31
		old_tx = lll->phy_tx;
    147c:	f006 0007 	and.w	r0, r6, #7

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		u16_t eff_tx_time = lll->max_tx_time;
		u16_t eff_rx_time = lll->max_rx_time;
    1480:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
		old_tx = lll->phy_tx;
    1484:	900b      	str	r0, [sp, #44]	; 0x2c
		old_rx = lll->phy_rx;
    1486:	f008 0807 	and.w	r8, r8, #7
	if (!conn->common.fex_valid ||
    148a:	f140 85f9 	bpl.w	2080 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcf8>
	feature_coded_phy = (conn->llcp_feature.features &
    148e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
    1492:	051e      	lsls	r6, r3, #20
    1494:	f140 85f4 	bpl.w	2080 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcf8>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2)),
    1498:	f8b4 70d8 	ldrh.w	r7, [r4, #216]	; 0xd8
    149c:	f5b7 6f29 	cmp.w	r7, #2704	; 0xa90
    14a0:	bf28      	it	cs
    14a2:	f44f 6729 	movcs.w	r7, #2704	; 0xa90
    14a6:	f5b7 7fa4 	cmp.w	r7, #328	; 0x148
    14aa:	bf38      	it	cc
    14ac:	f44f 77a4 	movcc.w	r7, #328	; 0x148
    14b0:	f44f 6929 	mov.w	r9, #2704	; 0xa90
		u16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    14b4:	f011 0f1c 	tst.w	r1, #28
    14b8:	f040 8651 	bne.w	215e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdd6>
		u16_t eff_tx_time = lll->max_tx_time;
    14bc:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    14c0:	f011 0fe0 	tst.w	r1, #224	; 0xe0
    14c4:	d019      	beq.n	14fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x172>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    14c6:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
    14ca:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
    14ce:	094b      	lsrs	r3, r1, #5
    14d0:	f363 0c02 	bfi	ip, r3, #0, #3
	u16_t time = PKT_US(max_octets, phy);
    14d4:	0759      	lsls	r1, r3, #29
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    14d6:	f884 c065 	strb.w	ip, [r4, #101]	; 0x65
	u16_t time = PKT_US(max_octets, phy);
    14da:	f141 80ae 	bpl.w	263a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b2>
    14de:	ea4f 1a80 	mov.w	sl, r0, lsl #6
	eff_time = MIN(eff_time, default_time);
    14e2:	f50a 7a74 	add.w	sl, sl, #976	; 0x3d0
    14e6:	45ca      	cmp	sl, r9
    14e8:	bf28      	it	cs
    14ea:	46ca      	movcs	sl, r9
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    14ec:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    14f0:	4553      	cmp	r3, sl
    14f2:	bf38      	it	cc
    14f4:	4653      	movcc	r3, sl
    14f6:	fa1f fa83 	uxth.w	sl, r3
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    14fa:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    14fe:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1502:	f8d4 b100 	ldr.w	fp, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    1506:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    150a:	f363 01c3 	bfi	r1, r3, #3, #1
    150e:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    1512:	f1bb 0f00 	cmp.w	fp, #0
    1516:	f000 8717 	beq.w	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
    151a:	f8db 0000 	ldr.w	r0, [fp]
    151e:	2800      	cmp	r0, #0
    1520:	f000 8712 	beq.w	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
		conn->llcp_rx = rx->hdr.link->mem;
    1524:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    1528:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    152c:	6846      	ldr	r6, [r0, #4]
    152e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1532:	0796      	lsls	r6, r2, #30
    1534:	f3c1 0e02 	ubfx	lr, r1, #0, #3
    1538:	f3c3 0c02 	ubfx	ip, r3, #0, #3
    153c:	f001 0107 	and.w	r1, r1, #7
    1540:	f003 0307 	and.w	r3, r3, #7
    1544:	d403      	bmi.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    1546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1548:	428a      	cmp	r2, r1
    154a:	f001 80a4 	beq.w	2696 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130e>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    154e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1550:	f8ab 3006 	strh.w	r3, [fp, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1554:	220e      	movs	r2, #14

		upd = (void *)rx->pdu;
		upd->status = 0U;
    1556:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    1558:	f88b e021 	strb.w	lr, [fp, #33]	; 0x21
		upd->rx = lll->phy_rx;
    155c:	f88b c022 	strb.w	ip, [fp, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1560:	f88b 2004 	strb.w	r2, [fp, #4]
		upd->status = 0U;
    1564:	f88b 3020 	strb.w	r3, [fp, #32]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1568:	4659      	mov	r1, fp
    156a:	f010 fef9 	bl	12360 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    156e:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1572:	2e00      	cmp	r6, #0
    1574:	f000 86fb 	beq.w	236e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe6>
    1578:	6830      	ldr	r0, [r6, #0]
    157a:	2800      	cmp	r0, #0
    157c:	f000 86f7 	beq.w	236e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1580:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1584:	6842      	ldr	r2, [r0, #4]
    1586:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    158a:	42ab      	cmp	r3, r5
    158c:	d308      	bcc.n	15a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x218>
    158e:	42bb      	cmp	r3, r7
    1590:	d806      	bhi.n	15a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x218>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1592:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1596:	4553      	cmp	r3, sl
    1598:	d302      	bcc.n	15a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x218>
		    (eff_rx_time <= lll->max_rx_time) &&
    159a:	454b      	cmp	r3, r9
    159c:	f241 81d8 	bls.w	2950 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c8>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    15a0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    15a4:	f8a4 a062 	strh.w	sl, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    15a8:	f896 3020 	ldrb.w	r3, [r6, #32]
		rx->hdr.handle = lll->handle;
    15ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    15ae:	80f2      	strh	r2, [r6, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    15b0:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    15b4:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    15b6:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    15b8:	7131      	strb	r1, [r6, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    15ba:	f886 3020 	strb.w	r3, [r6, #32]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    15be:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    15c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    15c6:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    15ca:	84b3      	strh	r3, [r6, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    15cc:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    15ce:	8532      	strh	r2, [r6, #40]	; 0x28
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    15d0:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    15d4:	4631      	mov	r1, r6
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    15d6:	f8a6 a026 	strh.w	sl, [r6, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    15da:	8575      	strh	r5, [r6, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
    15dc:	f010 fec0 	bl	12360 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    15e0:	f010 fec8 	bl	12374 <ll_rx_sched>
    15e4:	e51f      	b.n	1026 <ull_conn_llcp+0x2e>
	if (conn->llcp.encryption.state) {
    15e6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    15ea:	f013 0503 	ands.w	r5, r3, #3
    15ee:	f000 829b 	beq.w	1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>
		if (lll->role &&
    15f2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    15f6:	2b00      	cmp	r3, #0
    15f8:	f6bf ad15 	bge.w	1026 <ull_conn_llcp+0x2e>
    15fc:	2d01      	cmp	r5, #1
    15fe:	f47f ad12 	bne.w	1026 <ull_conn_llcp+0x2e>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1602:	48c4      	ldr	r0, [pc, #784]	; (1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>)
    1604:	f00d fa10 	bl	ea28 <mem_acquire>
	if (!tx) {
    1608:	4605      	mov	r5, r0
    160a:	2800      	cmp	r0, #0
    160c:	f43f ad0b 	beq.w	1026 <ull_conn_llcp+0x2e>
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1610:	4ac1      	ldr	r2, [pc, #772]	; (1918 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x590>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1612:	7903      	ldrb	r3, [r0, #4]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1614:	6810      	ldr	r0, [r2, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1616:	220d      	movs	r2, #13
    1618:	716a      	strb	r2, [r5, #5]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    161a:	6842      	ldr	r2, [r0, #4]
    161c:	6857      	ldr	r7, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    161e:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1622:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1624:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1626:	71ea      	strb	r2, [r5, #7]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1628:	f105 0608 	add.w	r6, r5, #8
    162c:	b11f      	cbz	r7, 1636 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ae>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    162e:	2300      	movs	r3, #0
    1630:	220c      	movs	r2, #12
    1632:	4631      	mov	r1, r6
    1634:	47b8      	blx	r7
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
				sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs), 0);

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1636:	4631      	mov	r1, r6
    1638:	2208      	movs	r2, #8
    163a:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    163e:	f01c ff53 	bl	1e4e8 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    1642:	2204      	movs	r2, #4
    1644:	f105 0110 	add.w	r1, r5, #16
    1648:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    164c:	f01c ff4c 	bl	1e4e8 <memcpy>
	    conn->tx_head &&
    1650:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1654:	2b00      	cmp	r3, #0
    1656:	f000 870a 	beq.w	246e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10e6>
	    !conn->llcp_enc.pause_tx &&
    165a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    165e:	0797      	lsls	r7, r2, #30
    1660:	f100 8705 	bmi.w	246e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10e6>
	    !conn->llcp_phy.pause_tx &&
    1664:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1668:	07d6      	lsls	r6, r2, #31
    166a:	f100 8700 	bmi.w	246e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10e6>
		if (conn->tx_head == conn->tx_data) {
    166e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1672:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1674:	bf04      	itt	eq
    1676:	681a      	ldreq	r2, [r3, #0]
    1678:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    167c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1680:	2a00      	cmp	r2, #0
    1682:	f001 8190 	beq.w	29a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x161e>
	tx->next = conn->tx_ctrl_last->next;
    1686:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    168a:	681a      	ldr	r2, [r3, #0]
    168c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    168e:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1690:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1694:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    1696:	2b00      	cmp	r3, #0
    1698:	f001 8114 	beq.w	28c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x153c>
			rx = ll_pdu_rx_alloc();
    169c:	f010 fe8e 	bl	123bc <ll_pdu_rx_alloc>
			if (!rx) {
    16a0:	4605      	mov	r5, r0
    16a2:	2800      	cmp	r0, #0
    16a4:	f43f acbf 	beq.w	1026 <ull_conn_llcp+0x2e>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    16a8:	f895 3020 	ldrb.w	r3, [r5, #32]
			rx->hdr.handle = conn->lll.handle;
    16ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    16ae:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    16b0:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16b4:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    16b6:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    16b8:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    16ba:	f885 3020 	strb.w	r3, [r5, #32]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    16be:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    16c2:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    16c6:	f204 1155 	addw	r1, r4, #341	; 0x155
    16ca:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16cc:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    16ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
    16d2:	f01c ff09 	bl	1e4e8 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    16d6:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    16da:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    16de:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    16e2:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ll_rx_put(rx->hdr.link, rx);
    16e6:	6828      	ldr	r0, [r5, #0]
    16e8:	4629      	mov	r1, r5
    16ea:	f010 fe39 	bl	12360 <ll_rx_put>
			ll_rx_sched();
    16ee:	f010 fe41 	bl	12374 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    16f2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    16f6:	f366 0301 	bfi	r3, r6, #0, #2
    16fa:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    16fe:	e492      	b.n	1026 <ull_conn_llcp+0x2e>
			event_counter = lll->event_counter +
    1700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1702:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    1704:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1708:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    170a:	441d      	add	r5, r3
	if (conn->llcp.chan_map.initiate) {
    170c:	07d2      	lsls	r2, r2, #31
			event_counter = lll->event_counter +
    170e:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
    1710:	f100 810a 	bmi.w	1928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1714:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1718:	1aed      	subs	r5, r5, r3
    171a:	042b      	lsls	r3, r5, #16
    171c:	f53f ac83 	bmi.w	1026 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1720:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1724:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    1728:	f104 0538 	add.w	r5, r4, #56	; 0x38
    172c:	2205      	movs	r2, #5
    172e:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1732:	4628      	mov	r0, r5
    1734:	f01c fed8 	bl	1e4e8 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1738:	4628      	mov	r0, r5
    173a:	2105      	movs	r1, #5
    173c:	f00d fb42 	bl	edc4 <util_ones_count_get>
		lll->data_chan_count =
    1740:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1744:	2201      	movs	r2, #1
		lll->data_chan_count =
    1746:	f360 0305 	bfi	r3, r0, #0, #6
    174a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    174e:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    1752:	e468      	b.n	1026 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1754:	486f      	ldr	r0, [pc, #444]	; (1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>)
    1756:	f00d f967 	bl	ea28 <mem_acquire>
	if (tx) {
    175a:	2800      	cmp	r0, #0
    175c:	f43f ac63 	beq.w	1026 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1760:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1764:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1768:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    176a:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    176c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    176e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1772:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1776:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1778:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    177a:	71c1      	strb	r1, [r0, #7]
	if (
    177c:	2b00      	cmp	r3, #0
    177e:	f000 82e5 	beq.w	1d4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c4>
	    !conn->llcp_enc.pause_tx &&
    1782:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1786:	0792      	lsls	r2, r2, #30
    1788:	f100 82e0 	bmi.w	1d4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c4>
	    !conn->llcp_phy.pause_tx &&
    178c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1790:	07d7      	lsls	r7, r2, #31
    1792:	f100 82db 	bmi.w	1d4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c4>
		if (conn->tx_head == conn->tx_data) {
    1796:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    179a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    179c:	bf04      	itt	eq
    179e:	681a      	ldreq	r2, [r3, #0]
    17a0:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    17a4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    17a8:	2a00      	cmp	r2, #0
    17aa:	f001 80a3 	beq.w	28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>
	tx->next = conn->tx_ctrl_last->next;
    17ae:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    17b2:	681a      	ldr	r2, [r3, #0]
    17b4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    17b6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    17b8:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    17bc:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    17be:	2b00      	cmp	r3, #0
    17c0:	f000 84c9 	beq.w	2156 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdce>
		conn->procedure_expire = conn->procedure_reload;
    17c4:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    17c8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    17cc:	e42b      	b.n	1026 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    17ce:	4a53      	ldr	r2, [pc, #332]	; (191c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x594>)
    17d0:	4953      	ldr	r1, [pc, #332]	; (1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>)
    17d2:	4854      	ldr	r0, [pc, #336]	; (1924 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x59c>)
    17d4:	f240 3389 	movw	r3, #905	; 0x389
    17d8:	f01a fe18 	bl	1c40c <printk>
    17dc:	4040      	eors	r0, r0
    17de:	f380 8811 	msr	BASEPRI, r0
    17e2:	f04f 0003 	mov.w	r0, #3
    17e6:	df02      	svc	2
			break;
    17e8:	e41d      	b.n	1026 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    17ea:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    17ee:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
    17f2:	42bb      	cmp	r3, r7
    17f4:	d158      	bne.n	18a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x520>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    17f6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    17fa:	f894 7120 	ldrb.w	r7, [r4, #288]	; 0x120
    17fe:	42bb      	cmp	r3, r7
    1800:	f000 8323 	beq.w	1e4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac2>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1804:	1bdb      	subs	r3, r3, r7
    1806:	07df      	lsls	r7, r3, #31
    1808:	f57f ac0d 	bpl.w	1026 <ull_conn_llcp+0x2e>
	if (conn->llcp_version.tx == 0U) {
    180c:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    1810:	07d8      	lsls	r0, r3, #31
    1812:	f140 878f 	bpl.w	2734 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ac>
	} else if (conn->llcp_version.rx) {
    1816:	079b      	lsls	r3, r3, #30
    1818:	f140 8779 	bpl.w	270e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1386>
		rx = ll_pdu_rx_alloc();
    181c:	f010 fdce 	bl	123bc <ll_pdu_rx_alloc>
		if (!rx) {
    1820:	4601      	mov	r1, r0
    1822:	b320      	cbz	r0, 186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->llcp_version.ack = conn->llcp_version.req;
    1824:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    1828:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    182c:	f890 3020 	ldrb.w	r3, [r0, #32]
		rx->hdr.handle = conn->lll.handle;
    1830:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1832:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1834:	f043 0303 	orr.w	r3, r3, #3
    1838:	f881 3020 	strb.w	r3, [r1, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    183c:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    183e:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1840:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1842:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1844:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1848:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    184c:	f894 0123 	ldrb.w	r0, [r4, #291]	; 0x123
		pdu->llctrl.version_ind.company_id =
    1850:	f8b4 2124 	ldrh.w	r2, [r4, #292]	; 0x124
		pdu->llctrl.version_ind.sub_version_number =
    1854:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
    1858:	f8a1 3027 	strh.w	r3, [r1, #39]	; 0x27
		pdu->llctrl.version_ind.version_number =
    185c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
		pdu->llctrl.version_ind.company_id =
    1860:	f8a1 2025 	strh.w	r2, [r1, #37]	; 0x25
		ll_rx_put(rx->hdr.link, rx);
    1864:	6808      	ldr	r0, [r1, #0]
    1866:	f010 fd7b 	bl	12360 <ll_rx_put>
		ll_rx_sched();
    186a:	f010 fd83 	bl	12374 <ll_rx_sched>
	break;
    186e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1872:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1876:	f7ff bbd1 	b.w	101c <ull_conn_llcp+0x24>
	switch (conn->llcp_length.state) {
    187a:	f002 0107 	and.w	r1, r2, #7
    187e:	2906      	cmp	r1, #6
    1880:	f201 81d4 	bhi.w	2c2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a4>
    1884:	a001      	add	r0, pc, #4	; (adr r0, 188c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x504>)
    1886:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    188a:	bf00      	nop
    188c:	00001c79 	.word	0x00001c79
    1890:	00001079 	.word	0x00001079
    1894:	00001079 	.word	0x00001079
    1898:	00001079 	.word	0x00001079
    189c:	00001be5 	.word	0x00001be5
    18a0:	00001be5 	.word	0x00001be5
    18a4:	00001079 	.word	0x00001079
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    18a8:	1bdb      	subs	r3, r3, r7
    18aa:	07d8      	lsls	r0, r3, #31
    18ac:	f57f abbb 	bpl.w	1026 <ull_conn_llcp+0x2e>
	if (conn->common.fex_valid) {
    18b0:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    18b4:	f011 0701 	ands.w	r7, r1, #1
    18b8:	f000 83f2 	beq.w	20a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd18>
		rx = ll_pdu_rx_alloc();
    18bc:	f010 fd7e 	bl	123bc <ll_pdu_rx_alloc>
		if (!rx) {
    18c0:	4607      	mov	r7, r0
    18c2:	2800      	cmp	r0, #0
    18c4:	d0d3      	beq.n	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    18c6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    18ca:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    18ce:	f890 3020 	ldrb.w	r3, [r0, #32]
		rx->hdr.handle = conn->lll.handle;
    18d2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    18d4:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    18d6:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    18da:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    18dc:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    18de:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    18e0:	f887 3020 	strb.w	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    18e4:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    18e6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    18ea:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    18ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
    18f2:	2208      	movs	r2, #8
    18f4:	f01c fe23 	bl	1e53e <memset>
		sys_put_le24(conn->llcp_feature.features,
    18f8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    18fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dst[1] = val >> 8;
    1900:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1904:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1906:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
	dst[2] = val >> 16;
    190a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    190e:	4639      	mov	r1, r7
    1910:	e7a8      	b.n	1864 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4dc>
    1912:	bf00      	nop
    1914:	2000145c 	.word	0x2000145c
    1918:	200013e0 	.word	0x200013e0
    191c:	00022180 	.word	0x00022180
    1920:	00021c84 	.word	0x00021c84
    1924:	00021ce0 	.word	0x00021ce0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1928:	48d1      	ldr	r0, [pc, #836]	; (1c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e8>)
    192a:	f00d f87d 	bl	ea28 <mem_acquire>
		if (tx) {
    192e:	4606      	mov	r6, r0
    1930:	2800      	cmp	r0, #0
    1932:	f43f ab78 	beq.w	1026 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    1936:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1938:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    193a:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    193e:	441d      	add	r5, r3
						      conn->lll.latency + 6;
    1940:	1dab      	adds	r3, r5, #6
			conn->llcp.chan_map.instant = event_counter +
    1942:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    1946:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    194a:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    194c:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1950:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1952:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1956:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1958:	7170      	strb	r0, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    195a:	71f3      	strb	r3, [r6, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    195c:	2205      	movs	r2, #5
    195e:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1962:	1830      	adds	r0, r6, r0
    1964:	f01c fdc0 	bl	1e4e8 <memcpy>
	    conn->tx_head &&
    1968:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    196c:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1970:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    1974:	2b00      	cmp	r3, #0
    1976:	f000 80cc 	beq.w	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
	    !conn->llcp_enc.pause_tx &&
    197a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    197e:	0791      	lsls	r1, r2, #30
    1980:	f100 80c7 	bmi.w	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
	    !conn->llcp_phy.pause_tx &&
    1984:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1988:	07d2      	lsls	r2, r2, #31
    198a:	f100 80c2 	bmi.w	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
		if (conn->tx_head == conn->tx_data) {
    198e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1992:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1994:	bf04      	itt	eq
    1996:	681a      	ldreq	r2, [r3, #0]
    1998:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    199c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    19a0:	2a00      	cmp	r2, #0
    19a2:	f000 87ba 	beq.w	291a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1592>
	tx->next = conn->tx_ctrl_last->next;
    19a6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    19aa:	681a      	ldr	r2, [r3, #0]
    19ac:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    19ae:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    19b0:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    19b4:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    19b6:	2b00      	cmp	r3, #0
    19b8:	f47f ab35 	bne.w	1026 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    19bc:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    19c0:	f7ff bb31 	b.w	1026 <ull_conn_llcp+0x2e>
		rx = ll_pdu_rx_alloc_peek(1);
    19c4:	2001      	movs	r0, #1
    19c6:	f010 fcdb 	bl	12380 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    19ca:	4606      	mov	r6, r0
    19cc:	2800      	cmp	r0, #0
    19ce:	f43f ab2a 	beq.w	1026 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19d2:	48a7      	ldr	r0, [pc, #668]	; (1c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e8>)
    19d4:	f00d f828 	bl	ea28 <mem_acquire>
		if (!tx) {
    19d8:	4605      	mov	r5, r0
    19da:	2800      	cmp	r0, #0
    19dc:	f43f ab23 	beq.w	1026 <ull_conn_llcp+0x2e>
		(void)ll_pdu_rx_alloc();
    19e0:	f010 fcec 	bl	123bc <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    19e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    19e6:	6832      	ldr	r2, [r6, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    19e8:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    19ec:	4443      	add	r3, r8
    19ee:	3306      	adds	r3, #6
    19f0:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    19f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    19f6:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19f8:	792a      	ldrb	r2, [r5, #4]
		conn->llcp_rx = rx;
    19fa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    19fe:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1a02:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a04:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1a08:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a0c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1a10:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1a12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	    conn->tx_head &&
    1a16:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1a1a:	4e96      	ldr	r6, [pc, #600]	; (1c74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ec>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a1c:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1a1e:	2200      	movs	r2, #0
    1a20:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1a22:	fba6 2303 	umull	r2, r3, r6, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1a26:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1a2a:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1a2e:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1a30:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1a34:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1a38:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1a3c:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    1a40:	f8a5 200f 	strh.w	r2, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1a44:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1a48:	f8a5 1011 	strh.w	r1, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1a4c:	f8a5 3009 	strh.w	r3, [r5, #9]
	if (
    1a50:	2800      	cmp	r0, #0
    1a52:	f000 831a 	beq.w	208a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd02>
	    !conn->llcp_enc.pause_tx &&
    1a56:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1a5a:	079f      	lsls	r7, r3, #30
    1a5c:	f100 8315 	bmi.w	208a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd02>
	    !conn->llcp_phy.pause_tx &&
    1a60:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1a64:	07de      	lsls	r6, r3, #31
    1a66:	f100 8310 	bmi.w	208a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd02>
		if (conn->tx_head == conn->tx_data) {
    1a6a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1a6e:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1a70:	bf04      	itt	eq
    1a72:	6803      	ldreq	r3, [r0, #0]
    1a74:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1a78:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	f000 875f 	beq.w	2940 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15b8>
	tx->next = conn->tx_ctrl_last->next;
    1a82:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1a86:	681a      	ldr	r2, [r3, #0]
    1a88:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1a8a:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1a8c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1a90:	6828      	ldr	r0, [r5, #0]
	if (!tx->next) {
    1a92:	2800      	cmp	r0, #0
    1a94:	f47f aac7 	bne.w	1026 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1a98:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1a9c:	f7ff bac3 	b.w	1026 <ull_conn_llcp+0x2e>
		rx = ll_pdu_rx_alloc_peek(2);
    1aa0:	2002      	movs	r0, #2
    1aa2:	f010 fc6d 	bl	12380 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1aa6:	4607      	mov	r7, r0
    1aa8:	2800      	cmp	r0, #0
    1aaa:	f43f aabc 	beq.w	1026 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1aae:	4870      	ldr	r0, [pc, #448]	; (1c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e8>)
    1ab0:	f00c ffba 	bl	ea28 <mem_acquire>
		if (!tx) {
    1ab4:	4606      	mov	r6, r0
    1ab6:	2800      	cmp	r0, #0
    1ab8:	f43f aab5 	beq.w	1026 <ull_conn_llcp+0x2e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1abc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1ac0:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    1ac4:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1ac8:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1acc:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    1ad0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	f040 85fc 	bne.w	26d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134a>
			conn->llcp_ack = conn->llcp_req;
    1ada:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    1ade:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1ae2:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    1ae4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1ae8:	f100 86b3 	bmi.w	2852 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ca>
    1aec:	4643      	mov	r3, r8
    1aee:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
    1af0:	2205      	movs	r2, #5
    1af2:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1af4:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1af8:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1afa:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
    1afc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1b00:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b02:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    1b06:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b08:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
    1b0a:	71f1      	strb	r1, [r6, #7]
	if (
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	f47f af34 	bne.w	197a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5f2>
		if (!conn->tx_ctrl) {
    1b12:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1b16:	2a00      	cmp	r2, #0
    1b18:	f47f af45 	bne.w	19a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61e>
			tx->next = conn->tx_head;
    1b1c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1b1e:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1b22:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1b26:	e746      	b.n	19b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b28:	4851      	ldr	r0, [pc, #324]	; (1c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e8>)
    1b2a:	f00c ff7d 	bl	ea28 <mem_acquire>
	if (!tx) {
    1b2e:	4606      	mov	r6, r0
    1b30:	2800      	cmp	r0, #0
    1b32:	f43f aa78 	beq.w	1026 <ull_conn_llcp+0x2e>
	if (!lll->role) {
    1b36:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1b3a:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1b3c:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    1b40:	f280 8430 	bge.w	23a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x101c>
	else if (!lll->enc_rx) {
    1b44:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1b48:	0719      	lsls	r1, r3, #28
    1b4a:	f100 8640 	bmi.w	27ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1446>
		if (conn->llcp.encryption.error_code) {
    1b4e:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    1b52:	2d00      	cmp	r5, #0
    1b54:	f000 84af 	beq.w	24b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x112e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b58:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1b5a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b5e:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    1b62:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1b64:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1b66:	f140 8660 	bpl.w	282a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14a2>
	    (conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    1b6a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1b6e:	075b      	lsls	r3, r3, #29
    1b70:	f140 865b 	bpl.w	282a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14a2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1b74:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1b76:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1b78:	7245      	strb	r5, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1b7a:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1b7c:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1b7e:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1b80:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1b84:	2200      	movs	r2, #0
    1b86:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	f000 84dd 	beq.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
	    !conn->llcp_enc.pause_tx &&
    1b90:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1b94:	0797      	lsls	r7, r2, #30
    1b96:	f100 84d8 	bmi.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
	    !conn->llcp_phy.pause_tx &&
    1b9a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1b9e:	07d5      	lsls	r5, r2, #31
    1ba0:	f100 84d3 	bmi.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
		if (conn->tx_head == conn->tx_data) {
    1ba4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1ba8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1baa:	bf04      	itt	eq
    1bac:	681a      	ldreq	r2, [r3, #0]
    1bae:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1bb2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1bb6:	2a00      	cmp	r2, #0
    1bb8:	f000 8706 	beq.w	29c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1640>
	tx->next = conn->tx_ctrl_last->next;
    1bbc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1bc0:	681a      	ldr	r2, [r3, #0]
    1bc2:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1bc4:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1bc6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1bca:	6833      	ldr	r3, [r6, #0]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	f000 855e 	beq.w	268e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1306>
	conn->llcp_ack = conn->llcp_req;
    1bd2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1bd6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1bda:	f7ff ba24 	b.w	1026 <ull_conn_llcp+0x2e>
		conn_upd_curr = conn;
    1bde:	603c      	str	r4, [r7, #0]
    1be0:	f7ff bac7 	b.w	1172 <ull_conn_llcp+0x17a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1be4:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1be8:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1bec:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1bf0:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
    1bf4:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1bf8:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1bfc:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1bfe:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c02:	f000 84c2 	beq.w	258a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1202>
			conn->llcp_length.state =
    1c06:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1c0a:	2206      	movs	r2, #6
    1c0c:	f362 0302 	bfi	r3, r2, #0, #3
    1c10:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1c14:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1c18:	2f00      	cmp	r7, #0
    1c1a:	f000 84a2 	beq.w	2562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11da>
    1c1e:	6838      	ldr	r0, [r7, #0]
    1c20:	2800      	cmp	r0, #0
    1c22:	f000 849e 	beq.w	2562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11da>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c26:	f897 3020 	ldrb.w	r3, [r7, #32]
		conn->llcp_rx = rx->hdr.link->mem;
    1c2a:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1c2c:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1c30:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c34:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c38:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c3a:	f887 3020 	strb.w	r3, [r7, #32]
		pdu_ctrl_rx->len =
    1c3e:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c42:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1c44:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1c48:	f8a7 c024 	strh.w	ip, [r7, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1c4c:	84f9      	strh	r1, [r7, #38]	; 0x26
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c4e:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    1c54:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1c56:	f8a7 9028 	strh.w	r9, [r7, #40]	; 0x28
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1c5a:	f8a7 802a 	strh.w	r8, [r7, #42]	; 0x2a
		pdu_ctrl_rx->len =
    1c5e:	f887 a021 	strb.w	sl, [r7, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    1c62:	f010 fb7d 	bl	12360 <ll_rx_put>
		ll_rx_sched();
    1c66:	f010 fb85 	bl	12374 <ll_rx_sched>
	break;
    1c6a:	f7ff ba05 	b.w	1078 <ull_conn_llcp+0x80>
    1c6e:	bf00      	nop
    1c70:	2000145c 	.word	0x2000145c
    1c74:	d1b71759 	.word	0xd1b71759
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c78:	48c1      	ldr	r0, [pc, #772]	; (1f80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf8>)
    1c7a:	f00c fed5 	bl	ea28 <mem_acquire>
		if (!tx) {
    1c7e:	2800      	cmp	r0, #0
    1c80:	f43f a9fa 	beq.w	1078 <ull_conn_llcp+0x80>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1c84:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1c88:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1c8c:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1c90:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1c94:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1c96:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1c9a:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    1c9e:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1ca0:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ca4:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    1ca6:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    1ca8:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1cac:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cae:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1cb2:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1cb6:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cb8:	7102      	strb	r2, [r0, #4]
	if (!conn->common.fex_valid ||
    1cba:	07ff      	lsls	r7, r7, #31
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1cbc:	f04f 021b 	mov.w	r2, #27
	feature_coded_phy = (conn->llcp_feature.features &
    1cc0:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1cc4:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1cc8:	7241      	strb	r1, [r0, #9]
    1cca:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    1ccc:	f140 83cb 	bpl.w	2466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10de>
    1cd0:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    1cd4:	f000 83c7 	beq.w	2466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10de>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0), tx_time);
    1cd8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    1cdc:	bf28      	it	cs
    1cde:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
    1ce2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1ce6:	bf38      	it	cc
    1ce8:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    1cec:	f44f 6129 	mov.w	r1, #2704	; 0xa90
	    conn->tx_head &&
    1cf0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1cf4:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1cf6:	81c3      	strh	r3, [r0, #14]
	if (
    1cf8:	2a00      	cmp	r2, #0
    1cfa:	f000 8348 	beq.w	238e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1006>
	    !conn->llcp_enc.pause_tx &&
    1cfe:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1d02:	0799      	lsls	r1, r3, #30
    1d04:	f100 8343 	bmi.w	238e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1006>
	    !conn->llcp_phy.pause_tx &&
    1d08:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1d0c:	07db      	lsls	r3, r3, #31
    1d0e:	f100 833e 	bmi.w	238e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1006>
		if (conn->tx_head == conn->tx_data) {
    1d12:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1d16:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    1d18:	bf04      	itt	eq
    1d1a:	6813      	ldreq	r3, [r2, #0]
    1d1c:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1d20:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1d24:	2b00      	cmp	r3, #0
    1d26:	f000 8627 	beq.w	2978 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15f0>
	tx->next = conn->tx_ctrl_last->next;
    1d2a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1d32:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1d34:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1d38:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
    1d3a:	2a00      	cmp	r2, #0
    1d3c:	f000 857b 	beq.w	2836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ae>
		conn->procedure_expire = conn->procedure_reload;
    1d40:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1d44:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1d48:	f7ff b996 	b.w	1078 <ull_conn_llcp+0x80>
		if (!conn->tx_ctrl) {
    1d4c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1d50:	2a00      	cmp	r2, #0
    1d52:	f47f ad2c 	bne.w	17ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x426>
			tx->next = conn->tx_head;
    1d56:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1d58:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1d5c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1d60:	e52d      	b.n	17be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x436>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d62:	fb07 3311 	mls	r3, r7, r1, r3
    1d66:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1d6a:	4886      	ldr	r0, [pc, #536]	; (1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>)
    1d6c:	b29b      	uxth	r3, r3
    1d6e:	fb02 f303 	mul.w	r3, r2, r3
    1d72:	fba3 0100 	umull	r0, r1, r3, r0
    1d76:	a380      	add	r3, pc, #512	; (adr r3, 1f78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf0>)
    1d78:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d7c:	f7fe f9c0 	bl	100 <__aeabi_uldivmod>
    1d80:	1a36      	subs	r6, r6, r0
    1d82:	f7ff ba7e 	b.w	1282 <ull_conn_llcp+0x28a>
		LL_ASSERT(rx && rx->hdr.link);
    1d86:	4a80      	ldr	r2, [pc, #512]	; (1f88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc00>)
    1d88:	4980      	ldr	r1, [pc, #512]	; (1f8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc04>)
    1d8a:	4881      	ldr	r0, [pc, #516]	; (1f90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc08>)
    1d8c:	f640 03b6 	movw	r3, #2230	; 0x8b6
    1d90:	f01a fb3c 	bl	1c40c <printk>
    1d94:	4040      	eors	r0, r0
    1d96:	f380 8811 	msr	BASEPRI, r0
    1d9a:	f04f 0003 	mov.w	r0, #3
    1d9e:	df02      	svc	2
    1da0:	6838      	ldr	r0, [r7, #0]
    1da2:	f7ff ba22 	b.w	11ea <ull_conn_llcp+0x1f2>
			lll->slave.window_widening_prepare_us -=
    1da6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1da8:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1daa:	4d76      	ldr	r5, [pc, #472]	; (1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>)
			lll->slave.window_widening_prepare_us -=
    1dac:	fb03 231b 	mls	r3, r3, fp, r2
    1db0:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    1db2:	f016 fb4d 	bl	18450 <lll_conn_ppm_local_get>
    1db6:	4680      	mov	r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1db8:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1dbc:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1dc0:	f016 fb48 	bl	18454 <lll_conn_ppm_get>
				(((lll_conn_ppm_local_get() +
    1dc4:	eb08 0300 	add.w	r3, r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1dc8:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1dcc:	4871      	ldr	r0, [pc, #452]	; (1f94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0c>)
			lll->slave.window_widening_prepare_us +=
    1dce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    1dd0:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1dd4:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1dd8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1ddc:	fba0 0303 	umull	r0, r3, r0, r3
    1de0:	ea4f 4b93 	mov.w	fp, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1de4:	fb0b f00a 	mul.w	r0, fp, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1de8:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    1dea:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1dec:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1dee:	429a      	cmp	r2, r3
    1df0:	bf28      	it	cs
    1df2:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1df4:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    1df8:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1dfc:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
    1e00:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e04:	a35c      	add	r3, pc, #368	; (adr r3, 1f78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf0>)
    1e06:	e9d3 2300 	ldrd	r2, r3, [r3]
			conn->slave.ticks_to_offset = 0U;
    1e0a:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    1e0e:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e12:	fba0 0105 	umull	r0, r1, r0, r5
    1e16:	f7fe f973 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e1a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e1e:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e20:	485d      	ldr	r0, [pc, #372]	; (1f98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc10>)
    1e22:	fba0 3003 	umull	r3, r0, r0, r3
    1e26:	0a80      	lsrs	r0, r0, #10
    1e28:	fb09 f000 	mul.w	r0, r9, r0
    1e2c:	a352      	add	r3, pc, #328	; (adr r3, 1f78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf0>)
    1e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e32:	fba0 0105 	umull	r0, r1, r0, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e36:	eba6 060c 	sub.w	r6, r6, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e3a:	f7fe f961 	bl	100 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1e3e:	eba7 0a0b 	sub.w	sl, r7, fp
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1e42:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1e46:	f7ff ba3d 	b.w	12c4 <ull_conn_llcp+0x2cc>
		} else if (conn->llcp_conn_param.ack !=
    1e4a:	f894 7171 	ldrb.w	r7, [r4, #369]	; 0x171
    1e4e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    1e52:	429f      	cmp	r7, r3
    1e54:	f000 819e 	beq.w	2194 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0c>
	conn_upd = conn_upd_curr;
    1e58:	4f50      	ldr	r7, [pc, #320]	; (1f9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc14>)
    1e5a:	683b      	ldr	r3, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	f000 851b 	beq.w	2898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1510>
    1e62:	429c      	cmp	r4, r3
    1e64:	f47f a8df 	bne.w	1026 <ull_conn_llcp+0x2e>
	switch (conn->llcp_conn_param.state) {
    1e68:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    1e6c:	f003 0307 	and.w	r3, r3, #7
    1e70:	2b05      	cmp	r3, #5
    1e72:	f200 86f9 	bhi.w	2c68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e0>
    1e76:	f20f 0e08 	addw	lr, pc, #8
    1e7a:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1e7e:	bf00      	nop
    1e80:	00001fa1 	.word	0x00001fa1
    1e84:	00001ef3 	.word	0x00001ef3
    1e88:	00001e99 	.word	0x00001e99
    1e8c:	0000101d 	.word	0x0000101d
    1e90:	0000101d 	.word	0x0000101d
    1e94:	0000101d 	.word	0x0000101d
	if (conn->llcp_enc.pause_tx) {
    1e98:	f01c 0f02 	tst.w	ip, #2
    1e9c:	f47f a8c3 	bne.w	1026 <ull_conn_llcp+0x2e>
	rx = ll_pdu_rx_alloc();
    1ea0:	f010 fa8c 	bl	123bc <ll_pdu_rx_alloc>
	if (!rx) {
    1ea4:	4601      	mov	r1, r0
    1ea6:	2800      	cmp	r0, #0
    1ea8:	f43f ace1 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1eac:	f890 3020 	ldrb.w	r3, [r0, #32]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1eb0:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1eb4:	2003      	movs	r0, #3
    1eb6:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1eba:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1ebc:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1ec0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ec2:	f881 3020 	strb.w	r3, [r1, #32]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ec6:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1ec8:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1eca:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1ecc:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1ed0:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ed4:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    1ed8:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1eda:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1ede:	848a      	strh	r2, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1ee0:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ee4:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1ee6:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1ee8:	8508      	strh	r0, [r1, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1eea:	854a      	strh	r2, [r1, #42]	; 0x2a
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1eec:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    1ef0:	e4b8      	b.n	1864 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4dc>
	if (conn->llcp_conn_param.status) {
    1ef2:	f894 8173 	ldrb.w	r8, [r4, #371]	; 0x173
    1ef6:	f1b8 0f00 	cmp.w	r8, #0
    1efa:	f040 857b 	bne.w	29f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x166c>
	if (!conn->lll.role) {
    1efe:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1f02:	2b00      	cmp	r3, #0
    1f04:	f2c0 85b0 	blt.w	2a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f08:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    1f0c:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1f10:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f14:	2205      	movs	r2, #5
    1f16:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    1f1a:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f1c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1f20:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1f24:	2800      	cmp	r0, #0
    1f26:	f000 8640 	beq.w	2baa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1822>
				((conn->llcp_conn_param.interval_min /
    1f2a:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1f2e:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    1f32:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1f34:	fb13 f300 	smulbb	r3, r3, r0
    1f38:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1f3a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1f3e:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    1f42:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1f46:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1f4a:	009b      	lsls	r3, r3, #2
    1f4c:	f020 0207 	bic.w	r2, r0, #7
    1f50:	f043 0302 	orr.w	r3, r3, #2
    1f54:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1f56:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1f5a:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1f5e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1f62:	3901      	subs	r1, #1
    1f64:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1f68:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1f6c:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    1f70:	f7ff b859 	b.w	1026 <ull_conn_llcp+0x2e>
    1f74:	f3af 8000 	nop.w
    1f78:	1afd498d 	.word	0x1afd498d
    1f7c:	00000007 	.word	0x00000007
    1f80:	2000145c 	.word	0x2000145c
    1f84:	3b9aca00 	.word	0x3b9aca00
    1f88:	00022180 	.word	0x00022180
    1f8c:	00022340 	.word	0x00022340
    1f90:	00021ce0 	.word	0x00021ce0
    1f94:	431bde83 	.word	0x431bde83
    1f98:	d1b71759 	.word	0xd1b71759
    1f9c:	200013dc 	.word	0x200013dc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1fa0:	48b1      	ldr	r0, [pc, #708]	; (2268 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee0>)
			event_counter = lll->event_counter +
    1fa2:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    1fa6:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1faa:	f00c fd3d 	bl	ea28 <mem_acquire>
	if (!tx) {
    1fae:	4601      	mov	r1, r0
    1fb0:	2800      	cmp	r0, #0
    1fb2:	f43f ac5c 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1fb6:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fba:	790a      	ldrb	r2, [r1, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1fbc:	f04f 0c04 	mov.w	ip, #4
    1fc0:	f36c 0002 	bfi	r0, ip, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fc4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1fc8:	f04f 0c18 	mov.w	ip, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1fcc:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    1fd0:	eb08 0309 	add.w	r3, r8, r9
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fd4:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1fd6:	f881 c005 	strb.w	ip, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1fda:	f8b4 c174 	ldrh.w	ip, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1fde:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1fe2:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1fe6:	f8a1 c008 	strh.w	ip, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1fea:	442b      	add	r3, r5
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1fec:	f8b4 c17a 	ldrh.w	ip, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ff0:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1ff2:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1ff4:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    1ff6:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1ff8:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2000:	71c8      	strb	r0, [r1, #7]
	p->preferred_periodicity = 0U;
    2002:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2004:	74ca      	strb	r2, [r1, #19]
    2006:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2008:	754b      	strb	r3, [r1, #21]
    200a:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    200c:	75cb      	strb	r3, [r1, #23]
    200e:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2010:	764b      	strb	r3, [r1, #25]
    2012:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2014:	76cb      	strb	r3, [r1, #27]
    2016:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2018:	774b      	strb	r3, [r1, #29]
    201a:	778b      	strb	r3, [r1, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    201c:	4620      	mov	r0, r4
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    201e:	f8a1 c00e 	strh.w	ip, [r1, #14]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2022:	f011 f893 	bl	1314c <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    2026:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    202a:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    202e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	conn_upd_curr = conn;
    2032:	603c      	str	r4, [r7, #0]
	conn->procedure_expire = conn->procedure_reload;
    2034:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2038:	f7fe bff0 	b.w	101c <ull_conn_llcp+0x24>
		if ((conn->llcp_cu.interval != lll->interval) ||
    203c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    203e:	428a      	cmp	r2, r1
    2040:	f47f a8e0 	bne.w	1204 <ull_conn_llcp+0x20c>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2044:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2048:	fb02 fa03 	mul.w	sl, r2, r3
    204c:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    2050:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2054:	fb02 a20c 	mla	r2, r2, ip, sl
    2058:	3a01      	subs	r2, #1
    205a:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    205e:	b292      	uxth	r2, r2
    2060:	4596      	cmp	lr, r2
    2062:	f47f a8cf 	bne.w	1204 <ull_conn_llcp+0x20c>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2066:	2303      	movs	r3, #3
    2068:	713b      	strb	r3, [r7, #4]
    206a:	f7ff b8d8 	b.w	121e <ull_conn_llcp+0x226>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    206e:	2201      	movs	r2, #1
    2070:	4610      	mov	r0, r2
    2072:	2102      	movs	r1, #2
    2074:	f00c fd7c 	bl	eb70 <mayfly_enable>
				return -ECANCELED;
    2078:	f06f 0047 	mvn.w	r0, #71	; 0x47
    207c:	f7fe bfda 	b.w	1034 <ull_conn_llcp+0x3c>
    2080:	f44f 77a4 	mov.w	r7, #328	; 0x148
    2084:	46b9      	mov	r9, r7
    2086:	f7ff ba15 	b.w	14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>
		if (!conn->tx_ctrl) {
    208a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    208e:	2b00      	cmp	r3, #0
    2090:	f47f acf7 	bne.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
			tx->next = conn->tx_head;
    2094:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    2096:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    209a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    209e:	e4f8      	b.n	1a92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20a0:	4871      	ldr	r0, [pc, #452]	; (2268 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee0>)
    20a2:	f00c fcc1 	bl	ea28 <mem_acquire>
	if (tx) {
    20a6:	4680      	mov	r8, r0
    20a8:	2800      	cmp	r0, #0
    20aa:	f43f abe0 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->llcp_feature.ack--;
    20ae:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features = LL_FEAT;
    20b2:	4a6e      	ldr	r2, [pc, #440]	; (226c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee4>)
    20b4:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    20b8:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    20ba:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    20bc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    20c0:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    20c2:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    20c6:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    20c8:	2a00      	cmp	r2, #0
    20ca:	bfac      	ite	ge
    20cc:	2208      	movge	r2, #8
    20ce:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    20d0:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    20d4:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    20d6:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    20d8:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    20da:	4639      	mov	r1, r7
    20dc:	4410      	add	r0, r2
    20de:	f01c fa2e 	bl	1e53e <memset>
		sys_put_le24(conn->llcp_feature.features,
    20e2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    20e6:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    20ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    20ee:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    20f0:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    20f4:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    20f8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    20fc:	2b00      	cmp	r3, #0
    20fe:	f000 81c2 	beq.w	2486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10fe>
	    !conn->llcp_enc.pause_tx &&
    2102:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2106:	0791      	lsls	r1, r2, #30
    2108:	f100 81bd 	bmi.w	2486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10fe>
	    !conn->llcp_phy.pause_tx &&
    210c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2110:	07d2      	lsls	r2, r2, #31
    2112:	f100 81b8 	bmi.w	2486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10fe>
		if (conn->tx_head == conn->tx_data) {
    2116:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    211a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    211c:	bf04      	itt	eq
    211e:	681a      	ldreq	r2, [r3, #0]
    2120:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2124:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2128:	2a00      	cmp	r2, #0
    212a:	f000 8458 	beq.w	29de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1656>
	tx->next = conn->tx_ctrl_last->next;
    212e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2132:	681a      	ldr	r2, [r3, #0]
    2134:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2138:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    213c:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2140:	f8d8 3000 	ldr.w	r3, [r8]
	if (!tx->next) {
    2144:	2b00      	cmp	r3, #0
    2146:	f000 83c1 	beq.w	28cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1544>
		conn->procedure_expire = conn->procedure_reload;
    214a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    214e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2152:	f7ff bb8c 	b.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->tx_data_last = tx;
    2156:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    215a:	f7ff bb33 	b.w	17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    215e:	f894 5064 	ldrb.w	r5, [r4, #100]	; 0x64
    2162:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2166:	f3c1 0082 	ubfx	r0, r1, #2, #3
    216a:	f360 0502 	bfi	r5, r0, #0, #3
    216e:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
	u16_t time = PKT_US(max_octets, phy);
    2172:	0745      	lsls	r5, r0, #29
    2174:	f140 8278 	bpl.w	2668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12e0>
    2178:	019d      	lsls	r5, r3, #6
	eff_time = MIN(eff_time, default_time);
    217a:	f505 7574 	add.w	r5, r5, #976	; 0x3d0
    217e:	42bd      	cmp	r5, r7
    2180:	bf28      	it	cs
    2182:	463d      	movcs	r5, r7
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    2184:	f44f 6029 	mov.w	r0, #2704	; 0xa90
    2188:	4285      	cmp	r5, r0
    218a:	bf38      	it	cc
    218c:	4605      	movcc	r5, r0
    218e:	b2ad      	uxth	r5, r5
	return eff_time;
    2190:	f7ff b996 	b.w	14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2194:	f894 7198 	ldrb.w	r7, [r4, #408]	; 0x198
    2198:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    219c:	42bb      	cmp	r3, r7
    219e:	f000 8207 	beq.w	25b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1228>
	switch (conn->llcp_length.state) {
    21a2:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    21a6:	f003 0107 	and.w	r1, r3, #7
    21aa:	2906      	cmp	r1, #6
    21ac:	f200 854d 	bhi.w	2c4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c2>
    21b0:	f20f 0c04 	addw	ip, pc, #4
    21b4:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
    21b8:	00002271 	.word	0x00002271
    21bc:	0000101d 	.word	0x0000101d
    21c0:	0000101d 	.word	0x0000101d
    21c4:	0000101d 	.word	0x0000101d
    21c8:	000021d5 	.word	0x000021d5
    21cc:	000021d5 	.word	0x000021d5
    21d0:	0000101d 	.word	0x0000101d
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    21d4:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    21d8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21dc:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    21e0:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    21e4:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
    21e8:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    21ec:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    21f0:	2a04      	cmp	r2, #4
    21f2:	f000 83e0 	beq.w	29b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x162e>
			conn->llcp_length.state =
    21f6:	2206      	movs	r2, #6
    21f8:	f362 0302 	bfi	r3, r2, #0, #3
    21fc:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2200:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2204:	2f00      	cmp	r7, #0
    2206:	f000 83bf 	beq.w	2988 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1600>
    220a:	6838      	ldr	r0, [r7, #0]
    220c:	2800      	cmp	r0, #0
    220e:	f000 83bb 	beq.w	2988 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1600>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2212:	f897 3020 	ldrb.w	r3, [r7, #32]
		conn->llcp_rx = rx->hdr.link->mem;
    2216:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    2218:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    221c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2220:	f043 0303 	orr.w	r3, r3, #3
    2224:	f887 3020 	strb.w	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2228:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    222a:	2309      	movs	r3, #9
    222c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2230:	713a      	strb	r2, [r7, #4]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2232:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2236:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    223a:	84b9      	strh	r1, [r7, #36]	; 0x24
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    223c:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    223e:	84fa      	strh	r2, [r7, #38]	; 0x26
		rx->hdr.handle = conn->lll.handle;
    2240:	f8a7 c006 	strh.w	ip, [r7, #6]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    2248:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    224a:	f8a7 9028 	strh.w	r9, [r7, #40]	; 0x28
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    224e:	f8a7 802a 	strh.w	r8, [r7, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
    2252:	f010 f885 	bl	12360 <ll_rx_put>
		ll_rx_sched();
    2256:	f010 f88d 	bl	12374 <ll_rx_sched>
	break;
    225a:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    225e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    2262:	f7fe bedb 	b.w	101c <ull_conn_llcp+0x24>
    2266:	bf00      	nop
    2268:	2000145c 	.word	0x2000145c
    226c:	0001497f 	.word	0x0001497f
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2270:	48cb      	ldr	r0, [pc, #812]	; (25a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1218>)
    2272:	f00c fbd9 	bl	ea28 <mem_acquire>
		if (!tx) {
    2276:	4601      	mov	r1, r0
    2278:	2800      	cmp	r0, #0
    227a:	f43f aaf8 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    227e:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2282:	f8b4 019e 	ldrh.w	r0, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2286:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    228a:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    228e:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    2290:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2294:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    2298:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    229a:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    229e:	790a      	ldrb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    22a0:	714f      	strb	r7, [r1, #5]
	if (!conn->common.fex_valid ||
    22a2:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    22a6:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22a8:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    22ac:	2014      	movs	r0, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    22ae:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22b2:	710a      	strb	r2, [r1, #4]
	if (!conn->common.fex_valid ||
    22b4:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features &
    22b6:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    22ba:	71c8      	strb	r0, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    22bc:	f04f 001b 	mov.w	r0, #27
    22c0:	f881 c009 	strb.w	ip, [r1, #9]
    22c4:	7208      	strb	r0, [r1, #8]
	if (!conn->common.fex_valid ||
    22c6:	f140 8386 	bpl.w	29d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x164e>
    22ca:	0510      	lsls	r0, r2, #20
    22cc:	f140 83c5 	bpl.w	2a5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16d2>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2)),
    22d0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    22d4:	bf28      	it	cs
    22d6:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0), tx_time);
    22da:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    22de:	bf38      	it	cc
    22e0:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2)),
    22e4:	f44f 6229 	mov.w	r2, #2704	; 0xa90
	    conn->tx_head &&
    22e8:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    22ec:	81cb      	strh	r3, [r1, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    22ee:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    22f2:	bf38      	it	cc
    22f4:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    22f8:	814a      	strh	r2, [r1, #10]
	if (
    22fa:	2800      	cmp	r0, #0
    22fc:	f000 8331 	beq.w	2962 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15da>
	    !conn->llcp_enc.pause_tx &&
    2300:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    2304:	079b      	lsls	r3, r3, #30
    2306:	f100 832c 	bmi.w	2962 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15da>
	    !conn->llcp_phy.pause_tx &&
    230a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    230e:	07df      	lsls	r7, r3, #31
    2310:	f100 8327 	bmi.w	2962 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15da>
		if (conn->tx_head == conn->tx_data) {
    2314:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2318:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    231a:	bf04      	itt	eq
    231c:	6803      	ldreq	r3, [r0, #0]
    231e:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2322:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2326:	2b00      	cmp	r3, #0
    2328:	f000 8472 	beq.w	2c10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1888>
	tx->next = conn->tx_ctrl_last->next;
    232c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2330:	681a      	ldr	r2, [r3, #0]
    2332:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    2334:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    2336:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
	if (!tx->next) {
    233a:	680b      	ldr	r3, [r1, #0]
    233c:	2b00      	cmp	r3, #0
    233e:	f47f af04 	bne.w	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
		conn->tx_data_last = tx;
    2342:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2346:	e700      	b.n	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
		LL_ASSERT(rx && rx->hdr.link);
    2348:	4a96      	ldr	r2, [pc, #600]	; (25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>)
    234a:	4997      	ldr	r1, [pc, #604]	; (25a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1220>)
    234c:	4897      	ldr	r0, [pc, #604]	; (25ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1224>)
    234e:	f640 632e 	movw	r3, #3630	; 0xe2e
    2352:	f01a f85b 	bl	1c40c <printk>
    2356:	4040      	eors	r0, r0
    2358:	f380 8811 	msr	BASEPRI, r0
    235c:	f04f 0003 	mov.w	r0, #3
    2360:	df02      	svc	2
    2362:	f8db 0000 	ldr.w	r0, [fp]
    2366:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    236a:	f7ff b8db 	b.w	1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>
		LL_ASSERT(rx && rx->hdr.link);
    236e:	4a8d      	ldr	r2, [pc, #564]	; (25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>)
    2370:	498d      	ldr	r1, [pc, #564]	; (25a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1220>)
    2372:	488e      	ldr	r0, [pc, #568]	; (25ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1224>)
    2374:	f640 635a 	movw	r3, #3674	; 0xe5a
    2378:	f01a f848 	bl	1c40c <printk>
    237c:	4040      	eors	r0, r0
    237e:	f380 8811 	msr	BASEPRI, r0
    2382:	f04f 0003 	mov.w	r0, #3
    2386:	df02      	svc	2
    2388:	6830      	ldr	r0, [r6, #0]
    238a:	f7ff b8f9 	b.w	1580 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f8>
		if (!conn->tx_ctrl) {
    238e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2392:	2b00      	cmp	r3, #0
    2394:	f47f acc9 	bne.w	1d2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a2>
			tx->next = conn->tx_head;
    2398:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    239a:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    239e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    23a2:	e4ca      	b.n	1d3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b2>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    23a4:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    23a8:	463b      	mov	r3, r7
    23aa:	462a      	mov	r2, r5
    23ac:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    23b0:	f204 105d 	addw	r0, r4, #349	; 0x15d
    23b4:	f016 fd2a 	bl	18e0c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    23b8:	4639      	mov	r1, r7
    23ba:	2210      	movs	r2, #16
    23bc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    23c0:	f01c f892 	bl	1e4e8 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    23c4:	2208      	movs	r2, #8
    23c6:	f104 0198 	add.w	r1, r4, #152	; 0x98
    23ca:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    23ce:	f01c f88b 	bl	1e4e8 <memcpy>
		lll->ccm_rx.direction = 0;
    23d2:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    23d6:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    23da:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    23de:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    23e2:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    23e6:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    23ea:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    23ee:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    23f2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    23f6:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    23fa:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    23fe:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2402:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2406:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    240a:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    240e:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2412:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2416:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    2418:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    241c:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2420:	4620      	mov	r0, r4
    2422:	f011 f89d 	bl	13560 <start_enc_rsp_send>
	    conn->tx_head &&
    2426:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    242a:	2b00      	cmp	r3, #0
    242c:	d037      	beq.n	249e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1116>
	    !conn->llcp_enc.pause_tx &&
    242e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2432:	0795      	lsls	r5, r2, #30
    2434:	d433      	bmi.n	249e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1116>
	    !conn->llcp_phy.pause_tx &&
    2436:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    243a:	07d0      	lsls	r0, r2, #31
    243c:	d42f      	bmi.n	249e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1116>
		if (conn->tx_head == conn->tx_data) {
    243e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2442:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2444:	bf04      	itt	eq
    2446:	681a      	ldreq	r2, [r3, #0]
    2448:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    244c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2450:	2a00      	cmp	r2, #0
    2452:	f47f abb3 	bne.w	1bbc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x834>
			tx->next = conn->tx_head->next;
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    245a:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    245c:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    245e:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2462:	f7ff bbb3 	b.w	1bcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x844>
    2466:	f44f 73a4 	mov.w	r3, #328	; 0x148
    246a:	4619      	mov	r1, r3
    246c:	e440      	b.n	1cf0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x968>
		if (!conn->tx_ctrl) {
    246e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2472:	2a00      	cmp	r2, #0
    2474:	f47f a907 	bne.w	1686 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fe>
			tx->next = conn->tx_head;
    2478:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    247a:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    247e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    2482:	f7ff b908 	b.w	1696 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30e>
		if (!conn->tx_ctrl) {
    2486:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    248a:	2a00      	cmp	r2, #0
    248c:	f47f ae4f 	bne.w	212e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xda6>
			tx->next = conn->tx_head;
    2490:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2494:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2498:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    249c:	e652      	b.n	2144 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdbc>
		if (!conn->tx_ctrl) {
    249e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    24a2:	2a00      	cmp	r2, #0
    24a4:	f47f ab8a 	bne.w	1bbc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x834>
			tx->next = conn->tx_head;
    24a8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    24aa:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    24ae:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    24b2:	f7ff bb8b 	b.w	1bcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x844>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    24b6:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    24ba:	463b      	mov	r3, r7
    24bc:	462a      	mov	r2, r5
    24be:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    24c2:	f204 105d 	addw	r0, r4, #349	; 0x15d
    24c6:	f016 fca1 	bl	18e0c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    24ca:	4639      	mov	r1, r7
    24cc:	2210      	movs	r2, #16
    24ce:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    24d2:	f01c f809 	bl	1e4e8 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    24d6:	2208      	movs	r2, #8
    24d8:	f104 0198 	add.w	r1, r4, #152	; 0x98
    24dc:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    24e0:	f01c f802 	bl	1e4e8 <memcpy>
			lll->ccm_rx.direction = 1U;
    24e4:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    24e8:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    24ec:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    24f0:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    24f4:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    24f8:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    24fc:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2500:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    2502:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2506:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    250a:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    250e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2512:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2516:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    251a:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    251e:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2522:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2526:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    252a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    252e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2532:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2534:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    2536:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    253a:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    253e:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2540:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2542:	71f1      	strb	r1, [r6, #7]
	if (
    2544:	2b00      	cmp	r3, #0
    2546:	f47f ab23 	bne.w	1b90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x808>
		if (!conn->tx_ctrl) {
    254a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    254e:	2a00      	cmp	r2, #0
    2550:	f47f ab34 	bne.w	1bbc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x834>
			tx->next = conn->tx_head;
    2554:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2556:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    255a:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    255e:	f7ff bb34 	b.w	1bca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x842>
		LL_ASSERT(rx && rx->hdr.link);
    2562:	4a10      	ldr	r2, [pc, #64]	; (25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>)
    2564:	4910      	ldr	r1, [pc, #64]	; (25a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1220>)
    2566:	4811      	ldr	r0, [pc, #68]	; (25ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1224>)
    2568:	f640 43fe 	movw	r3, #3326	; 0xcfe
    256c:	f019 ff4e 	bl	1c40c <printk>
    2570:	4040      	eors	r0, r0
    2572:	f380 8811 	msr	BASEPRI, r0
    2576:	f04f 0003 	mov.w	r0, #3
    257a:	df02      	svc	2
    257c:	6838      	ldr	r0, [r7, #0]
    257e:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    2582:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    2586:	f7ff bb4e 	b.w	1c26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x89e>
			if (!conn->llcp_length.cache.tx_octets) {
    258a:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    258e:	2a00      	cmp	r2, #0
    2590:	f040 819f 	bne.w	28d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154a>
				conn->llcp_length.ack = conn->llcp_length.req;
    2594:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2598:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    259c:	f7ff bb3a 	b.w	1c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88c>
    25a0:	2000145c 	.word	0x2000145c
    25a4:	00022180 	.word	0x00022180
    25a8:	00022340 	.word	0x00022340
    25ac:	00021ce0 	.word	0x00021ce0
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    25b0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    25b4:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
    25b8:	4299      	cmp	r1, r3
    25ba:	f43e ad34 	beq.w	1026 <ull_conn_llcp+0x2e>
	switch (conn->llcp_phy.state) {
    25be:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    25c2:	f001 0003 	and.w	r0, r1, #3
    25c6:	2803      	cmp	r0, #3
    25c8:	f000 82a7 	beq.w	2b1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1792>
    25cc:	2800      	cmp	r0, #0
    25ce:	f47e ad2a 	bne.w	1026 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25d2:	48d7      	ldr	r0, [pc, #860]	; (2930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a8>)
    25d4:	f00c fa28 	bl	ea28 <mem_acquire>
		if (!tx) {
    25d8:	4601      	mov	r1, r0
    25da:	2800      	cmp	r0, #0
    25dc:	f43f a947 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    25e0:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    25e4:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    25e8:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    25ec:	2001      	movs	r0, #1
    25ee:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    25f2:	f3c3 0082 	ubfx	r0, r3, #2, #3
    25f6:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    25fa:	f3c3 1042 	ubfx	r0, r3, #5, #3
    25fe:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2602:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2606:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2608:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    260c:	f367 02c3 	bfi	r2, r7, #3, #1
    2610:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2614:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2618:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    261c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    2620:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2622:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2624:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2626:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    2628:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    262c:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    262e:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2630:	2200      	movs	r2, #0
    2632:	4620      	mov	r0, r4
    2634:	f010 fd8a 	bl	1314c <ctrl_tx_pause_enqueue>
    2638:	e587      	b.n	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
	u16_t time = PKT_US(max_octets, phy);
    263a:	f100 0a0e 	add.w	sl, r0, #14
    263e:	105b      	asrs	r3, r3, #1
    2640:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    2644:	fa2a fa03 	lsr.w	sl, sl, r3
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
    2648:	fa1f fa8a 	uxth.w	sl, sl
    264c:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    2650:	bf38      	it	cc
    2652:	f44f 7aa4 	movcc.w	sl, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    2656:	f44f 71a4 	mov.w	r1, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    265a:	45ca      	cmp	sl, r9
    265c:	bf28      	it	cs
    265e:	46ca      	movcs	sl, r9
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    2660:	fa21 f303 	lsr.w	r3, r1, r3
    2664:	f7fe bf44 	b.w	14f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x168>
	u16_t time = PKT_US(max_octets, phy);
    2668:	f103 050e 	add.w	r5, r3, #14
    266c:	1040      	asrs	r0, r0, #1
    266e:	00ed      	lsls	r5, r5, #3
    2670:	40c5      	lsrs	r5, r0
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
    2672:	b2ad      	uxth	r5, r5
    2674:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
    2678:	bf38      	it	cc
    267a:	f44f 75a4 	movcc.w	r5, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    267e:	f44f 73a4 	mov.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    2682:	42bd      	cmp	r5, r7
    2684:	bf28      	it	cs
    2686:	463d      	movcs	r5, r7
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    2688:	fa23 f000 	lsr.w	r0, r3, r0
    268c:	e57c      	b.n	2188 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe00>
		conn->tx_data_last = tx;
    268e:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2692:	f7ff ba9e 	b.w	1bd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2696:	4598      	cmp	r8, r3
    2698:	f47e af59 	bne.w	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    269c:	2303      	movs	r3, #3
    269e:	f88b 3004 	strb.w	r3, [fp, #4]
			ll_rx_put(rx->hdr.link, rx);
    26a2:	4659      	mov	r1, fp
    26a4:	f00f fe5c 	bl	12360 <ll_rx_put>
				rx = conn->llcp_rx;
    26a8:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    26ac:	2d00      	cmp	r5, #0
    26ae:	f000 8225 	beq.w	2afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1774>
    26b2:	6828      	ldr	r0, [r5, #0]
    26b4:	2800      	cmp	r0, #0
    26b6:	f000 8221 	beq.w	2afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1774>
				conn->llcp_rx = rx->hdr.link->mem;
    26ba:	6843      	ldr	r3, [r0, #4]
    26bc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    26c0:	2303      	movs	r3, #3
    26c2:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    26c4:	4629      	mov	r1, r5
    26c6:	f00f fe4b 	bl	12360 <ll_rx_put>
			ll_rx_sched();
    26ca:	f00f fe53 	bl	12374 <ll_rx_sched>
			return;
    26ce:	f7fe bcaa 	b.w	1026 <ull_conn_llcp+0x2e>
			conn->llcp.phy_upd_ind.instant = event_counter +
    26d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26d4:	441d      	add	r5, r3
							 lll->latency +
    26d6:	1dab      	adds	r3, r5, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    26d8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    26dc:	f00f fe6e 	bl	123bc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    26e0:	683b      	ldr	r3, [r7, #0]
    26e2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    26e6:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    26e8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    26ec:	f00f fe66 	bl	123bc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    26f0:	6803      	ldr	r3, [r0, #0]
    26f2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    26f6:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    26f8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    26fc:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2700:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    2704:	f3c3 0882 	ubfx	r8, r3, #2, #3
    2708:	095b      	lsrs	r3, r3, #5
    270a:	f7ff b9f1 	b.w	1af0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x768>
		LL_ASSERT(0);
    270e:	f640 331d 	movw	r3, #2845	; 0xb1d
		LL_ASSERT(0);
    2712:	4a88      	ldr	r2, [pc, #544]	; (2934 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ac>)
    2714:	4988      	ldr	r1, [pc, #544]	; (2938 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15b0>)
    2716:	4889      	ldr	r0, [pc, #548]	; (293c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15b4>)
    2718:	f019 fe78 	bl	1c40c <printk>
    271c:	4040      	eors	r0, r0
    271e:	f380 8811 	msr	BASEPRI, r0
    2722:	f04f 0003 	mov.w	r0, #3
    2726:	df02      	svc	2
		break;
    2728:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    272c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    2730:	f7fe bc74 	b.w	101c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2734:	487e      	ldr	r0, [pc, #504]	; (2930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a8>)
    2736:	f00c f977 	bl	ea28 <mem_acquire>
		if (tx) {
    273a:	2800      	cmp	r0, #0
    273c:	f43f a897 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
			conn->llcp_version.ack--;
    2740:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
			conn->llcp_version.tx = 1U;
    2744:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
			conn->llcp_version.ack--;
    2748:	3a01      	subs	r2, #1
    274a:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    274e:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2750:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    2754:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2756:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    275a:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    275e:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2760:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2764:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    2766:	210a      	movs	r1, #10
			pdu->llctrl.version_ind.company_id = cid;
    2768:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    276c:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    276e:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2770:	7242      	strb	r2, [r0, #9]
    2772:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    2778:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    277a:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    277c:	72c2      	strb	r2, [r0, #11]
    277e:	7302      	strb	r2, [r0, #12]
	if (
    2780:	2b00      	cmp	r3, #0
    2782:	f000 80bf 	beq.w	2904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x157c>
	    !conn->llcp_enc.pause_tx &&
    2786:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    278a:	0791      	lsls	r1, r2, #30
    278c:	f100 80ba 	bmi.w	2904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x157c>
	    !conn->llcp_phy.pause_tx &&
    2790:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2794:	07d2      	lsls	r2, r2, #31
    2796:	f100 80b5 	bmi.w	2904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x157c>
		if (conn->tx_head == conn->tx_data) {
    279a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    279e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    27a0:	bf04      	itt	eq
    27a2:	681a      	ldreq	r2, [r3, #0]
    27a4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    27a8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    27ac:	2a00      	cmp	r2, #0
    27ae:	f000 8203 	beq.w	2bb8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1830>
	tx->next = conn->tx_ctrl_last->next;
    27b2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    27b6:	681a      	ldr	r2, [r3, #0]
    27b8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    27ba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    27bc:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    27c0:	6803      	ldr	r3, [r0, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	f47f acc1 	bne.w	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
		conn->tx_data_last = tx;
    27c8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    27cc:	e4bd      	b.n	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    27ce:	4641      	mov	r1, r8
    27d0:	4620      	mov	r0, r4
    27d2:	f010 fec5 	bl	13560 <start_enc_rsp_send>
	    conn->tx_head &&
    27d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    27da:	b383      	cbz	r3, 283e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14b6>
	    !conn->llcp_enc.pause_tx &&
    27dc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    27e0:	0790      	lsls	r0, r2, #30
    27e2:	d42c      	bmi.n	283e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14b6>
	    !conn->llcp_phy.pause_tx &&
    27e4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    27e8:	07d1      	lsls	r1, r2, #31
    27ea:	d428      	bmi.n	283e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14b6>
		if (conn->tx_head == conn->tx_data) {
    27ec:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    27f0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    27f2:	bf04      	itt	eq
    27f4:	681a      	ldreq	r2, [r3, #0]
    27f6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    27fa:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    27fe:	2a00      	cmp	r2, #0
    2800:	f000 81cd 	beq.w	2b9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1816>
	tx->next = conn->tx_ctrl_last->next;
    2804:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2808:	681a      	ldr	r2, [r3, #0]
    280a:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    280c:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    280e:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2812:	6833      	ldr	r3, [r6, #0]
    2814:	2b00      	cmp	r3, #0
    2816:	f000 8088 	beq.w	292a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a2>
		conn->llcp_enc.pause_rx = 0U;
    281a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    281e:	f023 0303 	bic.w	r3, r3, #3
    2822:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2826:	f7ff b9d4 	b.w	1bd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    282a:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    282c:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    282e:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2830:	2702      	movs	r7, #2
    2832:	f7ff b9a4 	b.w	1b7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f6>
		conn->tx_data_last = tx;
    2836:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    283a:	f7ff ba81 	b.w	1d40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b8>
		if (!conn->tx_ctrl) {
    283e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2842:	2a00      	cmp	r2, #0
    2844:	d1de      	bne.n	2804 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x147c>
			tx->next = conn->tx_head;
    2846:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2848:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    284c:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2850:	e7df      	b.n	2812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148a>
				(void)ll_pdu_rx_alloc();
    2852:	f00f fdb3 	bl	123bc <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2856:	230e      	movs	r3, #14
				rx->hdr.handle = lll->handle;
    2858:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    285a:	f887 8020 	strb.w	r8, [r7, #32]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    285e:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    2860:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2864:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    2866:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    2868:	f3c3 0302 	ubfx	r3, r3, #0, #3
    286c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				upd->rx = lll->phy_rx;
    2870:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2874:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				ll_rx_put(rx->hdr.link, rx);
    287c:	4639      	mov	r1, r7
    287e:	f00f fd6f 	bl	12360 <ll_rx_put>
				ll_rx_sched();
    2882:	f00f fd77 	bl	12374 <ll_rx_sched>
    2886:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    288a:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    288e:	f3c3 0882 	ubfx	r8, r3, #2, #3
    2892:	095b      	lsrs	r3, r3, #5
    2894:	f7ff b92c 	b.w	1af0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x768>
	switch (conn->llcp_conn_param.state) {
    2898:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    289c:	f003 0307 	and.w	r3, r3, #7
    28a0:	2b05      	cmp	r3, #5
    28a2:	f200 81e1 	bhi.w	2c68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e0>
    28a6:	a201      	add	r2, pc, #4	; (adr r2, 28ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1524>)
    28a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    28ac:	00001fa1 	.word	0x00001fa1
    28b0:	00001ef3 	.word	0x00001ef3
    28b4:	00001e99 	.word	0x00001e99
    28b8:	00001027 	.word	0x00001027
    28bc:	00001027 	.word	0x00001027
    28c0:	00001027 	.word	0x00001027
		conn->tx_data_last = tx;
    28c4:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    28c8:	f7fe bee8 	b.w	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    28cc:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    28d0:	e43b      	b.n	214a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc2>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    28d2:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    28d6:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    28da:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    28de:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    28e0:	f363 0002 	bfi	r0, r3, #0, #3
    28e4:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    28e8:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    28ec:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    28f0:	f7ff b990 	b.w	1c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88c>
			tx->next = conn->tx_head->next;
    28f4:	681a      	ldr	r2, [r3, #0]
    28f6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    28f8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    28fa:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    28fc:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2900:	f7fe bf5d 	b.w	17be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x436>
		if (!conn->tx_ctrl) {
    2904:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2908:	2a00      	cmp	r2, #0
    290a:	f47f af52 	bne.w	27b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x142a>
			tx->next = conn->tx_head;
    290e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2910:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2914:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2918:	e752      	b.n	27c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1438>
			tx->next = conn->tx_head->next;
    291a:	681a      	ldr	r2, [r3, #0]
    291c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    291e:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2920:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2922:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2926:	f7ff b846 	b.w	19b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62e>
		conn->tx_data_last = tx;
    292a:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    292e:	e774      	b.n	281a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1492>
    2930:	2000145c 	.word	0x2000145c
    2934:	00022180 	.word	0x00022180
    2938:	00021c84 	.word	0x00021c84
    293c:	00021ce0 	.word	0x00021ce0
			tx->next = conn->tx_head->next;
    2940:	6803      	ldr	r3, [r0, #0]
    2942:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    2944:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    2946:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    2948:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    294c:	f7ff b8a1 	b.w	1a92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70a>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2950:	2303      	movs	r3, #3
    2952:	7133      	strb	r3, [r6, #4]
			ll_rx_put(rx->hdr.link, rx);
    2954:	4631      	mov	r1, r6
    2956:	f00f fd03 	bl	12360 <ll_rx_put>
			ll_rx_sched();
    295a:	f00f fd0b 	bl	12374 <ll_rx_sched>
			return;
    295e:	f7fe bb62 	b.w	1026 <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
    2962:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2966:	2b00      	cmp	r3, #0
    2968:	f47f ace0 	bne.w	232c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa4>
			tx->next = conn->tx_head;
    296c:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    296e:	e9c4 116c 	strd	r1, r1, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2972:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
    2976:	e4e0      	b.n	233a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfb2>
			tx->next = conn->tx_head->next;
    2978:	6813      	ldr	r3, [r2, #0]
    297a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    297c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    297e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    2980:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2984:	f7ff b9d9 	b.w	1d3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b2>
		LL_ASSERT(rx && rx->hdr.link);
    2988:	4ab9      	ldr	r2, [pc, #740]	; (2c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e8>)
    298a:	49ba      	ldr	r1, [pc, #744]	; (2c74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18ec>)
    298c:	48ba      	ldr	r0, [pc, #744]	; (2c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f0>)
    298e:	f640 43fe 	movw	r3, #3326	; 0xcfe
    2992:	f019 fd3b 	bl	1c40c <printk>
    2996:	4040      	eors	r0, r0
    2998:	f380 8811 	msr	BASEPRI, r0
    299c:	f04f 0003 	mov.w	r0, #3
    29a0:	df02      	svc	2
    29a2:	6838      	ldr	r0, [r7, #0]
    29a4:	e435      	b.n	2212 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8a>
			tx->next = conn->tx_head->next;
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    29aa:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    29ac:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    29ae:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    29b2:	f7fe be70 	b.w	1696 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30e>
			if (!conn->llcp_length.cache.tx_octets) {
    29b6:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    29ba:	2a00      	cmp	r2, #0
    29bc:	d13e      	bne.n	2a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16b4>
				conn->llcp_length.ack = conn->llcp_length.req;
    29be:	f884 7199 	strb.w	r7, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    29c2:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    29c6:	e41b      	b.n	2200 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe78>
			tx->next = conn->tx_head->next;
    29c8:	681a      	ldr	r2, [r3, #0]
    29ca:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    29cc:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    29ce:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    29d2:	f7ff b8fa 	b.w	1bca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x842>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0),
    29d6:	f44f 73a4 	mov.w	r3, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0);
    29da:	461a      	mov	r2, r3
    29dc:	e484      	b.n	22e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf60>
			tx->next = conn->tx_head->next;
    29de:	681a      	ldr	r2, [r3, #0]
    29e0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    29e4:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    29e8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    29ec:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    29f0:	f7ff bba8 	b.w	2144 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdbc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    29f4:	48a1      	ldr	r0, [pc, #644]	; (2c7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f4>)
    29f6:	f00c f817 	bl	ea28 <mem_acquire>
		if (!tx) {
    29fa:	4601      	mov	r1, r0
    29fc:	2800      	cmp	r0, #0
    29fe:	f43e af36 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a02:	7903      	ldrb	r3, [r0, #4]
    2a04:	f043 0303 	orr.w	r3, r3, #3
    2a08:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2a0a:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2a0c:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a0e:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2a10:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2a12:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a14:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2a16:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2a1a:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2a1c:	2200      	movs	r2, #0
    2a1e:	4620      	mov	r0, r4
    2a20:	f010 fb94 	bl	1314c <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2a24:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2a28:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		conn_upd_curr = NULL;
    2a2c:	2300      	movs	r3, #0
    2a2e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2a32:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    2a36:	603b      	str	r3, [r7, #0]
		return;
    2a38:	f7fe baf0 	b.w	101c <ull_conn_llcp+0x24>
				conn->llcp_length.cache.tx_octets = 0;
    2a3c:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2a3e:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    2a42:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    2a46:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2a4a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2a4e:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2a52:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2a56:	f7ff bbd3 	b.w	2200 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe78>
	    (!feature_coded_phy && !feature_phy_2m)) {
    2a5a:	05d2      	lsls	r2, r2, #23
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0),
    2a5c:	f44f 73a4 	mov.w	r3, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
    2a60:	f140 80a7 	bpl.w	2bb2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x182a>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(1)),
    2a64:	22a4      	movs	r2, #164	; 0xa4
    2a66:	e43f      	b.n	22e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf60>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a68:	4884      	ldr	r0, [pc, #528]	; (2c7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f4>)
    2a6a:	f00b ffdd 	bl	ea28 <mem_acquire>
	if (!tx) {
    2a6e:	4601      	mov	r1, r0
    2a70:	2800      	cmp	r0, #0
    2a72:	f43e aefc 	beq.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a76:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2a78:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a7a:	f043 0303 	orr.w	r3, r3, #3
    2a7e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2a80:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2a82:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    2a86:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    2a8a:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2a8e:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2a90:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    2a94:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2a96:	2310      	movs	r3, #16
	rsp->latency =
    2a98:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    2a9a:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2a9c:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2a9e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    2aa2:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    2aa4:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2aa8:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2aac:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    2ab0:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2ab4:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2ab8:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2abc:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2ac0:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2ac4:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2ac8:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2acc:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    2ad0:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2ad4:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2ad8:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2adc:	4620      	mov	r0, r4
    2ade:	4642      	mov	r2, r8
    2ae0:	f010 fb34 	bl	1314c <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2ae4:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2ae8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2aec:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	conn_upd_curr = NULL;
    2af0:	f8c7 8000 	str.w	r8, [r7]
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2af4:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2af8:	f7fe ba90 	b.w	101c <ull_conn_llcp+0x24>
				LL_ASSERT(rx && rx->hdr.link);
    2afc:	4a5c      	ldr	r2, [pc, #368]	; (2c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e8>)
    2afe:	495d      	ldr	r1, [pc, #372]	; (2c74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18ec>)
    2b00:	485d      	ldr	r0, [pc, #372]	; (2c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f0>)
    2b02:	f640 633d 	movw	r3, #3645	; 0xe3d
    2b06:	f019 fc81 	bl	1c40c <printk>
    2b0a:	4040      	eors	r0, r0
    2b0c:	f380 8811 	msr	BASEPRI, r0
    2b10:	f04f 0003 	mov.w	r0, #3
    2b14:	df02      	svc	2
    2b16:	6828      	ldr	r0, [r5, #0]
    2b18:	e5cf      	b.n	26ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1332>
		if (conn->llcp_phy.tx & BIT(1)) {
    2b1a:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2b1c:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    2b20:	f3c1 0382 	ubfx	r3, r1, #2, #3
    2b24:	d556      	bpl.n	2bd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184c>
			conn->llcp_phy.tx = BIT(1);
    2b26:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2b2a:	2102      	movs	r1, #2
    2b2c:	f361 0384 	bfi	r3, r1, #2, #3
    2b30:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    2b34:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2b38:	065f      	lsls	r7, r3, #25
    2b3a:	ea4f 1153 	mov.w	r1, r3, lsr #5
    2b3e:	d541      	bpl.n	2bc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x183c>
			conn->llcp_phy.rx = BIT(1);
    2b40:	2102      	movs	r1, #2
    2b42:	f361 1347 	bfi	r3, r1, #5, #3
    2b46:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2b4a:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2b4e:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b52:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2b56:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2b5a:	f3c1 0782 	ubfx	r7, r1, #2, #3
    2b5e:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b62:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2b66:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2b6a:	45bc      	cmp	ip, r7
    2b6c:	bf08      	it	eq
    2b6e:	2700      	moveq	r7, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b70:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2b72:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b76:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b7a:	ea4f 1151 	mov.w	r1, r1, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    2b7e:	bf08      	it	eq
    2b80:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b82:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
		conn->llcp_ack -= 2U;
    2b86:	3a02      	subs	r2, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b88:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    2b8c:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
    2b8e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b92:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    2b96:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2b9a:	f7fe ba6d 	b.w	1078 <ull_conn_llcp+0x80>
			tx->next = conn->tx_head->next;
    2b9e:	681a      	ldr	r2, [r3, #0]
    2ba0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2ba2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2ba4:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2ba8:	e633      	b.n	2812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148a>
				conn->llcp_conn_param.interval_max;
    2baa:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    2bae:	f7ff b9c4 	b.w	1f3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbb2>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0);
    2bb2:	461a      	mov	r2, r3
    2bb4:	f7ff bb98 	b.w	22e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf60>
			tx->next = conn->tx_head->next;
    2bb8:	681a      	ldr	r2, [r3, #0]
    2bba:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2bbc:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2bbe:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2bc2:	e5fd      	b.n	27c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1438>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    2bc4:	07c8      	lsls	r0, r1, #31
    2bc6:	d50f      	bpl.n	2be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1860>
			conn->llcp_phy.rx = BIT(0);
    2bc8:	2101      	movs	r1, #1
    2bca:	f361 1347 	bfi	r3, r1, #5, #3
    2bce:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2bd2:	e7ba      	b.n	2b4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17c2>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    2bd4:	07d9      	lsls	r1, r3, #31
    2bd6:	d510      	bpl.n	2bfa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1872>
			conn->llcp_phy.tx = BIT(0);
    2bd8:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2bdc:	2101      	movs	r1, #1
    2bde:	f361 0384 	bfi	r3, r1, #2, #3
    2be2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2be6:	e7a5      	b.n	2b34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17ac>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    2be8:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    2bec:	bf18      	it	ne
    2bee:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    2bf0:	f361 1347 	bfi	r3, r1, #5, #3
    2bf4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2bf8:	e7a7      	b.n	2b4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17c2>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    2bfa:	f013 0304 	ands.w	r3, r3, #4
    2bfe:	d00e      	beq.n	2c1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1896>
			conn->llcp_phy.tx = BIT(2);
    2c00:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2c04:	2104      	movs	r1, #4
    2c06:	f361 0384 	bfi	r3, r1, #2, #3
    2c0a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2c0e:	e791      	b.n	2b34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17ac>
			tx->next = conn->tx_head->next;
    2c10:	6803      	ldr	r3, [r0, #0]
    2c12:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
    2c14:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2c16:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
    2c1a:	f7ff bb8e 	b.w	233a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfb2>
			conn->llcp_phy.tx = 0U;
    2c1e:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2c22:	f363 0184 	bfi	r1, r3, #2, #3
    2c26:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
    2c2a:	e783      	b.n	2b34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17ac>
		LL_ASSERT(0);
    2c2c:	4a10      	ldr	r2, [pc, #64]	; (2c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e8>)
    2c2e:	4914      	ldr	r1, [pc, #80]	; (2c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f8>)
    2c30:	4811      	ldr	r0, [pc, #68]	; (2c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f0>)
    2c32:	f640 5326 	movw	r3, #3366	; 0xd26
    2c36:	f019 fbe9 	bl	1c40c <printk>
    2c3a:	4040      	eors	r0, r0
    2c3c:	f380 8811 	msr	BASEPRI, r0
    2c40:	f04f 0003 	mov.w	r0, #3
    2c44:	df02      	svc	2
		break;
    2c46:	f7fe ba17 	b.w	1078 <ull_conn_llcp+0x80>
		LL_ASSERT(0);
    2c4a:	4a09      	ldr	r2, [pc, #36]	; (2c70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e8>)
    2c4c:	490c      	ldr	r1, [pc, #48]	; (2c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f8>)
    2c4e:	480a      	ldr	r0, [pc, #40]	; (2c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f0>)
    2c50:	f640 5326 	movw	r3, #3366	; 0xd26
    2c54:	f019 fbda 	bl	1c40c <printk>
    2c58:	4040      	eors	r0, r0
    2c5a:	f380 8811 	msr	BASEPRI, r0
    2c5e:	f04f 0003 	mov.w	r0, #3
    2c62:	df02      	svc	2
		break;
    2c64:	f7fe be03 	b.w	186e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e6>
		LL_ASSERT(0);
    2c68:	f640 432a 	movw	r3, #3114	; 0xc2a
    2c6c:	e551      	b.n	2712 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138a>
    2c6e:	bf00      	nop
    2c70:	00022180 	.word	0x00022180
    2c74:	00022340 	.word	0x00022340
    2c78:	00021ce0 	.word	0x00021ce0
    2c7c:	2000145c 	.word	0x2000145c
    2c80:	00021c84 	.word	0x00021c84
    2c84:	00000000 	.word	0x00000000

00002c88 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c8c:	461d      	mov	r5, r3
	u16_t win_offset;
	u16_t timeout;
	u16_t interval;
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    2c8e:	6817      	ldr	r7, [r2, #0]

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    2c90:	f853 6b0c 	ldr.w	r6, [r3], #12
{
    2c94:	b097      	sub	sp, #92	; 0x5c
    2c96:	4690      	mov	r8, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    2c98:	2200      	movs	r2, #0
{
    2c9a:	460c      	mov	r4, r1
    2c9c:	4684      	mov	ip, r0
	((struct lll_adv *)ftr->param)->conn = NULL;
    2c9e:	60ba      	str	r2, [r7, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2ca0:	4618      	mov	r0, r3
    2ca2:	3132      	adds	r1, #50	; 0x32
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2ca4:	683b      	ldr	r3, [r7, #0]
{
    2ca6:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2caa:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2cac:	f105 0908 	add.w	r9, r5, #8
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2cb0:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2cb2:	f105 071c 	add.w	r7, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2cb6:	f01b fc17 	bl	1e4e8 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2cba:	f104 012e 	add.w	r1, r4, #46	; 0x2e
    2cbe:	2204      	movs	r2, #4
    2cc0:	4648      	mov	r0, r9
    2cc2:	f01b fc11 	bl	1e4e8 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2cc6:	2205      	movs	r2, #5
    2cc8:	4638      	mov	r0, r7
    2cca:	f104 013e 	add.w	r1, r4, #62	; 0x3e
    2cce:	f01b fc0b 	bl	1e4e8 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2cd2:	4638      	mov	r0, r7
    2cd4:	2105      	movs	r1, #5
    2cd6:	f00c f875 	bl	edc4 <util_ones_count_get>
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2cda:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2cde:	f895 7021 	ldrb.w	r7, [r5, #33]	; 0x21

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
	conn_interval_us = interval * 1250U;

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2ce2:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2ce6:	f360 0705 	bfi	r7, r0, #0, #6
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2cea:	4613      	mov	r3, r2
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2cec:	f3c2 0204 	ubfx	r2, r2, #0, #5
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2cf0:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2cf4:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2cf8:	8f27      	ldrh	r7, [r4, #56]	; 0x38
	lll->interval = interval;
    2cfa:	826f      	strh	r7, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2cfc:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
    2d00:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d04:	095b      	lsrs	r3, r3, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2d06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2d0a:	82aa      	strh	r2, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d0c:	f363 0184 	bfi	r1, r3, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2d10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d12:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2d16:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	lll->slave.window_widening_periodic_us =
		(((lll_conn_ppm_local_get() +
    2d1a:	f015 fb99 	bl	18450 <lll_conn_ppm_local_get>
    2d1e:	4683      	mov	fp, r0
		   lll_conn_ppm_get(conn->slave.sca)) *
    2d20:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    2d24:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2d28:	f015 fb94 	bl	18454 <lll_conn_ppm_get>
	conn_interval_us = interval * 1250U;
    2d2c:	f240 4ae2 	movw	sl, #1250	; 0x4e2
    2d30:	fb0a f707 	mul.w	r7, sl, r7
		(((lll_conn_ppm_local_get() +
    2d34:	4458      	add	r0, fp
		   lll_conn_ppm_get(conn->slave.sca)) *
    2d36:	fb07 f000 	mul.w	r0, r7, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2d3a:	f8df c324 	ldr.w	ip, [pc, #804]	; 3060 <ull_slave_setup+0x3d8>
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2d3e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
					      conn_interval_us);
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2d42:	8aaa      	ldrh	r2, [r5, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2d44:	4bbc      	ldr	r3, [pc, #752]	; (3038 <ull_slave_setup+0x3b0>)
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2d46:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2d4a:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2d4e:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2d52:	ea4f 0c57 	mov.w	ip, r7, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2d56:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2d58:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
    2d5c:	e9c5 0c0a 	strd	r0, ip, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2d60:	fb0a f101 	mul.w	r1, sl, r1
    2d64:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2d66:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    2d68:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2d6c:	f242 7c10 	movw	ip, #10000	; 0x2710
    2d70:	fb0c 7101 	mla	r1, ip, r1, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2d74:	48b1      	ldr	r0, [pc, #708]	; (303c <ull_slave_setup+0x3b4>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2d76:	443b      	add	r3, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2d78:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2d7c:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2d7e:	fbb3 f3f7 	udiv	r3, r3, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2d82:	fbb1 f1f7 	udiv	r1, r1, r7
    2d86:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2d8a:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2d8c:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2d8e:	4438      	add	r0, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2d90:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2d94:	fbb0 f0f7 	udiv	r0, r0, r7
    2d98:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2d9c:	dd02      	ble.n	2da4 <ull_slave_setup+0x11c>
			     (conn->apto_reload - (lll->latency + 6)) :
    2d9e:	1a89      	subs	r1, r1, r2
    2da0:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2da2:	b289      	uxth	r1, r1
    2da4:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2da8:	2204      	movs	r2, #4
    2daa:	4649      	mov	r1, r9
    2dac:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2db0:	f01b fb9a 	bl	1e4e8 <memcpy>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t own_addr_type = pdu_adv->rx_addr;
	u8_t own_addr[BDADDR_SIZE];
	u8_t rl_idx = ftr->rl_idx;

	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
    2db4:	2206      	movs	r2, #6
    2db6:	f104 0128 	add.w	r1, r4, #40	; 0x28
    2dba:	a814      	add	r0, sp, #80	; 0x50
	u8_t own_addr_type = pdu_adv->rx_addr;
    2dbc:	f894 b020 	ldrb.w	fp, [r4, #32]
	u8_t rl_idx = ftr->rl_idx;
    2dc0:	f898 9015 	ldrb.w	r9, [r8, #21]
	memcpy(own_addr, &pdu_adv->connect_ind.adv_addr[0], BDADDR_SIZE);
    2dc4:	f01b fb90 	bl	1e4e8 <memcpy>
#endif

	peer_addr_type = pdu_adv->tx_addr;
    2dc8:	f894 3020 	ldrb.w	r3, [r4, #32]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2dcc:	f104 0a22 	add.w	sl, r4, #34	; 0x22
	peer_addr_type = pdu_adv->tx_addr;
    2dd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2dd4:	4651      	mov	r1, sl
    2dd6:	2206      	movs	r2, #6
    2dd8:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    2dda:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2dde:	f01b fb83 	bl	1e4e8 <memcpy>

	chan_sel = pdu_adv->chan_sel;
    2de2:	f894 c020 	ldrb.w	ip, [r4, #32]
	u8_t own_addr_type = pdu_adv->rx_addr;
    2de6:	f3cb 1bc0 	ubfx	fp, fp, #7, #1

	cc = (void *)pdu_adv;
	cc->status = 0U;
    2dea:	f44f 7280 	mov.w	r2, #256	; 0x100
	chan_sel = pdu_adv->chan_sel;
    2dee:	f3cc 1340 	ubfx	r3, ip, #5, #1
	cc->role = 1U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	cc->own_addr_type = own_addr_type;
    2df2:	f884 b02f 	strb.w	fp, [r4, #47]	; 0x2f
	cc->status = 0U;
    2df6:	8422      	strh	r2, [r4, #32]
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    2df8:	a914      	add	r1, sp, #80	; 0x50
    2dfa:	2206      	movs	r2, #6
    2dfc:	f104 0030 	add.w	r0, r4, #48	; 0x30
	chan_sel = pdu_adv->chan_sel;
    2e00:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2e04:	930c      	str	r3, [sp, #48]	; 0x30
	memcpy(&cc->own_addr[0], &own_addr[0], BDADDR_SIZE);
    2e06:	f01b fb6f 	bl	1e4e8 <memcpy>

	if (rl_idx != FILTER_IDX_NONE) {
    2e0a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2e0e:	f104 0329 	add.w	r3, r4, #41	; 0x29
    2e12:	f104 0b23 	add.w	fp, r4, #35	; 0x23
    2e16:	f000 80e8 	beq.w	2fea <ull_slave_setup+0x362>
		/* TODO: store rl_idx instead if safe */
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2e1a:	465a      	mov	r2, fp
    2e1c:	4651      	mov	r1, sl
    2e1e:	4648      	mov	r0, r9
    2e20:	9311      	str	r3, [sp, #68]	; 0x44
    2e22:	f013 fc37 	bl	16694 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    2e26:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
		cc->peer_addr_type += 2;
    2e2c:	3202      	adds	r2, #2
    2e2e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2e32:	a912      	add	r1, sp, #72	; 0x48
    2e34:	4618      	mov	r0, r3
    2e36:	2206      	movs	r2, #6
    2e38:	f01b fb56 	bl	1e4e8 <memcpy>
	}

	cc->interval = lll->interval;
	cc->latency = lll->latency;
	cc->timeout = timeout;
	cc->sca = conn->slave.sca;
    2e3c:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    2e40:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    2e42:	8aaa      	ldrh	r2, [r5, #20]
    2e44:	8722      	strh	r2, [r4, #56]	; 0x38
	cc->sca = conn->slave.sca;
    2e46:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2e4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	cc->timeout = timeout;
    2e4e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    2e52:	8763      	strh	r3, [r4, #58]	; 0x3a
	cc->interval = lll->interval;
    2e54:	86e1      	strh	r1, [r4, #54]	; 0x36

	lll->handle = ll_conn_handle_get(conn);
    2e56:	4630      	mov	r0, r6
    2e58:	f010 fcc4 	bl	137e4 <ll_conn_handle_get>
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    2e5c:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2e5e:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2e60:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    2e62:	f8d8 4004 	ldr.w	r4, [r8, #4]
		ll_rx_put(link, rx);
    2e66:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e68:	f00f fa7a 	bl	12360 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    2e6c:	8a2b      	ldrh	r3, [r5, #16]
    2e6e:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2e70:	230d      	movs	r3, #13
    2e72:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    2e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    2e76:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2e78:	2b00      	cmp	r3, #0
    2e7a:	f000 80b1 	beq.w	2fe0 <ull_slave_setup+0x358>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2e7e:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    2e82:	7a2b      	ldrb	r3, [r5, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2e84:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    2e88:	7aa9      	ldrb	r1, [r5, #10]

			lll->data_chan_sel = 1;
    2e8a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2e8e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2e92:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    2e96:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40

			cs->csa = 0x01;
    2e9c:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2e9e:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    2ea0:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    2ea4:	f884 1020 	strb.w	r1, [r4, #32]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    2ea8:	4621      	mov	r1, r4
    2eaa:	f00f fa59 	bl	12360 <ll_rx_put>
	ll_rx_sched();
    2eae:	f00f fa61 	bl	12374 <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2eb2:	f8d8 a010 	ldr.w	sl, [r8, #16]
    2eb6:	4a62      	ldr	r2, [pc, #392]	; (3040 <ull_slave_setup+0x3b8>)
	conn->evt.ticks_active_to_start = 0U;
    2eb8:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2eba:	f20a 4052 	addw	r0, sl, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2ebe:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2ec0:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2ec4:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2ec6:	e9c6 4401 	strd	r4, r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2eca:	a359      	add	r3, pc, #356	; (adr r3, 3030 <ull_slave_setup+0x3a8>)
    2ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ed0:	f7fd f916 	bl	100 <__aeabi_uldivmod>
    2ed4:	f8d8 300c 	ldr.w	r3, [r8, #12]
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2ed8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2eda:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ee2:	eba3 0a0a 	sub.w	sl, r3, sl

	conn_offset_us = ftr->us_radio_end;
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    2ee6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	conn->evt.ticks_slot =
    2eea:	60f0      	str	r0, [r6, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2eec:	4622      	mov	r2, r4
    2eee:	2102      	movs	r1, #2
    2ef0:	2001      	movs	r0, #1
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    2ef2:	f240 49e2 	movw	r9, #1250	; 0x4e2
    2ef6:	fb09 9903 	mla	r9, r9, r3, r9
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2efa:	1b7f      	subs	r7, r7, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2efc:	f00b fe38 	bl	eb70 <mayfly_enable>
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2f00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2f02:	4628      	mov	r0, r5
    2f04:	f010 f876 	bl	12ff4 <ull_adv_handle_get>
    2f08:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2f0a:	4b4e      	ldr	r3, [pc, #312]	; (3044 <ull_slave_setup+0x3bc>)
    2f0c:	9500      	str	r5, [sp, #0]
    2f0e:	b2d2      	uxtb	r2, r2
    2f10:	4620      	mov	r0, r4
    2f12:	2101      	movs	r1, #1
    2f14:	f00c fe5a 	bl	fbcc <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(u32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2f18:	2801      	cmp	r0, #1
	conn_offset_us -= ftr->us_radio_rdy;
    2f1a:	44d1      	add	r9, sl
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2f1c:	d07c      	beq.n	3018 <ull_slave_setup+0x390>
	if (adv->lll.is_hdcd) {
    2f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    2f24:	07db      	lsls	r3, r3, #31
    2f26:	d46f      	bmi.n	3008 <ull_slave_setup+0x380>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f28:	4630      	mov	r0, r6
    2f2a:	f010 fc5b 	bl	137e4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f2e:	f8df b110 	ldr.w	fp, [pc, #272]	; 3040 <ull_slave_setup+0x3b8>
    2f32:	fba7 450b 	umull	r4, r5, r7, fp
    2f36:	a33e      	add	r3, pc, #248	; (adr r3, 3030 <ull_slave_setup+0x3a8>)
    2f38:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f3c:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f3e:	4629      	mov	r1, r5
    2f40:	4620      	mov	r0, r4
    2f42:	f7fd f8dd 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f46:	4a40      	ldr	r2, [pc, #256]	; (3048 <ull_slave_setup+0x3c0>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f48:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f4a:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    2f4e:	fbaa 2302 	umull	r2, r3, sl, r2
    2f52:	2107      	movs	r1, #7
    2f54:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f58:	f240 111d 	movw	r1, #285	; 0x11d
    2f5c:	f8d8 c008 	ldr.w	ip, [r8, #8]
    2f60:	9108      	str	r1, [sp, #32]
    2f62:	493a      	ldr	r1, [pc, #232]	; (304c <ull_slave_setup+0x3c4>)
    2f64:	9107      	str	r1, [sp, #28]
    2f66:	493a      	ldr	r1, [pc, #232]	; (3050 <ull_slave_setup+0x3c8>)
    2f68:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f6a:	1aa0      	subs	r0, r4, r2
    2f6c:	eb65 0103 	sbc.w	r1, r5, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f70:	68f3      	ldr	r3, [r6, #12]
    2f72:	9304      	str	r3, [sp, #16]
    2f74:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2f7a:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f7c:	f1ac 0531 	sub.w	r5, ip, #49	; 0x31
    2f80:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f82:	f7fd f8bd 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2f86:	a32a      	add	r3, pc, #168	; (adr r3, 3030 <ull_slave_setup+0x3a8>)
    2f88:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f8c:	4606      	mov	r6, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2f8e:	fba9 010b 	umull	r0, r1, r9, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f92:	e9cd a601 	strd	sl, r6, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2f96:	f7fd f8b3 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f9a:	3703      	adds	r7, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fa0:	b2ff      	uxtb	r7, r7
    2fa2:	462b      	mov	r3, r5
    2fa4:	9000      	str	r0, [sp, #0]
    2fa6:	463a      	mov	r2, r7
    2fa8:	4620      	mov	r0, r4
    2faa:	2101      	movs	r1, #1
    2fac:	f00c fd68 	bl	fa80 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2fb0:	f030 0302 	bics.w	r3, r0, #2
    2fb4:	d00c      	beq.n	2fd0 <ull_slave_setup+0x348>
    2fb6:	4a27      	ldr	r2, [pc, #156]	; (3054 <ull_slave_setup+0x3cc>)
    2fb8:	4927      	ldr	r1, [pc, #156]	; (3058 <ull_slave_setup+0x3d0>)
    2fba:	4828      	ldr	r0, [pc, #160]	; (305c <ull_slave_setup+0x3d4>)
    2fbc:	f44f 738f 	mov.w	r3, #286	; 0x11e
    2fc0:	f019 fa24 	bl	1c40c <printk>
    2fc4:	4040      	eors	r0, r0
    2fc6:	f380 8811 	msr	BASEPRI, r0
    2fca:	f04f 0003 	mov.w	r0, #3
    2fce:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2fd0:	2201      	movs	r2, #1
    2fd2:	4610      	mov	r0, r2
    2fd4:	2102      	movs	r1, #2
    2fd6:	f00b fdcb 	bl	eb70 <mayfly_enable>
}
    2fda:	b017      	add	sp, #92	; 0x5c
    2fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cs->csa = 0x00;
    2fe0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2fe4:	f884 3020 	strb.w	r3, [r4, #32]
    2fe8:	e75e      	b.n	2ea8 <ull_slave_setup+0x220>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2fea:	4618      	mov	r0, r3
    2fec:	2206      	movs	r2, #6
    2fee:	2100      	movs	r1, #0
    2ff0:	f01b faa5 	bl	1e53e <memset>
		cc->peer_addr_type = peer_addr_type;
    2ff4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    2ff8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    2ffc:	a912      	add	r1, sp, #72	; 0x48
    2ffe:	4658      	mov	r0, fp
    3000:	2206      	movs	r2, #6
    3002:	f01b fa71 	bl	1e4e8 <memcpy>
    3006:	e719      	b.n	2e3c <ull_slave_setup+0x1b4>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3008:	2300      	movs	r3, #0
    300a:	2201      	movs	r2, #1
    300c:	9300      	str	r3, [sp, #0]
    300e:	4618      	mov	r0, r3
    3010:	4611      	mov	r1, r2
    3012:	f00c fddb 	bl	fbcc <ticker_stop>
    3016:	e787      	b.n	2f28 <ull_slave_setup+0x2a0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3018:	f00f fa68 	bl	124ec <ull_disable_mark_get>
    301c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    301e:	4283      	cmp	r3, r0
    3020:	f43f af7d 	beq.w	2f1e <ull_slave_setup+0x296>
    3024:	f013 f954 	bl	162d0 <ticker_op_stop_adv_cb.part.0>
    3028:	e779      	b.n	2f1e <ull_slave_setup+0x296>
    302a:	bf00      	nop
    302c:	f3af 8000 	nop.w
    3030:	1afd498d 	.word	0x1afd498d
    3034:	00000007 	.word	0x00000007
    3038:	01c9c37f 	.word	0x01c9c37f
    303c:	026259ff 	.word	0x026259ff
    3040:	3b9aca00 	.word	0x3b9aca00
    3044:	000162fd 	.word	0x000162fd
    3048:	1afd498d 	.word	0x1afd498d
    304c:	000162a1 	.word	0x000162a1
    3050:	00016319 	.word	0x00016319
    3054:	000223f4 	.word	0x000223f4
    3058:	00022260 	.word	0x00022260
    305c:	00021ce0 	.word	0x00021ce0
    3060:	431bde83 	.word	0x431bde83
    3064:	00000000 	.word	0x00000000

00003068 <ull_slave_done>:
{
    3068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	preamble_to_addr_us =
    306c:	e9d0 c70c 	ldrd	ip, r7, [r0, #48]	; 0x30
	start_to_address_actual_us =
    3070:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				       window_widening_event_us +
    3074:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    3078:	3430      	adds	r4, #48	; 0x30
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    307a:	45a0      	cmp	r8, r4
{
    307c:	460e      	mov	r6, r1
    307e:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    3080:	d818      	bhi.n	30b4 <ull_slave_done+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    3082:	4f1b      	ldr	r7, [pc, #108]	; (30f0 <ull_slave_done+0x88>)
    3084:	a318      	add	r3, pc, #96	; (adr r3, 30e8 <ull_slave_done+0x80>)
    3086:	e9d3 2300 	ldrd	r2, r3, [r3]
    308a:	fbac 0107 	umull	r0, r1, ip, r7
    308e:	f7fd f837 	bl	100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    3092:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    3096:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    309a:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    309c:	a312      	add	r3, pc, #72	; (adr r3, 30e8 <ull_slave_done+0x80>)
    309e:	e9d3 2300 	ldrd	r2, r3, [r3]
    30a2:	fba4 0107 	umull	r0, r1, r4, r7
    30a6:	f7fd f82b 	bl	100 <__aeabi_uldivmod>
    30aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    30ae:	6028      	str	r0, [r5, #0]
}
    30b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    30b4:	4c0e      	ldr	r4, [pc, #56]	; (30f0 <ull_slave_done+0x88>)
    30b6:	a30c      	add	r3, pc, #48	; (adr r3, 30e8 <ull_slave_done+0x80>)
    30b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    30bc:	fba8 0104 	umull	r0, r1, r8, r4
    30c0:	f7fd f81e 	bl	100 <__aeabi_uldivmod>
    30c4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    30c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    30cc:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    30ce:	fba0 0104 	umull	r0, r1, r0, r4
    30d2:	a305      	add	r3, pc, #20	; (adr r3, 30e8 <ull_slave_done+0x80>)
    30d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    30d8:	f7fd f812 	bl	100 <__aeabi_uldivmod>
    30dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    30e0:	6028      	str	r0, [r5, #0]
}
    30e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30e6:	bf00      	nop
    30e8:	1afd498d 	.word	0x1afd498d
    30ec:	00000007 	.word	0x00000007
    30f0:	3b9aca00 	.word	0x3b9aca00
    30f4:	00000000 	.word	0x00000000

000030f8 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    30f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30fc:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    30fe:	f01d f9e2 	bl	204c6 <nrfx_nvmc_flash_page_size_get>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    3102:	7b25      	ldrb	r5, [r4, #12]
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3104:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
    3106:	b115      	cbz	r5, 310e <erase_op+0x16>
		ticks_begin = ticker_ticks_now_get();
    3108:	f00c fda2 	bl	fc50 <ticker_ticks_now_get>
    310c:	4605      	mov	r5, r0
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    310e:	f20f 0968 	addw	r9, pc, #104	; 0x68
    3112:	e9d9 8900 	ldrd	r8, r9, [r9]
    3116:	f8df b068 	ldr.w	fp, [pc, #104]	; 3180 <erase_op+0x88>
	u32_t ticks_begin = 0U;
    311a:	f04f 0a00 	mov.w	sl, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    311e:	6860      	ldr	r0, [r4, #4]
    3120:	f017 fc18 	bl	1a954 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    3124:	68a3      	ldr	r3, [r4, #8]
    3126:	1b9b      	subs	r3, r3, r6
    3128:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    312a:	6863      	ldr	r3, [r4, #4]
    312c:	4433      	add	r3, r6
    312e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    3130:	7b23      	ldrb	r3, [r4, #12]
		i++;
    3132:	f10a 0a01 	add.w	sl, sl, #1
		if (e_ctx->enable_time_limit) {
    3136:	b94b      	cbnz	r3, 314c <erase_op+0x54>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    3138:	68a3      	ldr	r3, [r4, #8]
    313a:	2b00      	cmp	r3, #0
    313c:	d1ef      	bne.n	311e <erase_op+0x26>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    313e:	68a0      	ldr	r0, [r4, #8]
    3140:	3800      	subs	r0, #0
    3142:	bf18      	it	ne
    3144:	2001      	movne	r0, #1
}
    3146:	4240      	negs	r0, r0
    3148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    314c:	f00c fd80 	bl	fc50 <ticker_ticks_now_get>
    3150:	4629      	mov	r1, r5
    3152:	f00c fd7f 	bl	fc54 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    3156:	fbb0 f7fa 	udiv	r7, r0, sl
    315a:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    315c:	6960      	ldr	r0, [r4, #20]
    315e:	4642      	mov	r2, r8
    3160:	464b      	mov	r3, r9
    3162:	fba0 010b 	umull	r0, r1, r0, fp
    3166:	f7fc ffcb 	bl	100 <__aeabi_uldivmod>
    316a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    316e:	4287      	cmp	r7, r0
    3170:	d9e2      	bls.n	3138 <erase_op+0x40>
    3172:	e7e4      	b.n	313e <erase_op+0x46>
    3174:	f3af 8000 	nop.w
    3178:	1afd498d 	.word	0x1afd498d
    317c:	00000007 	.word	0x00000007
    3180:	3b9aca00 	.word	0x3b9aca00
    3184:	00000000 	.word	0x00000000

00003188 <work_in_time_slice>:
{
    3188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    318c:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    318e:	f8d0 9004 	ldr.w	r9, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    3192:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 3264 <work_in_time_slice+0xdc>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    3196:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    319a:	4606      	mov	r6, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    319c:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    31a0:	f00f f954 	bl	1244c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    31a4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    31a8:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    31ac:	930a      	str	r3, [sp, #40]	; 0x28
    31ae:	f00c fd4f 	bl	fc50 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    31b2:	f8d9 4010 	ldr.w	r4, [r9, #16]
    31b6:	fba4 450b 	umull	r4, r5, r4, fp
    31ba:	a325      	add	r3, pc, #148	; (adr r3, 3250 <work_in_time_slice+0xc8>)
    31bc:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    31c0:	2700      	movs	r7, #0
    31c2:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    31c4:	4629      	mov	r1, r5
    31c6:	4620      	mov	r0, r4
    31c8:	f7fc ff9a 	bl	100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    31cc:	e9cd 7707 	strd	r7, r7, [sp, #28]
    31d0:	4b21      	ldr	r3, [pc, #132]	; (3258 <work_in_time_slice+0xd0>)
    31d2:	9305      	str	r3, [sp, #20]
    31d4:	9606      	str	r6, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    31d6:	900b      	str	r0, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(context->slot),
    31d8:	f8d9 0014 	ldr.w	r0, [r9, #20]
    31dc:	a31c      	add	r3, pc, #112	; (adr r3, 3250 <work_in_time_slice+0xc8>)
    31de:	e9d3 2300 	ldrd	r2, r3, [r3]
    31e2:	fba0 010b 	umull	r0, r1, r0, fp
    31e6:	f7fc ff8b 	bl	100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    31ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    31ec:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
    31f0:	4b1a      	ldr	r3, [pc, #104]	; (325c <work_in_time_slice+0xd4>)
	err = ticker_start(instance_index,
    31f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    31f6:	fba9 bc03 	umull	fp, ip, r9, r3
    31fa:	2307      	movs	r3, #7
    31fc:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    3200:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    3204:	ebb4 000b 	subs.w	r0, r4, fp
    3208:	eb65 010c 	sbc.w	r1, r5, ip
    320c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3210:	2300      	movs	r3, #0
    3212:	f7fc ff75 	bl	100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3216:	4643      	mov	r3, r8
    3218:	e9cd 9001 	strd	r9, r0, [sp, #4]
    321c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    321e:	9700      	str	r7, [sp, #0]
    3220:	2103      	movs	r1, #3
    3222:	4650      	mov	r0, sl
    3224:	f00c fc2c 	bl	fa80 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    3228:	f030 0302 	bics.w	r3, r0, #2
    322c:	d109      	bne.n	3242 <work_in_time_slice+0xba>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    322e:	480c      	ldr	r0, [pc, #48]	; (3260 <work_in_time_slice+0xd8>)
    3230:	f645 11b3 	movw	r1, #22963	; 0x59b3
    3234:	f018 fae2 	bl	1b7fc <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    3238:	b930      	cbnz	r0, 3248 <work_in_time_slice+0xc0>
		result = p_flash_op_desc->result;
    323a:	68b0      	ldr	r0, [r6, #8]
}
    323c:	b00f      	add	sp, #60	; 0x3c
    323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = -ECANCELED;
    3242:	f06f 0047 	mvn.w	r0, #71	; 0x47
    3246:	e7f9      	b.n	323c <work_in_time_slice+0xb4>
		result = -ETIMEDOUT;
    3248:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    324c:	e7f6      	b.n	323c <work_in_time_slice+0xb4>
    324e:	bf00      	nop
    3250:	1afd498d 	.word	0x1afd498d
    3254:	00000007 	.word	0x00000007
    3258:	0001a021 	.word	0x0001a021
    325c:	1afd498d 	.word	0x1afd498d
    3260:	20001ac8 	.word	0x20001ac8
    3264:	3b9aca00 	.word	0x3b9aca00

00003268 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    3268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    326c:	7b05      	ldrb	r5, [r0, #12]
{
    326e:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    3270:	b115      	cbz	r5, 3278 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    3272:	f00c fced 	bl	fc50 <ticker_ticks_now_get>
    3276:	4605      	mov	r5, r0
		if (w_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    3278:	f20f 0980 	addw	r9, pc, #128	; 0x80
    327c:	e9d9 8900 	ldrd	r8, r9, [r9]
    3280:	f8df a080 	ldr.w	sl, [pc, #128]	; 3304 <write_op+0x9c>
	u32_t ticks_begin = 0U;
    3284:	2601      	movs	r6, #1
	while (w_ctx->len >= sizeof(u32_t)) {
    3286:	68a3      	ldr	r3, [r4, #8]
    3288:	2b03      	cmp	r3, #3
    328a:	d807      	bhi.n	329c <write_op+0x34>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    328c:	4a1a      	ldr	r2, [pc, #104]	; (32f8 <write_op+0x90>)
    328e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3292:	07db      	lsls	r3, r3, #31
    3294:	d5fb      	bpl.n	328e <write_op+0x26>
		shift_write_context(w_ctx->len, w_ctx);
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	nvmc_wait_ready();

	return FLASH_OP_DONE;
    3296:	2000      	movs	r0, #0
}
    3298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    329c:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    329e:	6860      	ldr	r0, [r4, #4]
    32a0:	6819      	ldr	r1, [r3, #0]
    32a2:	f017 fb77 	bl	1a994 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
    32a6:	6863      	ldr	r3, [r4, #4]
    32a8:	3304      	adds	r3, #4
    32aa:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    32ac:	6823      	ldr	r3, [r4, #0]
    32ae:	3304      	adds	r3, #4
    32b0:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    32b2:	68a3      	ldr	r3, [r4, #8]
    32b4:	3b04      	subs	r3, #4
    32b6:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    32b8:	7b23      	ldrb	r3, [r4, #12]
		i++;
    32ba:	3601      	adds	r6, #1
		if (w_ctx->enable_time_limit) {
    32bc:	2b00      	cmp	r3, #0
    32be:	d0e2      	beq.n	3286 <write_op+0x1e>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    32c0:	f00c fcc6 	bl	fc50 <ticker_ticks_now_get>
    32c4:	4629      	mov	r1, r5
    32c6:	f00c fcc5 	bl	fc54 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    32ca:	fbb0 f7f6 	udiv	r7, r0, r6
    32ce:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    32d0:	6960      	ldr	r0, [r4, #20]
    32d2:	4642      	mov	r2, r8
    32d4:	464b      	mov	r3, r9
    32d6:	fba0 010a 	umull	r0, r1, r0, sl
    32da:	f7fc ff11 	bl	100 <__aeabi_uldivmod>
    32de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    32e2:	4287      	cmp	r7, r0
    32e4:	d9cf      	bls.n	3286 <write_op+0x1e>
    32e6:	4a04      	ldr	r2, [pc, #16]	; (32f8 <write_op+0x90>)
    32e8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    32ec:	07d9      	lsls	r1, r3, #31
    32ee:	d5fb      	bpl.n	32e8 <write_op+0x80>
				return FLASH_OP_ONGOING;
    32f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32f4:	e7d0      	b.n	3298 <write_op+0x30>
    32f6:	bf00      	nop
    32f8:	4001e000 	.word	0x4001e000
    32fc:	1afd498d 	.word	0x1afd498d
    3300:	00000007 	.word	0x00000007
    3304:	3b9aca00 	.word	0x3b9aca00

00003308 <vnd_ccc_cfg_changed>:
static u8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    3308:	1e8b      	subs	r3, r1, #2
    330a:	4259      	negs	r1, r3
    330c:	4159      	adcs	r1, r3
    330e:	4b01      	ldr	r3, [pc, #4]	; (3314 <vnd_ccc_cfg_changed+0xc>)
    3310:	7019      	strb	r1, [r3, #0]
}
    3312:	4770      	bx	lr
    3314:	20001ceb 	.word	0x20001ceb

00003318 <indicate_cb>:

static void indicate_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			u8_t err)
{
    3318:	b508      	push	{r3, lr}
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    331a:	4906      	ldr	r1, [pc, #24]	; (3334 <indicate_cb+0x1c>)
    331c:	4b06      	ldr	r3, [pc, #24]	; (3338 <indicate_cb+0x20>)
    331e:	4807      	ldr	r0, [pc, #28]	; (333c <indicate_cb+0x24>)
    3320:	2a00      	cmp	r2, #0
    3322:	bf08      	it	eq
    3324:	4619      	moveq	r1, r3
    3326:	f019 f871 	bl	1c40c <printk>
	indicating = 0U;
    332a:	4b05      	ldr	r3, [pc, #20]	; (3340 <indicate_cb+0x28>)
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]
}
    3330:	bd08      	pop	{r3, pc}
    3332:	bf00      	nop
    3334:	00022bbc 	.word	0x00022bbc
    3338:	00022bc1 	.word	0x00022bc1
    333c:	00022bc9 	.word	0x00022bc9
    3340:	20001cea 	.word	0x20001cea

00003344 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    3344:	4801      	ldr	r0, [pc, #4]	; (334c <disconnected+0x8>)
    3346:	f019 b861 	b.w	1c40c <printk>
    334a:	bf00      	nop
    334c:	00022bd8 	.word	0x00022bd8

00003350 <connected>:
	if (err) {
    3350:	b111      	cbz	r1, 3358 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    3352:	4803      	ldr	r0, [pc, #12]	; (3360 <connected+0x10>)
    3354:	f019 b85a 	b.w	1c40c <printk>
		printk("Connected\n");
    3358:	4802      	ldr	r0, [pc, #8]	; (3364 <connected+0x14>)
    335a:	f019 b857 	b.w	1c40c <printk>
    335e:	bf00      	nop
    3360:	00022bf6 	.word	0x00022bf6
    3364:	00022c16 	.word	0x00022c16

00003368 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3368:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    336a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    336c:	b08a      	sub	sp, #40	; 0x28
    336e:	4604      	mov	r4, r0
    3370:	460e      	mov	r6, r1
    3372:	ad07      	add	r5, sp, #28
    3374:	2b03      	cmp	r3, #3
    3376:	d820      	bhi.n	33ba <bt_addr_le_to_str.constprop.0+0x52>
    3378:	e8df f003 	tbb	[pc, r3]
    337c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3380:	4911      	ldr	r1, [pc, #68]	; (33c8 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3382:	4628      	mov	r0, r5
    3384:	f01b f853 	bl	1e42e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3388:	7863      	ldrb	r3, [r4, #1]
    338a:	9304      	str	r3, [sp, #16]
    338c:	78a3      	ldrb	r3, [r4, #2]
    338e:	9303      	str	r3, [sp, #12]
    3390:	78e3      	ldrb	r3, [r4, #3]
    3392:	9302      	str	r3, [sp, #8]
    3394:	7923      	ldrb	r3, [r4, #4]
    3396:	9301      	str	r3, [sp, #4]
    3398:	7963      	ldrb	r3, [r4, #5]
    339a:	9300      	str	r3, [sp, #0]
    339c:	4a0b      	ldr	r2, [pc, #44]	; (33cc <bt_addr_le_to_str.constprop.0+0x64>)
    339e:	79a3      	ldrb	r3, [r4, #6]
    33a0:	9505      	str	r5, [sp, #20]
    33a2:	211e      	movs	r1, #30
    33a4:	4630      	mov	r0, r6
    33a6:	f019 f83e 	bl	1c426 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    33aa:	b00a      	add	sp, #40	; 0x28
    33ac:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    33ae:	4908      	ldr	r1, [pc, #32]	; (33d0 <bt_addr_le_to_str.constprop.0+0x68>)
    33b0:	e7e7      	b.n	3382 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    33b2:	4908      	ldr	r1, [pc, #32]	; (33d4 <bt_addr_le_to_str.constprop.0+0x6c>)
    33b4:	e7e5      	b.n	3382 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    33b6:	4908      	ldr	r1, [pc, #32]	; (33d8 <bt_addr_le_to_str.constprop.0+0x70>)
    33b8:	e7e3      	b.n	3382 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    33ba:	4a08      	ldr	r2, [pc, #32]	; (33dc <bt_addr_le_to_str.constprop.0+0x74>)
    33bc:	210a      	movs	r1, #10
    33be:	4628      	mov	r0, r5
    33c0:	f019 f831 	bl	1c426 <snprintk>
		break;
    33c4:	e7e0      	b.n	3388 <bt_addr_le_to_str.constprop.0+0x20>
    33c6:	bf00      	nop
    33c8:	00022c21 	.word	0x00022c21
    33cc:	00022c43 	.word	0x00022c43
    33d0:	00022c28 	.word	0x00022c28
    33d4:	00022c2f 	.word	0x00022c2f
    33d8:	00022c39 	.word	0x00022c39
    33dc:	00024a33 	.word	0x00024a33

000033e0 <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
    33e0:	b510      	push	{r4, lr}
    33e2:	b088      	sub	sp, #32
    33e4:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    33e6:	f01b fc03 	bl	1ebf0 <bt_conn_get_dst>
    33ea:	4669      	mov	r1, sp
    33ec:	f7ff ffbc 	bl	3368 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
    33f0:	4803      	ldr	r0, [pc, #12]	; (3400 <auth_passkey_display+0x20>)
    33f2:	4622      	mov	r2, r4
    33f4:	4669      	mov	r1, sp
    33f6:	f019 f809 	bl	1c40c <printk>
}
    33fa:	b008      	add	sp, #32
    33fc:	bd10      	pop	{r4, pc}
    33fe:	bf00      	nop
    3400:	00022c66 	.word	0x00022c66

00003404 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
    3404:	b500      	push	{lr}
    3406:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3408:	f01b fbf2 	bl	1ebf0 <bt_conn_get_dst>
    340c:	4669      	mov	r1, sp
    340e:	f7ff ffab 	bl	3368 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
    3412:	4803      	ldr	r0, [pc, #12]	; (3420 <auth_cancel+0x1c>)
    3414:	4669      	mov	r1, sp
    3416:	f018 fff9 	bl	1c40c <printk>
}
    341a:	b009      	add	sp, #36	; 0x24
    341c:	f85d fb04 	ldr.w	pc, [sp], #4
    3420:	00022c7c 	.word	0x00022c7c

00003424 <main>:

	bt_gatt_hrs_notify(heartrate);
}

void main(void)
{
    3424:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	int err;

	err = bt_enable(NULL);
    3428:	2000      	movs	r0, #0
    342a:	f005 fc55 	bl	8cd8 <bt_enable>
	if (err) {
    342e:	4604      	mov	r4, r0
    3430:	b130      	cbz	r0, 3440 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    3432:	4601      	mov	r1, r0
    3434:	482e      	ldr	r0, [pc, #184]	; (34f0 <main+0xcc>)
    3436:	f018 ffe9 	bl	1c40c <printk>
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
				indicating = 1U;
			}
		}
	}
}
    343a:	b004      	add	sp, #16
    343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("Bluetooth initialized\n");
    3440:	482c      	ldr	r0, [pc, #176]	; (34f4 <main+0xd0>)
    3442:	f018 ffe3 	bl	1c40c <printk>
	cts_init();
    3446:	f000 f887 	bl	3558 <cts_init>
		settings_load();
    344a:	f01a fd6b 	bl	1df24 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    344e:	4b2a      	ldr	r3, [pc, #168]	; (34f8 <main+0xd4>)
    3450:	492a      	ldr	r1, [pc, #168]	; (34fc <main+0xd8>)
    3452:	6818      	ldr	r0, [r3, #0]
    3454:	889b      	ldrh	r3, [r3, #4]
    3456:	9002      	str	r0, [sp, #8]
    3458:	f8ad 300c 	strh.w	r3, [sp, #12]
    345c:	9400      	str	r4, [sp, #0]
    345e:	4623      	mov	r3, r4
    3460:	2203      	movs	r2, #3
    3462:	a802      	add	r0, sp, #8
    3464:	f01b fb09 	bl	1ea7a <bt_le_adv_start>
	if (err) {
    3468:	4601      	mov	r1, r0
    346a:	2800      	cmp	r0, #0
    346c:	d03c      	beq.n	34e8 <main+0xc4>
		printk("Advertising failed to start (err %d)\n", err);
    346e:	4824      	ldr	r0, [pc, #144]	; (3500 <main+0xdc>)
    3470:	f018 ffcc 	bl	1c40c <printk>
	bt_conn_cb_register(&conn_callbacks);
    3474:	4823      	ldr	r0, [pc, #140]	; (3504 <main+0xe0>)
	heartrate++;
    3476:	4c24      	ldr	r4, [pc, #144]	; (3508 <main+0xe4>)
		if (simulate_vnd) {
    3478:	4d24      	ldr	r5, [pc, #144]	; (350c <main+0xe8>)
	bt_conn_cb_register(&conn_callbacks);
    347a:	f006 fbf5 	bl	9c68 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    347e:	4824      	ldr	r0, [pc, #144]	; (3510 <main+0xec>)
    3480:	f006 ffea 	bl	a458 <bt_conn_auth_cb_register>
    3484:	4626      	mov	r6, r4
	return z_impl_k_sleep(ms);
    3486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    348a:	f018 f963 	bl	1b754 <z_impl_k_sleep>
		cts_notify();
    348e:	f000 f881 	bl	3594 <cts_notify>
	heartrate++;
    3492:	7823      	ldrb	r3, [r4, #0]
    3494:	3301      	adds	r3, #1
    3496:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
    3498:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
    349a:	bf08      	it	eq
    349c:	235a      	moveq	r3, #90	; 0x5a
    349e:	7023      	strb	r3, [r4, #0]
	bt_gatt_hrs_notify(heartrate);
    34a0:	7830      	ldrb	r0, [r6, #0]
    34a2:	f001 fa8b 	bl	49bc <bt_gatt_hrs_notify>
	u8_t battery_level = bt_gatt_bas_get_battery_level();
    34a6:	f001 fa2b 	bl	4900 <bt_gatt_bas_get_battery_level>
	battery_level--;
    34aa:	3801      	subs	r0, #1
		battery_level = 100U;
    34ac:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_gatt_bas_set_battery_level(battery_level);
    34b0:	bf08      	it	eq
    34b2:	2064      	moveq	r0, #100	; 0x64
    34b4:	f001 fa2a 	bl	490c <bt_gatt_bas_set_battery_level>
		if (simulate_vnd) {
    34b8:	782b      	ldrb	r3, [r5, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d0e3      	beq.n	3486 <main+0x62>
			if (indicating) {
    34be:	4f15      	ldr	r7, [pc, #84]	; (3514 <main+0xf0>)
    34c0:	7838      	ldrb	r0, [r7, #0]
    34c2:	2800      	cmp	r0, #0
    34c4:	d1df      	bne.n	3486 <main+0x62>
			ind_params.attr = &vnd_svc.attrs[2];
    34c6:	4914      	ldr	r1, [pc, #80]	; (3518 <main+0xf4>)
    34c8:	4b14      	ldr	r3, [pc, #80]	; (351c <main+0xf8>)
    34ca:	604b      	str	r3, [r1, #4]
			ind_params.func = indicate_cb;
    34cc:	4b14      	ldr	r3, [pc, #80]	; (3520 <main+0xfc>)
			ind_params.len = sizeof(indicating);
    34ce:	f04f 0801 	mov.w	r8, #1
			ind_params.data = &indicating;
    34d2:	e9c1 3702 	strd	r3, r7, [r1, #8]
			ind_params.len = sizeof(indicating);
    34d6:	f8a1 8010 	strh.w	r8, [r1, #16]
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    34da:	f009 f8fd 	bl	c6d8 <bt_gatt_indicate>
    34de:	2800      	cmp	r0, #0
    34e0:	d1d1      	bne.n	3486 <main+0x62>
				indicating = 1U;
    34e2:	f887 8000 	strb.w	r8, [r7]
    34e6:	e7ce      	b.n	3486 <main+0x62>
	printk("Advertising successfully started\n");
    34e8:	480e      	ldr	r0, [pc, #56]	; (3524 <main+0x100>)
    34ea:	f018 ff8f 	bl	1c40c <printk>
    34ee:	e7c1      	b.n	3474 <main+0x50>
    34f0:	00022c93 	.word	0x00022c93
    34f4:	00022cb3 	.word	0x00022cb3
    34f8:	000212ea 	.word	0x000212ea
    34fc:	00021338 	.word	0x00021338
    3500:	00022cca 	.word	0x00022cca
    3504:	20005a48 	.word	0x20005a48
    3508:	20005fe5 	.word	0x20005fe5
    350c:	20001ceb 	.word	0x20001ceb
    3510:	20005a28 	.word	0x20005a28
    3514:	20001cea 	.word	0x20001cea
    3518:	20000018 	.word	0x20000018
    351c:	00021378 	.word	0x00021378
    3520:	00003319 	.word	0x00003319
    3524:	00022cf0 	.word	0x00022cf0

00003528 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, u16_t len, u16_t offset,
			u8_t flags)
{
    3528:	b538      	push	{r3, r4, r5, lr}
    352a:	460c      	mov	r4, r1
    352c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	u8_t *value = attr->user_data;
    3530:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
    3532:	461c      	mov	r4, r3
    3534:	18c3      	adds	r3, r0, r3
    3536:	2b0a      	cmp	r3, #10
{
    3538:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
    353a:	dc08      	bgt.n	354e <write_ct+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
    353c:	4622      	mov	r2, r4
    353e:	4428      	add	r0, r5
    3540:	f01a ffd2 	bl	1e4e8 <memcpy>
	ct_update = 1U;
    3544:	4b03      	ldr	r3, [pc, #12]	; (3554 <write_ct+0x2c>)
    3546:	2201      	movs	r2, #1
    3548:	701a      	strb	r2, [r3, #0]

	return len;
}
    354a:	4620      	mov	r0, r4
    354c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    354e:	f06f 0406 	mvn.w	r4, #6
    3552:	e7fa      	b.n	354a <write_ct+0x22>
    3554:	20001cf6 	.word	0x20001cf6

00003558 <cts_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void cts_init(void)
{
    3558:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
    355a:	4c0d      	ldr	r4, [pc, #52]	; (3590 <cts_init+0x38>)
	year = sys_cpu_to_le16(2015);
    355c:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
    3560:	2202      	movs	r2, #2
    3562:	f10d 0106 	add.w	r1, sp, #6
    3566:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
    3568:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
    356c:	f01a ffbc 	bl	1e4e8 <memcpy>
	buf[2] = 5U; /* months starting from 1 */
    3570:	2305      	movs	r3, #5
    3572:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
    3574:	231e      	movs	r3, #30
    3576:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
    3578:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
    357a:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
    357c:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
    357e:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
    3580:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
    3582:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
    3584:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
    3586:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
    3588:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
    358a:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);
}
    358c:	b002      	add	sp, #8
    358e:	bd10      	pop	{r4, pc}
    3590:	20001cec 	.word	0x20001cec

00003594 <cts_notify>:

void cts_notify(void)
{	/* Current Time Service updates only when time is changed */
    3594:	b510      	push	{r4, lr}
	if (!ct_update) {
    3596:	4b0c      	ldr	r3, [pc, #48]	; (35c8 <cts_notify+0x34>)
    3598:	781a      	ldrb	r2, [r3, #0]
{	/* Current Time Service updates only when time is changed */
    359a:	b086      	sub	sp, #24
	if (!ct_update) {
    359c:	b18a      	cbz	r2, 35c2 <cts_notify+0x2e>
		return;
	}

	ct_update = 0U;
    359e:	2400      	movs	r4, #0
				 const struct bt_gatt_attr *attr,
				 const void *data, u16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    35a0:	4621      	mov	r1, r4
    35a2:	2218      	movs	r2, #24
    35a4:	4668      	mov	r0, sp
    35a6:	701c      	strb	r4, [r3, #0]
    35a8:	f01a ffc9 	bl	1e53e <memset>

	params.attr = attr;
    35ac:	4b07      	ldr	r3, [pc, #28]	; (35cc <cts_notify+0x38>)
    35ae:	9301      	str	r3, [sp, #4]
	params.data = data;
    35b0:	4b07      	ldr	r3, [pc, #28]	; (35d0 <cts_notify+0x3c>)
    35b2:	9302      	str	r3, [sp, #8]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    35b4:	4669      	mov	r1, sp
	params.len = len;
    35b6:	230a      	movs	r3, #10
	return bt_gatt_notify_cb(conn, &params);
    35b8:	4620      	mov	r0, r4
	params.len = len;
    35ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    35be:	f009 f80f 	bl	c5e0 <bt_gatt_notify_cb>
	bt_gatt_notify(NULL, &cts_cvs.attrs[1], &ct, sizeof(ct));
}
    35c2:	b006      	add	sp, #24
    35c4:	bd10      	pop	{r4, pc}
    35c6:	bf00      	nop
    35c8:	20001cf6 	.word	0x20001cf6
    35cc:	00021468 	.word	0x00021468
    35d0:	20001cec 	.word	0x20001cec

000035d4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    35d4:	b530      	push	{r4, r5, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    35d6:	4c0a      	ldr	r4, [pc, #40]	; (3600 <crc8_ccitt+0x2c>)
    35d8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    35da:	4291      	cmp	r1, r2
    35dc:	d100      	bne.n	35e0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    35de:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    35e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    35e4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    35e6:	0903      	lsrs	r3, r0, #4
    35e8:	5ce3      	ldrb	r3, [r4, r3]
    35ea:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    35ee:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    35f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    35f4:	5ce0      	ldrb	r0, [r4, r3]
    35f6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    35fa:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    35fc:	e7ed      	b.n	35da <crc8_ccitt+0x6>
    35fe:	bf00      	nop
    3600:	00022d45 	.word	0x00022d45

00003604 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3604:	680b      	ldr	r3, [r1, #0]
    3606:	3301      	adds	r3, #1
    3608:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    360a:	4b01      	ldr	r3, [pc, #4]	; (3610 <char_out+0xc>)
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	4718      	bx	r3
    3610:	20005a84 	.word	0x20005a84

00003614 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    3614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3618:	b085      	sub	sp, #20
    361a:	469b      	mov	fp, r3
    361c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    361e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 36b0 <_printk_dec_ulong+0x9c>
    3622:	2c01      	cmp	r4, #1
    3624:	bfb8      	it	lt
    3626:	2401      	movlt	r4, #1
    3628:	2b01      	cmp	r3, #1
    362a:	bf0c      	ite	eq
    362c:	2330      	moveq	r3, #48	; 0x30
    362e:	2320      	movne	r3, #32
    3630:	4615      	mov	r5, r2
    3632:	4606      	mov	r6, r0
    3634:	468a      	mov	sl, r1
    3636:	9302      	str	r3, [sp, #8]
    3638:	2701      	movs	r7, #1
    363a:	f04f 080a 	mov.w	r8, #10
    363e:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    3640:	fbb5 f3f9 	udiv	r3, r5, r9
    3644:	9301      	str	r3, [sp, #4]
    3646:	b90a      	cbnz	r2, 364c <_printk_dec_ulong+0x38>
    3648:	45a9      	cmp	r9, r5
    364a:	d81f      	bhi.n	368c <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    364c:	9b01      	ldr	r3, [sp, #4]
    364e:	4651      	mov	r1, sl
    3650:	f103 0030 	add.w	r0, r3, #48	; 0x30
    3654:	47b0      	blx	r6
			digits++;
    3656:	3701      	adds	r7, #1
			found_largest_digit = 1;
    3658:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    365a:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    365c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    3660:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    3664:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    3668:	f04f 030a 	mov.w	r3, #10
    366c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    3670:	d1e6      	bne.n	3640 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    3672:	4651      	mov	r1, sl
    3674:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3678:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    367a:	f1bb 0f03 	cmp.w	fp, #3
    367e:	d102      	bne.n	3686 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    3680:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    3682:	2c00      	cmp	r4, #0
    3684:	dc0e      	bgt.n	36a4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    3686:	b005      	add	sp, #20
    3688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    368c:	4544      	cmp	r4, r8
    368e:	dbe4      	blt.n	365a <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    3690:	f1bb 0f02 	cmp.w	fp, #2
    3694:	d8e1      	bhi.n	365a <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    3696:	9802      	ldr	r0, [sp, #8]
    3698:	9203      	str	r2, [sp, #12]
    369a:	4651      	mov	r1, sl
    369c:	47b0      	blx	r6
			digits++;
    369e:	3701      	adds	r7, #1
    36a0:	9a03      	ldr	r2, [sp, #12]
    36a2:	e7da      	b.n	365a <_printk_dec_ulong+0x46>
			out(' ', ctx);
    36a4:	4651      	mov	r1, sl
    36a6:	2020      	movs	r0, #32
    36a8:	47b0      	blx	r6
    36aa:	3c01      	subs	r4, #1
    36ac:	e7e9      	b.n	3682 <_printk_dec_ulong+0x6e>
    36ae:	bf00      	nop
    36b0:	3b9aca00 	.word	0x3b9aca00

000036b4 <__printk_hook_install>:
	_char_out = fn;
    36b4:	4b01      	ldr	r3, [pc, #4]	; (36bc <__printk_hook_install+0x8>)
    36b6:	6018      	str	r0, [r3, #0]
}
    36b8:	4770      	bx	lr
    36ba:	bf00      	nop
    36bc:	20005a84 	.word	0x20005a84

000036c0 <z_vprintk>:
{
    36c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36c4:	b08d      	sub	sp, #52	; 0x34
    36c6:	461c      	mov	r4, r3
	char length_mod = 0;
    36c8:	2700      	movs	r7, #0
    36ca:	1e53      	subs	r3, r2, #1
{
    36cc:	4605      	mov	r5, r0
    36ce:	468b      	mov	fp, r1
    36d0:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    36d2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    36d6:	46b8      	mov	r8, r7
			might_format = 0;
    36d8:	2600      	movs	r6, #0
					break;
    36da:	e005      	b.n	36e8 <z_vprintk+0x28>
		if (!might_format) {
    36dc:	b96e      	cbnz	r6, 36fa <z_vprintk+0x3a>
			if (*fmt != '%') {
    36de:	2825      	cmp	r0, #37	; 0x25
    36e0:	f000 8171 	beq.w	39c6 <z_vprintk+0x306>
				out((int)*fmt, ctx);
    36e4:	4659      	mov	r1, fp
    36e6:	47a8      	blx	r5
	while (*fmt) {
    36e8:	9b03      	ldr	r3, [sp, #12]
    36ea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    36ee:	9303      	str	r3, [sp, #12]
    36f0:	2800      	cmp	r0, #0
    36f2:	d1f3      	bne.n	36dc <z_vprintk+0x1c>
}
    36f4:	b00d      	add	sp, #52	; 0x34
    36f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    36fa:	287a      	cmp	r0, #122	; 0x7a
    36fc:	d80a      	bhi.n	3714 <z_vprintk+0x54>
    36fe:	2862      	cmp	r0, #98	; 0x62
    3700:	d810      	bhi.n	3724 <z_vprintk+0x64>
    3702:	2830      	cmp	r0, #48	; 0x30
    3704:	d054      	beq.n	37b0 <z_vprintk+0xf0>
    3706:	d845      	bhi.n	3794 <z_vprintk+0xd4>
    3708:	2825      	cmp	r0, #37	; 0x25
    370a:	f000 815a 	beq.w	39c2 <z_vprintk+0x302>
    370e:	282d      	cmp	r0, #45	; 0x2d
    3710:	f000 815f 	beq.w	39d2 <z_vprintk+0x312>
					out((int)'%', ctx);
    3714:	4659      	mov	r1, fp
    3716:	2025      	movs	r0, #37	; 0x25
    3718:	47a8      	blx	r5
					out((int)*fmt, ctx);
    371a:	9b03      	ldr	r3, [sp, #12]
    371c:	7818      	ldrb	r0, [r3, #0]
    371e:	4659      	mov	r1, fp
    3720:	47a8      	blx	r5
    3722:	e7d9      	b.n	36d8 <z_vprintk+0x18>
    3724:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    3728:	2b17      	cmp	r3, #23
    372a:	d8f3      	bhi.n	3714 <z_vprintk+0x54>
    372c:	a201      	add	r2, pc, #4	; (adr r2, 3734 <z_vprintk+0x74>)
    372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3732:	bf00      	nop
    3734:	000039bb 	.word	0x000039bb
    3738:	000037ff 	.word	0x000037ff
    373c:	00003715 	.word	0x00003715
    3740:	00003715 	.word	0x00003715
    3744:	00003715 	.word	0x00003715
    3748:	000037e1 	.word	0x000037e1
    374c:	000037ff 	.word	0x000037ff
    3750:	00003715 	.word	0x00003715
    3754:	00003715 	.word	0x00003715
    3758:	000037e1 	.word	0x000037e1
    375c:	00003715 	.word	0x00003715
    3760:	00003715 	.word	0x00003715
    3764:	00003715 	.word	0x00003715
    3768:	000038a1 	.word	0x000038a1
    376c:	00003715 	.word	0x00003715
    3770:	00003715 	.word	0x00003715
    3774:	0000398b 	.word	0x0000398b
    3778:	00003715 	.word	0x00003715
    377c:	0000386f 	.word	0x0000386f
    3780:	00003715 	.word	0x00003715
    3784:	00003715 	.word	0x00003715
    3788:	0000379d 	.word	0x0000379d
    378c:	00003715 	.word	0x00003715
    3790:	000037e1 	.word	0x000037e1
			switch (*fmt) {
    3794:	2839      	cmp	r0, #57	; 0x39
    3796:	d91a      	bls.n	37ce <z_vprintk+0x10e>
    3798:	2858      	cmp	r0, #88	; 0x58
    379a:	d1bb      	bne.n	3714 <z_vprintk+0x54>
				if (*fmt == 'p') {
    379c:	9b03      	ldr	r3, [sp, #12]
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	2b70      	cmp	r3, #112	; 0x70
    37a2:	f040 8088 	bne.w	38b6 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    37a6:	f854 3b04 	ldr.w	r3, [r4], #4
    37aa:	9306      	str	r3, [sp, #24]
    37ac:	2200      	movs	r2, #0
    37ae:	e090      	b.n	38d2 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    37b0:	f1b9 0f00 	cmp.w	r9, #0
    37b4:	da0e      	bge.n	37d4 <z_vprintk+0x114>
    37b6:	f1b8 0f00 	cmp.w	r8, #0
    37ba:	f000 810d 	beq.w	39d8 <z_vprintk+0x318>
					min_width = *fmt - '0';
    37be:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    37c2:	f1b8 0f00 	cmp.w	r8, #0
    37c6:	bf08      	it	eq
    37c8:	f04f 0802 	moveq.w	r8, #2
    37cc:	e78c      	b.n	36e8 <z_vprintk+0x28>
				if (min_width < 0) {
    37ce:	f1b9 0f00 	cmp.w	r9, #0
    37d2:	dbf4      	blt.n	37be <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    37d4:	230a      	movs	r3, #10
    37d6:	fb03 0909 	mla	r9, r3, r9, r0
    37da:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    37de:	e7f0      	b.n	37c2 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    37e0:	2868      	cmp	r0, #104	; 0x68
    37e2:	d103      	bne.n	37ec <z_vprintk+0x12c>
    37e4:	2f68      	cmp	r7, #104	; 0x68
    37e6:	d106      	bne.n	37f6 <z_vprintk+0x136>
					length_mod = 'H';
    37e8:	2748      	movs	r7, #72	; 0x48
    37ea:	e77d      	b.n	36e8 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    37ec:	286c      	cmp	r0, #108	; 0x6c
    37ee:	d102      	bne.n	37f6 <z_vprintk+0x136>
    37f0:	2f6c      	cmp	r7, #108	; 0x6c
    37f2:	f000 80f4 	beq.w	39de <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    37f6:	2f00      	cmp	r7, #0
    37f8:	d18c      	bne.n	3714 <z_vprintk+0x54>
    37fa:	4607      	mov	r7, r0
    37fc:	e774      	b.n	36e8 <z_vprintk+0x28>
				if (length_mod == 'z') {
    37fe:	2f7a      	cmp	r7, #122	; 0x7a
    3800:	d102      	bne.n	3808 <z_vprintk+0x148>
					d = va_arg(ap, int);
    3802:	f854 6b04 	ldr.w	r6, [r4], #4
    3806:	e021      	b.n	384c <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    3808:	2f6c      	cmp	r7, #108	; 0x6c
    380a:	d0fa      	beq.n	3802 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    380c:	2f4c      	cmp	r7, #76	; 0x4c
    380e:	d1f8      	bne.n	3802 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    3810:	3407      	adds	r4, #7
    3812:	f024 0407 	bic.w	r4, r4, #7
    3816:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    381a:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    381e:	9b04      	ldr	r3, [sp, #16]
    3820:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    3824:	9b05      	ldr	r3, [sp, #20]
    3826:	9108      	str	r1, [sp, #32]
    3828:	f143 0100 	adc.w	r1, r3, #0
    382c:	9109      	str	r1, [sp, #36]	; 0x24
    382e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    3832:	2100      	movs	r1, #0
    3834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3838:	4299      	cmp	r1, r3
    383a:	bf08      	it	eq
    383c:	4290      	cmpeq	r0, r2
    383e:	d204      	bcs.n	384a <z_vprintk+0x18a>
						print_err(out, ctx);
    3840:	4659      	mov	r1, fp
    3842:	4628      	mov	r0, r5
    3844:	f018 fdc1 	bl	1c3ca <print_err>
						break;
    3848:	e746      	b.n	36d8 <z_vprintk+0x18>
					d = lld;
    384a:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    384c:	2e00      	cmp	r6, #0
    384e:	da05      	bge.n	385c <z_vprintk+0x19c>
					out((int)'-', ctx);
    3850:	4659      	mov	r1, fp
    3852:	202d      	movs	r0, #45	; 0x2d
    3854:	47a8      	blx	r5
					d = -d;
    3856:	4276      	negs	r6, r6
					min_width--;
    3858:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    385c:	f8cd 9000 	str.w	r9, [sp]
    3860:	4643      	mov	r3, r8
    3862:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    3864:	4659      	mov	r1, fp
    3866:	4628      	mov	r0, r5
    3868:	f7ff fed4 	bl	3614 <_printk_dec_ulong>
				break;
    386c:	e734      	b.n	36d8 <z_vprintk+0x18>
				if (length_mod == 'z') {
    386e:	2f7a      	cmp	r7, #122	; 0x7a
    3870:	d102      	bne.n	3878 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    3872:	f854 2b04 	ldr.w	r2, [r4], #4
    3876:	e00f      	b.n	3898 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    3878:	2f6c      	cmp	r7, #108	; 0x6c
    387a:	d0fa      	beq.n	3872 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    387c:	2f4c      	cmp	r7, #76	; 0x4c
    387e:	d1f8      	bne.n	3872 <z_vprintk+0x1b2>
					unsigned long long llu =
    3880:	3407      	adds	r4, #7
    3882:	f024 0407 	bic.w	r4, r4, #7
    3886:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    388a:	2100      	movs	r1, #0
    388c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3890:	4299      	cmp	r1, r3
    3892:	bf08      	it	eq
    3894:	4290      	cmpeq	r0, r2
    3896:	d3d3      	bcc.n	3840 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    3898:	f8cd 9000 	str.w	r9, [sp]
    389c:	4643      	mov	r3, r8
    389e:	e7e1      	b.n	3864 <z_vprintk+0x1a4>
				out('0', ctx);
    38a0:	4659      	mov	r1, fp
    38a2:	2030      	movs	r0, #48	; 0x30
    38a4:	47a8      	blx	r5
				out('x', ctx);
    38a6:	4659      	mov	r1, fp
    38a8:	2078      	movs	r0, #120	; 0x78
    38aa:	47a8      	blx	r5
					min_width = 8;
    38ac:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    38b0:	f04f 0801 	mov.w	r8, #1
    38b4:	e772      	b.n	379c <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    38b6:	2f6c      	cmp	r7, #108	; 0x6c
    38b8:	f43f af75 	beq.w	37a6 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    38bc:	2f4c      	cmp	r7, #76	; 0x4c
    38be:	f47f af72 	bne.w	37a6 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    38c2:	1de3      	adds	r3, r4, #7
    38c4:	f023 0307 	bic.w	r3, r3, #7
    38c8:	461c      	mov	r4, r3
    38ca:	f854 2b08 	ldr.w	r2, [r4], #8
    38ce:	9206      	str	r2, [sp, #24]
    38d0:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    38d2:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    38d4:	2310      	movs	r3, #16
	int digits = 0;
    38d6:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    38d8:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    38da:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    38de:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    38e2:	9906      	ldr	r1, [sp, #24]
    38e4:	f1ca 0e20 	rsb	lr, sl, #32
    38e8:	f1aa 0c20 	sub.w	ip, sl, #32
    38ec:	fa21 f00a 	lsr.w	r0, r1, sl
    38f0:	fa02 fe0e 	lsl.w	lr, r2, lr
    38f4:	ea40 000e 	orr.w	r0, r0, lr
    38f8:	fa22 fc0c 	lsr.w	ip, r2, ip
    38fc:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3900:	f010 000f 	ands.w	r0, r0, #15
    3904:	d107      	bne.n	3916 <z_vprintk+0x256>
    3906:	9907      	ldr	r1, [sp, #28]
    3908:	b911      	cbnz	r1, 3910 <z_vprintk+0x250>
    390a:	f1ba 0f00 	cmp.w	sl, #0
    390e:	d125      	bne.n	395c <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    3910:	f04f 0c30 	mov.w	ip, #48	; 0x30
    3914:	e005      	b.n	3922 <z_vprintk+0x262>
    3916:	2809      	cmp	r0, #9
    3918:	bf8c      	ite	hi
    391a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    391e:	f04f 0c30 	movls.w	ip, #48	; 0x30
    3922:	4460      	add	r0, ip
			out((int)nibble, ctx);
    3924:	4659      	mov	r1, fp
    3926:	b240      	sxtb	r0, r0
    3928:	920a      	str	r2, [sp, #40]	; 0x28
    392a:	9307      	str	r3, [sp, #28]
    392c:	47a8      	blx	r5
			digits++;
    392e:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    3930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    3932:	3301      	adds	r3, #1
    3934:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    3936:	9b07      	ldr	r3, [sp, #28]
    3938:	f1ba 0f00 	cmp.w	sl, #0
    393c:	d123      	bne.n	3986 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    393e:	f1b8 0f03 	cmp.w	r8, #3
    3942:	f47f aec9 	bne.w	36d8 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    3946:	9b04      	ldr	r3, [sp, #16]
    3948:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    394c:	2e00      	cmp	r6, #0
    394e:	f77f aec3 	ble.w	36d8 <z_vprintk+0x18>
			out(' ', ctx);
    3952:	4659      	mov	r1, fp
    3954:	2020      	movs	r0, #32
    3956:	47a8      	blx	r5
    3958:	3e01      	subs	r6, #1
    395a:	e7f7      	b.n	394c <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    395c:	1e59      	subs	r1, r3, #1
    395e:	4599      	cmp	r9, r3
    3960:	910a      	str	r1, [sp, #40]	; 0x28
    3962:	db07      	blt.n	3974 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    3964:	f1b8 0f01 	cmp.w	r8, #1
    3968:	d106      	bne.n	3978 <z_vprintk+0x2b8>
    396a:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    396c:	4659      	mov	r1, fp
    396e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    3970:	47a8      	blx	r5
    3972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    3974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3976:	e7b2      	b.n	38de <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    3978:	f1b8 0f02 	cmp.w	r8, #2
    397c:	d1fa      	bne.n	3974 <z_vprintk+0x2b4>
    397e:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    3980:	4659      	mov	r1, fp
    3982:	2020      	movs	r0, #32
    3984:	e7f4      	b.n	3970 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    3986:	9607      	str	r6, [sp, #28]
    3988:	e7a9      	b.n	38de <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    398a:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    398e:	46b2      	mov	sl, r6
    3990:	4653      	mov	r3, sl
    3992:	f81a 0b01 	ldrb.w	r0, [sl], #1
    3996:	b968      	cbnz	r0, 39b4 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    3998:	f1b8 0f03 	cmp.w	r8, #3
    399c:	d121      	bne.n	39e2 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    399e:	1b9e      	subs	r6, r3, r6
    39a0:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    39a4:	2e00      	cmp	r6, #0
    39a6:	f77f ae97 	ble.w	36d8 <z_vprintk+0x18>
						out(' ', ctx);
    39aa:	4659      	mov	r1, fp
    39ac:	2020      	movs	r0, #32
    39ae:	47a8      	blx	r5
    39b0:	3e01      	subs	r6, #1
    39b2:	e7f7      	b.n	39a4 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    39b4:	4659      	mov	r1, fp
    39b6:	47a8      	blx	r5
    39b8:	e7ea      	b.n	3990 <z_vprintk+0x2d0>
				out(c, ctx);
    39ba:	f854 0b04 	ldr.w	r0, [r4], #4
    39be:	4659      	mov	r1, fp
    39c0:	e6ae      	b.n	3720 <z_vprintk+0x60>
				out((int)'%', ctx);
    39c2:	4659      	mov	r1, fp
    39c4:	e6ac      	b.n	3720 <z_vprintk+0x60>
				length_mod = 0;
    39c6:	4637      	mov	r7, r6
				padding = PAD_NONE;
    39c8:	46b0      	mov	r8, r6
				min_width = -1;
    39ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    39ce:	2601      	movs	r6, #1
    39d0:	e68a      	b.n	36e8 <z_vprintk+0x28>
			switch (*fmt) {
    39d2:	f04f 0803 	mov.w	r8, #3
    39d6:	e687      	b.n	36e8 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    39d8:	f04f 0801 	mov.w	r8, #1
    39dc:	e684      	b.n	36e8 <z_vprintk+0x28>
					length_mod = 'L';
    39de:	274c      	movs	r7, #76	; 0x4c
    39e0:	e682      	b.n	36e8 <z_vprintk+0x28>
			might_format = 0;
    39e2:	4606      	mov	r6, r0
		++fmt;
    39e4:	e680      	b.n	36e8 <z_vprintk+0x28>
    39e6:	bf00      	nop

000039e8 <vprintk>:
{
    39e8:	b507      	push	{r0, r1, r2, lr}
    39ea:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    39ec:	2100      	movs	r1, #0
{
    39ee:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    39f0:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    39f2:	4803      	ldr	r0, [pc, #12]	; (3a00 <vprintk+0x18>)
    39f4:	a901      	add	r1, sp, #4
    39f6:	f7ff fe63 	bl	36c0 <z_vprintk>
}
    39fa:	b003      	add	sp, #12
    39fc:	f85d fb04 	ldr.w	pc, [sp], #4
    3a00:	00003605 	.word	0x00003605

00003a04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3a04:	b530      	push	{r4, r5, lr}
    3a06:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3a08:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3a0c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3a0e:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3a10:	4805      	ldr	r0, [pc, #20]	; (3a28 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3a12:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3a14:	a901      	add	r1, sp, #4
    3a16:	f7ff fe53 	bl	36c0 <z_vprintk>

	if (ctx.count < ctx.max) {
    3a1a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3a1e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3a20:	bfb8      	it	lt
    3a22:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3a24:	b005      	add	sp, #20
    3a26:	bd30      	pop	{r4, r5, pc}
    3a28:	0001c3e7 	.word	0x0001c3e7

00003a2c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    3a2c:	4b01      	ldr	r3, [pc, #4]	; (3a34 <uECC_get_rng+0x8>)
    3a2e:	6818      	ldr	r0, [r3, #0]
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop
    3a34:	20005a88 	.word	0x20005a88

00003a38 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    3a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    3a3a:	2208      	movs	r2, #8
{
    3a3c:	b089      	sub	sp, #36	; 0x24
    3a3e:	460c      	mov	r4, r1
    3a40:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    3a42:	f018 fee9 	bl	1c818 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    3a46:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3a48:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    3a4a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3a4c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    3a4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    3a50:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    3a52:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    3a54:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    3a56:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    3a58:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    3a5a:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3a5c:	2308      	movs	r3, #8
    3a5e:	466a      	mov	r2, sp
    3a60:	4669      	mov	r1, sp
    3a62:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    3a64:	e9cd 7701 	strd	r7, r7, [sp, #4]
    3a68:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3a6a:	f018 fdd7 	bl	1c61c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3a6e:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3a70:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3a72:	466a      	mov	r2, sp
    3a74:	4631      	mov	r1, r6
    3a76:	4630      	mov	r0, r6
    3a78:	f018 fdd0 	bl	1c61c <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    3a7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3a7e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    3a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3a82:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    3a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a86:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    3a88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3a8a:	4405      	add	r5, r0
	tmp[7] = 0;
    3a8c:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3a90:	466a      	mov	r2, sp
    3a92:	2308      	movs	r3, #8
    3a94:	4669      	mov	r1, sp
    3a96:	4668      	mov	r0, sp
    3a98:	f018 fdc0 	bl	1c61c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3a9c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3a9e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3aa0:	2308      	movs	r3, #8
    3aa2:	466a      	mov	r2, sp
    3aa4:	4630      	mov	r0, r6
    3aa6:	f018 fdb9 	bl	1c61c <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    3aaa:	6a23      	ldr	r3, [r4, #32]
    3aac:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    3aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ab0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    3ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ab4:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    3ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ab8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    3aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3abc:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3abe:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3ac0:	2308      	movs	r3, #8
    3ac2:	466a      	mov	r2, sp
    3ac4:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    3ac6:	e9cd 7704 	strd	r7, r7, [sp, #16]
    3aca:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3acc:	f018 fda6 	bl	1c61c <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    3ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ad2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    3ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    3ad6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    3ad8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    3ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3adc:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    3ade:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    3ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    3ae2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    3ae4:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    3ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    3aea:	6a23      	ldr	r3, [r4, #32]
    3aec:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3aee:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3af0:	2308      	movs	r3, #8
    3af2:	466a      	mov	r2, sp
    3af4:	4630      	mov	r0, r6
    3af6:	f018 fd91 	bl	1c61c <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    3afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3afc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    3afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3b00:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    3b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b04:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    3b06:	6a23      	ldr	r3, [r4, #32]
    3b08:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    3b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b0c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3b0e:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b10:	2308      	movs	r3, #8
    3b12:	466a      	mov	r2, sp
    3b14:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    3b16:	e9cd 7704 	strd	r7, r7, [sp, #16]
    3b1a:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b1c:	f018 feb2 	bl	1c884 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    3b20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3b22:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    3b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b26:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    3b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b2a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    3b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b2e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    3b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b32:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    3b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b36:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b38:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b3a:	2308      	movs	r3, #8
    3b3c:	466a      	mov	r2, sp
    3b3e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    3b40:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b44:	f018 fe9e 	bl	1c884 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    3b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b4a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    3b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b4e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    3b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b52:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    3b54:	6a23      	ldr	r3, [r4, #32]
    3b56:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    3b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b5a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    3b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    3b5e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    3b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3b64:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b66:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b68:	2308      	movs	r3, #8
    3b6a:	466a      	mov	r2, sp
    3b6c:	4630      	mov	r0, r6
    3b6e:	f018 fe89 	bl	1c884 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    3b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b74:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    3b76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    3b78:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    3b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b7e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    3b80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b82:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    3b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    3b86:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    3b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b8c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b8e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3b90:	2308      	movs	r3, #8
    3b92:	466a      	mov	r2, sp
    3b94:	4630      	mov	r0, r6
    3b96:	f018 fe75 	bl	1c884 <uECC_vli_sub>

	if (carry < 0) {
    3b9a:	1a2d      	subs	r5, r5, r0
    3b9c:	d410      	bmi.n	3bc0 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    3b9e:	4c0d      	ldr	r4, [pc, #52]	; (3bd4 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    3ba0:	b935      	cbnz	r5, 3bb0 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    3ba2:	2208      	movs	r2, #8
    3ba4:	4631      	mov	r1, r6
    3ba6:	4620      	mov	r0, r4
    3ba8:	f018 fe42 	bl	1c830 <uECC_vli_cmp_unsafe>
		while (carry || 
    3bac:	2801      	cmp	r0, #1
    3bae:	d00f      	beq.n	3bd0 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3bb0:	2308      	movs	r3, #8
    3bb2:	4622      	mov	r2, r4
    3bb4:	4631      	mov	r1, r6
    3bb6:	4630      	mov	r0, r6
    3bb8:	f018 fe64 	bl	1c884 <uECC_vli_sub>
    3bbc:	1a2d      	subs	r5, r5, r0
    3bbe:	e7ef      	b.n	3ba0 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3bc0:	4a04      	ldr	r2, [pc, #16]	; (3bd4 <vli_mmod_fast_secp256r1+0x19c>)
    3bc2:	2308      	movs	r3, #8
    3bc4:	4631      	mov	r1, r6
    3bc6:	4630      	mov	r0, r6
    3bc8:	f018 fd28 	bl	1c61c <uECC_vli_add>
		while (carry < 0);
    3bcc:	182d      	adds	r5, r5, r0
    3bce:	d4f8      	bmi.n	3bc2 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    3bd0:	b009      	add	sp, #36	; 0x24
    3bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd4:	000214a8 	.word	0x000214a8

00003bd8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    3bda:	4e26      	ldr	r6, [pc, #152]	; (3c74 <tc_aes128_set_encrypt_key+0x9c>)
{
    3bdc:	4607      	mov	r7, r0
    3bde:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3be0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    3be2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3be4:	ad01      	add	r5, sp, #4
    3be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3be8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3bec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3bf4:	4638      	mov	r0, r7
    3bf6:	2f00      	cmp	r7, #0
    3bf8:	d038      	beq.n	3c6c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3bfa:	2c00      	cmp	r4, #0
    3bfc:	d038      	beq.n	3c70 <tc_aes128_set_encrypt_key+0x98>
    3bfe:	1f38      	subs	r0, r7, #4
    3c00:	4621      	mov	r1, r4
    3c02:	4602      	mov	r2, r0
    3c04:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c06:	784b      	ldrb	r3, [r1, #1]
    3c08:	780d      	ldrb	r5, [r1, #0]
    3c0a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3c0c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3c10:	78cd      	ldrb	r5, [r1, #3]
    3c12:	432b      	orrs	r3, r5
    3c14:	788d      	ldrb	r5, [r1, #2]
    3c16:	3104      	adds	r1, #4
    3c18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3c1c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3c1e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3c22:	d1f0      	bne.n	3c06 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c24:	4c14      	ldr	r4, [pc, #80]	; (3c78 <tc_aes128_set_encrypt_key+0xa0>)
    3c26:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    3c28:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3c2a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3c2c:	d116      	bne.n	3c5c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3c2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3c32:	5ca5      	ldrb	r5, [r4, r2]
    3c34:	0e1a      	lsrs	r2, r3, #24
    3c36:	5ca2      	ldrb	r2, [r4, r2]
    3c38:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3c3c:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3c40:	b2db      	uxtb	r3, r3
    3c42:	5d65      	ldrb	r5, [r4, r5]
    3c44:	5ce3      	ldrb	r3, [r4, r3]
    3c46:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3c4a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3c4e:	ad0c      	add	r5, sp, #48	; 0x30
    3c50:	f021 0303 	bic.w	r3, r1, #3
    3c54:	442b      	add	r3, r5
    3c56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3c5a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3c5c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c60:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3c62:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c64:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3c66:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3c68:	d1de      	bne.n	3c28 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    3c6a:	2001      	movs	r0, #1
}
    3c6c:	b00d      	add	sp, #52	; 0x34
    3c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3c70:	4620      	mov	r0, r4
    3c72:	e7fb      	b.n	3c6c <tc_aes128_set_encrypt_key+0x94>
    3c74:	00021280 	.word	0x00021280
    3c78:	00022d55 	.word	0x00022d55

00003c7c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c80:	4615      	mov	r5, r2
    3c82:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3c84:	4606      	mov	r6, r0
    3c86:	2800      	cmp	r0, #0
    3c88:	d058      	beq.n	3d3c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3c8a:	2900      	cmp	r1, #0
    3c8c:	d059      	beq.n	3d42 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3c8e:	2a00      	cmp	r2, #0
    3c90:	d059      	beq.n	3d46 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3c92:	2310      	movs	r3, #16
    3c94:	460a      	mov	r2, r1
    3c96:	4668      	mov	r0, sp
    3c98:	4619      	mov	r1, r3
    3c9a:	f018 fbfb 	bl	1c494 <_copy>
	add_round_key(state, s->words);
    3c9e:	4629      	mov	r1, r5
    3ca0:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    3ca2:	4c2a      	ldr	r4, [pc, #168]	; (3d4c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    3ca4:	f019 fb00 	bl	1d2a8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3ca8:	f105 0710 	add.w	r7, r5, #16
    3cac:	46a1      	mov	r9, r4
    3cae:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    3cb0:	46e8      	mov	r8, sp
{
    3cb2:	466a      	mov	r2, sp
    3cb4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    3cb6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3cb8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3cba:	5c61      	ldrb	r1, [r4, r1]
    3cbc:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3cc0:	d1f9      	bne.n	3cb6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    3cc2:	4668      	mov	r0, sp
    3cc4:	f019 fb35 	bl	1d332 <shift_rows>
	mult_row_column(t, s);
    3cc8:	4669      	mov	r1, sp
    3cca:	a804      	add	r0, sp, #16
    3ccc:	f019 fb6a 	bl	1d3a4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3cd0:	a901      	add	r1, sp, #4
    3cd2:	a805      	add	r0, sp, #20
    3cd4:	f019 fb66 	bl	1d3a4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3cd8:	a902      	add	r1, sp, #8
    3cda:	a806      	add	r0, sp, #24
    3cdc:	f019 fb62 	bl	1d3a4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3ce0:	a903      	add	r1, sp, #12
    3ce2:	a807      	add	r0, sp, #28
    3ce4:	f019 fb5e 	bl	1d3a4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3ce8:	2310      	movs	r3, #16
    3cea:	4619      	mov	r1, r3
    3cec:	eb0d 0203 	add.w	r2, sp, r3
    3cf0:	4668      	mov	r0, sp
    3cf2:	f018 fbcf 	bl	1c494 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3cf6:	4639      	mov	r1, r7
    3cf8:	4668      	mov	r0, sp
    3cfa:	3710      	adds	r7, #16
    3cfc:	f019 fad4 	bl	1d2a8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3d00:	42af      	cmp	r7, r5
    3d02:	d1d5      	bne.n	3cb0 <tc_aes_encrypt+0x34>
    3d04:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    3d06:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d0a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    3d0c:	f819 3003 	ldrb.w	r3, [r9, r3]
    3d10:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3d14:	d1f7      	bne.n	3d06 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    3d16:	4668      	mov	r0, sp
    3d18:	f019 fb0b 	bl	1d332 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    3d1c:	4629      	mov	r1, r5
    3d1e:	4668      	mov	r0, sp
    3d20:	f019 fac2 	bl	1d2a8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3d24:	2310      	movs	r3, #16
    3d26:	4619      	mov	r1, r3
    3d28:	466a      	mov	r2, sp
    3d2a:	4630      	mov	r0, r6
    3d2c:	f018 fbb2 	bl	1c494 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3d30:	4668      	mov	r0, sp
    3d32:	2210      	movs	r2, #16
    3d34:	4621      	mov	r1, r4
    3d36:	f018 fbba 	bl	1c4ae <_set>

	return TC_CRYPTO_SUCCESS;
    3d3a:	2001      	movs	r0, #1
}
    3d3c:	b009      	add	sp, #36	; 0x24
    3d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    3d42:	4608      	mov	r0, r1
    3d44:	e7fa      	b.n	3d3c <tc_aes_encrypt+0xc0>
    3d46:	4610      	mov	r0, r2
    3d48:	e7f8      	b.n	3d3c <tc_aes_encrypt+0xc0>
    3d4a:	bf00      	nop
    3d4c:	00022d55 	.word	0x00022d55

00003d50 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    3d50:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3d52:	490e      	ldr	r1, [pc, #56]	; (3d8c <enable_logger+0x3c>)
    3d54:	480e      	ldr	r0, [pc, #56]	; (3d90 <enable_logger+0x40>)
{
    3d56:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    3d58:	2200      	movs	r2, #0
    3d5a:	f01c fefe 	bl	20b5a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3d5e:	4d0d      	ldr	r5, [pc, #52]	; (3d94 <enable_logger+0x44>)
    3d60:	490d      	ldr	r1, [pc, #52]	; (3d98 <enable_logger+0x48>)
    3d62:	2400      	movs	r4, #0
    3d64:	230e      	movs	r3, #14
    3d66:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3d6a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    3d6e:	e9cd 4400 	strd	r4, r4, [sp]
    3d72:	4b0a      	ldr	r3, [pc, #40]	; (3d9c <enable_logger+0x4c>)
    3d74:	f44f 7240 	mov.w	r2, #768	; 0x300
    3d78:	4628      	mov	r0, r5
    3d7a:	f017 fd91 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    3d7e:	4908      	ldr	r1, [pc, #32]	; (3da0 <enable_logger+0x50>)
    3d80:	4628      	mov	r0, r5
    3d82:	f01c fe01 	bl	20988 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3d86:	4620      	mov	r0, r4
    3d88:	b007      	add	sp, #28
    3d8a:	bd30      	pop	{r4, r5, pc}
    3d8c:	00003da5 	.word	0x00003da5
    3d90:	20000044 	.word	0x20000044
    3d94:	2000008c 	.word	0x2000008c
    3d98:	200023e8 	.word	0x200023e8
    3d9c:	000041b1 	.word	0x000041b1
    3da0:	00022e55 	.word	0x00022e55

00003da4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3da4:	4801      	ldr	r0, [pc, #4]	; (3dac <log_process_thread_timer_expiry_fn+0x8>)
    3da6:	f017 bd03 	b.w	1b7b0 <z_impl_k_sem_give>
    3daa:	bf00      	nop
    3dac:	20006184 	.word	0x20006184

00003db0 <log_core_init>:
{
    3db0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    3db2:	f000 fa5d 	bl	4270 <log_msg_pool_init>
		log_list_init(&list);
    3db6:	4809      	ldr	r0, [pc, #36]	; (3ddc <log_core_init+0x2c>)
    3db8:	f019 fc33 	bl	1d622 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3dbc:	2304      	movs	r3, #4
    3dbe:	2228      	movs	r2, #40	; 0x28
    3dc0:	4907      	ldr	r1, [pc, #28]	; (3de0 <log_core_init+0x30>)
    3dc2:	4808      	ldr	r0, [pc, #32]	; (3de4 <log_core_init+0x34>)
    3dc4:	f01c fb92 	bl	204ec <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    3dc8:	4b07      	ldr	r3, [pc, #28]	; (3de8 <log_core_init+0x38>)
    3dca:	4a08      	ldr	r2, [pc, #32]	; (3dec <log_core_init+0x3c>)
    3dcc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3dce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    3dd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    3dd6:	f000 bc91 	b.w	46fc <log_output_timestamp_freq_set>
    3dda:	bf00      	nop
    3ddc:	2000003c 	.word	0x2000003c
    3de0:	20004d50 	.word	0x20004d50
    3de4:	20000070 	.word	0x20000070
    3de8:	20005a8c 	.word	0x20005a8c
    3dec:	0001d661 	.word	0x0001d661

00003df0 <dropped_notify>:
{
    3df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3df2:	4b0f      	ldr	r3, [pc, #60]	; (3e30 <dropped_notify+0x40>)
    3df4:	f3bf 8f5b 	dmb	ish
    3df8:	2500      	movs	r5, #0
    3dfa:	e853 7f00 	ldrex	r7, [r3]
    3dfe:	e843 5200 	strex	r2, r5, [r3]
    3e02:	2a00      	cmp	r2, #0
    3e04:	d1f9      	bne.n	3dfa <dropped_notify+0xa>
    3e06:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3e0a:	4c0a      	ldr	r4, [pc, #40]	; (3e34 <dropped_notify+0x44>)
    3e0c:	4e0a      	ldr	r6, [pc, #40]	; (3e38 <dropped_notify+0x48>)
    3e0e:	1b36      	subs	r6, r6, r4
    3e10:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3e12:	42b5      	cmp	r5, r6
    3e14:	db00      	blt.n	3e18 <dropped_notify+0x28>
}
    3e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3e18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3e1a:	795b      	ldrb	r3, [r3, #5]
    3e1c:	b12b      	cbz	r3, 3e2a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3e1e:	6823      	ldr	r3, [r4, #0]
    3e20:	68db      	ldr	r3, [r3, #12]
    3e22:	b113      	cbz	r3, 3e2a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    3e24:	4639      	mov	r1, r7
    3e26:	4620      	mov	r0, r4
    3e28:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3e2a:	3501      	adds	r5, #1
    3e2c:	3410      	adds	r4, #16
    3e2e:	e7f0      	b.n	3e12 <dropped_notify+0x22>
    3e30:	20000034 	.word	0x20000034
    3e34:	0002125c 	.word	0x0002125c
    3e38:	0002127c 	.word	0x0002127c

00003e3c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3e3c:	4b06      	ldr	r3, [pc, #24]	; (3e58 <log_dropped+0x1c>)
    3e3e:	f3bf 8f5b 	dmb	ish
    3e42:	e853 2f00 	ldrex	r2, [r3]
    3e46:	3201      	adds	r2, #1
    3e48:	e843 2100 	strex	r1, r2, [r3]
    3e4c:	2900      	cmp	r1, #0
    3e4e:	d1f8      	bne.n	3e42 <log_dropped+0x6>
    3e50:	f3bf 8f5b 	dmb	ish
}
    3e54:	4770      	bx	lr
    3e56:	bf00      	nop
    3e58:	20000034 	.word	0x20000034

00003e5c <log_source_name_get>:
    3e5c:	4a04      	ldr	r2, [pc, #16]	; (3e70 <log_source_name_get+0x14>)
    3e5e:	4b05      	ldr	r3, [pc, #20]	; (3e74 <log_source_name_get+0x18>)
    3e60:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3e62:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3e66:	bf34      	ite	cc
    3e68:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3e6c:	2000      	movcs	r0, #0
}
    3e6e:	4770      	bx	lr
    3e70:	00021114 	.word	0x00021114
    3e74:	0002125c 	.word	0x0002125c

00003e78 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3e78:	4b09      	ldr	r3, [pc, #36]	; (3ea0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    3e7a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3e7c:	1ac3      	subs	r3, r0, r3
    3e7e:	111b      	asrs	r3, r3, #4
    3e80:	3301      	adds	r3, #1
{
    3e82:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    3e84:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3e86:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    3e88:	4c06      	ldr	r4, [pc, #24]	; (3ea4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    3e8a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3e8c:	2201      	movs	r2, #1
    3e8e:	715a      	strb	r2, [r3, #5]
    3e90:	7822      	ldrb	r2, [r4, #0]
    3e92:	b912      	cbnz	r2, 3e9a <log_backend_enable+0x22>
    3e94:	4804      	ldr	r0, [pc, #16]	; (3ea8 <log_backend_enable+0x30>)
    3e96:	f017 fc8b 	bl	1b7b0 <z_impl_k_sem_give>
	backend_attached = true;
    3e9a:	2301      	movs	r3, #1
    3e9c:	7023      	strb	r3, [r4, #0]
}
    3e9e:	bd10      	pop	{r4, pc}
    3ea0:	0002125c 	.word	0x0002125c
    3ea4:	20001cf7 	.word	0x20001cf7
    3ea8:	20006184 	.word	0x20006184

00003eac <log_init>:
{
    3eac:	b570      	push	{r4, r5, r6, lr}
    3eae:	4b11      	ldr	r3, [pc, #68]	; (3ef4 <log_init+0x48>)
    3eb0:	f3bf 8f5b 	dmb	ish
    3eb4:	e853 5f00 	ldrex	r5, [r3]
    3eb8:	1c6a      	adds	r2, r5, #1
    3eba:	e843 2100 	strex	r1, r2, [r3]
    3ebe:	2900      	cmp	r1, #0
    3ec0:	d1f8      	bne.n	3eb4 <log_init+0x8>
    3ec2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3ec6:	b92d      	cbnz	r5, 3ed4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3ec8:	4c0b      	ldr	r4, [pc, #44]	; (3ef8 <log_init+0x4c>)
    3eca:	4e0c      	ldr	r6, [pc, #48]	; (3efc <log_init+0x50>)
    3ecc:	1b36      	subs	r6, r6, r4
    3ece:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3ed0:	42b5      	cmp	r5, r6
    3ed2:	db00      	blt.n	3ed6 <log_init+0x2a>
}
    3ed4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3ed6:	7b23      	ldrb	r3, [r4, #12]
    3ed8:	b143      	cbz	r3, 3eec <log_init+0x40>
			if (backend->api->init != NULL) {
    3eda:	6823      	ldr	r3, [r4, #0]
    3edc:	695b      	ldr	r3, [r3, #20]
    3ede:	b103      	cbz	r3, 3ee2 <log_init+0x36>
				backend->api->init();
    3ee0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3ee2:	2204      	movs	r2, #4
    3ee4:	2100      	movs	r1, #0
    3ee6:	4620      	mov	r0, r4
    3ee8:	f7ff ffc6 	bl	3e78 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3eec:	3501      	adds	r5, #1
    3eee:	3410      	adds	r4, #16
    3ef0:	e7ee      	b.n	3ed0 <log_init+0x24>
    3ef2:	bf00      	nop
    3ef4:	20000038 	.word	0x20000038
    3ef8:	0002125c 	.word	0x0002125c
    3efc:	0002127c 	.word	0x0002127c

00003f00 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3f00:	4b16      	ldr	r3, [pc, #88]	; (3f5c <log_strdup+0x5c>)
    3f02:	4298      	cmp	r0, r3
{
    3f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3f06:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3f08:	d302      	bcc.n	3f10 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    3f0a:	4b15      	ldr	r3, [pc, #84]	; (3f60 <log_strdup+0x60>)
    3f0c:	4298      	cmp	r0, r3
    3f0e:	d31f      	bcc.n	3f50 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3f10:	4814      	ldr	r0, [pc, #80]	; (3f64 <log_strdup+0x64>)
    3f12:	2200      	movs	r2, #0
    3f14:	a901      	add	r1, sp, #4
    3f16:	f016 ff13 	bl	1ad40 <k_mem_slab_alloc>
	if (err != 0) {
    3f1a:	4605      	mov	r5, r0
    3f1c:	b9d8      	cbnz	r0, 3f56 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3f1e:	2201      	movs	r2, #1
    3f20:	9b01      	ldr	r3, [sp, #4]
    3f22:	f3bf 8f5b 	dmb	ish
    3f26:	e853 1f00 	ldrex	r1, [r3]
    3f2a:	e843 2000 	strex	r0, r2, [r3]
    3f2e:	2800      	cmp	r0, #0
    3f30:	d1f9      	bne.n	3f26 <log_strdup+0x26>
    3f32:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3f36:	9801      	ldr	r0, [sp, #4]
    3f38:	4621      	mov	r1, r4
    3f3a:	221f      	movs	r2, #31
    3f3c:	3004      	adds	r0, #4
    3f3e:	f01a fa80 	bl	1e442 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3f42:	9c01      	ldr	r4, [sp, #4]
    3f44:	237e      	movs	r3, #126	; 0x7e
    3f46:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3f4a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    3f4e:	3404      	adds	r4, #4
}
    3f50:	4620      	mov	r0, r4
    3f52:	b003      	add	sp, #12
    3f54:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    3f56:	4c04      	ldr	r4, [pc, #16]	; (3f68 <log_strdup+0x68>)
    3f58:	e7fa      	b.n	3f50 <log_strdup+0x50>
    3f5a:	bf00      	nop
    3f5c:	00020dfc 	.word	0x00020dfc
    3f60:	00024ea4 	.word	0x00024ea4
    3f64:	20000070 	.word	0x20000070
    3f68:	00022e5d 	.word	0x00022e5d

00003f6c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    3f6c:	b148      	cbz	r0, 3f82 <log_is_strdup+0x16>
    3f6e:	4b05      	ldr	r3, [pc, #20]	; (3f84 <log_is_strdup+0x18>)
    3f70:	4298      	cmp	r0, r3
    3f72:	d305      	bcc.n	3f80 <log_is_strdup+0x14>
    3f74:	33a0      	adds	r3, #160	; 0xa0
    3f76:	4298      	cmp	r0, r3
    3f78:	bf2c      	ite	cs
    3f7a:	2000      	movcs	r0, #0
    3f7c:	2001      	movcc	r0, #1
    3f7e:	4770      	bx	lr
    3f80:	2000      	movs	r0, #0
}
    3f82:	4770      	bx	lr
    3f84:	20004d50 	.word	0x20004d50

00003f88 <z_impl_log_process>:
{
    3f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3f8c:	4b4c      	ldr	r3, [pc, #304]	; (40c0 <z_impl_log_process+0x138>)
    3f8e:	781b      	ldrb	r3, [r3, #0]
{
    3f90:	b085      	sub	sp, #20
    3f92:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3f94:	b903      	cbnz	r3, 3f98 <z_impl_log_process+0x10>
    3f96:	b360      	cbz	r0, 3ff2 <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    3f98:	f04f 0320 	mov.w	r3, #32
    3f9c:	f3ef 8611 	mrs	r6, BASEPRI
    3fa0:	f383 8811 	msr	BASEPRI, r3
    3fa4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    3fa8:	4846      	ldr	r0, [pc, #280]	; (40c4 <z_impl_log_process+0x13c>)
    3faa:	f019 fb4a 	bl	1d642 <log_list_head_get>
    3fae:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3fb0:	f386 8811 	msr	BASEPRI, r6
    3fb4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3fb8:	b178      	cbz	r0, 3fda <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3fba:	f3bf 8f5b 	dmb	ish
    3fbe:	4b42      	ldr	r3, [pc, #264]	; (40c8 <z_impl_log_process+0x140>)
    3fc0:	e853 2f00 	ldrex	r2, [r3]
    3fc4:	3a01      	subs	r2, #1
    3fc6:	e843 2100 	strex	r1, r2, [r3]
    3fca:	2900      	cmp	r1, #0
    3fcc:	d1f8      	bne.n	3fc0 <z_impl_log_process+0x38>
    3fce:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3fd2:	b194      	cbz	r4, 3ffa <z_impl_log_process+0x72>
	log_msg_put(msg);
    3fd4:	4628      	mov	r0, r5
    3fd6:	f019 fc4b 	bl	1d870 <log_msg_put>
	if (!bypass && dropped_cnt) {
    3fda:	b924      	cbnz	r4, 3fe6 <z_impl_log_process+0x5e>
    3fdc:	4b3b      	ldr	r3, [pc, #236]	; (40cc <z_impl_log_process+0x144>)
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	b10b      	cbz	r3, 3fe6 <z_impl_log_process+0x5e>
		dropped_notify();
    3fe2:	f7ff ff05 	bl	3df0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3fe6:	4837      	ldr	r0, [pc, #220]	; (40c4 <z_impl_log_process+0x13c>)
    3fe8:	f019 fb29 	bl	1d63e <log_list_head_peek>
    3fec:	1e04      	subs	r4, r0, #0
    3fee:	bf18      	it	ne
    3ff0:	2401      	movne	r4, #1
}
    3ff2:	4620      	mov	r0, r4
    3ff4:	b005      	add	sp, #20
    3ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    3ffa:	4b35      	ldr	r3, [pc, #212]	; (40d0 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    3ffc:	781b      	ldrb	r3, [r3, #0]
    3ffe:	b9cb      	cbnz	r3, 4034 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4000:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    4002:	07db      	lsls	r3, r3, #31
    4004:	d416      	bmi.n	4034 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    4006:	f019 fc46 	bl	1d896 <log_msg_str_get>
    400a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    400c:	4628      	mov	r0, r5
    400e:	f019 fc0d 	bl	1d82c <log_msg_nargs_get>
    4012:	4601      	mov	r1, r0
    4014:	4640      	mov	r0, r8
    4016:	f019 fb27 	bl	1d668 <z_log_get_s_mask>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    401a:	4f2e      	ldr	r7, [pc, #184]	; (40d4 <z_impl_log_process+0x14c>)
    401c:	4b2e      	ldr	r3, [pc, #184]	; (40d8 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    401e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 40f4 <z_impl_log_process+0x16c>
    4022:	1bdb      	subs	r3, r3, r7
    4024:	08db      	lsrs	r3, r3, #3
    4026:	9303      	str	r3, [sp, #12]
    4028:	4b2c      	ldr	r3, [pc, #176]	; (40dc <z_impl_log_process+0x154>)
    402a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    402c:	4606      	mov	r6, r0
    402e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    4032:	b936      	cbnz	r6, 4042 <z_impl_log_process+0xba>
    4034:	4e2a      	ldr	r6, [pc, #168]	; (40e0 <z_impl_log_process+0x158>)
    4036:	4f2b      	ldr	r7, [pc, #172]	; (40e4 <z_impl_log_process+0x15c>)
    4038:	1bbf      	subs	r7, r7, r6
    403a:	113f      	asrs	r7, r7, #4
    403c:	f04f 0800 	mov.w	r8, #0
    4040:	e03a      	b.n	40b8 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    4042:	fab6 f186 	clz	r1, r6
    4046:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    404a:	4649      	mov	r1, r9
    404c:	4628      	mov	r0, r5
    404e:	f019 fbf0 	bl	1d832 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    4052:	4b25      	ldr	r3, [pc, #148]	; (40e8 <z_impl_log_process+0x160>)
    4054:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    4056:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4058:	d302      	bcc.n	4060 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    405a:	4b24      	ldr	r3, [pc, #144]	; (40ec <z_impl_log_process+0x164>)
    405c:	4298      	cmp	r0, r3
    405e:	d31a      	bcc.n	4096 <z_impl_log_process+0x10e>
    4060:	4608      	mov	r0, r1
    4062:	f7ff ff83 	bl	3f6c <log_is_strdup>
    4066:	4602      	mov	r2, r0
    4068:	b9a8      	cbnz	r0, 4096 <z_impl_log_process+0x10e>
    406a:	4b21      	ldr	r3, [pc, #132]	; (40f0 <z_impl_log_process+0x168>)
    406c:	4299      	cmp	r1, r3
    406e:	d012      	beq.n	4096 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    4070:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    4072:	9803      	ldr	r0, [sp, #12]
    4074:	0999      	lsrs	r1, r3, #6
    4076:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    407a:	ea4f 138a 	mov.w	r3, sl, lsl #6
    407e:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    4082:	bf88      	it	hi
    4084:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    4088:	f8ad 3000 	strh.w	r3, [sp]
    408c:	4649      	mov	r1, r9
    408e:	4643      	mov	r3, r8
    4090:	4658      	mov	r0, fp
    4092:	f019 fb43 	bl	1d71c <log_3>
		mask &= ~BIT(idx);
    4096:	2101      	movs	r1, #1
    4098:	fa01 f109 	lsl.w	r1, r1, r9
    409c:	ea26 0601 	bic.w	r6, r6, r1
    40a0:	e7c7      	b.n	4032 <z_impl_log_process+0xaa>
	return backend->cb->active;
    40a2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    40a4:	795b      	ldrb	r3, [r3, #5]
    40a6:	b123      	cbz	r3, 40b2 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    40a8:	6833      	ldr	r3, [r6, #0]
    40aa:	4629      	mov	r1, r5
    40ac:	681b      	ldr	r3, [r3, #0]
    40ae:	4630      	mov	r0, r6
    40b0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    40b2:	f108 0801 	add.w	r8, r8, #1
    40b6:	3610      	adds	r6, #16
    40b8:	45b8      	cmp	r8, r7
    40ba:	dbf2      	blt.n	40a2 <z_impl_log_process+0x11a>
    40bc:	e78a      	b.n	3fd4 <z_impl_log_process+0x4c>
    40be:	bf00      	nop
    40c0:	20001cf7 	.word	0x20001cf7
    40c4:	2000003c 	.word	0x2000003c
    40c8:	20000030 	.word	0x20000030
    40cc:	20000034 	.word	0x20000034
    40d0:	20001cf8 	.word	0x20001cf8
    40d4:	00021114 	.word	0x00021114
    40d8:	0002125c 	.word	0x0002125c
    40dc:	00021224 	.word	0x00021224
    40e0:	0002125c 	.word	0x0002125c
    40e4:	0002127c 	.word	0x0002127c
    40e8:	00020dfc 	.word	0x00020dfc
    40ec:	00024ea4 	.word	0x00024ea4
    40f0:	00022e5d 	.word	0x00022e5d
    40f4:	00022e77 	.word	0x00022e77

000040f8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    40f8:	4b26      	ldr	r3, [pc, #152]	; (4194 <msg_finalize+0x9c>)
{
    40fa:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    40fc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    40fe:	8141      	strh	r1, [r0, #10]
{
    4100:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4102:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4104:	4d24      	ldr	r5, [pc, #144]	; (4198 <msg_finalize+0xa0>)
    4106:	60e0      	str	r0, [r4, #12]
    4108:	f3bf 8f5b 	dmb	ish
    410c:	e855 3f00 	ldrex	r3, [r5]
    4110:	3301      	adds	r3, #1
    4112:	e845 3200 	strex	r2, r3, [r5]
    4116:	2a00      	cmp	r2, #0
    4118:	d1f8      	bne.n	410c <msg_finalize+0x14>
    411a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    411e:	f04f 0320 	mov.w	r3, #32
    4122:	f3ef 8611 	mrs	r6, BASEPRI
    4126:	f383 8811 	msr	BASEPRI, r3
    412a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    412e:	481b      	ldr	r0, [pc, #108]	; (419c <msg_finalize+0xa4>)
    4130:	4621      	mov	r1, r4
    4132:	f019 fa7a 	bl	1d62a <log_list_add_tail>
	__asm__ volatile(
    4136:	f386 8811 	msr	BASEPRI, r6
    413a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    413e:	4b18      	ldr	r3, [pc, #96]	; (41a0 <msg_finalize+0xa8>)
    4140:	781a      	ldrb	r2, [r3, #0]
    4142:	b17a      	cbz	r2, 4164 <msg_finalize+0x6c>
	__asm__ volatile(
    4144:	f04f 0320 	mov.w	r3, #32
    4148:	f3ef 8411 	mrs	r4, BASEPRI
    414c:	f383 8811 	msr	BASEPRI, r3
    4150:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4154:	2000      	movs	r0, #0
    4156:	f7ff ff17 	bl	3f88 <z_impl_log_process>
	__asm__ volatile(
    415a:	f384 8811 	msr	BASEPRI, r4
    415e:	f3bf 8f6f 	isb	sy
}
    4162:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    4164:	490f      	ldr	r1, [pc, #60]	; (41a4 <msg_finalize+0xac>)
    4166:	682b      	ldr	r3, [r5, #0]
    4168:	6809      	ldr	r1, [r1, #0]
    416a:	2900      	cmp	r1, #0
    416c:	d0f9      	beq.n	4162 <msg_finalize+0x6a>
    416e:	2b01      	cmp	r3, #1
    4170:	d106      	bne.n	4180 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
    4172:	480d      	ldr	r0, [pc, #52]	; (41a8 <msg_finalize+0xb0>)
}
    4174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    417c:	f017 bdb0 	b.w	1bce0 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4180:	2b0a      	cmp	r3, #10
    4182:	d1ee      	bne.n	4162 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    4184:	4808      	ldr	r0, [pc, #32]	; (41a8 <msg_finalize+0xb0>)
    4186:	f01c fcf4 	bl	20b72 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    418a:	4808      	ldr	r0, [pc, #32]	; (41ac <msg_finalize+0xb4>)
}
    418c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4190:	f017 bb0e 	b.w	1b7b0 <z_impl_k_sem_give>
    4194:	20005a8c 	.word	0x20005a8c
    4198:	20000030 	.word	0x20000030
    419c:	2000003c 	.word	0x2000003c
    41a0:	20001cf8 	.word	0x20001cf8
    41a4:	200000f8 	.word	0x200000f8
    41a8:	20000044 	.word	0x20000044
    41ac:	20006184 	.word	0x20006184

000041b0 <log_process_thread_func>:
{
    41b0:	b508      	push	{r3, lr}
	log_init();
    41b2:	f7ff fe7b 	bl	3eac <log_init>
	return z_impl_k_current_get();
    41b6:	f017 faf5 	bl	1b7a4 <z_impl_k_current_get>
	proc_tid = process_tid;
    41ba:	4b0b      	ldr	r3, [pc, #44]	; (41e8 <log_process_thread_func+0x38>)
    41bc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    41be:	b130      	cbz	r0, 41ce <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    41c0:	4b0a      	ldr	r3, [pc, #40]	; (41ec <log_process_thread_func+0x3c>)
	    process_tid &&
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	2b09      	cmp	r3, #9
    41c6:	dd02      	ble.n	41ce <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    41c8:	4809      	ldr	r0, [pc, #36]	; (41f0 <log_process_thread_func+0x40>)
    41ca:	f017 faf1 	bl	1b7b0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    41ce:	4c08      	ldr	r4, [pc, #32]	; (41f0 <log_process_thread_func+0x40>)
    41d0:	2000      	movs	r0, #0
    41d2:	f7ff fed9 	bl	3f88 <z_impl_log_process>
		if (log_process(false) == false) {
    41d6:	2800      	cmp	r0, #0
    41d8:	d1fa      	bne.n	41d0 <log_process_thread_func+0x20>
    41da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    41de:	4620      	mov	r0, r4
    41e0:	f017 fb0c 	bl	1b7fc <z_impl_k_sem_take>
    41e4:	e7f4      	b.n	41d0 <log_process_thread_func+0x20>
    41e6:	bf00      	nop
    41e8:	200000f8 	.word	0x200000f8
    41ec:	20000030 	.word	0x20000030
    41f0:	20006184 	.word	0x20006184

000041f4 <z_impl_log_panic>:
{
    41f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    41f6:	4f0e      	ldr	r7, [pc, #56]	; (4230 <z_impl_log_panic+0x3c>)
    41f8:	783d      	ldrb	r5, [r7, #0]
    41fa:	b975      	cbnz	r5, 421a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    41fc:	4c0d      	ldr	r4, [pc, #52]	; (4234 <z_impl_log_panic+0x40>)
    41fe:	4e0e      	ldr	r6, [pc, #56]	; (4238 <z_impl_log_panic+0x44>)
	log_init();
    4200:	f7ff fe54 	bl	3eac <log_init>
    4204:	1b36      	subs	r6, r6, r4
    4206:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4208:	42b5      	cmp	r5, r6
    420a:	db07      	blt.n	421c <z_impl_log_panic+0x28>
    420c:	2000      	movs	r0, #0
    420e:	f7ff febb 	bl	3f88 <z_impl_log_process>
		while (log_process(false) == true) {
    4212:	2800      	cmp	r0, #0
    4214:	d1fa      	bne.n	420c <z_impl_log_panic+0x18>
	panic_mode = true;
    4216:	2301      	movs	r3, #1
    4218:	703b      	strb	r3, [r7, #0]
}
    421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    421c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    421e:	795b      	ldrb	r3, [r3, #5]
    4220:	b11b      	cbz	r3, 422a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    4222:	6823      	ldr	r3, [r4, #0]
    4224:	4620      	mov	r0, r4
    4226:	691b      	ldr	r3, [r3, #16]
    4228:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    422a:	3501      	adds	r5, #1
    422c:	3410      	adds	r4, #16
    422e:	e7eb      	b.n	4208 <z_impl_log_panic+0x14>
    4230:	20001cf8 	.word	0x20001cf8
    4234:	0002125c 	.word	0x0002125c
    4238:	0002127c 	.word	0x0002127c

0000423c <log_free>:
{
    423c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    423e:	3804      	subs	r0, #4
    4240:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4242:	f3bf 8f5b 	dmb	ish
    4246:	e850 3f00 	ldrex	r3, [r0]
    424a:	1e5a      	subs	r2, r3, #1
    424c:	e840 2100 	strex	r1, r2, [r0]
    4250:	2900      	cmp	r1, #0
    4252:	d1f8      	bne.n	4246 <log_free+0xa>
    4254:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    4258:	2b01      	cmp	r3, #1
    425a:	d103      	bne.n	4264 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    425c:	4803      	ldr	r0, [pc, #12]	; (426c <log_free+0x30>)
    425e:	a901      	add	r1, sp, #4
    4260:	f016 fd9a 	bl	1ad98 <k_mem_slab_free>
}
    4264:	b003      	add	sp, #12
    4266:	f85d fb04 	ldr.w	pc, [sp], #4
    426a:	bf00      	nop
    426c:	20000070 	.word	0x20000070

00004270 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    4270:	2320      	movs	r3, #32
    4272:	4902      	ldr	r1, [pc, #8]	; (427c <log_msg_pool_init+0xc>)
    4274:	4802      	ldr	r0, [pc, #8]	; (4280 <log_msg_pool_init+0x10>)
    4276:	461a      	mov	r2, r3
    4278:	f01c b938 	b.w	204ec <k_mem_slab_init>
    427c:	20004df0 	.word	0x20004df0
    4280:	200000fc 	.word	0x200000fc

00004284 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    4284:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    4286:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    4288:	4d09      	ldr	r5, [pc, #36]	; (42b0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    428a:	9301      	str	r3, [sp, #4]
    428c:	2001      	movs	r0, #1
    428e:	f7ff fe7b 	bl	3f88 <z_impl_log_process>
    4292:	4604      	mov	r4, r0
			log_dropped();
    4294:	f7ff fdd2 	bl	3e3c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    4298:	2200      	movs	r2, #0
    429a:	a901      	add	r1, sp, #4
    429c:	4628      	mov	r0, r5
    429e:	f016 fd4f 	bl	1ad40 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    42a2:	b108      	cbz	r0, 42a8 <log_msg_no_space_handle+0x24>
    42a4:	2c00      	cmp	r4, #0
    42a6:	d1f1      	bne.n	428c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    42a8:	9801      	ldr	r0, [sp, #4]
    42aa:	b003      	add	sp, #12
    42ac:	bd30      	pop	{r4, r5, pc}
    42ae:	bf00      	nop
    42b0:	200000fc 	.word	0x200000fc

000042b4 <log_msg_chunk_alloc>:
{
    42b4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    42b6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    42b8:	4806      	ldr	r0, [pc, #24]	; (42d4 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    42ba:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    42bc:	a901      	add	r1, sp, #4
    42be:	f016 fd3f 	bl	1ad40 <k_mem_slab_alloc>
	if (err != 0) {
    42c2:	b110      	cbz	r0, 42ca <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    42c4:	f7ff ffde 	bl	4284 <log_msg_no_space_handle>
    42c8:	9001      	str	r0, [sp, #4]
}
    42ca:	9801      	ldr	r0, [sp, #4]
    42cc:	b003      	add	sp, #12
    42ce:	f85d fb04 	ldr.w	pc, [sp], #4
    42d2:	bf00      	nop
    42d4:	200000fc 	.word	0x200000fc

000042d8 <msg_free>:
{
    42d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    42da:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    42dc:	7a46      	ldrb	r6, [r0, #9]
{
    42de:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    42e0:	07d9      	lsls	r1, r3, #31
{
    42e2:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    42e4:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    42e8:	d50e      	bpl.n	4308 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    42ea:	9b01      	ldr	r3, [sp, #4]
    42ec:	7a1a      	ldrb	r2, [r3, #8]
    42ee:	0792      	lsls	r2, r2, #30
    42f0:	d504      	bpl.n	42fc <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    42f2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    42f4:	4c18      	ldr	r4, [pc, #96]	; (4358 <msg_free+0x80>)
    42f6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    42f8:	9b03      	ldr	r3, [sp, #12]
    42fa:	bb33      	cbnz	r3, 434a <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    42fc:	4816      	ldr	r0, [pc, #88]	; (4358 <msg_free+0x80>)
    42fe:	a901      	add	r1, sp, #4
    4300:	f016 fd4a 	bl	1ad98 <k_mem_slab_free>
}
    4304:	b005      	add	sp, #20
    4306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    4308:	2e00      	cmp	r6, #0
    430a:	d0ee      	beq.n	42ea <msg_free+0x12>
		u32_t smask = 0;
    430c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    430e:	4625      	mov	r5, r4
    4310:	e017      	b.n	4342 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    4312:	4629      	mov	r1, r5
    4314:	f019 fa8d 	bl	1d832 <log_msg_arg_get>
    4318:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    431a:	f7ff fe27 	bl	3f6c <log_is_strdup>
    431e:	b178      	cbz	r0, 4340 <msg_free+0x68>
				if (smask == 0) {
    4320:	b93c      	cbnz	r4, 4332 <msg_free+0x5a>
					smask = z_log_get_s_mask(
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	4631      	mov	r1, r6
    4326:	6918      	ldr	r0, [r3, #16]
    4328:	f019 f99e 	bl	1d668 <z_log_get_s_mask>
					if (smask == 0) {
    432c:	4604      	mov	r4, r0
    432e:	2800      	cmp	r0, #0
    4330:	d0db      	beq.n	42ea <msg_free+0x12>
				if (smask & BIT(i)) {
    4332:	fa24 f305 	lsr.w	r3, r4, r5
    4336:	07db      	lsls	r3, r3, #31
    4338:	d502      	bpl.n	4340 <msg_free+0x68>
					log_free(buf);
    433a:	4638      	mov	r0, r7
    433c:	f7ff ff7e 	bl	423c <log_free>
		for (i = 0; i < nargs; i++) {
    4340:	3501      	adds	r5, #1
    4342:	42ae      	cmp	r6, r5
    4344:	9801      	ldr	r0, [sp, #4]
    4346:	d8e4      	bhi.n	4312 <msg_free+0x3a>
    4348:	e7cf      	b.n	42ea <msg_free+0x12>
		next = cont->next;
    434a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    434c:	a903      	add	r1, sp, #12
    434e:	4620      	mov	r0, r4
    4350:	f016 fd22 	bl	1ad98 <k_mem_slab_free>
		cont = next;
    4354:	9503      	str	r5, [sp, #12]
    4356:	e7cf      	b.n	42f8 <msg_free+0x20>
    4358:	200000fc 	.word	0x200000fc

0000435c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    435c:	b40e      	push	{r1, r2, r3}
    435e:	b503      	push	{r0, r1, lr}
    4360:	ab03      	add	r3, sp, #12
    4362:	4601      	mov	r1, r0
    4364:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    4368:	4804      	ldr	r0, [pc, #16]	; (437c <print_formatted+0x20>)
	va_start(args, fmt);
    436a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    436c:	f7ff f9a8 	bl	36c0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    4370:	2000      	movs	r0, #0
    4372:	b002      	add	sp, #8
    4374:	f85d eb04 	ldr.w	lr, [sp], #4
    4378:	b003      	add	sp, #12
    437a:	4770      	bx	lr
    437c:	0001dc3f 	.word	0x0001dc3f

00004380 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    4380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4384:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    4386:	f011 0402 	ands.w	r4, r1, #2
{
    438a:	4690      	mov	r8, r2
    438c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4390:	4606      	mov	r6, r0
    4392:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4394:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4398:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    439c:	d007      	beq.n	43ae <prefix_print+0x2e>
	if (!format) {
    439e:	f011 0f44 	tst.w	r1, #68	; 0x44
    43a2:	d137      	bne.n	4414 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    43a4:	4932      	ldr	r1, [pc, #200]	; (4470 <prefix_print+0xf0>)
    43a6:	f7ff ffd9 	bl	435c <print_formatted>
			length = print_formatted(log_output,
    43aa:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    43ac:	460c      	mov	r4, r1
	if (color) {
    43ae:	f1b9 0f00 	cmp.w	r9, #0
    43b2:	d00a      	beq.n	43ca <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    43b4:	4b2f      	ldr	r3, [pc, #188]	; (4474 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    43b6:	4930      	ldr	r1, [pc, #192]	; (4478 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    43b8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    43bc:	4b2f      	ldr	r3, [pc, #188]	; (447c <prefix_print+0xfc>)
    43be:	4630      	mov	r0, r6
    43c0:	2a00      	cmp	r2, #0
    43c2:	bf08      	it	eq
    43c4:	461a      	moveq	r2, r3
    43c6:	f7ff ffc9 	bl	435c <print_formatted>
	if (level_on) {
    43ca:	b13d      	cbz	r5, 43dc <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    43cc:	4b2c      	ldr	r3, [pc, #176]	; (4480 <prefix_print+0x100>)
    43ce:	492d      	ldr	r1, [pc, #180]	; (4484 <prefix_print+0x104>)
    43d0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    43d4:	4630      	mov	r0, r6
    43d6:	f7ff ffc1 	bl	435c <print_formatted>
    43da:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    43dc:	f1b8 0f00 	cmp.w	r8, #0
    43e0:	d043      	beq.n	446a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    43e2:	2301      	movs	r3, #1
    43e4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    43e8:	4b27      	ldr	r3, [pc, #156]	; (4488 <prefix_print+0x108>)
    43ea:	f017 0f10 	tst.w	r7, #16
    43ee:	4f27      	ldr	r7, [pc, #156]	; (448c <prefix_print+0x10c>)
    43f0:	bf18      	it	ne
    43f2:	461f      	movne	r7, r3
    43f4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    43f8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    43fc:	f7ff fd2e 	bl	3e5c <log_source_name_get>
    4400:	4639      	mov	r1, r7
    4402:	4602      	mov	r2, r0
    4404:	4630      	mov	r0, r6
    4406:	f7ff ffa9 	bl	435c <print_formatted>
    440a:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    440c:	4420      	add	r0, r4
    440e:	b005      	add	sp, #20
    4410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    4414:	4b1e      	ldr	r3, [pc, #120]	; (4490 <prefix_print+0x110>)
    4416:	6819      	ldr	r1, [r3, #0]
    4418:	2900      	cmp	r1, #0
    441a:	d0c7      	beq.n	43ac <prefix_print+0x2c>
		timestamp /= timestamp_div;
    441c:	4b1d      	ldr	r3, [pc, #116]	; (4494 <prefix_print+0x114>)
    441e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    4428:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    442c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    4430:	fbb4 f2fe 	udiv	r2, r4, lr
    4434:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    4438:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    443c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4440:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4444:	fbb4 fbf1 	udiv	fp, r4, r1
    4448:	fb01 441b 	mls	r4, r1, fp, r4
    444c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4450:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4454:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    4458:	e9cd b101 	strd	fp, r1, [sp, #4]
    445c:	fb0a e113 	mls	r1, sl, r3, lr
    4460:	9100      	str	r1, [sp, #0]
    4462:	490d      	ldr	r1, [pc, #52]	; (4498 <prefix_print+0x118>)
    4464:	f7ff ff7a 	bl	435c <print_formatted>
    4468:	e79f      	b.n	43aa <prefix_print+0x2a>
	total += print_formatted(log_output,
    446a:	4f08      	ldr	r7, [pc, #32]	; (448c <prefix_print+0x10c>)
    446c:	e7c2      	b.n	43f4 <prefix_print+0x74>
    446e:	bf00      	nop
    4470:	00022ec8 	.word	0x00022ec8
    4474:	00021554 	.word	0x00021554
    4478:	00023dd3 	.word	0x00023dd3
    447c:	00022eba 	.word	0x00022eba
    4480:	00021568 	.word	0x00021568
    4484:	00022eed 	.word	0x00022eed
    4488:	00022ec4 	.word	0x00022ec4
    448c:	00022ebf 	.word	0x00022ebf
    4490:	20000118 	.word	0x20000118
    4494:	2000011c 	.word	0x2000011c
    4498:	00022ed1 	.word	0x00022ed1

0000449c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    449c:	b538      	push	{r3, r4, r5, lr}
    449e:	460c      	mov	r4, r1
	if (color) {
    44a0:	07e1      	lsls	r1, r4, #31
{
    44a2:	4605      	mov	r5, r0
	if (color) {
    44a4:	d503      	bpl.n	44ae <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    44a6:	4a08      	ldr	r2, [pc, #32]	; (44c8 <postfix_print+0x2c>)
    44a8:	4908      	ldr	r1, [pc, #32]	; (44cc <postfix_print+0x30>)
    44aa:	f7ff ff57 	bl	435c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    44ae:	06e2      	lsls	r2, r4, #27
    44b0:	d408      	bmi.n	44c4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    44b2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    44b4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    44b6:	bf4c      	ite	mi
    44b8:	4905      	ldrmi	r1, [pc, #20]	; (44d0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    44ba:	4906      	ldrpl	r1, [pc, #24]	; (44d4 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    44bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    44c0:	f7ff bf4c 	b.w	435c <print_formatted>
}
    44c4:	bd38      	pop	{r3, r4, r5, pc}
    44c6:	bf00      	nop
    44c8:	00022eba 	.word	0x00022eba
    44cc:	00023dd3 	.word	0x00023dd3
    44d0:	00022ef4 	.word	0x00022ef4
    44d4:	00022ef3 	.word	0x00022ef3

000044d8 <hexdump_line_print>:
{
    44d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44dc:	461d      	mov	r5, r3
    44de:	9b08      	ldr	r3, [sp, #32]
    44e0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    44e2:	06da      	lsls	r2, r3, #27
{
    44e4:	4604      	mov	r4, r0
    44e6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    44e8:	d405      	bmi.n	44f6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    44ea:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    44ec:	bf4c      	ite	mi
    44ee:	492a      	ldrmi	r1, [pc, #168]	; (4598 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    44f0:	492a      	ldrpl	r1, [pc, #168]	; (459c <hexdump_line_print+0xc4>)
    44f2:	f7ff ff33 	bl	435c <print_formatted>
		print_formatted(log_output, " ");
    44f6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 45a4 <hexdump_line_print+0xcc>
{
    44fa:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    44fe:	45a8      	cmp	r8, r5
    4500:	db2a      	blt.n	4558 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    4502:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 45a8 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    4506:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 45ac <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    450a:	f8df a098 	ldr.w	sl, [pc, #152]	; 45a4 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    450e:	2500      	movs	r5, #0
		if (i < length) {
    4510:	42bd      	cmp	r5, r7
    4512:	d22f      	bcs.n	4574 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    4514:	5d72      	ldrb	r2, [r6, r5]
    4516:	4649      	mov	r1, r9
    4518:	4620      	mov	r0, r4
    451a:	f7ff ff1f 	bl	435c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    451e:	3501      	adds	r5, #1
    4520:	2d10      	cmp	r5, #16
    4522:	d120      	bne.n	4566 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    4524:	491e      	ldr	r1, [pc, #120]	; (45a0 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    4526:	f8df 807c 	ldr.w	r8, [pc, #124]	; 45a4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    452a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 45b0 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    452e:	4620      	mov	r0, r4
    4530:	f7ff ff14 	bl	435c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4534:	2500      	movs	r5, #0
		if (i < length) {
    4536:	42af      	cmp	r7, r5
    4538:	d928      	bls.n	458c <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    453a:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    453c:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    4540:	2b5f      	cmp	r3, #95	; 0x5f
    4542:	bf28      	it	cs
    4544:	222e      	movcs	r2, #46	; 0x2e
    4546:	4649      	mov	r1, r9
    4548:	4620      	mov	r0, r4
    454a:	f7ff ff07 	bl	435c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    454e:	3501      	adds	r5, #1
    4550:	2d10      	cmp	r5, #16
    4552:	d114      	bne.n	457e <hexdump_line_print+0xa6>
}
    4554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    4558:	4649      	mov	r1, r9
    455a:	4620      	mov	r0, r4
    455c:	f7ff fefe 	bl	435c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4560:	f108 0801 	add.w	r8, r8, #1
    4564:	e7cb      	b.n	44fe <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    4566:	076a      	lsls	r2, r5, #29
    4568:	d1d2      	bne.n	4510 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    456a:	4651      	mov	r1, sl
    456c:	4620      	mov	r0, r4
    456e:	f7ff fef5 	bl	435c <print_formatted>
    4572:	e7cd      	b.n	4510 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    4574:	4641      	mov	r1, r8
    4576:	4620      	mov	r0, r4
    4578:	f7ff fef0 	bl	435c <print_formatted>
    457c:	e7cf      	b.n	451e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    457e:	076b      	lsls	r3, r5, #29
    4580:	d1d9      	bne.n	4536 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    4582:	4641      	mov	r1, r8
    4584:	4620      	mov	r0, r4
    4586:	f7ff fee9 	bl	435c <print_formatted>
    458a:	e7d4      	b.n	4536 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    458c:	4641      	mov	r1, r8
    458e:	4620      	mov	r0, r4
    4590:	f7ff fee4 	bl	435c <print_formatted>
    4594:	e7db      	b.n	454e <hexdump_line_print+0x76>
    4596:	bf00      	nop
    4598:	00022ef4 	.word	0x00022ef4
    459c:	00022ef3 	.word	0x00022ef3
    45a0:	00022f00 	.word	0x00022f00
    45a4:	00022efe 	.word	0x00022efe
    45a8:	00022efc 	.word	0x00022efc
    45ac:	00022ef6 	.word	0x00022ef6
    45b0:	00022f02 	.word	0x00022f02

000045b4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    45b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    45b8:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    45ba:	f013 0807 	ands.w	r8, r3, #7
{
    45be:	4617      	mov	r7, r2
    45c0:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    45c2:	7a0a      	ldrb	r2, [r1, #8]
    45c4:	4605      	mov	r5, r0
    45c6:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    45c8:	d020      	beq.n	460c <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    45ca:	8949      	ldrh	r1, [r1, #10]
    45cc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    45d0:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    45d2:	43d2      	mvns	r2, r2
    45d4:	e9cd 8300 	strd	r8, r3, [sp]
    45d8:	9102      	str	r1, [sp, #8]
    45da:	68f3      	ldr	r3, [r6, #12]
    45dc:	f002 0201 	and.w	r2, r2, #1
    45e0:	4639      	mov	r1, r7
    45e2:	f7ff fecd 	bl	4380 <prefix_print>
    45e6:	4681      	mov	r9, r0
    45e8:	7a34      	ldrb	r4, [r6, #8]
    45ea:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    45ec:	f014 0401 	ands.w	r4, r4, #1
    45f0:	d00e      	beq.n	4610 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    45f2:	4629      	mov	r1, r5
    45f4:	4630      	mov	r0, r6
    45f6:	f019 f9b8 	bl	1d96a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    45fa:	f1b8 0f00 	cmp.w	r8, #0
    45fe:	d02b      	beq.n	4658 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    4600:	4642      	mov	r2, r8
    4602:	4639      	mov	r1, r7
    4604:	4628      	mov	r0, r5
    4606:	f7ff ff49 	bl	449c <postfix_print>
    460a:	e025      	b.n	4658 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    460c:	46c1      	mov	r9, r8
    460e:	e7eb      	b.n	45e8 <log_output_msg_process+0x34>
	} else if (raw_string) {
    4610:	f1b8 0f00 	cmp.w	r8, #0
    4614:	d126      	bne.n	4664 <log_output_msg_process+0xb0>
	size_t offset = 0;
    4616:	4627      	mov	r7, r4
		length = log_output->size;
    4618:	68eb      	ldr	r3, [r5, #12]
    461a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    461c:	aa06      	add	r2, sp, #24
    461e:	463b      	mov	r3, r7
    4620:	68a9      	ldr	r1, [r5, #8]
    4622:	4630      	mov	r0, r6
    4624:	f019 f98d 	bl	1d942 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    4628:	9a06      	ldr	r2, [sp, #24]
    462a:	686b      	ldr	r3, [r5, #4]
    462c:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    462e:	b13a      	cbz	r2, 4640 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    4630:	68ab      	ldr	r3, [r5, #8]
    4632:	4413      	add	r3, r2
    4634:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    4638:	f1a4 030a 	sub.w	r3, r4, #10
    463c:	425c      	negs	r4, r3
    463e:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    4640:	4628      	mov	r0, r5
    4642:	f019 faef 	bl	1dc24 <log_output_flush>
		offset += length;
    4646:	9b06      	ldr	r3, [sp, #24]
    4648:	441f      	add	r7, r3
	} while (length > 0);
    464a:	2b00      	cmp	r3, #0
    464c:	d1e4      	bne.n	4618 <log_output_msg_process+0x64>
	if (eol) {
    464e:	b11c      	cbz	r4, 4658 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    4650:	4913      	ldr	r1, [pc, #76]	; (46a0 <log_output_msg_process+0xec>)
    4652:	4628      	mov	r0, r5
    4654:	f7ff fe82 	bl	435c <print_formatted>
	}

	log_output_flush(log_output);
    4658:	4628      	mov	r0, r5
    465a:	f019 fae3 	bl	1dc24 <log_output_flush>
}
    465e:	b00a      	add	sp, #40	; 0x28
    4660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    4664:	4630      	mov	r0, r6
    4666:	f019 f916 	bl	1d896 <log_msg_str_get>
    466a:	490e      	ldr	r1, [pc, #56]	; (46a4 <log_output_msg_process+0xf0>)
    466c:	4602      	mov	r2, r0
    466e:	4628      	mov	r0, r5
    4670:	f7ff fe74 	bl	435c <print_formatted>
		length = sizeof(buf);
    4674:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4678:	aa05      	add	r2, sp, #20
    467a:	4623      	mov	r3, r4
    467c:	a906      	add	r1, sp, #24
    467e:	4630      	mov	r0, r6
		length = sizeof(buf);
    4680:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4684:	f019 f95d 	bl	1d942 <log_msg_hexdump_data_get>
		if (length) {
    4688:	9a05      	ldr	r2, [sp, #20]
    468a:	2a00      	cmp	r2, #0
    468c:	d0b8      	beq.n	4600 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    468e:	464b      	mov	r3, r9
    4690:	9700      	str	r7, [sp, #0]
    4692:	a906      	add	r1, sp, #24
    4694:	4628      	mov	r0, r5
    4696:	f7ff ff1f 	bl	44d8 <hexdump_line_print>
			offset += length;
    469a:	9b05      	ldr	r3, [sp, #20]
    469c:	441c      	add	r4, r3
		length = sizeof(buf);
    469e:	e7eb      	b.n	4678 <log_output_msg_process+0xc4>
    46a0:	00022f05 	.word	0x00022f05
    46a4:	00023dd3 	.word	0x00023dd3

000046a8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    46a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    46aa:	e9d0 4300 	ldrd	r4, r3, [r0]
    46ae:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    46b0:	4a0f      	ldr	r2, [pc, #60]	; (46f0 <log_output_dropped_process+0x48>)
    46b2:	f242 730f 	movw	r3, #9999	; 0x270f
    46b6:	428b      	cmp	r3, r1
    46b8:	bf28      	it	cs
    46ba:	460b      	movcs	r3, r1
    46bc:	4668      	mov	r0, sp
    46be:	2105      	movs	r1, #5
    46c0:	f002 fb10 	bl	6ce4 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    46c4:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    46c6:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    46c8:	490a      	ldr	r1, [pc, #40]	; (46f4 <log_output_dropped_process+0x4c>)
    46ca:	4620      	mov	r0, r4
    46cc:	220b      	movs	r2, #11
    46ce:	f019 f93f 	bl	1d950 <buffer_write>
	buffer_write(outf, buf, len, dev);
    46d2:	462b      	mov	r3, r5
    46d4:	4632      	mov	r2, r6
    46d6:	4669      	mov	r1, sp
    46d8:	4620      	mov	r0, r4
    46da:	f019 f939 	bl	1d950 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    46de:	4906      	ldr	r1, [pc, #24]	; (46f8 <log_output_dropped_process+0x50>)
    46e0:	462b      	mov	r3, r5
    46e2:	221b      	movs	r2, #27
    46e4:	4620      	mov	r0, r4
    46e6:	f019 f933 	bl	1d950 <buffer_write>
}
    46ea:	b002      	add	sp, #8
    46ec:	bd70      	pop	{r4, r5, r6, pc}
    46ee:	bf00      	nop
    46f0:	0002475d 	.word	0x0002475d
    46f4:	00022f43 	.word	0x00022f43
    46f8:	00022f27 	.word	0x00022f27

000046fc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    46fc:	4a08      	ldr	r2, [pc, #32]	; (4720 <log_output_timestamp_freq_set+0x24>)
{
    46fe:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4700:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4702:	4c08      	ldr	r4, [pc, #32]	; (4724 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4704:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4706:	2100      	movs	r1, #0
    4708:	42a0      	cmp	r0, r4
    470a:	d804      	bhi.n	4716 <log_output_timestamp_freq_set+0x1a>
    470c:	b101      	cbz	r1, 4710 <log_output_timestamp_freq_set+0x14>
    470e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4710:	4b05      	ldr	r3, [pc, #20]	; (4728 <log_output_timestamp_freq_set+0x2c>)
    4712:	6018      	str	r0, [r3, #0]
}
    4714:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    4716:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4718:	005b      	lsls	r3, r3, #1
    471a:	2101      	movs	r1, #1
    471c:	e7f4      	b.n	4708 <log_output_timestamp_freq_set+0xc>
    471e:	bf00      	nop
    4720:	2000011c 	.word	0x2000011c
    4724:	000f4240 	.word	0x000f4240
    4728:	20000118 	.word	0x20000118

0000472c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    472c:	4801      	ldr	r0, [pc, #4]	; (4734 <panic+0x8>)
    472e:	f019 ba79 	b.w	1dc24 <log_output_flush>
    4732:	bf00      	nop
    4734:	00021594 	.word	0x00021594

00004738 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    4738:	4801      	ldr	r0, [pc, #4]	; (4740 <dropped+0x8>)
    473a:	f7ff bfb5 	b.w	46a8 <log_output_dropped_process>
    473e:	bf00      	nop
    4740:	00021594 	.word	0x00021594

00004744 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    4744:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4746:	4803      	ldr	r0, [pc, #12]	; (4754 <log_backend_uart_init+0x10>)
    4748:	f016 f94c 	bl	1a9e4 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    474c:	4b02      	ldr	r3, [pc, #8]	; (4758 <log_backend_uart_init+0x14>)
    474e:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    4750:	bd08      	pop	{r3, pc}
    4752:	bf00      	nop
    4754:	00022f4f 	.word	0x00022f4f
    4758:	20000128 	.word	0x20000128

0000475c <put>:
{
    475c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    475e:	4608      	mov	r0, r1
    4760:	460c      	mov	r4, r1
    4762:	f019 f856 	bl	1d812 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    4766:	4805      	ldr	r0, [pc, #20]	; (477c <put+0x20>)
    4768:	4621      	mov	r1, r4
    476a:	220f      	movs	r2, #15
    476c:	f7ff ff22 	bl	45b4 <log_output_msg_process>
	log_msg_put(msg);
    4770:	4620      	mov	r0, r4
}
    4772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4776:	f019 b87b 	b.w	1d870 <log_msg_put>
    477a:	bf00      	nop
    477c:	00021594 	.word	0x00021594

00004780 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4780:	4b01      	ldr	r3, [pc, #4]	; (4788 <log_backend_rtt_init+0x8>)
    4782:	2201      	movs	r2, #1
    4784:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    4786:	4770      	bx	lr
    4788:	20001d0a 	.word	0x20001d0a

0000478c <panic>:

static void panic(struct log_backend const *const backend)
{
    478c:	b508      	push	{r3, lr}
	log_output_flush(log_output);
    478e:	4803      	ldr	r0, [pc, #12]	; (479c <panic+0x10>)
    4790:	f019 fa48 	bl	1dc24 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    4794:	4b02      	ldr	r3, [pc, #8]	; (47a0 <panic+0x14>)
    4796:	2201      	movs	r2, #1
    4798:	701a      	strb	r2, [r3, #0]
}
    479a:	bd08      	pop	{r3, pc}
    479c:	000215bc 	.word	0x000215bc
    47a0:	20001d0b 	.word	0x20001d0b

000047a4 <dropped>:
	log_output_dropped_process(log_output, cnt);
    47a4:	4801      	ldr	r0, [pc, #4]	; (47ac <dropped+0x8>)
    47a6:	f7ff bf7f 	b.w	46a8 <log_output_dropped_process>
    47aa:	bf00      	nop
    47ac:	000215bc 	.word	0x000215bc

000047b0 <put>:
{
    47b0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    47b2:	4608      	mov	r0, r1
    47b4:	460c      	mov	r4, r1
    47b6:	f019 f82c 	bl	1d812 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    47ba:	4805      	ldr	r0, [pc, #20]	; (47d0 <put+0x20>)
    47bc:	4621      	mov	r1, r4
    47be:	220f      	movs	r2, #15
    47c0:	f7ff fef8 	bl	45b4 <log_output_msg_process>
	log_msg_put(msg);
    47c4:	4620      	mov	r0, r4
}
    47c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47ca:	f019 b851 	b.w	1d870 <log_msg_put>
    47ce:	bf00      	nop
    47d0:	000215bc 	.word	0x000215bc

000047d4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    47d4:	4b04      	ldr	r3, [pc, #16]	; (47e8 <on_failed_write.part.0+0x14>)
	} else if (is_sync_mode()) {
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	b11b      	cbz	r3, 47e2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    47da:	f241 3088 	movw	r0, #5000	; 0x1388
    47de:	f01c b8d1 	b.w	20984 <z_impl_k_busy_wait>
	return z_impl_k_sleep(ms);
    47e2:	2005      	movs	r0, #5
    47e4:	f016 bfb6 	b.w	1b754 <z_impl_k_sleep>
    47e8:	20001d0b 	.word	0x20001d0b

000047ec <data_out_block_mode>:
{
    47ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    47f0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4880 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    47f4:	f8df b08c 	ldr.w	fp, [pc, #140]	; 4884 <data_out_block_mode+0x98>
{
    47f8:	4607      	mov	r7, r0
    47fa:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    47fc:	2404      	movs	r4, #4
    47fe:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    4800:	f899 3000 	ldrb.w	r3, [r9]
    4804:	b923      	cbnz	r3, 4810 <data_out_block_mode+0x24>
    4806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    480a:	4658      	mov	r0, fp
    480c:	f016 fb8a 	bl	1af24 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4810:	4632      	mov	r2, r6
    4812:	4639      	mov	r1, r7
    4814:	2000      	movs	r0, #0
    4816:	f001 f87d 	bl	5914 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    481a:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    481e:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    4820:	b913      	cbnz	r3, 4828 <data_out_block_mode+0x3c>
	return z_impl_k_mutex_unlock(mutex);
    4822:	4658      	mov	r0, fp
    4824:	f016 fbf0 	bl	1b008 <z_impl_k_mutex_unlock>
		if (ret) {
    4828:	4d14      	ldr	r5, [pc, #80]	; (487c <data_out_block_mode+0x90>)
    482a:	f1b8 0f00 	cmp.w	r8, #0
    482e:	d018      	beq.n	4862 <data_out_block_mode+0x76>
	host_present = true;
    4830:	2301      	movs	r3, #1
    4832:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    4834:	f89a 3000 	ldrb.w	r3, [sl]
    4838:	b933      	cbnz	r3, 4848 <data_out_block_mode+0x5c>
}
    483a:	4630      	mov	r0, r6
    483c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    4840:	b95c      	cbnz	r4, 485a <data_out_block_mode+0x6e>
		host_present = false;
    4842:	702c      	strb	r4, [r5, #0]
    4844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4848:	2000      	movs	r0, #0
    484a:	f001 f8af 	bl	59ac <SEGGER_RTT_HasDataUp>
    484e:	2800      	cmp	r0, #0
    4850:	d0f3      	beq.n	483a <data_out_block_mode+0x4e>
    4852:	782b      	ldrb	r3, [r5, #0]
    4854:	2b00      	cmp	r3, #0
    4856:	d1f3      	bne.n	4840 <data_out_block_mode+0x54>
    4858:	e7ef      	b.n	483a <data_out_block_mode+0x4e>
			on_failed_write(retry_cnt--);
    485a:	3c01      	subs	r4, #1
    485c:	f7ff ffba 	bl	47d4 <on_failed_write.part.0>
    4860:	e7f2      	b.n	4848 <data_out_block_mode+0x5c>
		} else if (host_present) {
    4862:	782b      	ldrb	r3, [r5, #0]
    4864:	b113      	cbz	r3, 486c <data_out_block_mode+0x80>
	if (retry_cnt == 0) {
    4866:	3c01      	subs	r4, #1
    4868:	d104      	bne.n	4874 <data_out_block_mode+0x88>
		host_present = false;
    486a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    486c:	782b      	ldrb	r3, [r5, #0]
    486e:	2b00      	cmp	r3, #0
    4870:	d1c6      	bne.n	4800 <data_out_block_mode+0x14>
    4872:	e7e2      	b.n	483a <data_out_block_mode+0x4e>
    4874:	f7ff ffae 	bl	47d4 <on_failed_write.part.0>
    4878:	e7f8      	b.n	486c <data_out_block_mode+0x80>
    487a:	bf00      	nop
    487c:	20001d0a 	.word	0x20001d0a
    4880:	20001d0b 	.word	0x20001d0b
    4884:	2000620c 	.word	0x2000620c

00004888 <read_pnp_id>:

#if CONFIG_BT_GATT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   u16_t len, u16_t offset)
{
    4888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    488a:	2407      	movs	r4, #7
    488c:	9402      	str	r4, [sp, #8]
    488e:	4c04      	ldr	r4, [pc, #16]	; (48a0 <read_pnp_id+0x18>)
    4890:	9401      	str	r4, [sp, #4]
    4892:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    4896:	9400      	str	r4, [sp, #0]
    4898:	f01a ffab 	bl	1f7f2 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    489c:	b004      	add	sp, #16
    489e:	bd10      	pop	{r4, pc}
    48a0:	20006069 	.word	0x20006069

000048a4 <blvl_ccc_cfg_changed>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    48a4:	4b07      	ldr	r3, [pc, #28]	; (48c4 <blvl_ccc_cfg_changed+0x20>)
    48a6:	4a08      	ldr	r2, [pc, #32]	; (48c8 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    48a8:	4808      	ldr	r0, [pc, #32]	; (48cc <blvl_ccc_cfg_changed+0x28>)
    48aa:	1ad2      	subs	r2, r2, r3
    48ac:	08d2      	lsrs	r2, r2, #3
    48ae:	4b08      	ldr	r3, [pc, #32]	; (48d0 <blvl_ccc_cfg_changed+0x2c>)
    48b0:	0192      	lsls	r2, r2, #6
    48b2:	2901      	cmp	r1, #1
    48b4:	bf14      	ite	ne
    48b6:	4601      	movne	r1, r0
    48b8:	4619      	moveq	r1, r3
    48ba:	f042 0203 	orr.w	r2, r2, #3
    48be:	4805      	ldr	r0, [pc, #20]	; (48d4 <blvl_ccc_cfg_changed+0x30>)
    48c0:	f018 beff 	b.w	1d6c2 <log_1>
    48c4:	00021114 	.word	0x00021114
    48c8:	00021114 	.word	0x00021114
    48cc:	00022fa1 	.word	0x00022fa1
    48d0:	00022f99 	.word	0x00022f99
    48d4:	00022faa 	.word	0x00022faa

000048d8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    48d8:	b510      	push	{r4, lr}
	u8_t lvl8 = battery_level;
    48da:	4c08      	ldr	r4, [pc, #32]	; (48fc <read_blvl+0x24>)
{
    48dc:	b086      	sub	sp, #24
	u8_t lvl8 = battery_level;
    48de:	7824      	ldrb	r4, [r4, #0]
    48e0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    48e4:	2401      	movs	r4, #1
    48e6:	9402      	str	r4, [sp, #8]
    48e8:	f10d 0417 	add.w	r4, sp, #23
    48ec:	9401      	str	r4, [sp, #4]
    48ee:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    48f2:	9400      	str	r4, [sp, #0]
    48f4:	f01a ff7d 	bl	1f7f2 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    48f8:	b006      	add	sp, #24
    48fa:	bd10      	pop	{r4, pc}
    48fc:	20006070 	.word	0x20006070

00004900 <bt_gatt_bas_get_battery_level>:
}

u8_t bt_gatt_bas_get_battery_level(void)
{
	return battery_level;
}
    4900:	4b01      	ldr	r3, [pc, #4]	; (4908 <bt_gatt_bas_get_battery_level+0x8>)
    4902:	7818      	ldrb	r0, [r3, #0]
    4904:	4770      	bx	lr
    4906:	bf00      	nop
    4908:	20006070 	.word	0x20006070

0000490c <bt_gatt_bas_set_battery_level>:

int bt_gatt_bas_set_battery_level(u8_t level)
{
    490c:	b500      	push	{lr}
    490e:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
    4910:	2864      	cmp	r0, #100	; 0x64
{
    4912:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    4916:	d819      	bhi.n	494c <bt_gatt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    4918:	4b0e      	ldr	r3, [pc, #56]	; (4954 <bt_gatt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
    491a:	2218      	movs	r2, #24
    491c:	7018      	strb	r0, [r3, #0]
    491e:	2100      	movs	r1, #0
    4920:	a802      	add	r0, sp, #8
    4922:	f019 fe0c 	bl	1e53e <memset>
	params.attr = attr;
    4926:	4b0c      	ldr	r3, [pc, #48]	; (4958 <bt_gatt_bas_set_battery_level+0x4c>)
    4928:	9303      	str	r3, [sp, #12]
	params.data = data;
    492a:	f10d 0307 	add.w	r3, sp, #7
    492e:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    4930:	a902      	add	r1, sp, #8
	params.len = len;
    4932:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    4934:	2000      	movs	r0, #0
	params.len = len;
    4936:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    493a:	f007 fe51 	bl	c5e0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    493e:	f110 0f39 	cmn.w	r0, #57	; 0x39
    4942:	bf08      	it	eq
    4944:	2000      	moveq	r0, #0
}
    4946:	b009      	add	sp, #36	; 0x24
    4948:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    494c:	f06f 0015 	mvn.w	r0, #21
    4950:	e7f9      	b.n	4946 <bt_gatt_bas_set_battery_level+0x3a>
    4952:	bf00      	nop
    4954:	20006070 	.word	0x20006070
    4958:	0002166c 	.word	0x0002166c

0000495c <hrs_init>:

static int hrs_init(struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    495c:	4b02      	ldr	r3, [pc, #8]	; (4968 <hrs_init+0xc>)
    495e:	2201      	movs	r2, #1
    4960:	701a      	strb	r2, [r3, #0]

	return 0;
}
    4962:	2000      	movs	r0, #0
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	20001d0e 	.word	0x20001d0e

0000496c <read_blsc>:
{
    496c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    496e:	2401      	movs	r4, #1
    4970:	9402      	str	r4, [sp, #8]
    4972:	4c04      	ldr	r4, [pc, #16]	; (4984 <read_blsc+0x18>)
    4974:	9401      	str	r4, [sp, #4]
    4976:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    497a:	9400      	str	r4, [sp, #0]
    497c:	f01a ff39 	bl	1f7f2 <bt_gatt_attr_read>
}
    4980:	b004      	add	sp, #16
    4982:	bd10      	pop	{r4, pc}
    4984:	20001d0e 	.word	0x20001d0e

00004988 <hrmc_ccc_cfg_changed>:
    4988:	4b07      	ldr	r3, [pc, #28]	; (49a8 <hrmc_ccc_cfg_changed+0x20>)
    498a:	4a08      	ldr	r2, [pc, #32]	; (49ac <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    498c:	4808      	ldr	r0, [pc, #32]	; (49b0 <hrmc_ccc_cfg_changed+0x28>)
    498e:	1ad2      	subs	r2, r2, r3
    4990:	08d2      	lsrs	r2, r2, #3
    4992:	4b08      	ldr	r3, [pc, #32]	; (49b4 <hrmc_ccc_cfg_changed+0x2c>)
    4994:	0192      	lsls	r2, r2, #6
    4996:	2901      	cmp	r1, #1
    4998:	bf14      	ite	ne
    499a:	4601      	movne	r1, r0
    499c:	4619      	moveq	r1, r3
    499e:	f042 0203 	orr.w	r2, r2, #3
    49a2:	4805      	ldr	r0, [pc, #20]	; (49b8 <hrmc_ccc_cfg_changed+0x30>)
    49a4:	f018 be8d 	b.w	1d6c2 <log_1>
    49a8:	00021114 	.word	0x00021114
    49ac:	0002121c 	.word	0x0002121c
    49b0:	00022fa1 	.word	0x00022fa1
    49b4:	00022f99 	.word	0x00022f99
    49b8:	00022fc3 	.word	0x00022fc3

000049bc <bt_gatt_hrs_notify>:

int bt_gatt_hrs_notify(u16_t heartrate)
{
    49bc:	b510      	push	{r4, lr}
	int rc;
	static u8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    49be:	4c0d      	ldr	r4, [pc, #52]	; (49f4 <bt_gatt_hrs_notify+0x38>)
{
    49c0:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    49c2:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    49c4:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
    49c6:	2218      	movs	r2, #24
    49c8:	2100      	movs	r1, #0
    49ca:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    49cc:	7023      	strb	r3, [r4, #0]
    49ce:	f019 fdb6 	bl	1e53e <memset>
	params.attr = attr;
    49d2:	4b09      	ldr	r3, [pc, #36]	; (49f8 <bt_gatt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    49d4:	4669      	mov	r1, sp
	params.data = data;
    49d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    49da:	2000      	movs	r0, #0
	params.len = len;
    49dc:	2302      	movs	r3, #2
    49de:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    49e2:	f007 fdfd 	bl	c5e0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
}
    49e6:	f110 0f39 	cmn.w	r0, #57	; 0x39
    49ea:	bf08      	it	eq
    49ec:	2000      	moveq	r0, #0
    49ee:	b006      	add	sp, #24
    49f0:	bd10      	pop	{r4, pc}
    49f2:	bf00      	nop
    49f4:	20001d0c 	.word	0x20001d0c
    49f8:	000216bc 	.word	0x000216bc

000049fc <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    49fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4a00:	2308      	movs	r3, #8
{
    4a02:	b085      	sub	sp, #20
    4a04:	460d      	mov	r5, r1
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4a06:	6809      	ldr	r1, [r1, #0]
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4a08:	7c04      	ldrb	r4, [r0, #16]
{
    4a0a:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4a0c:	f019 f961 	bl	1dcd2 <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    4a10:	b968      	cbnz	r0, 4a2e <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4a12:	2108      	movs	r1, #8
    4a14:	4620      	mov	r0, r4
    4a16:	f019 f9a8 	bl	1dd6a <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
    4a1a:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    4a1c:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    4a1e:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    4a20:	b28a      	uxth	r2, r1
    4a22:	1a1b      	subs	r3, r3, r0
    4a24:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4a26:	4606      	mov	r6, r0
	*addr += ate_size;
    4a28:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    4a2a:	d003      	beq.n	4a34 <nvs_prev_ate+0x38>
		return 0;
    4a2c:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    4a2e:	b005      	add	sp, #20
    4a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    4a34:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    4a36:	bf03      	ittte	eq
    4a38:	89fb      	ldrheq	r3, [r7, #14]
    4a3a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    4a3e:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
    4a42:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
    4a46:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4a48:	2308      	movs	r3, #8
    4a4a:	466a      	mov	r2, sp
    4a4c:	4638      	mov	r0, r7
    4a4e:	f019 f940 	bl	1dcd2 <nvs_flash_rd>
	if (rc) {
    4a52:	2800      	cmp	r0, #0
    4a54:	d1eb      	bne.n	4a2e <nvs_prev_ate+0x32>
    4a56:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4a58:	4603      	mov	r3, r0
		if (data8[i] != value) {
    4a5a:	f812 1b01 	ldrb.w	r1, [r2], #1
    4a5e:	29ff      	cmp	r1, #255	; 0xff
    4a60:	d115      	bne.n	4a8e <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4a62:	3301      	adds	r3, #1
    4a64:	2b08      	cmp	r3, #8
    4a66:	d1f8      	bne.n	4a5a <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	602b      	str	r3, [r5, #0]
		return 0;
    4a6c:	e7df      	b.n	4a2e <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    4a6e:	89bb      	ldrh	r3, [r7, #12]
    4a70:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    4a74:	1b9b      	subs	r3, r3, r6
    4a76:	4299      	cmp	r1, r3
    4a78:	d20f      	bcs.n	4a9a <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    4a7a:	fbb1 f3f6 	udiv	r3, r1, r6
    4a7e:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    4a82:	b953      	cbnz	r3, 4a9a <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    4a84:	0c24      	lsrs	r4, r4, #16
    4a86:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    4a88:	440c      	add	r4, r1
    4a8a:	602c      	str	r4, [r5, #0]
			return 0;
    4a8c:	e7cf      	b.n	4a2e <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    4a8e:	4668      	mov	r0, sp
    4a90:	f019 f956 	bl	1dd40 <nvs_ate_crc8_check>
    4a94:	682c      	ldr	r4, [r5, #0]
    4a96:	2800      	cmp	r0, #0
    4a98:	d0e9      	beq.n	4a6e <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    4a9a:	4b10      	ldr	r3, [pc, #64]	; (4adc <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    4a9c:	1ba4      	subs	r4, r4, r6
    4a9e:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    4aa0:	ea04 0803 	and.w	r8, r4, r3
			data_end_addr &= ADDR_SECT_MASK;
    4aa4:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
    4aa6:	45a0      	cmp	r8, r4
    4aa8:	d2c0      	bcs.n	4a2c <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4aaa:	2308      	movs	r3, #8
    4aac:	eb0d 0203 	add.w	r2, sp, r3
    4ab0:	4621      	mov	r1, r4
    4ab2:	4638      	mov	r0, r7
    4ab4:	f019 f90d 	bl	1dcd2 <nvs_flash_rd>
		if (rc) {
    4ab8:	2800      	cmp	r0, #0
    4aba:	d1b8      	bne.n	4a2e <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    4abc:	a802      	add	r0, sp, #8
    4abe:	f019 f93f 	bl	1dd40 <nvs_ate_crc8_check>
    4ac2:	b940      	cbnz	r0, 4ad6 <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    4ac4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4ac8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			*addr = ate_end_addr;
    4acc:	602c      	str	r4, [r5, #0]
			data_end_addr &= ADDR_SECT_MASK;
    4ace:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    4ad2:	4413      	add	r3, r2
    4ad4:	4498      	add	r8, r3
		ate_end_addr -= ate_size;
    4ad6:	1ba4      	subs	r4, r4, r6
    4ad8:	e7e5      	b.n	4aa6 <nvs_prev_ate+0xaa>
    4ada:	bf00      	nop
    4adc:	ffff0000 	.word	0xffff0000

00004ae0 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    4ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ae4:	4605      	mov	r5, r0
    4ae6:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4ae8:	7c00      	ldrb	r0, [r0, #16]
    4aea:	2108      	movs	r1, #8
    4aec:	f019 f93d 	bl	1dd6a <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4af0:	686b      	ldr	r3, [r5, #4]
    4af2:	0c1b      	lsrs	r3, r3, #16
    4af4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4af6:	4606      	mov	r6, r0
	nvs_sector_advance(fs, &sec_addr);
    4af8:	a903      	add	r1, sp, #12
    4afa:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4afc:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    4afe:	f019 f93e 	bl	1dd7e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4b02:	9b03      	ldr	r3, [sp, #12]
    4b04:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4b06:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4b08:	4419      	add	r1, r3
    4b0a:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4b0c:	2308      	movs	r3, #8
    4b0e:	463a      	mov	r2, r7
    4b10:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4b12:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4b14:	f019 f8dd 	bl	1dcd2 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    4b18:	1e04      	subs	r4, r0, #0
    4b1a:	db71      	blt.n	4c00 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4b1c:	2300      	movs	r3, #0
		if (data8[i] != value) {
    4b1e:	5cfa      	ldrb	r2, [r7, r3]
    4b20:	2aff      	cmp	r2, #255	; 0xff
    4b22:	d171      	bne.n	4c08 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4b24:	3301      	adds	r3, #1
    4b26:	2b08      	cmp	r3, #8
    4b28:	d1f9      	bne.n	4b1e <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    4b2a:	9903      	ldr	r1, [sp, #12]
    4b2c:	4628      	mov	r0, r5
    4b2e:	f019 f955 	bl	1dddc <nvs_flash_erase_sector>
    4b32:	4604      	mov	r4, r0
		if (rc) {
    4b34:	e064      	b.n	4c00 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    4b36:	4557      	cmp	r7, sl
    4b38:	463e      	mov	r6, r7
    4b3a:	bf28      	it	cs
    4b3c:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    4b3e:	4633      	mov	r3, r6
    4b40:	aa0c      	add	r2, sp, #48	; 0x30
    4b42:	4641      	mov	r1, r8
    4b44:	4628      	mov	r0, r5
    4b46:	f019 f8c4 	bl	1dcd2 <nvs_flash_rd>
		if (rc) {
    4b4a:	4604      	mov	r4, r0
    4b4c:	2800      	cmp	r0, #0
    4b4e:	d157      	bne.n	4c00 <nvs_gc+0x120>
	if (!len) {
    4b50:	b136      	cbz	r6, 4b60 <nvs_gc+0x80>
    4b52:	68a9      	ldr	r1, [r5, #8]
    4b54:	4633      	mov	r3, r6
    4b56:	aa0c      	add	r2, sp, #48	; 0x30
    4b58:	4628      	mov	r0, r5
    4b5a:	f019 f965 	bl	1de28 <nvs_flash_al_wrt.part.0>
    4b5e:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    4b60:	7c28      	ldrb	r0, [r5, #16]
    4b62:	4631      	mov	r1, r6
    4b64:	f019 f901 	bl	1dd6a <nvs_al_size.isra.0>
    4b68:	68aa      	ldr	r2, [r5, #8]
    4b6a:	4402      	add	r2, r0
    4b6c:	60aa      	str	r2, [r5, #8]
		if (rc) {
    4b6e:	2c00      	cmp	r4, #0
    4b70:	d146      	bne.n	4c00 <nvs_gc+0x120>
		len -= bytes_to_copy;
    4b72:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
    4b76:	44b0      	add	r8, r6
    4b78:	e038      	b.n	4bec <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    4b7a:	9b01      	ldr	r3, [sp, #4]
    4b7c:	455b      	cmp	r3, fp
    4b7e:	d0d4      	beq.n	4b2a <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    4b80:	aa08      	add	r2, sp, #32
    4b82:	a904      	add	r1, sp, #16
    4b84:	4628      	mov	r0, r5
		gc_prev_addr = gc_addr;
    4b86:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    4b8a:	f7ff ff37 	bl	49fc <nvs_prev_ate>
		if (rc) {
    4b8e:	4604      	mov	r4, r0
    4b90:	2800      	cmp	r0, #0
    4b92:	d135      	bne.n	4c00 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    4b94:	686b      	ldr	r3, [r5, #4]
    4b96:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4b98:	aa0a      	add	r2, sp, #40	; 0x28
    4b9a:	a905      	add	r1, sp, #20
    4b9c:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
    4b9e:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4ba0:	f7ff ff2c 	bl	49fc <nvs_prev_ate>
			if (rc) {
    4ba4:	4604      	mov	r4, r0
    4ba6:	bb58      	cbnz	r0, 4c00 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    4ba8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    4bac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d1f1      	bne.n	4b98 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    4bb4:	a80a      	add	r0, sp, #40	; 0x28
    4bb6:	f019 f8c3 	bl	1dd40 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    4bba:	2800      	cmp	r0, #0
    4bbc:	d1ec      	bne.n	4b98 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    4bbe:	455f      	cmp	r7, fp
    4bc0:	d1db      	bne.n	4b7a <nvs_gc+0x9a>
    4bc2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d0d7      	beq.n	4b7a <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    4bca:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4bce:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
    4bd2:	4498      	add	r8, r3
			nvs_ate_crc8_update(&gc_ate);
    4bd4:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4bd6:	68ab      	ldr	r3, [r5, #8]
    4bd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    4bdc:	f019 f8bc 	bl	1dd58 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    4be0:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    4be2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    4be6:	427f      	negs	r7, r7
    4be8:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    4bec:	f1ba 0f00 	cmp.w	sl, #0
    4bf0:	d1a1      	bne.n	4b36 <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    4bf2:	a908      	add	r1, sp, #32
    4bf4:	4628      	mov	r0, r5
    4bf6:	f019 f95b 	bl	1deb0 <nvs_flash_ate_wrt>
			if (rc) {
    4bfa:	4604      	mov	r4, r0
    4bfc:	2800      	cmp	r0, #0
    4bfe:	d0bc      	beq.n	4b7a <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    4c00:	4620      	mov	r0, r4
    4c02:	b015      	add	sp, #84	; 0x54
    4c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    4c08:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
    4c0a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
    4c0e:	1b9a      	subs	r2, r3, r6
    4c10:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
    4c12:	4a03      	ldr	r2, [pc, #12]	; (4c20 <nvs_gc+0x140>)
    4c14:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    4c16:	440b      	add	r3, r1
    4c18:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4c1a:	4691      	mov	r9, r2
    4c1c:	e7b0      	b.n	4b80 <nvs_gc+0xa0>
    4c1e:	bf00      	nop
    4c20:	ffff0000 	.word	0xffff0000

00004c24 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    4c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c28:	4604      	mov	r4, r0
    4c2a:	b087      	sub	sp, #28
    4c2c:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    4c2e:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    4c32:	4630      	mov	r0, r6
    4c34:	f01b fc8e 	bl	20554 <z_impl_k_mutex_init>
    4c38:	4628      	mov	r0, r5
    4c3a:	f015 fed3 	bl	1a9e4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    4c3e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    4c40:	b978      	cbnz	r0, 4c62 <nvs_init+0x3e>
    4c42:	4b91      	ldr	r3, [pc, #580]	; (4e88 <nvs_init+0x264>)
    4c44:	4991      	ldr	r1, [pc, #580]	; (4e8c <nvs_init+0x268>)
		LOG_ERR("No valid flash device found");
    4c46:	4892      	ldr	r0, [pc, #584]	; (4e90 <nvs_init+0x26c>)
    4c48:	1ac9      	subs	r1, r1, r3
    4c4a:	08c9      	lsrs	r1, r1, #3
    4c4c:	0189      	lsls	r1, r1, #6
    4c4e:	f041 0101 	orr.w	r1, r1, #1
    4c52:	f018 fd29 	bl	1d6a8 <log_0>
		return -ENXIO;
    4c56:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    4c5a:	4628      	mov	r0, r5
    4c5c:	b007      	add	sp, #28
    4c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    4c62:	6843      	ldr	r3, [r0, #4]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    4c64:	7d1b      	ldrb	r3, [r3, #20]
    4c66:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    4c68:	2b20      	cmp	r3, #32
    4c6a:	d90c      	bls.n	4c86 <nvs_init+0x62>
    4c6c:	4987      	ldr	r1, [pc, #540]	; (4e8c <nvs_init+0x268>)
    4c6e:	4b86      	ldr	r3, [pc, #536]	; (4e88 <nvs_init+0x264>)
		LOG_ERR("Unsupported write block size");
    4c70:	4888      	ldr	r0, [pc, #544]	; (4e94 <nvs_init+0x270>)
    4c72:	1ac9      	subs	r1, r1, r3
    4c74:	08c9      	lsrs	r1, r1, #3
    4c76:	0189      	lsls	r1, r1, #6
    4c78:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to get page info");
    4c7c:	f018 fd14 	bl	1d6a8 <log_0>
		return -EINVAL;
    4c80:	f06f 0515 	mvn.w	r5, #21
    4c84:	e7e9      	b.n	4c5a <nvs_init+0x36>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    4c86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4c88:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    4c8a:	aa03      	add	r2, sp, #12
    4c8c:	f01b fbdd 	bl	2044a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    4c90:	b140      	cbz	r0, 4ca4 <nvs_init+0x80>
    4c92:	497e      	ldr	r1, [pc, #504]	; (4e8c <nvs_init+0x268>)
    4c94:	4b7c      	ldr	r3, [pc, #496]	; (4e88 <nvs_init+0x264>)
		LOG_ERR("Unable to get page info");
    4c96:	4880      	ldr	r0, [pc, #512]	; (4e98 <nvs_init+0x274>)
    4c98:	1ac9      	subs	r1, r1, r3
    4c9a:	08c9      	lsrs	r1, r1, #3
    4c9c:	0189      	lsls	r1, r1, #6
    4c9e:	f041 0101 	orr.w	r1, r1, #1
    4ca2:	e7eb      	b.n	4c7c <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    4ca4:	89a3      	ldrh	r3, [r4, #12]
    4ca6:	b12b      	cbz	r3, 4cb4 <nvs_init+0x90>
    4ca8:	9a04      	ldr	r2, [sp, #16]
    4caa:	fbb3 f5f2 	udiv	r5, r3, r2
    4cae:	fb02 3515 	mls	r5, r2, r5, r3
    4cb2:	b145      	cbz	r5, 4cc6 <nvs_init+0xa2>
    4cb4:	4975      	ldr	r1, [pc, #468]	; (4e8c <nvs_init+0x268>)
    4cb6:	4b74      	ldr	r3, [pc, #464]	; (4e88 <nvs_init+0x264>)
		LOG_ERR("Invalid sector size");
    4cb8:	4878      	ldr	r0, [pc, #480]	; (4e9c <nvs_init+0x278>)
    4cba:	1ac9      	subs	r1, r1, r3
    4cbc:	08c9      	lsrs	r1, r1, #3
    4cbe:	0189      	lsls	r1, r1, #6
    4cc0:	f041 0101 	orr.w	r1, r1, #1
    4cc4:	e7da      	b.n	4c7c <nvs_init+0x58>
	if (fs->sector_count < 2) {
    4cc6:	89e3      	ldrh	r3, [r4, #14]
    4cc8:	2b01      	cmp	r3, #1
    4cca:	d808      	bhi.n	4cde <nvs_init+0xba>
    4ccc:	496f      	ldr	r1, [pc, #444]	; (4e8c <nvs_init+0x268>)
    4cce:	4b6e      	ldr	r3, [pc, #440]	; (4e88 <nvs_init+0x264>)
		LOG_ERR("Configuration error - sector count");
    4cd0:	4873      	ldr	r0, [pc, #460]	; (4ea0 <nvs_init+0x27c>)
    4cd2:	1ac9      	subs	r1, r1, r3
    4cd4:	08c9      	lsrs	r1, r1, #3
    4cd6:	0189      	lsls	r1, r1, #6
    4cd8:	f041 0101 	orr.w	r1, r1, #1
    4cdc:	e7ce      	b.n	4c7c <nvs_init+0x58>
	u32_t addr = 0U;
    4cde:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ce4:	4630      	mov	r0, r6
    4ce6:	f016 f91d 	bl	1af24 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4cea:	7c20      	ldrb	r0, [r4, #16]
    4cec:	2108      	movs	r1, #8
    4cee:	f019 f83c 	bl	1dd6a <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
    4cf2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4cf4:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    4cf6:	89e3      	ldrh	r3, [r4, #14]
    4cf8:	fa1f f885 	uxth.w	r8, r5
    4cfc:	4543      	cmp	r3, r8
    4cfe:	d805      	bhi.n	4d0c <nvs_init+0xe8>
	if (closed_sectors == fs->sector_count) {
    4d00:	89e3      	ldrh	r3, [r4, #14]
    4d02:	454b      	cmp	r3, r9
    4d04:	d11e      	bne.n	4d44 <nvs_init+0x120>
		return -EDEADLK;
    4d06:	f06f 0520 	mvn.w	r5, #32
    4d0a:	e7a6      	b.n	4c5a <nvs_init+0x36>
		       (u16_t)(fs->sector_size - ate_size);
    4d0c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    4d0e:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    4d10:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    4d12:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    4d16:	2208      	movs	r2, #8
    4d18:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    4d1a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    4d1c:	f019 f83a 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
		if (rc) {
    4d20:	b170      	cbz	r0, 4d40 <nvs_init+0x11c>
			nvs_sector_advance(fs, &addr);
    4d22:	89e0      	ldrh	r0, [r4, #14]
    4d24:	4669      	mov	r1, sp
    4d26:	f019 f82a 	bl	1dd7e <nvs_sector_advance.isra.0>
			closed_sectors++;
    4d2a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    4d2e:	9900      	ldr	r1, [sp, #0]
    4d30:	2208      	movs	r2, #8
    4d32:	4620      	mov	r0, r4
			closed_sectors++;
    4d34:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    4d38:	f019 f82c 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d0df      	beq.n	4d00 <nvs_init+0xdc>
	for (i = 0; i < fs->sector_count; i++) {
    4d40:	3501      	adds	r5, #1
    4d42:	e7d8      	b.n	4cf6 <nvs_init+0xd2>
	if (i == fs->sector_count) {
    4d44:	4598      	cmp	r8, r3
    4d46:	d10a      	bne.n	4d5e <nvs_init+0x13a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    4d48:	9900      	ldr	r1, [sp, #0]
    4d4a:	2208      	movs	r2, #8
    4d4c:	1bc9      	subs	r1, r1, r7
    4d4e:	4620      	mov	r0, r4
    4d50:	f019 f820 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
    4d54:	b918      	cbnz	r0, 4d5e <nvs_init+0x13a>
			nvs_sector_advance(fs, &addr);
    4d56:	89e0      	ldrh	r0, [r4, #14]
    4d58:	4669      	mov	r1, sp
    4d5a:	f019 f810 	bl	1dd7e <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    4d5e:	9b00      	ldr	r3, [sp, #0]
    4d60:	1bda      	subs	r2, r3, r7
    4d62:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    4d64:	4a4f      	ldr	r2, [pc, #316]	; (4ea4 <nvs_init+0x280>)
    4d66:	4013      	ands	r3, r2
    4d68:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    4d6a:	4690      	mov	r8, r2
	while (fs->ate_wra >= fs->data_wra) {
    4d6c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    4d70:	4299      	cmp	r1, r3
    4d72:	d30e      	bcc.n	4d92 <nvs_init+0x16e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4d74:	2308      	movs	r3, #8
    4d76:	aa01      	add	r2, sp, #4
    4d78:	4620      	mov	r0, r4
    4d7a:	f018 ffaa 	bl	1dcd2 <nvs_flash_rd>
		if (rc) {
    4d7e:	4605      	mov	r5, r0
    4d80:	bb18      	cbnz	r0, 4dca <nvs_init+0x1a6>
    4d82:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    4d84:	f813 2b01 	ldrb.w	r2, [r3], #1
    4d88:	2aff      	cmp	r2, #255	; 0xff
    4d8a:	d165      	bne.n	4e58 <nvs_init+0x234>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4d8c:	3501      	adds	r5, #1
    4d8e:	2d08      	cmp	r5, #8
    4d90:	d1f8      	bne.n	4d84 <nvs_init+0x160>
	while (fs->ate_wra > fs->data_wra) {
    4d92:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    4d96:	428a      	cmp	r2, r1
    4d98:	d906      	bls.n	4da8 <nvs_init+0x184>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    4d9a:	1a52      	subs	r2, r2, r1
    4d9c:	4620      	mov	r0, r4
    4d9e:	f018 fff9 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
    4da2:	1e05      	subs	r5, r0, #0
    4da4:	db11      	blt.n	4dca <nvs_init+0x1a6>
		if (!rc) {
    4da6:	d13a      	bne.n	4e1e <nvs_init+0x1fa>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4da8:	6863      	ldr	r3, [r4, #4]
    4daa:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 4ea4 <nvs_init+0x280>
	nvs_sector_advance(fs, &addr);
    4dae:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4db0:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    4db4:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4db6:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    4db8:	f018 ffe1 	bl	1dd7e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    4dbc:	89a2      	ldrh	r2, [r4, #12]
    4dbe:	9900      	ldr	r1, [sp, #0]
    4dc0:	4620      	mov	r0, r4
    4dc2:	f018 ffe7 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
    4dc6:	1e05      	subs	r5, r0, #0
    4dc8:	da2e      	bge.n	4e28 <nvs_init+0x204>
	return z_impl_k_mutex_unlock(mutex);
    4dca:	4630      	mov	r0, r6
    4dcc:	f016 f91c 	bl	1b008 <z_impl_k_mutex_unlock>
	if (rc) {
    4dd0:	2d00      	cmp	r5, #0
    4dd2:	f47f af42 	bne.w	4c5a <nvs_init+0x36>
	fs->ready = true;
    4dd6:	2301      	movs	r3, #1
    4dd8:	7463      	strb	r3, [r4, #17]
    4dda:	4e2c      	ldr	r6, [pc, #176]	; (4e8c <nvs_init+0x268>)
    4ddc:	4b2a      	ldr	r3, [pc, #168]	; (4e88 <nvs_init+0x264>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    4dde:	89a2      	ldrh	r2, [r4, #12]
    4de0:	89e1      	ldrh	r1, [r4, #14]
    4de2:	4831      	ldr	r0, [pc, #196]	; (4ea8 <nvs_init+0x284>)
    4de4:	1af6      	subs	r6, r6, r3
    4de6:	08f6      	lsrs	r6, r6, #3
    4de8:	01b6      	lsls	r6, r6, #6
    4dea:	f046 0603 	orr.w	r6, r6, #3
    4dee:	4633      	mov	r3, r6
    4df0:	f018 fc7b 	bl	1d6ea <log_2>
	LOG_INF("alloc wra: %d, %x",
    4df4:	6861      	ldr	r1, [r4, #4]
    4df6:	482d      	ldr	r0, [pc, #180]	; (4eac <nvs_init+0x288>)
    4df8:	4633      	mov	r3, r6
    4dfa:	b28a      	uxth	r2, r1
    4dfc:	0c09      	lsrs	r1, r1, #16
    4dfe:	f018 fc74 	bl	1d6ea <log_2>
	LOG_INF("data wra: %d, %x",
    4e02:	68a1      	ldr	r1, [r4, #8]
    4e04:	482a      	ldr	r0, [pc, #168]	; (4eb0 <nvs_init+0x28c>)
    4e06:	b28a      	uxth	r2, r1
    4e08:	4633      	mov	r3, r6
    4e0a:	0c09      	lsrs	r1, r1, #16
    4e0c:	f018 fc6d 	bl	1d6ea <log_2>
	return 0;
    4e10:	e723      	b.n	4c5a <nvs_init+0x36>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4e12:	f1b9 0f00 	cmp.w	r9, #0
    4e16:	d034      	beq.n	4e82 <nvs_init+0x25e>
				return -ESPIPE;
    4e18:	f06f 051c 	mvn.w	r5, #28
    4e1c:	e71d      	b.n	4c5a <nvs_init+0x36>
		fs->data_wra += fs->write_block_size;
    4e1e:	68a3      	ldr	r3, [r4, #8]
    4e20:	7c22      	ldrb	r2, [r4, #16]
    4e22:	4413      	add	r3, r2
    4e24:	60a3      	str	r3, [r4, #8]
    4e26:	e7b4      	b.n	4d92 <nvs_init+0x16e>
	if (rc) {
    4e28:	d0cf      	beq.n	4dca <nvs_init+0x1a6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    4e2a:	6861      	ldr	r1, [r4, #4]
    4e2c:	4620      	mov	r0, r4
    4e2e:	f018 ffd5 	bl	1dddc <nvs_flash_erase_sector>
		if (rc) {
    4e32:	4605      	mov	r5, r0
    4e34:	2800      	cmp	r0, #0
    4e36:	d1c8      	bne.n	4dca <nvs_init+0x1a6>
		fs->ate_wra &= ADDR_SECT_MASK;
    4e38:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    4e3a:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    4e3c:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    4e40:	4403      	add	r3, r0
    4e42:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    4e46:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    4e48:	ea00 0008 	and.w	r0, r0, r8
    4e4c:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    4e4e:	4620      	mov	r0, r4
    4e50:	f7ff fe46 	bl	4ae0 <nvs_gc>
    4e54:	4605      	mov	r5, r0
end:
    4e56:	e7b8      	b.n	4dca <nvs_init+0x1a6>
		if (!nvs_ate_crc8_check(&last_ate)) {
    4e58:	a801      	add	r0, sp, #4
    4e5a:	f018 ff71 	bl	1dd40 <nvs_ate_crc8_check>
    4e5e:	6865      	ldr	r5, [r4, #4]
    4e60:	b978      	cbnz	r0, 4e82 <nvs_init+0x25e>
			fs->data_wra = addr & ADDR_SECT_MASK;
    4e62:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    4e64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4e68:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    4e6c:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    4e70:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4e72:	4649      	mov	r1, r9
    4e74:	7c20      	ldrb	r0, [r4, #16]
    4e76:	f018 ff78 	bl	1dd6a <nvs_al_size.isra.0>
    4e7a:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4e7c:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4e7e:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4e80:	d0c7      	beq.n	4e12 <nvs_init+0x1ee>
		fs->ate_wra -= ate_size;
    4e82:	1bed      	subs	r5, r5, r7
    4e84:	6065      	str	r5, [r4, #4]
    4e86:	e771      	b.n	4d6c <nvs_init+0x148>
    4e88:	00021114 	.word	0x00021114
    4e8c:	00021214 	.word	0x00021214
    4e90:	00022ff0 	.word	0x00022ff0
    4e94:	0002300c 	.word	0x0002300c
    4e98:	00023029 	.word	0x00023029
    4e9c:	00023041 	.word	0x00023041
    4ea0:	00023055 	.word	0x00023055
    4ea4:	ffff0000 	.word	0xffff0000
    4ea8:	00023078 	.word	0x00023078
    4eac:	0002308f 	.word	0x0002308f
    4eb0:	000230a1 	.word	0x000230a1

00004eb4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    4eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eb8:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    4eba:	7c43      	ldrb	r3, [r0, #17]
{
    4ebc:	b089      	sub	sp, #36	; 0x24
    4ebe:	4604      	mov	r4, r0
    4ec0:	4689      	mov	r9, r1
    4ec2:	4690      	mov	r8, r2
	if (!fs->ready) {
    4ec4:	b97b      	cbnz	r3, 4ee6 <nvs_write+0x32>
    4ec6:	4b67      	ldr	r3, [pc, #412]	; (5064 <nvs_write+0x1b0>)
    4ec8:	4967      	ldr	r1, [pc, #412]	; (5068 <nvs_write+0x1b4>)
		LOG_ERR("NVS not initialized");
    4eca:	4868      	ldr	r0, [pc, #416]	; (506c <nvs_write+0x1b8>)
    4ecc:	1ac9      	subs	r1, r1, r3
    4ece:	08c9      	lsrs	r1, r1, #3
    4ed0:	0189      	lsls	r1, r1, #6
    4ed2:	f041 0101 	orr.w	r1, r1, #1
    4ed6:	f018 fbe7 	bl	1d6a8 <log_0>
		return -EACCES;
    4eda:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    4ede:	4628      	mov	r0, r5
    4ee0:	b009      	add	sp, #36	; 0x24
    4ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4ee6:	f890 b010 	ldrb.w	fp, [r0, #16]
    4eea:	2108      	movs	r1, #8
    4eec:	4658      	mov	r0, fp
    4eee:	f018 ff3c 	bl	1dd6a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4ef2:	89a3      	ldrh	r3, [r4, #12]
    4ef4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    4ef8:	1a9b      	subs	r3, r3, r2
    4efa:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4efc:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4efe:	f0c0 80ac 	bcc.w	505a <nvs_write+0x1a6>
    4f02:	b11e      	cbz	r6, 4f0c <nvs_write+0x58>
	    ((len > 0) && (data == NULL))) {
    4f04:	f1b8 0f00 	cmp.w	r8, #0
    4f08:	f000 80a7 	beq.w	505a <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    4f0c:	6863      	ldr	r3, [r4, #4]
    4f0e:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4f10:	aa04      	add	r2, sp, #16
    4f12:	a903      	add	r1, sp, #12
    4f14:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    4f16:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4f18:	f7ff fd70 	bl	49fc <nvs_prev_ate>
		if (rc) {
    4f1c:	4605      	mov	r5, r0
    4f1e:	2800      	cmp	r0, #0
    4f20:	d1dd      	bne.n	4ede <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4f22:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4f26:	454b      	cmp	r3, r9
    4f28:	d005      	beq.n	4f36 <nvs_write+0x82>
		if (wlk_addr == fs->ate_wra) {
    4f2a:	6862      	ldr	r2, [r4, #4]
    4f2c:	9b03      	ldr	r3, [sp, #12]
    4f2e:	429a      	cmp	r2, r3
    4f30:	d1ee      	bne.n	4f10 <nvs_write+0x5c>
		if (len == 0) {
    4f32:	b9d6      	cbnz	r6, 4f6a <nvs_write+0xb6>
    4f34:	e7d3      	b.n	4ede <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4f36:	a804      	add	r0, sp, #16
    4f38:	f018 ff02 	bl	1dd40 <nvs_ate_crc8_check>
    4f3c:	2800      	cmp	r0, #0
    4f3e:	d1f4      	bne.n	4f2a <nvs_write+0x76>
		if (len == 0) {
    4f40:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    4f44:	b17e      	cbz	r6, 4f66 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    4f46:	42b3      	cmp	r3, r6
    4f48:	d10f      	bne.n	4f6a <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    4f4a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    4f4e:	0c39      	lsrs	r1, r7, #16
    4f50:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    4f52:	4401      	add	r1, r0
    4f54:	4633      	mov	r3, r6
    4f56:	4642      	mov	r2, r8
    4f58:	4620      	mov	r0, r4
    4f5a:	f018 fec8 	bl	1dcee <nvs_flash_block_cmp>
			if (rc <= 0) {
    4f5e:	2800      	cmp	r0, #0
    4f60:	dc03      	bgt.n	4f6a <nvs_write+0xb6>
    4f62:	4605      	mov	r5, r0
    4f64:	e7bb      	b.n	4ede <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    4f66:	2b00      	cmp	r3, #0
    4f68:	d0b9      	beq.n	4ede <nvs_write+0x2a>
	data_size = nvs_al_size(fs, len);
    4f6a:	4631      	mov	r1, r6
    4f6c:	4658      	mov	r0, fp
    4f6e:	f018 fefc 	bl	1dd6a <nvs_al_size.isra.0>
	if (data_size) {
    4f72:	4607      	mov	r7, r0
    4f74:	2800      	cmp	r0, #0
    4f76:	d13d      	bne.n	4ff4 <nvs_write+0x140>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    4f78:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    4f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f80:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    4f82:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 5070 <nvs_write+0x1bc>
    4f86:	f015 ffcd 	bl	1af24 <z_impl_k_mutex_lock>
	gc_count = 0;
    4f8a:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    4f8c:	89e2      	ldrh	r2, [r4, #14]
    4f8e:	4293      	cmp	r3, r2
    4f90:	d060      	beq.n	5054 <nvs_write+0x1a0>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    4f92:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    4f96:	1878      	adds	r0, r7, r1
    4f98:	4282      	cmp	r2, r0
    4f9a:	d32e      	bcc.n	4ffa <nvs_write+0x146>
	entry.part = 0xff;
    4f9c:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    4f9e:	a806      	add	r0, sp, #24
	entry.id = id;
    4fa0:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4fa4:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    4fa8:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    4fac:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    4fb0:	f018 fed2 	bl	1dd58 <nvs_ate_crc8_update>
	if (!len) {
    4fb4:	b136      	cbz	r6, 4fc4 <nvs_write+0x110>
    4fb6:	68a1      	ldr	r1, [r4, #8]
    4fb8:	4633      	mov	r3, r6
    4fba:	4642      	mov	r2, r8
    4fbc:	4620      	mov	r0, r4
    4fbe:	f018 ff33 	bl	1de28 <nvs_flash_al_wrt.part.0>
    4fc2:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    4fc4:	7c20      	ldrb	r0, [r4, #16]
    4fc6:	4631      	mov	r1, r6
    4fc8:	f018 fecf 	bl	1dd6a <nvs_al_size.isra.0>
    4fcc:	68a3      	ldr	r3, [r4, #8]
    4fce:	4403      	add	r3, r0
    4fd0:	60a3      	str	r3, [r4, #8]
	if (rc) {
    4fd2:	2d00      	cmp	r5, #0
    4fd4:	d144      	bne.n	5060 <nvs_write+0x1ac>
	rc = nvs_flash_ate_wrt(fs, &entry);
    4fd6:	a906      	add	r1, sp, #24
    4fd8:	4620      	mov	r0, r4
    4fda:	f018 ff69 	bl	1deb0 <nvs_flash_ate_wrt>
	if (rc) {
    4fde:	4605      	mov	r5, r0
    4fe0:	2800      	cmp	r0, #0
    4fe2:	d13d      	bne.n	5060 <nvs_write+0x1ac>
	rc = len;
    4fe4:	4632      	mov	r2, r6
    4fe6:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    4fe8:	4650      	mov	r0, sl
    4fea:	f016 f80d 	bl	1b008 <z_impl_k_mutex_unlock>
	return rc;
    4fee:	9a01      	ldr	r2, [sp, #4]
    4ff0:	4615      	mov	r5, r2
    4ff2:	e774      	b.n	4ede <nvs_write+0x2a>
		required_space = data_size + ate_size;
    4ff4:	4457      	add	r7, sl
    4ff6:	b2bf      	uxth	r7, r7
    4ff8:	e7be      	b.n	4f78 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4ffa:	7c20      	ldrb	r0, [r4, #16]
    4ffc:	9301      	str	r3, [sp, #4]
    4ffe:	2108      	movs	r1, #8
    5000:	f018 feb3 	bl	1dd6a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    5004:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5008:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    500c:	2100      	movs	r1, #0
    500e:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    5012:	1811      	adds	r1, r2, r0
    5014:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    5018:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    501a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    501e:	440a      	add	r2, r1
    5020:	1a10      	subs	r0, r2, r0
    5022:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    5024:	a806      	add	r0, sp, #24
    5026:	f018 fe97 	bl	1dd58 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    502a:	a906      	add	r1, sp, #24
    502c:	4620      	mov	r0, r4
    502e:	f018 ff3f 	bl	1deb0 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    5032:	89e0      	ldrh	r0, [r4, #14]
    5034:	1d21      	adds	r1, r4, #4
    5036:	f018 fea2 	bl	1dd7e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    503a:	6862      	ldr	r2, [r4, #4]
    503c:	ea02 020b 	and.w	r2, r2, fp
    5040:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    5042:	4620      	mov	r0, r4
    5044:	f7ff fd4c 	bl	4ae0 <nvs_gc>
		if (rc) {
    5048:	4602      	mov	r2, r0
    504a:	2800      	cmp	r0, #0
    504c:	d1cb      	bne.n	4fe6 <nvs_write+0x132>
		gc_count++;
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    5052:	e79b      	b.n	4f8c <nvs_write+0xd8>
			rc = -ENOSPC;
    5054:	f06f 021b 	mvn.w	r2, #27
    5058:	e7c5      	b.n	4fe6 <nvs_write+0x132>
		return -EINVAL;
    505a:	f06f 0515 	mvn.w	r5, #21
    505e:	e73e      	b.n	4ede <nvs_write+0x2a>
			if (rc) {
    5060:	462a      	mov	r2, r5
    5062:	e7c0      	b.n	4fe6 <nvs_write+0x132>
    5064:	00021114 	.word	0x00021114
    5068:	00021214 	.word	0x00021214
    506c:	00022fdc 	.word	0x00022fdc
    5070:	ffff0000 	.word	0xffff0000

00005074 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    5074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5078:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    507a:	7c43      	ldrb	r3, [r0, #17]
{
    507c:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    5080:	4604      	mov	r4, r0
    5082:	460f      	mov	r7, r1
    5084:	4690      	mov	r8, r2
	if (!fs->ready) {
    5086:	b973      	cbnz	r3, 50a6 <nvs_read_hist+0x32>
    5088:	4b2b      	ldr	r3, [pc, #172]	; (5138 <nvs_read_hist+0xc4>)
    508a:	492c      	ldr	r1, [pc, #176]	; (513c <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    508c:	482c      	ldr	r0, [pc, #176]	; (5140 <nvs_read_hist+0xcc>)
    508e:	1ac9      	subs	r1, r1, r3
    5090:	08c9      	lsrs	r1, r1, #3
    5092:	0189      	lsls	r1, r1, #6
    5094:	f041 0101 	orr.w	r1, r1, #1
    5098:	f018 fb06 	bl	1d6a8 <log_0>
		return -EACCES;
    509c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    50a0:	b004      	add	sp, #16
    50a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    50a6:	7c00      	ldrb	r0, [r0, #16]
    50a8:	2108      	movs	r1, #8
    50aa:	f018 fe5e 	bl	1dd6a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    50ae:	89a3      	ldrh	r3, [r4, #12]
    50b0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    50b4:	42b3      	cmp	r3, r6
    50b6:	d33b      	bcc.n	5130 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    50b8:	6863      	ldr	r3, [r4, #4]
    50ba:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    50bc:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    50c0:	aa02      	add	r2, sp, #8
    50c2:	a901      	add	r1, sp, #4
    50c4:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    50c6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    50c8:	f7ff fc98 	bl	49fc <nvs_prev_ate>
		if (rc) {
    50cc:	2800      	cmp	r0, #0
    50ce:	d1e7      	bne.n	50a0 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    50d0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    50d4:	42bb      	cmp	r3, r7
    50d6:	d107      	bne.n	50e8 <nvs_read_hist+0x74>
    50d8:	a802      	add	r0, sp, #8
    50da:	f018 fe31 	bl	1dd40 <nvs_ate_crc8_check>
    50de:	b918      	cbnz	r0, 50e8 <nvs_read_hist+0x74>
			cnt_his++;
    50e0:	f10a 0a01 	add.w	sl, sl, #1
    50e4:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    50e8:	6862      	ldr	r2, [r4, #4]
    50ea:	9b01      	ldr	r3, [sp, #4]
    50ec:	429a      	cmp	r2, r3
    50ee:	d018      	beq.n	5122 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    50f0:	45ca      	cmp	sl, r9
    50f2:	d9e5      	bls.n	50c0 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    50f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    50f8:	b1bb      	cbz	r3, 512a <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    50fa:	45ca      	cmp	sl, r9
    50fc:	d315      	bcc.n	512a <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    50fe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    5102:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5104:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    5106:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    510a:	bf28      	it	cs
    510c:	4633      	movcs	r3, r6
    510e:	4642      	mov	r2, r8
    5110:	4429      	add	r1, r5
    5112:	4620      	mov	r0, r4
    5114:	f018 fddd 	bl	1dcd2 <nvs_flash_rd>
	if (rc) {
    5118:	2800      	cmp	r0, #0
    511a:	d1c1      	bne.n	50a0 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    511c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    5120:	e7be      	b.n	50a0 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5122:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5126:	42bb      	cmp	r3, r7
    5128:	d0e4      	beq.n	50f4 <nvs_read_hist+0x80>
		return -ENOENT;
    512a:	f06f 0001 	mvn.w	r0, #1
    512e:	e7b7      	b.n	50a0 <nvs_read_hist+0x2c>
		return -EINVAL;
    5130:	f06f 0015 	mvn.w	r0, #21
    5134:	e7b4      	b.n	50a0 <nvs_read_hist+0x2c>
    5136:	bf00      	nop
    5138:	00021114 	.word	0x00021114
    513c:	00021214 	.word	0x00021214
    5140:	00022fdc 	.word	0x00022fdc

00005144 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    5144:	4b09      	ldr	r3, [pc, #36]	; (516c <get_flash_area_from_id+0x28>)
{
    5146:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    5148:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    514a:	4b09      	ldr	r3, [pc, #36]	; (5170 <get_flash_area_from_id+0x2c>)
{
    514c:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    514e:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    5150:	2300      	movs	r3, #0
    5152:	429d      	cmp	r5, r3
    5154:	dc01      	bgt.n	515a <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    5156:	2000      	movs	r0, #0
}
    5158:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    515a:	0119      	lsls	r1, r3, #4
    515c:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    5160:	5c61      	ldrb	r1, [r4, r1]
    5162:	4291      	cmp	r1, r2
    5164:	d0f8      	beq.n	5158 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    5166:	3301      	adds	r3, #1
    5168:	e7f3      	b.n	5152 <get_flash_area_from_id+0xe>
    516a:	bf00      	nop
    516c:	00021798 	.word	0x00021798
    5170:	20005af8 	.word	0x20005af8

00005174 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5174:	4b08      	ldr	r3, [pc, #32]	; (5198 <flash_area_open+0x24>)
    5176:	681b      	ldr	r3, [r3, #0]
{
    5178:	b510      	push	{r4, lr}
    517a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    517c:	b12b      	cbz	r3, 518a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    517e:	f7ff ffe1 	bl	5144 <get_flash_area_from_id>
	if (area == NULL) {
    5182:	b128      	cbz	r0, 5190 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5184:	6020      	str	r0, [r4, #0]
	return 0;
    5186:	2000      	movs	r0, #0
}
    5188:	bd10      	pop	{r4, pc}
		return -EACCES;
    518a:	f06f 000c 	mvn.w	r0, #12
    518e:	e7fb      	b.n	5188 <flash_area_open+0x14>
		return -ENOENT;
    5190:	f06f 0001 	mvn.w	r0, #1
    5194:	e7f8      	b.n	5188 <flash_area_open+0x14>
    5196:	bf00      	nop
    5198:	20005af8 	.word	0x20005af8

0000519c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    519c:	b530      	push	{r4, r5, lr}
    519e:	b089      	sub	sp, #36	; 0x24
    51a0:	460c      	mov	r4, r1
    51a2:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    51a4:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    51a6:	f7ff ffcd 	bl	5144 <get_flash_area_from_id>
	if (fa == NULL) {
    51aa:	b1b8      	cbz	r0, 51dc <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    51ac:	6843      	ldr	r3, [r0, #4]
    51ae:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    51b0:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    51b2:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    51b4:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    51b6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    51ba:	2300      	movs	r3, #0
	cb_data->status = 0;
    51bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    51c0:	9305      	str	r3, [sp, #20]
    51c2:	f015 fc0f 	bl	1a9e4 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    51c6:	b160      	cbz	r0, 51e2 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    51c8:	4907      	ldr	r1, [pc, #28]	; (51e8 <flash_area_get_sectors+0x4c>)
    51ca:	aa01      	add	r2, sp, #4
    51cc:	f01b f941 	bl	20452 <flash_page_foreach>
	if (cb_data->status == 0) {
    51d0:	9807      	ldr	r0, [sp, #28]
    51d2:	b908      	cbnz	r0, 51d8 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    51d4:	9b05      	ldr	r3, [sp, #20]
    51d6:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    51d8:	b009      	add	sp, #36	; 0x24
    51da:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    51dc:	f06f 0015 	mvn.w	r0, #21
    51e0:	e7fa      	b.n	51d8 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    51e2:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    51e6:	e7f7      	b.n	51d8 <flash_area_get_sectors+0x3c>
    51e8:	0001dee9 	.word	0x0001dee9

000051ec <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    51ec:	4b0f      	ldr	r3, [pc, #60]	; (522c <settings_save_one+0x40>)
{
    51ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    51f2:	681c      	ldr	r4, [r3, #0]
{
    51f4:	4605      	mov	r5, r0
    51f6:	460e      	mov	r6, r1
    51f8:	4617      	mov	r7, r2
	if (!cs) {
    51fa:	b19c      	cbz	r4, 5224 <settings_save_one+0x38>
	return z_impl_k_mutex_lock(mutex, timeout);
    51fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5200:	480b      	ldr	r0, [pc, #44]	; (5230 <settings_save_one+0x44>)
    5202:	f015 fe8f 	bl	1af24 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    5206:	6863      	ldr	r3, [r4, #4]
    5208:	4632      	mov	r2, r6
    520a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    520e:	4629      	mov	r1, r5
    5210:	463b      	mov	r3, r7
    5212:	4620      	mov	r0, r4
    5214:	47c0      	blx	r8
    5216:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5218:	4805      	ldr	r0, [pc, #20]	; (5230 <settings_save_one+0x44>)
    521a:	f015 fef5 	bl	1b008 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    521e:	4620      	mov	r0, r4
    5220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    5224:	f06f 0401 	mvn.w	r4, #1
    5228:	e7f9      	b.n	521e <settings_save_one+0x32>
    522a:	bf00      	nop
    522c:	20000150 	.word	0x20000150
    5230:	200061f8 	.word	0x200061f8

00005234 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    5234:	2300      	movs	r3, #0
    5236:	6003      	str	r3, [r0, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5238:	4b04      	ldr	r3, [pc, #16]	; (524c <settings_src_register+0x18>)
    523a:	685a      	ldr	r2, [r3, #4]
    523c:	b912      	cbnz	r2, 5244 <settings_src_register+0x10>
	list->head = node;
    523e:	e9c3 0000 	strd	r0, r0, [r3]
}
    5242:	4770      	bx	lr
	parent->next = child;
    5244:	6010      	str	r0, [r2, #0]
	list->tail = node;
    5246:	6058      	str	r0, [r3, #4]
}
    5248:	4770      	bx	lr
    524a:	bf00      	nop
    524c:	20000148 	.word	0x20000148

00005250 <settings_dst_register>:
	settings_save_dst = cs;
    5250:	4b01      	ldr	r3, [pc, #4]	; (5258 <settings_dst_register+0x8>)
    5252:	6018      	str	r0, [r3, #0]
}
    5254:	4770      	bx	lr
    5256:	bf00      	nop
    5258:	20000150 	.word	0x20000150

0000525c <settings_load_subtree>:
{
    525c:	b530      	push	{r4, r5, lr}
    525e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    5260:	2300      	movs	r3, #0
{
    5262:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    5264:	e9cd 3302 	strd	r3, r3, [sp, #8]
    5268:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    526a:	480e      	ldr	r0, [pc, #56]	; (52a4 <settings_load_subtree+0x48>)
    526c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5270:	f015 fe58 	bl	1af24 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    5274:	4b0c      	ldr	r3, [pc, #48]	; (52a8 <settings_load_subtree+0x4c>)
    5276:	681c      	ldr	r4, [r3, #0]
    5278:	2c00      	cmp	r4, #0
    527a:	bf38      	it	cc
    527c:	2400      	movcc	r4, #0
    527e:	b13c      	cbz	r4, 5290 <settings_load_subtree+0x34>
		cs->cs_itf->csi_load(cs, &arg);
    5280:	6863      	ldr	r3, [r4, #4]
    5282:	4620      	mov	r0, r4
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	a901      	add	r1, sp, #4
    5288:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    528a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    528c:	2c00      	cmp	r4, #0
    528e:	d1f6      	bne.n	527e <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
    5290:	4628      	mov	r0, r5
    5292:	f000 f8d5 	bl	5440 <settings_commit_subtree>
    5296:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5298:	4802      	ldr	r0, [pc, #8]	; (52a4 <settings_load_subtree+0x48>)
    529a:	f015 feb5 	bl	1b008 <z_impl_k_mutex_unlock>
}
    529e:	4620      	mov	r0, r4
    52a0:	b005      	add	sp, #20
    52a2:	bd30      	pop	{r4, r5, pc}
    52a4:	200061f8 	.word	0x200061f8
    52a8:	20000148 	.word	0x20000148

000052ac <settings_load_subtree_direct>:
{
    52ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    52ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
    52b2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    52b4:	480c      	ldr	r0, [pc, #48]	; (52e8 <settings_load_subtree_direct+0x3c>)
    52b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    52ba:	f015 fe33 	bl	1af24 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    52be:	4b0b      	ldr	r3, [pc, #44]	; (52ec <settings_load_subtree_direct+0x40>)
    52c0:	681c      	ldr	r4, [r3, #0]
    52c2:	2c00      	cmp	r4, #0
    52c4:	bf38      	it	cc
    52c6:	2400      	movcc	r4, #0
    52c8:	b13c      	cbz	r4, 52da <settings_load_subtree_direct+0x2e>
		cs->cs_itf->csi_load(cs, &arg);
    52ca:	6863      	ldr	r3, [r4, #4]
    52cc:	4620      	mov	r0, r4
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	a901      	add	r1, sp, #4
    52d2:	4798      	blx	r3
    52d4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    52d6:	2c00      	cmp	r4, #0
    52d8:	d1f6      	bne.n	52c8 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
    52da:	4803      	ldr	r0, [pc, #12]	; (52e8 <settings_load_subtree_direct+0x3c>)
    52dc:	f015 fe94 	bl	1b008 <z_impl_k_mutex_unlock>
}
    52e0:	2000      	movs	r0, #0
    52e2:	b004      	add	sp, #16
    52e4:	bd10      	pop	{r4, pc}
    52e6:	bf00      	nop
    52e8:	200061f8 	.word	0x200061f8
    52ec:	20000148 	.word	0x20000148

000052f0 <settings_store_init>:
	list->head = NULL;
    52f0:	4b02      	ldr	r3, [pc, #8]	; (52fc <settings_store_init+0xc>)
    52f2:	2200      	movs	r2, #0
	list->tail = NULL;
    52f4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    52f8:	4770      	bx	lr
    52fa:	bf00      	nop
    52fc:	20000148 	.word	0x20000148

00005300 <settings_init>:
	list->head = NULL;
    5300:	4b02      	ldr	r3, [pc, #8]	; (530c <settings_init+0xc>)
    5302:	2200      	movs	r2, #0
	list->tail = NULL;
    5304:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    5308:	f7ff bff2 	b.w	52f0 <settings_store_init>
    530c:	20000154 	.word	0x20000154

00005310 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    5310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5314:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    5316:	460e      	mov	r6, r1
    5318:	b109      	cbz	r1, 531e <settings_parse_and_lookup+0xe>
		*next = NULL;
    531a:	2300      	movs	r3, #0
    531c:	600b      	str	r3, [r1, #0]
    531e:	4c1e      	ldr	r4, [pc, #120]	; (5398 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5320:	f8df 807c 	ldr.w	r8, [pc, #124]	; 53a0 <settings_parse_and_lookup+0x90>
    5324:	2500      	movs	r5, #0
    5326:	4544      	cmp	r4, r8
    5328:	d308      	bcc.n	533c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    532a:	4b1c      	ldr	r3, [pc, #112]	; (539c <settings_parse_and_lookup+0x8c>)
    532c:	681c      	ldr	r4, [r3, #0]
    532e:	b10c      	cbz	r4, 5334 <settings_parse_and_lookup+0x24>
    5330:	3c14      	subs	r4, #20
    5332:	b9c4      	cbnz	r4, 5366 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    5334:	4628      	mov	r0, r5
    5336:	b002      	add	sp, #8
    5338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    533c:	6821      	ldr	r1, [r4, #0]
    533e:	aa01      	add	r2, sp, #4
    5340:	4638      	mov	r0, r7
    5342:	f018 fdf6 	bl	1df32 <settings_name_steq>
    5346:	b160      	cbz	r0, 5362 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    5348:	b925      	cbnz	r5, 5354 <settings_parse_and_lookup+0x44>
			if (next) {
    534a:	b10e      	cbz	r6, 5350 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	6033      	str	r3, [r6, #0]
    5350:	4625      	mov	r5, r4
    5352:	e006      	b.n	5362 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    5354:	6829      	ldr	r1, [r5, #0]
    5356:	6820      	ldr	r0, [r4, #0]
    5358:	2200      	movs	r2, #0
    535a:	f018 fdea 	bl	1df32 <settings_name_steq>
    535e:	2800      	cmp	r0, #0
    5360:	d1f3      	bne.n	534a <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5362:	3414      	adds	r4, #20
    5364:	e7df      	b.n	5326 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    5366:	6821      	ldr	r1, [r4, #0]
    5368:	aa01      	add	r2, sp, #4
    536a:	4638      	mov	r0, r7
    536c:	f018 fde1 	bl	1df32 <settings_name_steq>
    5370:	b160      	cbz	r0, 538c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    5372:	b925      	cbnz	r5, 537e <settings_parse_and_lookup+0x6e>
			if (next) {
    5374:	b10e      	cbz	r6, 537a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    5376:	9b01      	ldr	r3, [sp, #4]
    5378:	6033      	str	r3, [r6, #0]
    537a:	4625      	mov	r5, r4
    537c:	e006      	b.n	538c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    537e:	6829      	ldr	r1, [r5, #0]
    5380:	6820      	ldr	r0, [r4, #0]
    5382:	2200      	movs	r2, #0
    5384:	f018 fdd5 	bl	1df32 <settings_name_steq>
    5388:	2800      	cmp	r0, #0
    538a:	d1f3      	bne.n	5374 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    538c:	f114 0f14 	cmn.w	r4, #20
    5390:	d0d0      	beq.n	5334 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5392:	6964      	ldr	r4, [r4, #20]
    5394:	e7cb      	b.n	532e <settings_parse_and_lookup+0x1e>
    5396:	bf00      	nop
    5398:	000210b0 	.word	0x000210b0
    539c:	20000154 	.word	0x20000154
    53a0:	00021114 	.word	0x00021114

000053a4 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    53a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53a8:	b085      	sub	sp, #20
    53aa:	4605      	mov	r5, r0
    53ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    53b0:	9003      	str	r0, [sp, #12]
{
    53b2:	460c      	mov	r4, r1
    53b4:	4616      	mov	r6, r2
    53b6:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    53b8:	f1b8 0f00 	cmp.w	r8, #0
    53bc:	d018      	beq.n	53f0 <settings_call_set_handler+0x4c>
    53be:	f8d8 1000 	ldr.w	r1, [r8]
    53c2:	b181      	cbz	r1, 53e6 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    53c4:	aa03      	add	r2, sp, #12
    53c6:	f018 fdb4 	bl	1df32 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    53ca:	b960      	cbnz	r0, 53e6 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    53cc:	2000      	movs	r0, #0
    53ce:	e007      	b.n	53e0 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    53d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    53d4:	9300      	str	r3, [sp, #0]
    53d6:	9803      	ldr	r0, [sp, #12]
    53d8:	463b      	mov	r3, r7
    53da:	4632      	mov	r2, r6
    53dc:	4621      	mov	r1, r4
    53de:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    53e0:	b005      	add	sp, #20
    53e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    53e6:	f8d8 9004 	ldr.w	r9, [r8, #4]
    53ea:	f1b9 0f00 	cmp.w	r9, #0
    53ee:	d1ef      	bne.n	53d0 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    53f0:	a903      	add	r1, sp, #12
    53f2:	4628      	mov	r0, r5
    53f4:	f7ff ff8c 	bl	5310 <settings_parse_and_lookup>
		if (!ch) {
    53f8:	2800      	cmp	r0, #0
    53fa:	d0e7      	beq.n	53cc <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    53fc:	f8d0 8008 	ldr.w	r8, [r0, #8]
    5400:	9803      	ldr	r0, [sp, #12]
    5402:	4632      	mov	r2, r6
    5404:	463b      	mov	r3, r7
    5406:	4621      	mov	r1, r4
    5408:	47c0      	blx	r8
		if (rc != 0) {
    540a:	4606      	mov	r6, r0
    540c:	2800      	cmp	r0, #0
    540e:	d0dd      	beq.n	53cc <settings_call_set_handler+0x28>
    5410:	4b08      	ldr	r3, [pc, #32]	; (5434 <settings_call_set_handler+0x90>)
    5412:	4c09      	ldr	r4, [pc, #36]	; (5438 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    5414:	4628      	mov	r0, r5
    5416:	1ae4      	subs	r4, r4, r3
    5418:	08e4      	lsrs	r4, r4, #3
    541a:	f7fe fd71 	bl	3f00 <log_strdup>
    541e:	01a4      	lsls	r4, r4, #6
    5420:	f044 0401 	orr.w	r4, r4, #1
    5424:	4601      	mov	r1, r0
    5426:	4623      	mov	r3, r4
    5428:	4804      	ldr	r0, [pc, #16]	; (543c <settings_call_set_handler+0x98>)
    542a:	4632      	mov	r2, r6
    542c:	f018 f95d 	bl	1d6ea <log_2>
    5430:	e7cc      	b.n	53cc <settings_call_set_handler+0x28>
    5432:	bf00      	nop
    5434:	00021114 	.word	0x00021114
    5438:	0002124c 	.word	0x0002124c
    543c:	000230cc 	.word	0x000230cc

00005440 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5442:	4c1a      	ldr	r4, [pc, #104]	; (54ac <settings_commit_subtree+0x6c>)
    5444:	4f1a      	ldr	r7, [pc, #104]	; (54b0 <settings_commit_subtree+0x70>)
{
    5446:	4606      	mov	r6, r0
	rc = 0;
    5448:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    544a:	42bc      	cmp	r4, r7
    544c:	d306      	bcc.n	545c <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    544e:	4b19      	ldr	r3, [pc, #100]	; (54b4 <settings_commit_subtree+0x74>)
    5450:	681c      	ldr	r4, [r3, #0]
    5452:	b10c      	cbz	r4, 5458 <settings_commit_subtree+0x18>
    5454:	3c14      	subs	r4, #20
    5456:	b99c      	cbnz	r4, 5480 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    5458:	4628      	mov	r0, r5
    545a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    545c:	b91e      	cbnz	r6, 5466 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    545e:	68e3      	ldr	r3, [r4, #12]
    5460:	b94b      	cbnz	r3, 5476 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5462:	3414      	adds	r4, #20
    5464:	e7f1      	b.n	544a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5466:	6820      	ldr	r0, [r4, #0]
    5468:	2200      	movs	r2, #0
    546a:	4631      	mov	r1, r6
    546c:	f018 fd61 	bl	1df32 <settings_name_steq>
    5470:	2800      	cmp	r0, #0
    5472:	d1f4      	bne.n	545e <settings_commit_subtree+0x1e>
    5474:	e7f5      	b.n	5462 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    5476:	4798      	blx	r3
				rc = rc2;
    5478:	2d00      	cmp	r5, #0
    547a:	bf08      	it	eq
    547c:	4605      	moveq	r5, r0
    547e:	e7f0      	b.n	5462 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5480:	b936      	cbnz	r6, 5490 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    5482:	68e3      	ldr	r3, [r4, #12]
    5484:	b963      	cbnz	r3, 54a0 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5486:	f114 0f14 	cmn.w	r4, #20
    548a:	d0e5      	beq.n	5458 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    548c:	6964      	ldr	r4, [r4, #20]
    548e:	e7e0      	b.n	5452 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5490:	6820      	ldr	r0, [r4, #0]
    5492:	2200      	movs	r2, #0
    5494:	4631      	mov	r1, r6
    5496:	f018 fd4c 	bl	1df32 <settings_name_steq>
    549a:	2800      	cmp	r0, #0
    549c:	d1f1      	bne.n	5482 <settings_commit_subtree+0x42>
    549e:	e7f2      	b.n	5486 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    54a0:	4798      	blx	r3
				rc = rc2;
    54a2:	2d00      	cmp	r5, #0
    54a4:	bf08      	it	eq
    54a6:	4605      	moveq	r5, r0
    54a8:	e7ed      	b.n	5486 <settings_commit_subtree+0x46>
    54aa:	bf00      	nop
    54ac:	000210b0 	.word	0x000210b0
    54b0:	00021114 	.word	0x00021114
    54b4:	20000154 	.word	0x20000154

000054b8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    54b8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    54ba:	4c06      	ldr	r4, [pc, #24]	; (54d4 <settings_subsys_init+0x1c>)
    54bc:	7823      	ldrb	r3, [r4, #0]
    54be:	b93b      	cbnz	r3, 54d0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    54c0:	f7ff ff1e 	bl	5300 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    54c4:	f000 f864 	bl	5590 <settings_backend_init>

	if (!err) {
    54c8:	b908      	cbnz	r0, 54ce <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    54ca:	2301      	movs	r3, #1
    54cc:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    54ce:	bd10      	pop	{r4, pc}
		return 0;
    54d0:	2000      	movs	r0, #0
    54d2:	e7fc      	b.n	54ce <settings_subsys_init+0x16>
    54d4:	20001d0f 	.word	0x20001d0f

000054d8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    54d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    54dc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    54de:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 558c <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    54e2:	3401      	adds	r4, #1
{
    54e4:	b098      	sub	sp, #96	; 0x60
    54e6:	4680      	mov	r8, r0
    54e8:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    54ea:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    54ec:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    54f0:	1e65      	subs	r5, r4, #1
    54f2:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    54f4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    54f8:	d045      	beq.n	5586 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    54fa:	234a      	movs	r3, #74	; 0x4a
    54fc:	aa05      	add	r2, sp, #20
    54fe:	4629      	mov	r1, r5
    5500:	4630      	mov	r0, r6
    5502:	f018 fcea 	bl	1deda <nvs_read>
    5506:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    550a:	343f      	adds	r4, #63	; 0x3f
    550c:	b2a4      	uxth	r4, r4
    550e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5510:	4621      	mov	r1, r4
    5512:	2301      	movs	r3, #1
    5514:	f10d 020b 	add.w	r2, sp, #11
    5518:	4630      	mov	r0, r6
    551a:	f018 fcde 	bl	1deda <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    551e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5520:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    5522:	dc03      	bgt.n	552c <settings_nvs_load+0x54>
    5524:	2800      	cmp	r0, #0
    5526:	dc03      	bgt.n	5530 <settings_nvs_load+0x58>
{
    5528:	462c      	mov	r4, r5
    552a:	e7e1      	b.n	54f0 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    552c:	2800      	cmp	r0, #0
    552e:	dc16      	bgt.n	555e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    5530:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    5534:	42ab      	cmp	r3, r5
    5536:	d109      	bne.n	554c <settings_nvs_load+0x74>
				cf->last_name_id--;
    5538:	4642      	mov	r2, r8
    553a:	1e6b      	subs	r3, r5, #1
    553c:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    5540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    5544:	2302      	movs	r3, #2
    5546:	4630      	mov	r0, r6
    5548:	f7ff fcb4 	bl	4eb4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    554c:	4629      	mov	r1, r5
    554e:	4630      	mov	r0, r6
    5550:	f018 fcbf 	bl	1ded2 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    5554:	4621      	mov	r1, r4
    5556:	4630      	mov	r0, r6
    5558:	f018 fcbb 	bl	1ded2 <nvs_delete>
			continue;
    555c:	e7e4      	b.n	5528 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    555e:	ab18      	add	r3, sp, #96	; 0x60
    5560:	441f      	add	r7, r3
    5562:	2300      	movs	r3, #0
    5564:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    5568:	4652      	mov	r2, sl
    556a:	f8cd 9000 	str.w	r9, [sp]
    556e:	ab03      	add	r3, sp, #12
    5570:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    5572:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    5574:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    5578:	f7ff ff14 	bl	53a4 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    557c:	2800      	cmp	r0, #0
    557e:	d0d3      	beq.n	5528 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    5580:	b018      	add	sp, #96	; 0x60
    5582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5586:	2000      	movs	r0, #0
	return ret;
    5588:	e7fa      	b.n	5580 <settings_nvs_load+0xa8>
    558a:	bf00      	nop
    558c:	0001dfa5 	.word	0x0001dfa5

00005590 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    5590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    5592:	2301      	movs	r3, #1

	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    5594:	4669      	mov	r1, sp
    5596:	2004      	movs	r0, #4
	u32_t sector_cnt = 1;
    5598:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fa);
    559a:	f7ff fdeb 	bl	5174 <flash_area_open>
	if (rc) {
    559e:	4604      	mov	r4, r0
    55a0:	2800      	cmp	r0, #0
    55a2:	d136      	bne.n	5612 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    55a4:	aa02      	add	r2, sp, #8
    55a6:	a901      	add	r1, sp, #4
    55a8:	2004      	movs	r0, #4
    55aa:	f7ff fdf7 	bl	519c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    55ae:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &sector_cnt,
    55b2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    55b4:	d02d      	beq.n	5612 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    55b6:	b138      	cbz	r0, 55c8 <settings_backend_init+0x38>
    55b8:	340c      	adds	r4, #12
    55ba:	d005      	beq.n	55c8 <settings_backend_init+0x38>
		k_panic();
    55bc:	4040      	eors	r0, r0
    55be:	f380 8811 	msr	BASEPRI, r0
    55c2:	f04f 0004 	mov.w	r0, #4
    55c6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    55c8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    55ca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    55ce:	d223      	bcs.n	5618 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    55d0:	9a00      	ldr	r2, [sp, #0]
    55d2:	2300      	movs	r3, #0
    55d4:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    55d6:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    55d8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    55da:	4285      	cmp	r5, r0
    55dc:	b29c      	uxth	r4, r3
    55de:	d303      	bcc.n	55e8 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    55e0:	3301      	adds	r3, #1
    55e2:	2b08      	cmp	r3, #8
    55e4:	d1f8      	bne.n	55d8 <settings_backend_init+0x48>
    55e6:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    55e8:	4d0d      	ldr	r5, [pc, #52]	; (5620 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    55ea:	6853      	ldr	r3, [r2, #4]
    55ec:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    55ee:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    55f0:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    55f2:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    55f4:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    55f6:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    55f8:	f018 fd69 	bl	1e0ce <settings_nvs_backend_init>
	if (rc) {
    55fc:	4604      	mov	r4, r0
    55fe:	b940      	cbnz	r0, 5612 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    5600:	4e08      	ldr	r6, [pc, #32]	; (5624 <settings_backend_init+0x94>)
    5602:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    5604:	4628      	mov	r0, r5
    5606:	f7ff fe15 	bl	5234 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    560a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    560c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    560e:	f7ff fe1f 	bl	5250 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    5612:	4620      	mov	r0, r4
    5614:	b004      	add	sp, #16
    5616:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    5618:	f06f 0424 	mvn.w	r4, #36	; 0x24
    561c:	e7f9      	b.n	5612 <settings_backend_init+0x82>
    561e:	bf00      	nop
    5620:	2000015c 	.word	0x2000015c
    5624:	20005afc 	.word	0x20005afc

00005628 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5628:	280a      	cmp	r0, #10
{
    562a:	b538      	push	{r3, r4, r5, lr}
    562c:	4d07      	ldr	r5, [pc, #28]	; (564c <console_out+0x24>)
    562e:	4604      	mov	r4, r0
	if ('\n' == c) {
    5630:	d104      	bne.n	563c <console_out+0x14>
    5632:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    5634:	6843      	ldr	r3, [r0, #4]
    5636:	210d      	movs	r1, #13
    5638:	685b      	ldr	r3, [r3, #4]
    563a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    563c:	6828      	ldr	r0, [r5, #0]
    563e:	6843      	ldr	r3, [r0, #4]
    5640:	b2e1      	uxtb	r1, r4
    5642:	685b      	ldr	r3, [r3, #4]
    5644:	4798      	blx	r3

	return c;
}
    5646:	4620      	mov	r0, r4
    5648:	bd38      	pop	{r3, r4, r5, pc}
    564a:	bf00      	nop
    564c:	20000198 	.word	0x20000198

00005650 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    5650:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    5652:	4c04      	ldr	r4, [pc, #16]	; (5664 <uart_console_hook_install+0x14>)
    5654:	4620      	mov	r0, r4
    5656:	f001 fb3f 	bl	6cd8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    565a:	4620      	mov	r0, r4
}
    565c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    5660:	f7fe b828 	b.w	36b4 <__printk_hook_install>
    5664:	00005629 	.word	0x00005629

00005668 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    5668:	b508      	push	{r3, lr}
    566a:	4804      	ldr	r0, [pc, #16]	; (567c <uart_console_init+0x14>)
    566c:	f015 f9ba 	bl	1a9e4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5670:	4b03      	ldr	r3, [pc, #12]	; (5680 <uart_console_init+0x18>)
    5672:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    5674:	f7ff ffec 	bl	5650 <uart_console_hook_install>

	return 0;
}
    5678:	2000      	movs	r0, #0
    567a:	bd08      	pop	{r3, pc}
    567c:	00022f4f 	.word	0x00022f4f
    5680:	20000198 	.word	0x20000198

00005684 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5684:	4b16      	ldr	r3, [pc, #88]	; (56e0 <nrf_power_clock_isr+0x5c>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    5686:	b507      	push	{r0, r1, r2, lr}
    5688:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    568a:	b182      	cbz	r2, 56ae <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    568c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5690:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    5694:	07d1      	lsls	r1, r2, #31
    5696:	d50a      	bpl.n	56ae <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5698:	2200      	movs	r2, #0
    569a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    569c:	681b      	ldr	r3, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    569e:	4811      	ldr	r0, [pc, #68]	; (56e4 <nrf_power_clock_isr+0x60>)
    56a0:	9300      	str	r3, [sp, #0]
    (void)dummy;
    56a2:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    56a4:	6883      	ldr	r3, [r0, #8]
    56a6:	7a59      	ldrb	r1, [r3, #9]
    56a8:	b909      	cbnz	r1, 56ae <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    56aa:	f018 fd3a 	bl	1e122 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    56ae:	4b0e      	ldr	r3, [pc, #56]	; (56e8 <nrf_power_clock_isr+0x64>)
    56b0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    56b2:	b18a      	cbz	r2, 56d8 <nrf_power_clock_isr+0x54>
    return p_reg->INTENSET & mask;
    56b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    56b8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    56bc:	0792      	lsls	r2, r2, #30
    56be:	d50b      	bpl.n	56d8 <nrf_power_clock_isr+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56c0:	2200      	movs	r2, #0
    56c2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	9301      	str	r3, [sp, #4]
    (void)dummy;
    56c8:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    56ca:	4806      	ldr	r0, [pc, #24]	; (56e4 <nrf_power_clock_isr+0x60>)
    56cc:	2101      	movs	r1, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    56ce:	b003      	add	sp, #12
    56d0:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    56d4:	f018 bd25 	b.w	1e122 <clkstarted_handle>
}
    56d8:	b003      	add	sp, #12
    56da:	f85d fb04 	ldr.w	pc, [sp], #4
    56de:	bf00      	nop
    56e0:	40000100 	.word	0x40000100
    56e4:	200060b0 	.word	0x200060b0
    56e8:	40000104 	.word	0x40000104

000056ec <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    56ec:	4b0d      	ldr	r3, [pc, #52]	; (5724 <rtc1_nrf_isr+0x38>)
    56ee:	2200      	movs	r2, #0
    56f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    56f4:	f04f 0220 	mov.w	r2, #32
    56f8:	f3ef 8111 	mrs	r1, BASEPRI
    56fc:	f382 8811 	msr	BASEPRI, r2
    5700:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    5704:	4a08      	ldr	r2, [pc, #32]	; (5728 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5706:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    570a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    570c:	1ac0      	subs	r0, r0, r3
    570e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    5712:	4403      	add	r3, r0
    5714:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5716:	f381 8811 	msr	BASEPRI, r1
    571a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    571e:	f016 ba51 	b.w	1bbc4 <z_clock_announce>
    5722:	bf00      	nop
    5724:	40011000 	.word	0x40011000
    5728:	200001b4 	.word	0x200001b4

0000572c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    572c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    572e:	4818      	ldr	r0, [pc, #96]	; (5790 <z_clock_driver_init+0x64>)
    5730:	f015 f958 	bl	1a9e4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    5734:	b348      	cbz	r0, 578a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    5736:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    5738:	4d16      	ldr	r5, [pc, #88]	; (5794 <z_clock_driver_init+0x68>)
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	2101      	movs	r1, #1
    573e:	4798      	blx	r3
    5740:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    5742:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    5744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    5748:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    574c:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    5750:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5758:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    575c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5760:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	9301      	str	r3, [sp, #4]
    (void)dummy;
    5766:	9b01      	ldr	r3, [sp, #4]
    5768:	4b0b      	ldr	r3, [pc, #44]	; (5798 <z_clock_driver_init+0x6c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    576a:	4631      	mov	r1, r6
    576c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5770:	2011      	movs	r0, #17
    5772:	4622      	mov	r2, r4
    5774:	f000 f9b2 	bl	5adc <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    5778:	2011      	movs	r0, #17
    577a:	f000 f97d 	bl	5a78 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    577e:	4b07      	ldr	r3, [pc, #28]	; (579c <z_clock_driver_init+0x70>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    5780:	4620      	mov	r0, r4
    5782:	601e      	str	r6, [r3, #0]
    5784:	602e      	str	r6, [r5, #0]
}
    5786:	b002      	add	sp, #8
    5788:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    578a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    578e:	e7fa      	b.n	5786 <z_clock_driver_init+0x5a>
    5790:	000230f7 	.word	0x000230f7
    5794:	40011000 	.word	0x40011000
    5798:	e000e100 	.word	0xe000e100
    579c:	40011008 	.word	0x40011008

000057a0 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    57a0:	4b25      	ldr	r3, [pc, #148]	; (5838 <z_clock_set_timeout+0x98>)
{
    57a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    57a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    57a8:	bf08      	it	eq
    57aa:	4618      	moveq	r0, r3
	__asm__ volatile(
    57ac:	f04f 0220 	mov.w	r2, #32
    57b0:	f3ef 8511 	mrs	r5, BASEPRI
    57b4:	f382 8811 	msr	BASEPRI, r2
    57b8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    57bc:	491f      	ldr	r1, [pc, #124]	; (583c <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    57be:	4a20      	ldr	r2, [pc, #128]	; (5840 <z_clock_set_timeout+0xa0>)
    57c0:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    57c4:	6812      	ldr	r2, [r2, #0]
	return (a - b) & COUNTER_MAX;
    57c6:	1aa7      	subs	r7, r4, r2
    57c8:	f027 467f 	bic.w	r6, r7, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    57cc:	023f      	lsls	r7, r7, #8
    57ce:	d419      	bmi.n	5804 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    57d0:	3801      	subs	r0, #1
    57d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    57d6:	4298      	cmp	r0, r3
    57d8:	bfa8      	it	ge
    57da:	4618      	movge	r0, r3
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    57dc:	3601      	adds	r6, #1
    57de:	4430      	add	r0, r6
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    57e0:	4298      	cmp	r0, r3
    57e2:	bf94      	ite	ls
    57e4:	1813      	addls	r3, r2, r0
    57e6:	18d3      	addhi	r3, r2, r3
	return (a - b) & COUNTER_MAX;
    57e8:	1b1c      	subs	r4, r3, r4
    57ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    57ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    57f2:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    57f4:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    57f8:	d906      	bls.n	5808 <z_clock_set_timeout+0x68>
	__asm__ volatile(
    57fa:	f385 8811 	msr	BASEPRI, r5
    57fe:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    5802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    5804:	2000      	movs	r0, #0
    5806:	e7e9      	b.n	57dc <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    5808:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    580c:	480d      	ldr	r0, [pc, #52]	; (5844 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    580e:	1a9a      	subs	r2, r3, r2
    5810:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    5814:	1e54      	subs	r4, r2, #1
    5816:	4284      	cmp	r4, r0
    5818:	d905      	bls.n	5826 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    581a:	4b0b      	ldr	r3, [pc, #44]	; (5848 <z_clock_set_timeout+0xa8>)
    581c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5820:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    5824:	e7e9      	b.n	57fa <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    5826:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
    5828:	bf02      	ittt	eq
    582a:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    582c:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5830:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
}
    5834:	e7e1      	b.n	57fa <z_clock_set_timeout+0x5a>
    5836:	bf00      	nop
    5838:	00fffffe 	.word	0x00fffffe
    583c:	40011000 	.word	0x40011000
    5840:	200001b4 	.word	0x200001b4
    5844:	007ffffe 	.word	0x007ffffe
    5848:	e000e100 	.word	0xe000e100

0000584c <z_clock_elapsed>:
	__asm__ volatile(
    584c:	f04f 0220 	mov.w	r2, #32
    5850:	f3ef 8311 	mrs	r3, BASEPRI
    5854:	f382 8811 	msr	BASEPRI, r2
    5858:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    585c:	4a06      	ldr	r2, [pc, #24]	; (5878 <z_clock_elapsed+0x2c>)
    585e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    5862:	4a06      	ldr	r2, [pc, #24]	; (587c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    5864:	6812      	ldr	r2, [r2, #0]
    5866:	1a80      	subs	r0, r0, r2
    5868:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    586c:	f383 8811 	msr	BASEPRI, r3
    5870:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5874:	4770      	bx	lr
    5876:	bf00      	nop
    5878:	40011000 	.word	0x40011000
    587c:	200001b4 	.word	0x200001b4

00005880 <z_timer_cycle_get_32>:
	__asm__ volatile(
    5880:	f04f 0320 	mov.w	r3, #32
    5884:	f3ef 8211 	mrs	r2, BASEPRI
    5888:	f383 8811 	msr	BASEPRI, r3
    588c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    5890:	4906      	ldr	r1, [pc, #24]	; (58ac <z_timer_cycle_get_32+0x2c>)
    5892:	4b07      	ldr	r3, [pc, #28]	; (58b0 <z_timer_cycle_get_32+0x30>)
    5894:	6808      	ldr	r0, [r1, #0]
    5896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    589a:	f382 8811 	msr	BASEPRI, r2
    589e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    58a2:	1a1b      	subs	r3, r3, r0
    58a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    58a8:	4418      	add	r0, r3
    58aa:	4770      	bx	lr
    58ac:	200001b4 	.word	0x200001b4
    58b0:	40011000 	.word	0x40011000

000058b4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    58b4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    58b6:	4c11      	ldr	r4, [pc, #68]	; (58fc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    58b8:	4a11      	ldr	r2, [pc, #68]	; (5900 <_DoInit+0x4c>)
    58ba:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    58bc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    58be:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    58c2:	4b10      	ldr	r3, [pc, #64]	; (5904 <_DoInit+0x50>)
    58c4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    58c6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    58c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    58cc:	4a0e      	ldr	r2, [pc, #56]	; (5908 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    58ce:	490f      	ldr	r1, [pc, #60]	; (590c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    58d0:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    58d2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    58d4:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    58d6:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    58d8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    58da:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    58dc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    58de:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    58e0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    58e2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    58e4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    58e6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    58e8:	f018 fda1 	bl	1e42e <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    58ec:	4908      	ldr	r1, [pc, #32]	; (5910 <_DoInit+0x5c>)
    58ee:	4620      	mov	r0, r4
    58f0:	f018 fd9d 	bl	1e42e <strcpy>
  p->acID[6] = ' ';
    58f4:	2320      	movs	r3, #32
    58f6:	71a3      	strb	r3, [r4, #6]
}
    58f8:	bd10      	pop	{r4, pc}
    58fa:	bf00      	nop
    58fc:	200001b8 	.word	0x200001b8
    5900:	00023121 	.word	0x00023121
    5904:	20001d20 	.word	0x20001d20
    5908:	20001d10 	.word	0x20001d10
    590c:	0002312a 	.word	0x0002312a
    5910:	0002312e 	.word	0x0002312e

00005914 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    5918:	4f23      	ldr	r7, [pc, #140]	; (59a8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    591a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    591e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5920:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5924:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5926:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5928:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    592a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    592c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    592e:	d834      	bhi.n	599a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5930:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5934:	ebaa 0905 	sub.w	r9, sl, r5
    5938:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    593c:	4294      	cmp	r4, r2
    593e:	d811      	bhi.n	5964 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    5940:	f04f 0918 	mov.w	r9, #24
    5944:	fb06 9309 	mla	r3, r6, r9, r9
    5948:	443b      	add	r3, r7
    594a:	4622      	mov	r2, r4
    594c:	6858      	ldr	r0, [r3, #4]
    594e:	4641      	mov	r1, r8
    5950:	4428      	add	r0, r5
    5952:	f018 fdc9 	bl	1e4e8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5956:	fb09 7606 	mla	r6, r9, r6, r7
    595a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    595c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    595e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5964:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5966:	429c      	cmp	r4, r3
    5968:	d81b      	bhi.n	59a2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    596a:	fb00 bb0b 	mla	fp, r0, fp, fp
    596e:	44bb      	add	fp, r7
    5970:	464a      	mov	r2, r9
    5972:	f8db 0004 	ldr.w	r0, [fp, #4]
    5976:	442c      	add	r4, r5
    5978:	4428      	add	r0, r5
    597a:	f018 fdb5 	bl	1e4e8 <memcpy>
      if (NumBytes) {
    597e:	ebb4 040a 	subs.w	r4, r4, sl
    5982:	d006      	beq.n	5992 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    5984:	f8db 0004 	ldr.w	r0, [fp, #4]
    5988:	4622      	mov	r2, r4
    598a:	eb08 0109 	add.w	r1, r8, r9
    598e:	f018 fdab 	bl	1e4e8 <memcpy>
      pRing->WrOff = NumBytes;
    5992:	2018      	movs	r0, #24
    5994:	fb00 7606 	mla	r6, r0, r6, r7
    5998:	e7e0      	b.n	595c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    599a:	3b01      	subs	r3, #1
    599c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    599e:	42a3      	cmp	r3, r4
    59a0:	d2ce      	bcs.n	5940 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    59a2:	2000      	movs	r0, #0
    59a4:	e7dc      	b.n	5960 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    59a6:	bf00      	nop
    59a8:	200001b8 	.word	0x200001b8

000059ac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    59ac:	4b03      	ldr	r3, [pc, #12]	; (59bc <SEGGER_RTT_HasDataUp+0x10>)
    59ae:	2218      	movs	r2, #24
    59b0:	fb02 3300 	mla	r3, r2, r0, r3
    59b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    59b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    59b8:	1a80      	subs	r0, r0, r2
    59ba:	4770      	bx	lr
    59bc:	200001b8 	.word	0x200001b8

000059c0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    59c0:	4804      	ldr	r0, [pc, #16]	; (59d4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    59c2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    59c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    59c6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    59c8:	d003      	beq.n	59d2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    59ca:	4903      	ldr	r1, [pc, #12]	; (59d8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    59cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    59d0:	600a      	str	r2, [r1, #0]

000059d2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    59d2:	4770      	bx	lr
    ldr r0, =_kernel
    59d4:	20001c0c 	.word	0x20001c0c
    ldr r1, =_SCS_ICSR
    59d8:	e000ed04 	.word	0xe000ed04

000059dc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    59dc:	4a09      	ldr	r2, [pc, #36]	; (5a04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    59de:	490a      	ldr	r1, [pc, #40]	; (5a08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    59e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    59e2:	6809      	ldr	r1, [r1, #0]
    59e4:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    59e6:	4909      	ldr	r1, [pc, #36]	; (5a0c <arch_swap+0x30>)
	_current->arch.basepri = key;
    59e8:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    59ea:	684b      	ldr	r3, [r1, #4]
    59ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    59f0:	604b      	str	r3, [r1, #4]
    59f2:	2300      	movs	r3, #0
    59f4:	f383 8811 	msr	BASEPRI, r3
    59f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    59fc:	6893      	ldr	r3, [r2, #8]
}
    59fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
    5a00:	4770      	bx	lr
    5a02:	bf00      	nop
    5a04:	20001c0c 	.word	0x20001c0c
    5a08:	00022ba4 	.word	0x00022ba4
    5a0c:	e000ed00 	.word	0xe000ed00

00005a10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5a10:	490f      	ldr	r1, [pc, #60]	; (5a50 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5a12:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5a14:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    5a18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5a1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5a1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5a22:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5a24:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5a28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5a2c:	4f09      	ldr	r7, [pc, #36]	; (5a54 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5a2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5a32:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    5a34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5a36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5a38:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    5a3a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5a3c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5a3e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5a42:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    5a46:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5a4a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    5a4e:	4770      	bx	lr
    ldr r1, =_kernel
    5a50:	20001c0c 	.word	0x20001c0c
    ldr v4, =_SCS_ICSR
    5a54:	e000ed04 	.word	0xe000ed04

00005a58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    5a58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5a5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5a5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5a62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5a66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5a68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5a6c:	2902      	cmp	r1, #2
    beq _oops
    5a6e:	d0ff      	beq.n	5a70 <_oops>

00005a70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5a70:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5a72:	f018 fc5b 	bl	1e32c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5a76:	bd01      	pop	{r0, pc}

00005a78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5a78:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	db08      	blt.n	5a90 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a7e:	2201      	movs	r2, #1
    5a80:	f000 001f 	and.w	r0, r0, #31
    5a84:	fa02 f000 	lsl.w	r0, r2, r0
    5a88:	095b      	lsrs	r3, r3, #5
    5a8a:	4a02      	ldr	r2, [pc, #8]	; (5a94 <arch_irq_enable+0x1c>)
    5a8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5a90:	4770      	bx	lr
    5a92:	bf00      	nop
    5a94:	e000e100 	.word	0xe000e100

00005a98 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5a98:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	db0d      	blt.n	5aba <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a9e:	2201      	movs	r2, #1
    5aa0:	095b      	lsrs	r3, r3, #5
    5aa2:	f000 001f 	and.w	r0, r0, #31
    5aa6:	fa02 f000 	lsl.w	r0, r2, r0
    5aaa:	3320      	adds	r3, #32
    5aac:	4a03      	ldr	r2, [pc, #12]	; (5abc <arch_irq_disable+0x24>)
    5aae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5ab2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ab6:	f3bf 8f6f 	isb	sy
}
    5aba:	4770      	bx	lr
    5abc:	e000e100 	.word	0xe000e100

00005ac0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5ac0:	4b05      	ldr	r3, [pc, #20]	; (5ad8 <arch_irq_is_enabled+0x18>)
    5ac2:	0942      	lsrs	r2, r0, #5
    5ac4:	f000 001f 	and.w	r0, r0, #31
    5ac8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5acc:	2301      	movs	r3, #1
    5ace:	fa03 f000 	lsl.w	r0, r3, r0
}
    5ad2:	4010      	ands	r0, r2
    5ad4:	4770      	bx	lr
    5ad6:	bf00      	nop
    5ad8:	e000e100 	.word	0xe000e100

00005adc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5adc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5ade:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ae0:	bfa8      	it	ge
    5ae2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    5ae6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5aea:	bfb8      	it	lt
    5aec:	4b06      	ldrlt	r3, [pc, #24]	; (5b08 <z_arm_irq_priority_set+0x2c>)
    5aee:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5af2:	bfac      	ite	ge
    5af4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5af8:	f000 000f 	andlt.w	r0, r0, #15
    5afc:	b2c9      	uxtb	r1, r1
    5afe:	bfb4      	ite	lt
    5b00:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5b02:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    5b06:	4770      	bx	lr
    5b08:	e000ed14 	.word	0xe000ed14

00005b0c <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    5b0c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5b0e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5b10:	4b04      	ldr	r3, [pc, #16]	; (5b24 <_arch_isr_direct_pm+0x18>)
    5b12:	6a18      	ldr	r0, [r3, #32]
    5b14:	b118      	cbz	r0, 5b1e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    5b16:	2200      	movs	r2, #0
    5b18:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    5b1a:	f01a fce5 	bl	204e8 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5b1e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5b20:	bd08      	pop	{r3, pc}
    5b22:	bf00      	nop
    5b24:	20001c0c 	.word	0x20001c0c

00005b28 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    5b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5b2a:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    5b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b2e:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    5b30:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    5b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    5b34:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    5b36:	f01a ff2c 	bl	20992 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    5b3a:	f1a4 0220 	sub.w	r2, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    5b3e:	4b0a      	ldr	r3, [pc, #40]	; (5b68 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    5b40:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    5b44:	f023 0301 	bic.w	r3, r3, #1
    5b48:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    5b4a:	9b06      	ldr	r3, [sp, #24]
    5b4c:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    5b4e:	9b07      	ldr	r3, [sp, #28]
    5b50:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    5b52:	9b08      	ldr	r3, [sp, #32]
    5b54:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
    5b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5b5a:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    5b5c:	2300      	movs	r3, #0
	pInitCtx->basic.a1 = (u32_t)pEntry;
    5b5e:	6016      	str	r6, [r2, #0]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    5b60:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    5b62:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5b64:	b002      	add	sp, #8
    5b66:	bd70      	pop	{r4, r5, r6, pc}
    5b68:	0001c441 	.word	0x0001c441

00005b6c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    5b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6e:	4606      	mov	r6, r0
    5b70:	460c      	mov	r4, r1
    5b72:	4617      	mov	r7, r2
    5b74:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5b76:	f000 faf7 	bl	6168 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    5b7a:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    5b7c:	443c      	add	r4, r7
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    5b7e:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    5b82:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5b84:	4628      	mov	r0, r5
    5b86:	f384 8809 	msr	PSP, r4
    5b8a:	2100      	movs	r1, #0
    5b8c:	b663      	cpsie	if
    5b8e:	f381 8811 	msr	BASEPRI, r1
    5b92:	f3bf 8f6f 	isb	sy
    5b96:	2200      	movs	r2, #0
    5b98:	2300      	movs	r3, #0
    5b9a:	f016 fc51 	bl	1c440 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5b9e:	bf00      	nop
    5ba0:	20001c0c 	.word	0x20001c0c

00005ba4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    5ba4:	4901      	ldr	r1, [pc, #4]	; (5bac <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    5ba6:	2210      	movs	r2, #16
	str r2, [r1]
    5ba8:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    5baa:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    5bac:	e000ed10 	.word	0xe000ed10

00005bb0 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    5bb0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5bb2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    5bb6:	bf30      	wfi

	bx lr
    5bb8:	4770      	bx	lr
    5bba:	bf00      	nop

00005bbc <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    5bbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5bc0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    5bc4:	4672      	mov	r2, lr

	push {r0, lr}
    5bc6:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    5bc8:	f000 f9c8 	bl	5f5c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    5bcc:	bd01      	pop	{r0, pc}
    5bce:	bf00      	nop

00005bd0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5bd2:	4606      	mov	r6, r0

	if (esf != NULL) {
    5bd4:	460c      	mov	r4, r1
    5bd6:	b301      	cbz	r1, 5c1a <z_arm_fatal_error+0x4a>
    5bd8:	4b13      	ldr	r3, [pc, #76]	; (5c28 <z_arm_fatal_error+0x58>)
    5bda:	4d14      	ldr	r5, [pc, #80]	; (5c2c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5bdc:	4814      	ldr	r0, [pc, #80]	; (5c30 <z_arm_fatal_error+0x60>)
    5bde:	1aed      	subs	r5, r5, r3
    5be0:	08ed      	lsrs	r5, r5, #3
    5be2:	01ad      	lsls	r5, r5, #6
    5be4:	f045 0501 	orr.w	r5, r5, #1
    5be8:	f8ad 5000 	strh.w	r5, [sp]
    5bec:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    5bf0:	6809      	ldr	r1, [r1, #0]
    5bf2:	f017 fd93 	bl	1d71c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5bf6:	f8ad 5000 	strh.w	r5, [sp]
    5bfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5bfe:	68e1      	ldr	r1, [r4, #12]
    5c00:	480c      	ldr	r0, [pc, #48]	; (5c34 <z_arm_fatal_error+0x64>)
    5c02:	f017 fd8b 	bl	1d71c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5c06:	69e1      	ldr	r1, [r4, #28]
    5c08:	480b      	ldr	r0, [pc, #44]	; (5c38 <z_arm_fatal_error+0x68>)
    5c0a:	462a      	mov	r2, r5
    5c0c:	f017 fd59 	bl	1d6c2 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5c10:	69a1      	ldr	r1, [r4, #24]
    5c12:	480a      	ldr	r0, [pc, #40]	; (5c3c <z_arm_fatal_error+0x6c>)
    5c14:	462a      	mov	r2, r5
    5c16:	f017 fd54 	bl	1d6c2 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5c1a:	4621      	mov	r1, r4
    5c1c:	4630      	mov	r0, r6
}
    5c1e:	b002      	add	sp, #8
    5c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    5c24:	f014 bf22 	b.w	1aa6c <z_fatal_error>
    5c28:	00021114 	.word	0x00021114
    5c2c:	0002123c 	.word	0x0002123c
    5c30:	00023135 	.word	0x00023135
    5c34:	00023164 	.word	0x00023164
    5c38:	00023193 	.word	0x00023193
    5c3c:	000231a2 	.word	0x000231a2

00005c40 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5c40:	bf30      	wfi
    b z_SysNmiOnReset
    5c42:	f7ff bffd 	b.w	5c40 <z_SysNmiOnReset>
    5c46:	bf00      	nop

00005c48 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5c48:	4a0e      	ldr	r2, [pc, #56]	; (5c84 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5c4a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5c4c:	4b0e      	ldr	r3, [pc, #56]	; (5c88 <z_arm_prep_c+0x40>)
    5c4e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5c52:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c58:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5c5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5c60:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5c68:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5c6c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5c70:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5c74:	f014 ff74 	bl	1ab60 <z_bss_zero>
	z_data_copy();
    5c78:	f014 ff7c 	bl	1ab74 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    5c7c:	f000 fa42 	bl	6104 <z_arm_int_lib_init>
	z_cstart();
    5c80:	f014 ffb6 	bl	1abf0 <z_cstart>
    5c84:	00000000 	.word	0x00000000
    5c88:	e000ed00 	.word	0xe000ed00

00005c8c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5c8c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    5c8e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5c90:	4a0b      	ldr	r2, [pc, #44]	; (5cc0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5c92:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5c94:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5c96:	bf1e      	ittt	ne
	movne	r1, #0
    5c98:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5c9a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    5c9c:	f01a fc24 	blne	204e8 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5ca0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5ca2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5ca6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5caa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    5cae:	4905      	ldr	r1, [pc, #20]	; (5cc4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5cb0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5cb2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    5cb4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5cb6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5cba:	4903      	ldr	r1, [pc, #12]	; (5cc8 <_isr_wrapper+0x3c>)
	bx r1
    5cbc:	4708      	bx	r1
    5cbe:	0000      	.short	0x0000
	ldr r2, =_kernel
    5cc0:	20001c0c 	.word	0x20001c0c
	ldr r1, =_sw_isr_table
    5cc4:	00020dfc 	.word	0x00020dfc
	ldr r1, =z_arm_int_exit
    5cc8:	000059c1 	.word	0x000059c1

00005ccc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5ccc:	f018 fce0 	bl	1e690 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5cd0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5cd2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    5cd6:	4808      	ldr	r0, [pc, #32]	; (5cf8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    5cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5cdc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5cde:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5ce2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5ce6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5ce8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5cea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5cee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5cf2:	f7ff ffa9 	bl	5c48 <z_arm_prep_c>
    5cf6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    5cf8:	20003d50 	.word	0x20003d50

00005cfc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    5cfc:	b570      	push	{r4, r5, r6, lr}
    5cfe:	4b23      	ldr	r3, [pc, #140]	; (5d8c <usage_fault.isra.0+0x90>)
    5d00:	4c23      	ldr	r4, [pc, #140]	; (5d90 <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5d02:	4d24      	ldr	r5, [pc, #144]	; (5d94 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5d04:	4824      	ldr	r0, [pc, #144]	; (5d98 <usage_fault.isra.0+0x9c>)
    5d06:	1ae4      	subs	r4, r4, r3
    5d08:	08e4      	lsrs	r4, r4, #3
    5d0a:	01a4      	lsls	r4, r4, #6
    5d0c:	f044 0601 	orr.w	r6, r4, #1
    5d10:	4631      	mov	r1, r6
    5d12:	f017 fcc9 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5d16:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d18:	0193      	lsls	r3, r2, #6
    5d1a:	d503      	bpl.n	5d24 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    5d1c:	481f      	ldr	r0, [pc, #124]	; (5d9c <usage_fault.isra.0+0xa0>)
    5d1e:	4631      	mov	r1, r6
    5d20:	f017 fcc2 	bl	1d6a8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5d24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d26:	01dd      	lsls	r5, r3, #7
    5d28:	d504      	bpl.n	5d34 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    5d2a:	481d      	ldr	r0, [pc, #116]	; (5da0 <usage_fault.isra.0+0xa4>)
    5d2c:	f044 0101 	orr.w	r1, r4, #1
    5d30:	f017 fcba 	bl	1d6a8 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5d34:	4d17      	ldr	r5, [pc, #92]	; (5d94 <usage_fault.isra.0+0x98>)
    5d36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d38:	0310      	lsls	r0, r2, #12
    5d3a:	d504      	bpl.n	5d46 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    5d3c:	4819      	ldr	r0, [pc, #100]	; (5da4 <usage_fault.isra.0+0xa8>)
    5d3e:	f044 0101 	orr.w	r1, r4, #1
    5d42:	f017 fcb1 	bl	1d6a8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5d46:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d48:	0359      	lsls	r1, r3, #13
    5d4a:	d504      	bpl.n	5d56 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5d4c:	4816      	ldr	r0, [pc, #88]	; (5da8 <usage_fault.isra.0+0xac>)
    5d4e:	f044 0101 	orr.w	r1, r4, #1
    5d52:	f017 fca9 	bl	1d6a8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5d56:	4d0f      	ldr	r5, [pc, #60]	; (5d94 <usage_fault.isra.0+0x98>)
    5d58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d5a:	0392      	lsls	r2, r2, #14
    5d5c:	d504      	bpl.n	5d68 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5d5e:	4813      	ldr	r0, [pc, #76]	; (5dac <usage_fault.isra.0+0xb0>)
    5d60:	f044 0101 	orr.w	r1, r4, #1
    5d64:	f017 fca0 	bl	1d6a8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5d68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d6a:	03db      	lsls	r3, r3, #15
    5d6c:	d504      	bpl.n	5d78 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5d6e:	4810      	ldr	r0, [pc, #64]	; (5db0 <usage_fault.isra.0+0xb4>)
    5d70:	f044 0101 	orr.w	r1, r4, #1
    5d74:	f017 fc98 	bl	1d6a8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5d78:	4a06      	ldr	r2, [pc, #24]	; (5d94 <usage_fault.isra.0+0x98>)
    5d7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d7c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5d80:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5d84:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5d86:	2000      	movs	r0, #0
    5d88:	bd70      	pop	{r4, r5, r6, pc}
    5d8a:	bf00      	nop
    5d8c:	00021114 	.word	0x00021114
    5d90:	0002123c 	.word	0x0002123c
    5d94:	e000ed00 	.word	0xe000ed00
    5d98:	000231d0 	.word	0x000231d0
    5d9c:	000231e8 	.word	0x000231e8
    5da0:	000231fb 	.word	0x000231fb
    5da4:	00023215 	.word	0x00023215
    5da8:	00023233 	.word	0x00023233
    5dac:	00023258 	.word	0x00023258
    5db0:	00023272 	.word	0x00023272

00005db4 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5db8:	4b27      	ldr	r3, [pc, #156]	; (5e58 <mem_manage_fault.isra.0+0xa4>)
    5dba:	4c28      	ldr	r4, [pc, #160]	; (5e5c <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5dbc:	4d28      	ldr	r5, [pc, #160]	; (5e60 <mem_manage_fault.isra.0+0xac>)
    5dbe:	1ae4      	subs	r4, r4, r3
    5dc0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5dc2:	01a4      	lsls	r4, r4, #6
    5dc4:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5dc8:	4607      	mov	r7, r0
    5dca:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5dcc:	4825      	ldr	r0, [pc, #148]	; (5e64 <mem_manage_fault.isra.0+0xb0>)
    5dce:	4641      	mov	r1, r8
    5dd0:	f017 fc6a 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5dd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5dd6:	06d1      	lsls	r1, r2, #27
    5dd8:	d503      	bpl.n	5de2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5dda:	4823      	ldr	r0, [pc, #140]	; (5e68 <mem_manage_fault.isra.0+0xb4>)
    5ddc:	4641      	mov	r1, r8
    5dde:	f017 fc63 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5de2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5de4:	071a      	lsls	r2, r3, #28
    5de6:	d504      	bpl.n	5df2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5de8:	4820      	ldr	r0, [pc, #128]	; (5e6c <mem_manage_fault.isra.0+0xb8>)
    5dea:	f044 0101 	orr.w	r1, r4, #1
    5dee:	f017 fc5b 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5df2:	4d1b      	ldr	r5, [pc, #108]	; (5e60 <mem_manage_fault.isra.0+0xac>)
    5df4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5df6:	079b      	lsls	r3, r3, #30
    5df8:	d512      	bpl.n	5e20 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    5dfa:	f044 0801 	orr.w	r8, r4, #1
    5dfe:	481c      	ldr	r0, [pc, #112]	; (5e70 <mem_manage_fault.isra.0+0xbc>)
    5e00:	4641      	mov	r1, r8
    5e02:	f017 fc51 	bl	1d6a8 <log_0>
		mmfar = SCB->MMFAR;
    5e06:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5e08:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e0a:	0618      	lsls	r0, r3, #24
    5e0c:	d508      	bpl.n	5e20 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5e0e:	4819      	ldr	r0, [pc, #100]	; (5e74 <mem_manage_fault.isra.0+0xc0>)
    5e10:	4642      	mov	r2, r8
    5e12:	f017 fc56 	bl	1d6c2 <log_1>
			if (from_hard_fault) {
    5e16:	b11f      	cbz	r7, 5e20 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5e18:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5e1e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5e20:	4d0f      	ldr	r5, [pc, #60]	; (5e60 <mem_manage_fault.isra.0+0xac>)
    5e22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5e24:	07d2      	lsls	r2, r2, #31
    5e26:	d504      	bpl.n	5e32 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    5e28:	4813      	ldr	r0, [pc, #76]	; (5e78 <mem_manage_fault.isra.0+0xc4>)
    5e2a:	f044 0101 	orr.w	r1, r4, #1
    5e2e:	f017 fc3b 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5e32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e34:	069b      	lsls	r3, r3, #26
    5e36:	d504      	bpl.n	5e42 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    5e38:	4810      	ldr	r0, [pc, #64]	; (5e7c <mem_manage_fault.isra.0+0xc8>)
    5e3a:	f044 0101 	orr.w	r1, r4, #1
    5e3e:	f017 fc33 	bl	1d6a8 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    5e42:	4b07      	ldr	r3, [pc, #28]	; (5e60 <mem_manage_fault.isra.0+0xac>)
    5e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5e48:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5e4a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5e4e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5e50:	7030      	strb	r0, [r6, #0]
}
    5e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e56:	bf00      	nop
    5e58:	00021114 	.word	0x00021114
    5e5c:	0002123c 	.word	0x0002123c
    5e60:	e000ed00 	.word	0xe000ed00
    5e64:	0002329d 	.word	0x0002329d
    5e68:	000232b3 	.word	0x000232b3
    5e6c:	000232e6 	.word	0x000232e6
    5e70:	000232f9 	.word	0x000232f9
    5e74:	00023311 	.word	0x00023311
    5e78:	00023327 	.word	0x00023327
    5e7c:	00023346 	.word	0x00023346

00005e80 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e84:	4b2a      	ldr	r3, [pc, #168]	; (5f30 <bus_fault.isra.0+0xb0>)
    5e86:	4c2b      	ldr	r4, [pc, #172]	; (5f34 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5e88:	4d2b      	ldr	r5, [pc, #172]	; (5f38 <bus_fault.isra.0+0xb8>)
    5e8a:	1ae4      	subs	r4, r4, r3
    5e8c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5e8e:	01a4      	lsls	r4, r4, #6
    5e90:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5e94:	4607      	mov	r7, r0
    5e96:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5e98:	4828      	ldr	r0, [pc, #160]	; (5f3c <bus_fault.isra.0+0xbc>)
    5e9a:	4641      	mov	r1, r8
    5e9c:	f017 fc04 	bl	1d6a8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5ea0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ea2:	04d1      	lsls	r1, r2, #19
    5ea4:	d503      	bpl.n	5eae <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    5ea6:	4826      	ldr	r0, [pc, #152]	; (5f40 <bus_fault.isra.0+0xc0>)
    5ea8:	4641      	mov	r1, r8
    5eaa:	f017 fbfd 	bl	1d6a8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5eae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5eb0:	051a      	lsls	r2, r3, #20
    5eb2:	d504      	bpl.n	5ebe <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5eb4:	4823      	ldr	r0, [pc, #140]	; (5f44 <bus_fault.isra.0+0xc4>)
    5eb6:	f044 0101 	orr.w	r1, r4, #1
    5eba:	f017 fbf5 	bl	1d6a8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5ebe:	4d1e      	ldr	r5, [pc, #120]	; (5f38 <bus_fault.isra.0+0xb8>)
    5ec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ec2:	059b      	lsls	r3, r3, #22
    5ec4:	d512      	bpl.n	5eec <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    5ec6:	f044 0801 	orr.w	r8, r4, #1
    5eca:	481f      	ldr	r0, [pc, #124]	; (5f48 <bus_fault.isra.0+0xc8>)
    5ecc:	4641      	mov	r1, r8
    5ece:	f017 fbeb 	bl	1d6a8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5ed2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5ed4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ed6:	0418      	lsls	r0, r3, #16
    5ed8:	d508      	bpl.n	5eec <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5eda:	481c      	ldr	r0, [pc, #112]	; (5f4c <bus_fault.isra.0+0xcc>)
    5edc:	4642      	mov	r2, r8
    5ede:	f017 fbf0 	bl	1d6c2 <log_1>
			if (from_hard_fault) {
    5ee2:	b11f      	cbz	r7, 5eec <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5ee4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5eea:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5eec:	4d12      	ldr	r5, [pc, #72]	; (5f38 <bus_fault.isra.0+0xb8>)
    5eee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ef0:	0559      	lsls	r1, r3, #21
    5ef2:	d504      	bpl.n	5efe <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    5ef4:	4816      	ldr	r0, [pc, #88]	; (5f50 <bus_fault.isra.0+0xd0>)
    5ef6:	f044 0101 	orr.w	r1, r4, #1
    5efa:	f017 fbd5 	bl	1d6a8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5efe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f00:	05da      	lsls	r2, r3, #23
    5f02:	d50d      	bpl.n	5f20 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    5f04:	4813      	ldr	r0, [pc, #76]	; (5f54 <bus_fault.isra.0+0xd4>)
    5f06:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5f0a:	f017 fbcd 	bl	1d6a8 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5f0e:	4a0a      	ldr	r2, [pc, #40]	; (5f38 <bus_fault.isra.0+0xb8>)
    5f10:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5f12:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5f14:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5f18:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5f1a:	7030      	strb	r0, [r6, #0]
}
    5f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5f20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f22:	049b      	lsls	r3, r3, #18
    5f24:	d5f3      	bpl.n	5f0e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5f26:	480c      	ldr	r0, [pc, #48]	; (5f58 <bus_fault.isra.0+0xd8>)
    5f28:	f044 0101 	orr.w	r1, r4, #1
    5f2c:	e7ed      	b.n	5f0a <bus_fault.isra.0+0x8a>
    5f2e:	bf00      	nop
    5f30:	00021114 	.word	0x00021114
    5f34:	0002123c 	.word	0x0002123c
    5f38:	e000ed00 	.word	0xe000ed00
    5f3c:	00023375 	.word	0x00023375
    5f40:	0002338b 	.word	0x0002338b
    5f44:	000232e6 	.word	0x000232e6
    5f48:	0002339c 	.word	0x0002339c
    5f4c:	000233b5 	.word	0x000233b5
    5f50:	000233ca 	.word	0x000233ca
    5f54:	000233e5 	.word	0x000233e5
    5f58:	00023346 	.word	0x00023346

00005f5c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    5f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5f60:	4b56      	ldr	r3, [pc, #344]	; (60bc <z_arm_fault+0x160>)
    5f62:	685e      	ldr	r6, [r3, #4]
{
    5f64:	b08a      	sub	sp, #40	; 0x28
    5f66:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5f68:	f3c6 0408 	ubfx	r4, r6, #0, #9
    5f6c:	2500      	movs	r5, #0
    5f6e:	f385 8811 	msr	BASEPRI, r5
    5f72:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5f76:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    5f7a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    5f7e:	d10d      	bne.n	5f9c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5f80:	f002 030c 	and.w	r3, r2, #12
    5f84:	2b08      	cmp	r3, #8
    5f86:	d10b      	bne.n	5fa0 <z_arm_fault+0x44>
    5f88:	494d      	ldr	r1, [pc, #308]	; (60c0 <z_arm_fault+0x164>)
    5f8a:	4b4e      	ldr	r3, [pc, #312]	; (60c4 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5f8c:	484e      	ldr	r0, [pc, #312]	; (60c8 <z_arm_fault+0x16c>)
    5f8e:	1ac9      	subs	r1, r1, r3
    5f90:	08c9      	lsrs	r1, r1, #3
    5f92:	0189      	lsls	r1, r1, #6
    5f94:	f041 0101 	orr.w	r1, r1, #1
    5f98:	f017 fb86 	bl	1d6a8 <log_0>
		return NULL;
    5f9c:	462f      	mov	r7, r5
    5f9e:	e003      	b.n	5fa8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5fa0:	0712      	lsls	r2, r2, #28
    5fa2:	d401      	bmi.n	5fa8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    5fa4:	4607      	mov	r7, r0
			*nested_exc = true;
    5fa6:	2501      	movs	r5, #1
	*recoverable = false;
    5fa8:	2300      	movs	r3, #0
    5faa:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    5fae:	1ee3      	subs	r3, r4, #3
    5fb0:	2b09      	cmp	r3, #9
    5fb2:	d86a      	bhi.n	608a <z_arm_fault+0x12e>
    5fb4:	e8df f003 	tbb	[pc, r3]
    5fb8:	3c5c5805 	.word	0x3c5c5805
    5fbc:	69696969 	.word	0x69696969
    5fc0:	6069      	.short	0x6069
    5fc2:	4b40      	ldr	r3, [pc, #256]	; (60c4 <z_arm_fault+0x168>)
    5fc4:	4e3e      	ldr	r6, [pc, #248]	; (60c0 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    5fc6:	4841      	ldr	r0, [pc, #260]	; (60cc <z_arm_fault+0x170>)
    5fc8:	1af6      	subs	r6, r6, r3
    5fca:	08f6      	lsrs	r6, r6, #3
    5fcc:	01b6      	lsls	r6, r6, #6
    5fce:	f046 0601 	orr.w	r6, r6, #1
    5fd2:	4631      	mov	r1, r6
    5fd4:	f017 fb68 	bl	1d6a8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5fd8:	4b38      	ldr	r3, [pc, #224]	; (60bc <z_arm_fault+0x160>)
    5fda:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    5fdc:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5fe0:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    5fe4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5fe8:	d005      	beq.n	5ff6 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    5fea:	4839      	ldr	r0, [pc, #228]	; (60d0 <z_arm_fault+0x174>)
    5fec:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    5fee:	f017 fb5b 	bl	1d6a8 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    5ff2:	2400      	movs	r4, #0
}
    5ff4:	e01f      	b.n	6036 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ff8:	005b      	lsls	r3, r3, #1
    5ffa:	d51c      	bpl.n	6036 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    5ffc:	4835      	ldr	r0, [pc, #212]	; (60d4 <z_arm_fault+0x178>)
    5ffe:	4631      	mov	r1, r6
    6000:	f017 fb52 	bl	1d6a8 <log_0>
		if (SCB_MMFSR != 0) {
    6004:	4b34      	ldr	r3, [pc, #208]	; (60d8 <z_arm_fault+0x17c>)
    6006:	781b      	ldrb	r3, [r3, #0]
    6008:	b12b      	cbz	r3, 6016 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    600a:	f10d 0107 	add.w	r1, sp, #7
    600e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6010:	f7ff fed0 	bl	5db4 <mem_manage_fault.isra.0>
    6014:	e00e      	b.n	6034 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    6016:	4b31      	ldr	r3, [pc, #196]	; (60dc <z_arm_fault+0x180>)
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	b12b      	cbz	r3, 6028 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    601c:	f10d 0107 	add.w	r1, sp, #7
    6020:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6022:	f7ff ff2d 	bl	5e80 <bus_fault.isra.0>
    6026:	e005      	b.n	6034 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    6028:	4b2d      	ldr	r3, [pc, #180]	; (60e0 <z_arm_fault+0x184>)
    602a:	881b      	ldrh	r3, [r3, #0]
    602c:	b29b      	uxth	r3, r3
    602e:	b113      	cbz	r3, 6036 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    6030:	f7ff fe64 	bl	5cfc <usage_fault.isra.0>
    6034:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6036:	f89d 3007 	ldrb.w	r3, [sp, #7]
    603a:	b993      	cbnz	r3, 6062 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    603c:	2220      	movs	r2, #32
    603e:	4639      	mov	r1, r7
    6040:	a802      	add	r0, sp, #8
    6042:	f018 fa51 	bl	1e4e8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6046:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6048:	b39d      	cbz	r5, 60b2 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    604a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    604e:	b922      	cbnz	r2, 605a <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6050:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6054:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6058:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    605a:	a902      	add	r1, sp, #8
    605c:	4620      	mov	r0, r4
    605e:	f7ff fdb7 	bl	5bd0 <z_arm_fatal_error>
}
    6062:	b00a      	add	sp, #40	; 0x28
    6064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6068:	f10d 0107 	add.w	r1, sp, #7
    606c:	2000      	movs	r0, #0
    606e:	e7cf      	b.n	6010 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    6070:	f10d 0107 	add.w	r1, sp, #7
    6074:	2000      	movs	r0, #0
    6076:	e7d4      	b.n	6022 <z_arm_fault+0xc6>
    6078:	4911      	ldr	r1, [pc, #68]	; (60c0 <z_arm_fault+0x164>)
    607a:	4b12      	ldr	r3, [pc, #72]	; (60c4 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    607c:	4819      	ldr	r0, [pc, #100]	; (60e4 <z_arm_fault+0x188>)
    607e:	1ac9      	subs	r1, r1, r3
    6080:	08c9      	lsrs	r1, r1, #3
    6082:	0189      	lsls	r1, r1, #6
    6084:	f041 0101 	orr.w	r1, r1, #1
    6088:	e7b1      	b.n	5fee <z_arm_fault+0x92>
    608a:	4a0e      	ldr	r2, [pc, #56]	; (60c4 <z_arm_fault+0x168>)
    608c:	4b0c      	ldr	r3, [pc, #48]	; (60c0 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    608e:	4816      	ldr	r0, [pc, #88]	; (60e8 <z_arm_fault+0x18c>)
    6090:	4916      	ldr	r1, [pc, #88]	; (60ec <z_arm_fault+0x190>)
    6092:	1a9b      	subs	r3, r3, r2
    6094:	08db      	lsrs	r3, r3, #3
    6096:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    609a:	ea4f 1383 	mov.w	r3, r3, lsl #6
    609e:	bf18      	it	ne
    60a0:	4601      	movne	r1, r0
    60a2:	f043 0301 	orr.w	r3, r3, #1
    60a6:	4812      	ldr	r0, [pc, #72]	; (60f0 <z_arm_fault+0x194>)
    60a8:	f1a4 0210 	sub.w	r2, r4, #16
    60ac:	f017 fb1d 	bl	1d6ea <log_2>
    60b0:	e79f      	b.n	5ff2 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    60b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    60b6:	f023 0301 	bic.w	r3, r3, #1
    60ba:	e7cd      	b.n	6058 <z_arm_fault+0xfc>
    60bc:	e000ed00 	.word	0xe000ed00
    60c0:	0002123c 	.word	0x0002123c
    60c4:	00021114 	.word	0x00021114
    60c8:	000233fd 	.word	0x000233fd
    60cc:	00023428 	.word	0x00023428
    60d0:	0002343f 	.word	0x0002343f
    60d4:	00023460 	.word	0x00023460
    60d8:	e000ed28 	.word	0xe000ed28
    60dc:	e000ed29 	.word	0xe000ed29
    60e0:	e000ed2a 	.word	0xe000ed2a
    60e4:	0002347f 	.word	0x0002347f
    60e8:	000234ca 	.word	0x000234ca
    60ec:	000234b5 	.word	0x000234b5
    60f0:	000234e3 	.word	0x000234e3

000060f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    60f4:	4a02      	ldr	r2, [pc, #8]	; (6100 <z_arm_fault_init+0xc>)
    60f6:	6953      	ldr	r3, [r2, #20]
    60f8:	f043 0310 	orr.w	r3, r3, #16
    60fc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    60fe:	4770      	bx	lr
    6100:	e000ed00 	.word	0xe000ed00

00006104 <z_arm_int_lib_init>:
    6104:	4804      	ldr	r0, [pc, #16]	; (6118 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    6106:	2300      	movs	r3, #0
    6108:	2120      	movs	r1, #32
    610a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    610c:	3301      	adds	r3, #1
    610e:	2b30      	cmp	r3, #48	; 0x30
    6110:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6114:	d1f9      	bne.n	610a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6116:	4770      	bx	lr
    6118:	e000e100 	.word	0xe000e100

0000611c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    611c:	b538      	push	{r3, r4, r5, lr}
    611e:	4604      	mov	r4, r0
	__asm__ volatile(
    6120:	f04f 0320 	mov.w	r3, #32
    6124:	f3ef 8511 	mrs	r5, BASEPRI
    6128:	f383 8811 	msr	BASEPRI, r3
    612c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    6130:	f015 f95e 	bl	1b3f0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    6134:	4b0a      	ldr	r3, [pc, #40]	; (6160 <z_impl_k_thread_abort+0x44>)
    6136:	689b      	ldr	r3, [r3, #8]
    6138:	42a3      	cmp	r3, r4
    613a:	d10b      	bne.n	6154 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    613c:	4b09      	ldr	r3, [pc, #36]	; (6164 <z_impl_k_thread_abort+0x48>)
    613e:	685a      	ldr	r2, [r3, #4]
    6140:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6144:	b912      	cbnz	r2, 614c <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    6146:	4628      	mov	r0, r5
    6148:	f7ff fc48 	bl	59dc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    614c:	685a      	ldr	r2, [r3, #4]
    614e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6152:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    6154:	4628      	mov	r0, r5
}
    6156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    615a:	f01a bb38 	b.w	207ce <z_reschedule_irqlock>
    615e:	bf00      	nop
    6160:	20001c0c 	.word	0x20001c0c
    6164:	e000ed00 	.word	0xe000ed00

00006168 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    616a:	4b08      	ldr	r3, [pc, #32]	; (618c <z_arm_configure_static_mpu_regions+0x24>)
    616c:	9301      	str	r3, [sp, #4]
    616e:	4b08      	ldr	r3, [pc, #32]	; (6190 <z_arm_configure_static_mpu_regions+0x28>)
    6170:	9302      	str	r3, [sp, #8]
    6172:	4b08      	ldr	r3, [pc, #32]	; (6194 <z_arm_configure_static_mpu_regions+0x2c>)
    6174:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    6176:	ab01      	add	r3, sp, #4
    6178:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    617a:	4a07      	ldr	r2, [pc, #28]	; (6198 <z_arm_configure_static_mpu_regions+0x30>)
    617c:	4b07      	ldr	r3, [pc, #28]	; (619c <z_arm_configure_static_mpu_regions+0x34>)
    617e:	2101      	movs	r1, #1
    6180:	4668      	mov	r0, sp
    6182:	f000 f8af 	bl	62e4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6186:	b005      	add	sp, #20
    6188:	f85d fb04 	ldr.w	pc, [sp], #4
    618c:	20000000 	.word	0x20000000
    6190:	00000000 	.word	0x00000000
    6194:	060b0000 	.word	0x060b0000
    6198:	20000000 	.word	0x20000000
    619c:	20040000 	.word	0x20040000

000061a0 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    61a0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 6260 <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61a6:	4606      	mov	r6, r0
    61a8:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    61aa:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    61ac:	2100      	movs	r1, #0
    61ae:	42b9      	cmp	r1, r7
    61b0:	da1b      	bge.n	61ea <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    61b2:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    61b6:	f8de 4004 	ldr.w	r4, [lr, #4]
    61ba:	2c00      	cmp	r4, #0
    61bc:	d046      	beq.n	624c <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    61be:	b1ab      	cbz	r3, 61ec <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    61c0:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    61c2:	422c      	tst	r4, r5
    61c4:	d105      	bne.n	61d2 <mpu_configure_regions+0x32>
		&&
    61c6:	2c1f      	cmp	r4, #31
    61c8:	d903      	bls.n	61d2 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    61ca:	f8de 2000 	ldr.w	r2, [lr]
		&&
    61ce:	4215      	tst	r5, r2
    61d0:	d00c      	beq.n	61ec <mpu_configure_regions+0x4c>
    61d2:	4a1f      	ldr	r2, [pc, #124]	; (6250 <mpu_configure_regions+0xb0>)
    61d4:	4b1f      	ldr	r3, [pc, #124]	; (6254 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    61d6:	4820      	ldr	r0, [pc, #128]	; (6258 <mpu_configure_regions+0xb8>)
    61d8:	1ad2      	subs	r2, r2, r3
    61da:	08d2      	lsrs	r2, r2, #3
    61dc:	0192      	lsls	r2, r2, #6
    61de:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    61e2:	f017 fa6e 	bl	1d6c2 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    61e6:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    61ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    61ec:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    61ee:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    61f0:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    61f4:	f8de 0008 	ldr.w	r0, [lr, #8]
    61f8:	d916      	bls.n	6228 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    61fa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    61fe:	d815      	bhi.n	622c <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6200:	3c01      	subs	r4, #1
    6202:	fab4 f484 	clz	r4, r4
    6206:	f1c4 041f 	rsb	r4, r4, #31
    620a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    620c:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    620e:	ea44 0400 	orr.w	r4, r4, r0
    6212:	d90d      	bls.n	6230 <mpu_configure_regions+0x90>
    6214:	4a0e      	ldr	r2, [pc, #56]	; (6250 <mpu_configure_regions+0xb0>)
    6216:	4b0f      	ldr	r3, [pc, #60]	; (6254 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6218:	4810      	ldr	r0, [pc, #64]	; (625c <mpu_configure_regions+0xbc>)
    621a:	1ad2      	subs	r2, r2, r3
    621c:	08d2      	lsrs	r2, r2, #3
    621e:	0192      	lsls	r2, r2, #6
    6220:	f042 0201 	orr.w	r2, r2, #1
    6224:	4629      	mov	r1, r5
    6226:	e7dc      	b.n	61e2 <mpu_configure_regions+0x42>
		return REGION_32B;
    6228:	2408      	movs	r4, #8
    622a:	e7ef      	b.n	620c <mpu_configure_regions+0x6c>
		return REGION_4G;
    622c:	243e      	movs	r4, #62	; 0x3e
    622e:	e7ed      	b.n	620c <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6230:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6234:	432a      	orrs	r2, r5
    6236:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    623a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    623e:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    6242:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6244:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6248:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    624c:	3101      	adds	r1, #1
    624e:	e7ae      	b.n	61ae <mpu_configure_regions+0xe>
    6250:	0002122c 	.word	0x0002122c
    6254:	00021114 	.word	0x00021114
    6258:	000234fa 	.word	0x000234fa
    625c:	0002351d 	.word	0x0002351d
    6260:	e000ed90 	.word	0xe000ed90

00006264 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6264:	4b03      	ldr	r3, [pc, #12]	; (6274 <arm_core_mpu_enable+0x10>)
    6266:	2205      	movs	r2, #5
    6268:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    626a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    626e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6272:	4770      	bx	lr
    6274:	e000ed90 	.word	0xe000ed90

00006278 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6278:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    627c:	4b01      	ldr	r3, [pc, #4]	; (6284 <arm_core_mpu_disable+0xc>)
    627e:	2200      	movs	r2, #0
    6280:	605a      	str	r2, [r3, #4]
}
    6282:	4770      	bx	lr
    6284:	e000ed90 	.word	0xe000ed90

00006288 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6288:	4913      	ldr	r1, [pc, #76]	; (62d8 <arm_mpu_init+0x50>)
    628a:	6808      	ldr	r0, [r1, #0]
    628c:	2808      	cmp	r0, #8
{
    628e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6290:	d81e      	bhi.n	62d0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6292:	f7ff fff1 	bl	6278 <arm_core_mpu_disable>
	MPU->RNR = index;
    6296:	4c11      	ldr	r4, [pc, #68]	; (62dc <arm_mpu_init+0x54>)
    6298:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    629a:	2200      	movs	r2, #0
    629c:	4290      	cmp	r0, r2
    629e:	f101 010c 	add.w	r1, r1, #12
    62a2:	d105      	bne.n	62b0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    62a4:	4b0e      	ldr	r3, [pc, #56]	; (62e0 <arm_mpu_init+0x58>)
    62a6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    62a8:	f7ff ffdc 	bl	6264 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    62ac:	2000      	movs	r0, #0
}
    62ae:	bd10      	pop	{r4, pc}
    62b0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    62b2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    62b6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    62ba:	4313      	orrs	r3, r2
    62bc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    62c0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    62c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    62c6:	f043 0301 	orr.w	r3, r3, #1
    62ca:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    62cc:	3201      	adds	r2, #1
    62ce:	e7e5      	b.n	629c <arm_mpu_init+0x14>
		return -1;
    62d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62d4:	e7eb      	b.n	62ae <arm_mpu_init+0x26>
    62d6:	bf00      	nop
    62d8:	000217d0 	.word	0x000217d0
    62dc:	e000ed90 	.word	0xe000ed90
    62e0:	20002120 	.word	0x20002120

000062e4 <arm_core_mpu_configure_static_mpu_regions>:
{
    62e4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    62e6:	4c03      	ldr	r4, [pc, #12]	; (62f4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    62e8:	2301      	movs	r3, #1
    62ea:	7822      	ldrb	r2, [r4, #0]
    62ec:	f7ff ff58 	bl	61a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    62f0:	7020      	strb	r0, [r4, #0]
}
    62f2:	bd10      	pop	{r4, pc}
    62f4:	20002120 	.word	0x20002120

000062f8 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    62f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62fc:	b0a1      	sub	sp, #132	; 0x84
    62fe:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    6300:	2300      	movs	r3, #0
{
    6302:	9003      	str	r0, [sp, #12]
    6304:	4689      	mov	r9, r1
	count = 0;
    6306:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    6308:	4613      	mov	r3, r2
    630a:	f813 0b01 	ldrb.w	r0, [r3], #1
    630e:	9306      	str	r3, [sp, #24]
    6310:	b158      	cbz	r0, 632a <z_prf+0x32>
		if (c != '%') {
    6312:	2825      	cmp	r0, #37	; 0x25
    6314:	f000 8081 	beq.w	641a <z_prf+0x122>
			PUTC(c);
    6318:	4649      	mov	r1, r9
    631a:	9b03      	ldr	r3, [sp, #12]
    631c:	4798      	blx	r3
    631e:	3001      	adds	r0, #1
    6320:	f040 844a 	bne.w	6bb8 <z_prf+0x8c0>
    6324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6328:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    632a:	9802      	ldr	r0, [sp, #8]
    632c:	b021      	add	sp, #132	; 0x84
    632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    6332:	2d2b      	cmp	r5, #43	; 0x2b
    6334:	d065      	beq.n	6402 <z_prf+0x10a>
    6336:	d85c      	bhi.n	63f2 <z_prf+0xfa>
    6338:	2d20      	cmp	r5, #32
    633a:	d065      	beq.n	6408 <z_prf+0x110>
    633c:	2d23      	cmp	r5, #35	; 0x23
    633e:	d066      	beq.n	640e <z_prf+0x116>
    6340:	2d00      	cmp	r5, #0
    6342:	d0f2      	beq.n	632a <z_prf+0x32>
					fzero = true;
    6344:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    6348:	f8dd 8018 	ldr.w	r8, [sp, #24]
    634c:	48a4      	ldr	r0, [pc, #656]	; (65e0 <z_prf+0x2e8>)
    634e:	f818 5b01 	ldrb.w	r5, [r8], #1
    6352:	4629      	mov	r1, r5
    6354:	f018 f888 	bl	1e468 <strchr>
    6358:	2800      	cmp	r0, #0
    635a:	d1ea      	bne.n	6332 <z_prf+0x3a>
			if (c == '*') {
    635c:	2d2a      	cmp	r5, #42	; 0x2a
    635e:	d163      	bne.n	6428 <z_prf+0x130>
				width = va_arg(vargs, int);
    6360:	f856 3b04 	ldr.w	r3, [r6], #4
    6364:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    6366:	2b00      	cmp	r3, #0
					width = -width;
    6368:	bfbf      	itttt	lt
    636a:	425b      	neglt	r3, r3
    636c:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    636e:	2301      	movlt	r3, #1
    6370:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    6372:	9b06      	ldr	r3, [sp, #24]
    6374:	f898 5000 	ldrb.w	r5, [r8]
    6378:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    637c:	2d2e      	cmp	r5, #46	; 0x2e
    637e:	d178      	bne.n	6472 <z_prf+0x17a>
				if (c == '*') {
    6380:	f898 3000 	ldrb.w	r3, [r8]
    6384:	2b2a      	cmp	r3, #42	; 0x2a
    6386:	d171      	bne.n	646c <z_prf+0x174>
					precision = va_arg(vargs, int);
    6388:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    638c:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    6390:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    6394:	4893      	ldr	r0, [pc, #588]	; (65e4 <z_prf+0x2ec>)
    6396:	4629      	mov	r1, r5
    6398:	462f      	mov	r7, r5
    639a:	f018 f865 	bl	1e468 <strchr>
    639e:	2800      	cmp	r0, #0
    63a0:	d06a      	beq.n	6478 <z_prf+0x180>
				c = *format++;
    63a2:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    63a4:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    63a6:	f813 5b01 	ldrb.w	r5, [r3], #1
    63aa:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    63ac:	d107      	bne.n	63be <z_prf+0xc6>
    63ae:	2d68      	cmp	r5, #104	; 0x68
    63b0:	d105      	bne.n	63be <z_prf+0xc6>
					c = *format++;
    63b2:	f108 0302 	add.w	r3, r8, #2
    63b6:	f898 5001 	ldrb.w	r5, [r8, #1]
    63ba:	9306      	str	r3, [sp, #24]
					i = 'H';
    63bc:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    63be:	2d78      	cmp	r5, #120	; 0x78
    63c0:	d808      	bhi.n	63d4 <z_prf+0xdc>
    63c2:	2d57      	cmp	r5, #87	; 0x57
    63c4:	d85c      	bhi.n	6480 <z_prf+0x188>
    63c6:	2d25      	cmp	r5, #37	; 0x25
    63c8:	f000 83f2 	beq.w	6bb0 <z_prf+0x8b8>
    63cc:	f200 80a2 	bhi.w	6514 <z_prf+0x21c>
    63d0:	2d00      	cmp	r5, #0
    63d2:	d0aa      	beq.n	632a <z_prf+0x32>
				PUTC('%');
    63d4:	9b03      	ldr	r3, [sp, #12]
    63d6:	4649      	mov	r1, r9
    63d8:	2025      	movs	r0, #37	; 0x25
    63da:	4798      	blx	r3
    63dc:	3001      	adds	r0, #1
    63de:	d0a1      	beq.n	6324 <z_prf+0x2c>
				PUTC(c);
    63e0:	9b03      	ldr	r3, [sp, #12]
    63e2:	4649      	mov	r1, r9
    63e4:	4628      	mov	r0, r5
    63e6:	4798      	blx	r3
    63e8:	3001      	adds	r0, #1
    63ea:	d09b      	beq.n	6324 <z_prf+0x2c>
				count += 2;
    63ec:	9b02      	ldr	r3, [sp, #8]
    63ee:	3302      	adds	r3, #2
    63f0:	e3e4      	b.n	6bbc <z_prf+0x8c4>
				switch (c) {
    63f2:	2d2d      	cmp	r5, #45	; 0x2d
    63f4:	d00e      	beq.n	6414 <z_prf+0x11c>
					fzero = true;
    63f6:	2d30      	cmp	r5, #48	; 0x30
    63f8:	9b08      	ldr	r3, [sp, #32]
    63fa:	bf08      	it	eq
    63fc:	2301      	moveq	r3, #1
    63fe:	9308      	str	r3, [sp, #32]
    6400:	e7a0      	b.n	6344 <z_prf+0x4c>
					fplus = true;
    6402:	2301      	movs	r3, #1
    6404:	9309      	str	r3, [sp, #36]	; 0x24
    6406:	e79d      	b.n	6344 <z_prf+0x4c>
					fspace = true;
    6408:	2301      	movs	r3, #1
    640a:	930c      	str	r3, [sp, #48]	; 0x30
    640c:	e79a      	b.n	6344 <z_prf+0x4c>
					falt = true;
    640e:	f04f 0a01 	mov.w	sl, #1
    6412:	e797      	b.n	6344 <z_prf+0x4c>
				switch (c) {
    6414:	2301      	movs	r3, #1
    6416:	930d      	str	r3, [sp, #52]	; 0x34
    6418:	e794      	b.n	6344 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    641a:	2300      	movs	r3, #0
    641c:	9308      	str	r3, [sp, #32]
    641e:	930c      	str	r3, [sp, #48]	; 0x30
    6420:	9309      	str	r3, [sp, #36]	; 0x24
    6422:	930d      	str	r3, [sp, #52]	; 0x34
    6424:	469a      	mov	sl, r3
    6426:	e78f      	b.n	6348 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    6428:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
    642c:	2b09      	cmp	r3, #9
				width = 0;
    642e:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    6430:	d8a4      	bhi.n	637c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    6432:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    6434:	f8dd 8018 	ldr.w	r8, [sp, #24]
    6438:	f818 5b01 	ldrb.w	r5, [r8], #1
    643c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    6440:	2b09      	cmp	r3, #9
    6442:	d89b      	bhi.n	637c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    6444:	9b07      	ldr	r3, [sp, #28]
    6446:	fb02 5503 	mla	r5, r2, r3, r5
    644a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    644e:	e9cd 8306 	strd	r8, r3, [sp, #24]
    6452:	e7ef      	b.n	6434 <z_prf+0x13c>
    6454:	fb01 3404 	mla	r4, r1, r4, r3
    6458:	3c30      	subs	r4, #48	; 0x30
    645a:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    645c:	4642      	mov	r2, r8
    645e:	f812 3b01 	ldrb.w	r3, [r2], #1
    6462:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6466:	2809      	cmp	r0, #9
    6468:	d9f4      	bls.n	6454 <z_prf+0x15c>
    646a:	e791      	b.n	6390 <z_prf+0x98>
	int i = 0;
    646c:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    646e:	210a      	movs	r1, #10
    6470:	e7f4      	b.n	645c <z_prf+0x164>
			precision = -1;
    6472:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6476:	e78d      	b.n	6394 <z_prf+0x9c>
    6478:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    647c:	4607      	mov	r7, r0
    647e:	e79e      	b.n	63be <z_prf+0xc6>
    6480:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    6484:	2b20      	cmp	r3, #32
    6486:	d8a5      	bhi.n	63d4 <z_prf+0xdc>
    6488:	a201      	add	r2, pc, #4	; (adr r2, 6490 <z_prf+0x198>)
    648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    648e:	bf00      	nop
    6490:	00006b15 	.word	0x00006b15
    6494:	000063d5 	.word	0x000063d5
    6498:	000063d5 	.word	0x000063d5
    649c:	000063d5 	.word	0x000063d5
    64a0:	000063d5 	.word	0x000063d5
    64a4:	000063d5 	.word	0x000063d5
    64a8:	000063d5 	.word	0x000063d5
    64ac:	000063d5 	.word	0x000063d5
    64b0:	000063d5 	.word	0x000063d5
    64b4:	000063d5 	.word	0x000063d5
    64b8:	000063d5 	.word	0x000063d5
    64bc:	000065e9 	.word	0x000065e9
    64c0:	000066bf 	.word	0x000066bf
    64c4:	00006521 	.word	0x00006521
    64c8:	00006521 	.word	0x00006521
    64cc:	00006521 	.word	0x00006521
    64d0:	000063d5 	.word	0x000063d5
    64d4:	000066bf 	.word	0x000066bf
    64d8:	000063d5 	.word	0x000063d5
    64dc:	000063d5 	.word	0x000063d5
    64e0:	000063d5 	.word	0x000063d5
    64e4:	000063d5 	.word	0x000063d5
    64e8:	00006aa1 	.word	0x00006aa1
    64ec:	00006b15 	.word	0x00006b15
    64f0:	00006acb 	.word	0x00006acb
    64f4:	000063d5 	.word	0x000063d5
    64f8:	000063d5 	.word	0x000063d5
    64fc:	00006aed 	.word	0x00006aed
    6500:	000063d5 	.word	0x000063d5
    6504:	00006b15 	.word	0x00006b15
    6508:	000063d5 	.word	0x000063d5
    650c:	000063d5 	.word	0x000063d5
    6510:	00006b15 	.word	0x00006b15
			switch (c) {
    6514:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    6518:	b2db      	uxtb	r3, r3
    651a:	2b02      	cmp	r3, #2
    651c:	f63f af5a 	bhi.w	63d4 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    6520:	3607      	adds	r6, #7
    6522:	f026 0307 	bic.w	r3, r6, #7
    6526:	4619      	mov	r1, r3
    6528:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    652c:	02d8      	lsls	r0, r3, #11
    652e:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    6532:	02d6      	lsls	r6, r2, #11
    6534:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    6538:	9604      	str	r6, [sp, #16]
    653a:	9005      	str	r0, [sp, #20]
    653c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
	if (sign) {
    6540:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    6542:	9101      	str	r1, [sp, #4]
	exp = double_temp >> 52 & 0x7ff;
    6544:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    6548:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    654c:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    6550:	f280 80e5 	bge.w	671e <z_prf+0x426>
		*buf++ = '-';
    6554:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    6556:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    655a:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    655e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    6562:	4299      	cmp	r1, r3
    6564:	f040 80f6 	bne.w	6754 <z_prf+0x45c>
		if (!fract) {
    6568:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    656c:	430a      	orrs	r2, r1
    656e:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    6572:	f107 0303 	add.w	r3, r7, #3
    6576:	f040 80e2 	bne.w	673e <z_prf+0x446>
			if (isupper(c)) {
    657a:	2d19      	cmp	r5, #25
    657c:	f200 80d9 	bhi.w	6732 <z_prf+0x43a>
				*buf++ = 'I';
    6580:	2249      	movs	r2, #73	; 0x49
    6582:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    6584:	224e      	movs	r2, #78	; 0x4e
    6586:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    6588:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    658a:	2400      	movs	r4, #0
		return buf - start;
    658c:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    658e:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    6590:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    6592:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    6594:	46a2      	mov	sl, r4
    6596:	46a3      	mov	fp, r4
				if (fplus || fspace || (buf[0] == '-')) {
    6598:	9a09      	ldr	r2, [sp, #36]	; 0x24
    659a:	2a00      	cmp	r2, #0
    659c:	f040 827d 	bne.w	6a9a <z_prf+0x7a2>
    65a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    65a2:	2a00      	cmp	r2, #0
    65a4:	f040 8279 	bne.w	6a9a <z_prf+0x7a2>
    65a8:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    65ac:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    65b0:	f1d2 0800 	rsbs	r8, r2, #0
    65b4:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    65b8:	eb0b 060a 	add.w	r6, fp, sl
    65bc:	4433      	add	r3, r6
    65be:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
    65c0:	ab20      	add	r3, sp, #128	; 0x80
    65c2:	4443      	add	r3, r8
    65c4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    65c8:	3b30      	subs	r3, #48	; 0x30
    65ca:	2b09      	cmp	r3, #9
    65cc:	f200 82fe 	bhi.w	6bcc <z_prf+0x8d4>
			} else if (fzero) {
    65d0:	9b08      	ldr	r3, [sp, #32]
    65d2:	2b00      	cmp	r3, #0
    65d4:	f000 82fd 	beq.w	6bd2 <z_prf+0x8da>
    65d8:	9b07      	ldr	r3, [sp, #28]
    65da:	af19      	add	r7, sp, #100	; 0x64
    65dc:	1b9b      	subs	r3, r3, r6
    65de:	e014      	b.n	660a <z_prf+0x312>
    65e0:	00023543 	.word	0x00023543
    65e4:	00023549 	.word	0x00023549
				buf[0] = va_arg(vargs, int);
    65e8:	4632      	mov	r2, r6
				break;
    65ea:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    65ee:	f852 3b04 	ldr.w	r3, [r2], #4
    65f2:	9201      	str	r2, [sp, #4]
    65f4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				clen = 1;
    65f8:	2601      	movs	r6, #1
				break;
    65fa:	4644      	mov	r4, r8
    65fc:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    65fe:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    6602:	2400      	movs	r4, #0
				zero_head = precision - clen + prefix;
    6604:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    6606:	46a2      	mov	sl, r4
    6608:	46a3      	mov	fp, r4
			if (zero_head < 0) {
    660a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    660e:	199a      	adds	r2, r3, r6
    6610:	9208      	str	r2, [sp, #32]
    6612:	9a07      	ldr	r2, [sp, #28]
    6614:	1999      	adds	r1, r3, r6
    6616:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    6618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    661a:	b912      	cbnz	r2, 6622 <z_prf+0x32a>
    661c:	2d00      	cmp	r5, #0
    661e:	f300 82ed 	bgt.w	6bfc <z_prf+0x904>
			while (prefix-- > 0) {
    6622:	eb07 0208 	add.w	r2, r7, r8
    6626:	42ba      	cmp	r2, r7
    6628:	f040 82ea 	bne.w	6c00 <z_prf+0x908>
			while (zero_head-- > 0) {
    662c:	3b01      	subs	r3, #1
    662e:	f080 82f5 	bcs.w	6c1c <z_prf+0x924>
			clen -= prefix;
    6632:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    6636:	f1bb 0f00 	cmp.w	fp, #0
    663a:	d010      	beq.n	665e <z_prf+0x366>
				c = *cptr;
    663c:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
    663e:	eb07 0806 	add.w	r8, r7, r6
    6642:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6646:	2b09      	cmp	r3, #9
    6648:	eba8 0607 	sub.w	r6, r8, r7
    664c:	f240 82f1 	bls.w	6c32 <z_prf+0x93a>
    6650:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    6652:	f1b8 0801 	subs.w	r8, r8, #1
    6656:	f080 82f5 	bcs.w	6c44 <z_prf+0x94c>
				clen -= zero.predot;
    665a:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    665e:	f1ba 0f00 	cmp.w	sl, #0
    6662:	d016      	beq.n	6692 <z_prf+0x39a>
    6664:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    6668:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    666c:	9b03      	ldr	r3, [sp, #12]
    666e:	4649      	mov	r1, r9
    6670:	4658      	mov	r0, fp
    6672:	4798      	blx	r3
    6674:	3001      	adds	r0, #1
    6676:	f43f ae55 	beq.w	6324 <z_prf+0x2c>
				} while (c != '.');
    667a:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    667e:	eba8 0607 	sub.w	r6, r8, r7
    6682:	d1f1      	bne.n	6668 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    6684:	46d0      	mov	r8, sl
    6686:	f1b8 0f00 	cmp.w	r8, #0
    668a:	f300 82e4 	bgt.w	6c56 <z_prf+0x95e>
				clen -= zero.postdot;
    668e:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    6692:	b194      	cbz	r4, 66ba <z_prf+0x3c2>
				c = *cptr;
    6694:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
    6696:	eb07 0806 	add.w	r8, r7, r6
    669a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    669e:	2b09      	cmp	r3, #9
    66a0:	eba8 0607 	sub.w	r6, r8, r7
    66a4:	f240 82e2 	bls.w	6c6c <z_prf+0x974>
    66a8:	282e      	cmp	r0, #46	; 0x2e
    66aa:	f000 82df 	beq.w	6c6c <z_prf+0x974>
				while (zero.trail-- > 0) {
    66ae:	46a0      	mov	r8, r4
    66b0:	f1b8 0f00 	cmp.w	r8, #0
    66b4:	f300 82e3 	bgt.w	6c7e <z_prf+0x986>
				clen -= zero.trail;
    66b8:	1b36      	subs	r6, r6, r4
    66ba:	443e      	add	r6, r7
    66bc:	e2f2      	b.n	6ca4 <z_prf+0x9ac>
				switch (i) {
    66be:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    66c0:	1d33      	adds	r3, r6, #4
    66c2:	2d00      	cmp	r5, #0
    66c4:	9301      	str	r3, [sp, #4]
    66c6:	da1c      	bge.n	6702 <z_prf+0x40a>
		*buf++ = '-';
    66c8:	232d      	movs	r3, #45	; 0x2d
    66ca:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		value = -value;
    66ce:	4269      	negs	r1, r5
		*buf++ = ' ';
    66d0:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    66d4:	4630      	mov	r0, r6
    66d6:	220a      	movs	r2, #10
    66d8:	f017 ff54 	bl	1e584 <_to_x>
				if (fplus || fspace || val < 0) {
    66dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    66de:	4406      	add	r6, r0
    66e0:	a819      	add	r0, sp, #100	; 0x64
    66e2:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    66e4:	2b00      	cmp	r3, #0
    66e6:	f040 826c 	bne.w	6bc2 <z_prf+0x8ca>
    66ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66ec:	2b00      	cmp	r3, #0
    66ee:	f040 8268 	bne.w	6bc2 <z_prf+0x8ca>
    66f2:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    66f6:	2c00      	cmp	r4, #0
    66f8:	da80      	bge.n	65fc <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    66fa:	2400      	movs	r4, #0
    66fc:	46a2      	mov	sl, r4
    66fe:	46a3      	mov	fp, r4
    6700:	e766      	b.n	65d0 <z_prf+0x2d8>
	} else if (fplus) {
    6702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6704:	b123      	cbz	r3, 6710 <z_prf+0x418>
		*buf++ = '+';
    6706:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    6708:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    670c:	4629      	mov	r1, r5
    670e:	e7df      	b.n	66d0 <z_prf+0x3d8>
	} else if (fspace) {
    6710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6712:	b10b      	cbz	r3, 6718 <z_prf+0x420>
		*buf++ = ' ';
    6714:	2320      	movs	r3, #32
    6716:	e7f7      	b.n	6708 <z_prf+0x410>
    6718:	4629      	mov	r1, r5
    671a:	ae19      	add	r6, sp, #100	; 0x64
    671c:	e7da      	b.n	66d4 <z_prf+0x3dc>
	} else if (fplus) {
    671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6720:	b10b      	cbz	r3, 6726 <z_prf+0x42e>
		*buf++ = '+';
    6722:	232b      	movs	r3, #43	; 0x2b
    6724:	e717      	b.n	6556 <z_prf+0x25e>
	} else if (fspace) {
    6726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6728:	b10b      	cbz	r3, 672e <z_prf+0x436>
		*buf++ = ' ';
    672a:	2320      	movs	r3, #32
    672c:	e713      	b.n	6556 <z_prf+0x25e>
    672e:	af19      	add	r7, sp, #100	; 0x64
    6730:	e715      	b.n	655e <z_prf+0x266>
				*buf++ = 'i';
    6732:	2269      	movs	r2, #105	; 0x69
    6734:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    6736:	226e      	movs	r2, #110	; 0x6e
    6738:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    673a:	2266      	movs	r2, #102	; 0x66
    673c:	e725      	b.n	658a <z_prf+0x292>
			if (isupper(c)) {
    673e:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    6740:	bf99      	ittee	ls
    6742:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    6744:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    6746:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    6748:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    674a:	bf94      	ite	ls
    674c:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    674e:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    6750:	7079      	strb	r1, [r7, #1]
    6752:	e71a      	b.n	658a <z_prf+0x292>
	if ((exp | fract) != 0) {
    6754:	9b04      	ldr	r3, [sp, #16]
    6756:	9805      	ldr	r0, [sp, #20]
    6758:	430b      	orrs	r3, r1
    675a:	930e      	str	r3, [sp, #56]	; 0x38
    675c:	17cb      	asrs	r3, r1, #31
    675e:	4303      	orrs	r3, r0
    6760:	930f      	str	r3, [sp, #60]	; 0x3c
    6762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
		c = 'f';
    6766:	2d46      	cmp	r5, #70	; 0x46
    6768:	bf08      	it	eq
    676a:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    676c:	4313      	orrs	r3, r2
    676e:	f000 8107 	beq.w	6980 <z_prf+0x688>
		if (exp == 0) {
    6772:	2900      	cmp	r1, #0
    6774:	f000 809f 	beq.w	68b6 <z_prf+0x5be>
		fract |= HIGHBIT64;
    6778:	9b15      	ldr	r3, [sp, #84]	; 0x54
    677a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    677e:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    6782:	9315      	str	r3, [sp, #84]	; 0x54
    6784:	2600      	movs	r6, #0
	while (exp <= -3) {
    6786:	f118 0f02 	cmn.w	r8, #2
    678a:	f2c0 80a8 	blt.w	68de <z_prf+0x5e6>
	while (exp > 0) {
    678e:	f1b8 0f00 	cmp.w	r8, #0
    6792:	f300 80d4 	bgt.w	693e <z_prf+0x646>
		_rlrshift(&fract);
    6796:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    6798:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    679c:	f017 ff16 	bl	1e5cc <_rlrshift>
	while (exp < (0 + 4)) {
    67a0:	f1b8 0f04 	cmp.w	r8, #4
    67a4:	d1f7      	bne.n	6796 <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    67a6:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    67a8:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    67ac:	bfb8      	it	lt
    67ae:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    67b0:	2b47      	cmp	r3, #71	; 0x47
    67b2:	f040 80ee 	bne.w	6992 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    67b6:	1cf1      	adds	r1, r6, #3
    67b8:	db02      	blt.n	67c0 <z_prf+0x4c8>
    67ba:	42b4      	cmp	r4, r6
    67bc:	f280 80e3 	bge.w	6986 <z_prf+0x68e>
			c += 'e' - 'g';
    67c0:	3d02      	subs	r5, #2
    67c2:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    67c4:	2c00      	cmp	r4, #0
    67c6:	f000 80ea 	beq.w	699e <z_prf+0x6a6>
				precision--;
    67ca:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    67cc:	f1ba 0f00 	cmp.w	sl, #0
    67d0:	f040 80e5 	bne.w	699e <z_prf+0x6a6>
    67d4:	2c00      	cmp	r4, #0
    67d6:	bfd4      	ite	le
    67d8:	f04f 0800 	movle.w	r8, #0
    67dc:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    67e0:	2d66      	cmp	r5, #102	; 0x66
    67e2:	f040 80de 	bne.w	69a2 <z_prf+0x6aa>
		if (exp < 0) {
    67e6:	eb14 0b06 	adds.w	fp, r4, r6
    67ea:	f04f 0566 	mov.w	r5, #102	; 0x66
    67ee:	f100 80db 	bmi.w	69a8 <z_prf+0x6b0>
	if (exp > 16) {
    67f2:	f1bb 0f10 	cmp.w	fp, #16
    67f6:	bfa8      	it	ge
    67f8:	f04f 0b10 	movge.w	fp, #16
    67fc:	2310      	movs	r3, #16
    67fe:	9313      	str	r3, [sp, #76]	; 0x4c
	ltemp = 0x0800000000000000;
    6800:	2200      	movs	r2, #0
    6802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    6806:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    680a:	f1bb 0b01 	subs.w	fp, fp, #1
    680e:	f080 80ce 	bcs.w	69ae <z_prf+0x6b6>
	fract += ltemp;
    6812:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6814:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6816:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6818:	189b      	adds	r3, r3, r2
    681a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    681c:	eb41 0202 	adc.w	r2, r1, r2
    6820:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    6824:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    6828:	9310      	str	r3, [sp, #64]	; 0x40
    682a:	2300      	movs	r3, #0
    682c:	9311      	str	r3, [sp, #68]	; 0x44
    682e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    6832:	4313      	orrs	r3, r2
    6834:	d006      	beq.n	6844 <z_prf+0x54c>
		_ldiv5(&fract);
    6836:	a814      	add	r0, sp, #80	; 0x50
    6838:	f017 feda 	bl	1e5f0 <_ldiv5>
		_rlrshift(&fract);
    683c:	a814      	add	r0, sp, #80	; 0x50
    683e:	f017 fec5 	bl	1e5cc <_rlrshift>
		decexp++;
    6842:	3601      	adds	r6, #1
	if (c == 'f') {
    6844:	2d66      	cmp	r5, #102	; 0x66
    6846:	f040 80cf 	bne.w	69e8 <z_prf+0x6f0>
		if (decexp > 0) {
    684a:	2e00      	cmp	r6, #0
    684c:	f340 80b6 	ble.w	69bc <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    6850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6852:	2b00      	cmp	r3, #0
    6854:	dd07      	ble.n	6866 <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    6856:	a913      	add	r1, sp, #76	; 0x4c
    6858:	a814      	add	r0, sp, #80	; 0x50
    685a:	f017 fef2 	bl	1e642 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    685e:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    6860:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    6864:	d1f4      	bne.n	6850 <z_prf+0x558>
			zp->predot = decexp;
    6866:	46b3      	mov	fp, r6
    6868:	463b      	mov	r3, r7
			decexp = 0;
    686a:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    686c:	f1ba 0f00 	cmp.w	sl, #0
    6870:	d101      	bne.n	6876 <z_prf+0x57e>
    6872:	2c00      	cmp	r4, #0
    6874:	dd15      	ble.n	68a2 <z_prf+0x5aa>
			*buf++ = '.';
    6876:	222e      	movs	r2, #46	; 0x2e
    6878:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    687c:	2e00      	cmp	r6, #0
    687e:	f000 80ae 	beq.w	69de <z_prf+0x6e6>
    6882:	2c00      	cmp	r4, #0
    6884:	f340 80ad 	ble.w	69e2 <z_prf+0x6ea>
			zp->postdot = -decexp;
    6888:	f1c6 0a00 	rsb	sl, r6, #0
    688c:	45a2      	cmp	sl, r4
    688e:	bfa8      	it	ge
    6890:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    6892:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    6896:	2c00      	cmp	r4, #0
    6898:	dd03      	ble.n	68a2 <z_prf+0x5aa>
    689a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    689c:	2a00      	cmp	r2, #0
    689e:	f300 8094 	bgt.w	69ca <z_prf+0x6d2>
	if (prune_zero) {
    68a2:	f1b8 0f00 	cmp.w	r8, #0
    68a6:	f040 80b4 	bne.w	6a12 <z_prf+0x71a>
	*buf = 0;
    68aa:	2200      	movs	r2, #0
	return buf - start;
    68ac:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    68ae:	701a      	strb	r2, [r3, #0]
	return buf - start;
    68b0:	1b9b      	subs	r3, r3, r6
    68b2:	e671      	b.n	6598 <z_prf+0x2a0>
				exp--;
    68b4:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    68b6:	9b04      	ldr	r3, [sp, #16]
    68b8:	18db      	adds	r3, r3, r3
    68ba:	9304      	str	r3, [sp, #16]
    68bc:	9b05      	ldr	r3, [sp, #20]
    68be:	415b      	adcs	r3, r3
    68c0:	9305      	str	r3, [sp, #20]
    68c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    68c6:	2a00      	cmp	r2, #0
    68c8:	f173 0300 	sbcs.w	r3, r3, #0
    68cc:	daf2      	bge.n	68b4 <z_prf+0x5bc>
    68ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    68d2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    68d6:	e74f      	b.n	6778 <z_prf+0x480>
			_rlrshift(&fract);
    68d8:	a814      	add	r0, sp, #80	; 0x50
    68da:	f017 fe77 	bl	1e5cc <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    68de:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    68e2:	2300      	movs	r3, #0
    68e4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    68e8:	930b      	str	r3, [sp, #44]	; 0x2c
    68ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    68ee:	2900      	cmp	r1, #0
    68f0:	bf08      	it	eq
    68f2:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    68f6:	f108 0801 	add.w	r8, r8, #1
    68fa:	d2ed      	bcs.n	68d8 <z_prf+0x5e0>
		fract *= 5U;
    68fc:	2005      	movs	r0, #5
    68fe:	fba2 2300 	umull	r2, r3, r2, r0
    6902:	fb00 330c 	mla	r3, r0, ip, r3
    6906:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    690a:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    690c:	f04f 0e00 	mov.w	lr, #0
    6910:	2100      	movs	r1, #0
    6912:	f04f 0c00 	mov.w	ip, #0
    6916:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    691a:	458c      	cmp	ip, r1
    691c:	bf08      	it	eq
    691e:	459b      	cmpeq	fp, r3
    6920:	d206      	bcs.n	6930 <z_prf+0x638>
    6922:	f1be 0f00 	cmp.w	lr, #0
    6926:	f43f af2e 	beq.w	6786 <z_prf+0x48e>
    692a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    692e:	e72a      	b.n	6786 <z_prf+0x48e>
			fract <<= 1;
    6930:	1892      	adds	r2, r2, r2
    6932:	415b      	adcs	r3, r3
			exp--;
    6934:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6938:	f04f 0e01 	mov.w	lr, #1
    693c:	e7e8      	b.n	6910 <z_prf+0x618>
		_ldiv5(&fract);
    693e:	a814      	add	r0, sp, #80	; 0x50
    6940:	f017 fe56 	bl	1e5f0 <_ldiv5>
		exp--;
    6944:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    6948:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    694c:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    694e:	f04f 0e00 	mov.w	lr, #0
    6952:	2300      	movs	r3, #0
    6954:	f04f 0c00 	mov.w	ip, #0
    6958:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    695c:	459c      	cmp	ip, r3
    695e:	bf08      	it	eq
    6960:	4583      	cmpeq	fp, r0
    6962:	d206      	bcs.n	6972 <z_prf+0x67a>
    6964:	f1be 0f00 	cmp.w	lr, #0
    6968:	f43f af11 	beq.w	678e <z_prf+0x496>
    696c:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    6970:	e70d      	b.n	678e <z_prf+0x496>
			fract <<= 1;
    6972:	1849      	adds	r1, r1, r1
    6974:	4140      	adcs	r0, r0
			exp--;
    6976:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    697a:	f04f 0e01 	mov.w	lr, #1
    697e:	e7e8      	b.n	6952 <z_prf+0x65a>
    6980:	2600      	movs	r6, #0
    6982:	46b0      	mov	r8, r6
    6984:	e707      	b.n	6796 <z_prf+0x49e>
			precision -= decexp;
    6986:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    6988:	f1ba 0f00 	cmp.w	sl, #0
    698c:	d104      	bne.n	6998 <z_prf+0x6a0>
			c = 'f';
    698e:	2566      	movs	r5, #102	; 0x66
    6990:	e720      	b.n	67d4 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    6992:	f04f 0800 	mov.w	r8, #0
    6996:	e723      	b.n	67e0 <z_prf+0x4e8>
    6998:	f04f 0800 	mov.w	r8, #0
    699c:	e723      	b.n	67e6 <z_prf+0x4ee>
    699e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    69a2:	f104 0b01 	add.w	fp, r4, #1
    69a6:	e724      	b.n	67f2 <z_prf+0x4fa>
			exp = 0;
    69a8:	f04f 0b00 	mov.w	fp, #0
    69ac:	e726      	b.n	67fc <z_prf+0x504>
		_ldiv5(&ltemp);
    69ae:	a816      	add	r0, sp, #88	; 0x58
    69b0:	f017 fe1e 	bl	1e5f0 <_ldiv5>
		_rlrshift(&ltemp);
    69b4:	a816      	add	r0, sp, #88	; 0x58
    69b6:	f017 fe09 	bl	1e5cc <_rlrshift>
    69ba:	e726      	b.n	680a <z_prf+0x512>
			*buf++ = '0';
    69bc:	463b      	mov	r3, r7
    69be:	2230      	movs	r2, #48	; 0x30
    69c0:	f803 2b01 	strb.w	r2, [r3], #1
			zero.predot = zero.postdot = zero.trail = 0;
    69c4:	f04f 0b00 	mov.w	fp, #0
    69c8:	e750      	b.n	686c <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    69ca:	a913      	add	r1, sp, #76	; 0x4c
    69cc:	a814      	add	r0, sp, #80	; 0x50
    69ce:	930a      	str	r3, [sp, #40]	; 0x28
    69d0:	f017 fe37 	bl	1e642 <_get_digit>
    69d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    69d6:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    69d8:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    69dc:	e75b      	b.n	6896 <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    69de:	46b2      	mov	sl, r6
    69e0:	e759      	b.n	6896 <z_prf+0x59e>
    69e2:	f04f 0a00 	mov.w	sl, #0
    69e6:	e75c      	b.n	68a2 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    69e8:	a913      	add	r1, sp, #76	; 0x4c
    69ea:	a814      	add	r0, sp, #80	; 0x50
    69ec:	f017 fe29 	bl	1e642 <_get_digit>
		if (*buf++ != '0') {
    69f0:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    69f2:	7038      	strb	r0, [r7, #0]
			decexp--;
    69f4:	bf18      	it	ne
    69f6:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    69fa:	f1ba 0f00 	cmp.w	sl, #0
    69fe:	d137      	bne.n	6a70 <z_prf+0x778>
    6a00:	2c00      	cmp	r4, #0
    6a02:	dc35      	bgt.n	6a70 <z_prf+0x778>
		if (*buf++ != '0') {
    6a04:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    6a06:	f1b8 0f00 	cmp.w	r8, #0
    6a0a:	d043      	beq.n	6a94 <z_prf+0x79c>
			zero.predot = zero.postdot = zero.trail = 0;
    6a0c:	f04f 0b00 	mov.w	fp, #0
    6a10:	46da      	mov	sl, fp
		while (*--buf == '0')
    6a12:	4619      	mov	r1, r3
    6a14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    6a18:	2a30      	cmp	r2, #48	; 0x30
    6a1a:	d0fa      	beq.n	6a12 <z_prf+0x71a>
		if (*buf != '.') {
    6a1c:	2a2e      	cmp	r2, #46	; 0x2e
    6a1e:	bf18      	it	ne
    6a20:	460b      	movne	r3, r1
    6a22:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    6a24:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    6a28:	2a45      	cmp	r2, #69	; 0x45
    6a2a:	f47f af3e 	bne.w	68aa <z_prf+0x5b2>
		if (decexp < 0) {
    6a2e:	2e00      	cmp	r6, #0
		*buf++ = c;
    6a30:	4619      	mov	r1, r3
			decexp = -decexp;
    6a32:	bfba      	itte	lt
    6a34:	4276      	neglt	r6, r6
			*buf++ = '-';
    6a36:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    6a38:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    6a3a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    6a3c:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    6a40:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    6a42:	dd08      	ble.n	6a56 <z_prf+0x75e>
			*buf++ = (decexp / 100) + '0';
    6a44:	2064      	movs	r0, #100	; 0x64
    6a46:	fb96 f2f0 	sdiv	r2, r6, r0
    6a4a:	f102 0530 	add.w	r5, r2, #48	; 0x30
    6a4e:	1cd9      	adds	r1, r3, #3
    6a50:	709d      	strb	r5, [r3, #2]
			decexp %= 100;
    6a52:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    6a56:	200a      	movs	r0, #10
    6a58:	460b      	mov	r3, r1
    6a5a:	fb96 f2f0 	sdiv	r2, r6, r0
		decexp %= 10;
    6a5e:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    6a62:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    6a66:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    6a68:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    6a6c:	704e      	strb	r6, [r1, #1]
    6a6e:	e71c      	b.n	68aa <z_prf+0x5b2>
			*buf++ = '.';
    6a70:	222e      	movs	r2, #46	; 0x2e
    6a72:	1cbb      	adds	r3, r7, #2
    6a74:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    6a76:	2c00      	cmp	r4, #0
    6a78:	ddc5      	ble.n	6a06 <z_prf+0x70e>
    6a7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6a7c:	2a00      	cmp	r2, #0
    6a7e:	ddc2      	ble.n	6a06 <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    6a80:	a913      	add	r1, sp, #76	; 0x4c
    6a82:	a814      	add	r0, sp, #80	; 0x50
    6a84:	930a      	str	r3, [sp, #40]	; 0x28
    6a86:	f017 fddc 	bl	1e642 <_get_digit>
    6a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    6a8c:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    6a8e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    6a92:	e7f0      	b.n	6a76 <z_prf+0x77e>
			zero.predot = zero.postdot = zero.trail = 0;
    6a94:	46c3      	mov	fp, r8
    6a96:	46c2      	mov	sl, r8
    6a98:	e7c4      	b.n	6a24 <z_prf+0x72c>
					prefix = 1;
    6a9a:	f04f 0801 	mov.w	r8, #1
    6a9e:	e58b      	b.n	65b8 <z_prf+0x2c0>
				switch (i) {
    6aa0:	4632      	mov	r2, r6
    6aa2:	2f68      	cmp	r7, #104	; 0x68
    6aa4:	f852 3b04 	ldr.w	r3, [r2], #4
    6aa8:	9201      	str	r2, [sp, #4]
    6aaa:	d006      	beq.n	6aba <z_prf+0x7c2>
    6aac:	2f6c      	cmp	r7, #108	; 0x6c
    6aae:	d009      	beq.n	6ac4 <z_prf+0x7cc>
    6ab0:	2f48      	cmp	r7, #72	; 0x48
    6ab2:	d107      	bne.n	6ac4 <z_prf+0x7cc>
					*va_arg(vargs, char *) = count;
    6ab4:	9a02      	ldr	r2, [sp, #8]
    6ab6:	701a      	strb	r2, [r3, #0]
					break;
    6ab8:	e001      	b.n	6abe <z_prf+0x7c6>
					*va_arg(vargs, short *) = count;
    6aba:	9a02      	ldr	r2, [sp, #8]
    6abc:	801a      	strh	r2, [r3, #0]
				continue;
    6abe:	9e01      	ldr	r6, [sp, #4]
    6ac0:	9a06      	ldr	r2, [sp, #24]
    6ac2:	e421      	b.n	6308 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    6ac4:	9a02      	ldr	r2, [sp, #8]
    6ac6:	601a      	str	r2, [r3, #0]
					break;
    6ac8:	e7f9      	b.n	6abe <z_prf+0x7c6>
		*buf++ = '0';
    6aca:	f647 0330 	movw	r3, #30768	; 0x7830
    6ace:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    6ad2:	4633      	mov	r3, r6
    6ad4:	2210      	movs	r2, #16
    6ad6:	f853 1b04 	ldr.w	r1, [r3], #4
    6ada:	9301      	str	r3, [sp, #4]
    6adc:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    6ae0:	f017 fd50 	bl	1e584 <_to_x>
				prefix = 2;
    6ae4:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    6ae8:	1c86      	adds	r6, r0, #2
				break;
    6aea:	e604      	b.n	66f6 <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    6aec:	4633      	mov	r3, r6
					precision = INT_MAX;
    6aee:	2c00      	cmp	r4, #0
				cptr = va_arg(vargs, char *);
    6af0:	f853 7b04 	ldr.w	r7, [r3], #4
    6af4:	9301      	str	r3, [sp, #4]
					precision = INT_MAX;
    6af6:	bfb8      	it	lt
    6af8:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    6afc:	2600      	movs	r6, #0
    6afe:	42b4      	cmp	r4, r6
    6b00:	d103      	bne.n	6b0a <z_prf+0x812>
    6b02:	4626      	mov	r6, r4
    6b04:	2400      	movs	r4, #0
    6b06:	46a0      	mov	r8, r4
    6b08:	e579      	b.n	65fe <z_prf+0x306>
					if (cptr[clen] == '\0') {
    6b0a:	5dbb      	ldrb	r3, [r7, r6]
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d05b      	beq.n	6bc8 <z_prf+0x8d0>
				for (clen = 0; clen < precision; clen++) {
    6b10:	3601      	adds	r6, #1
    6b12:	e7f4      	b.n	6afe <z_prf+0x806>
				switch (i) {
    6b14:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    6b16:	2d6f      	cmp	r5, #111	; 0x6f
    6b18:	6831      	ldr	r1, [r6, #0]
    6b1a:	9301      	str	r3, [sp, #4]
    6b1c:	d119      	bne.n	6b52 <z_prf+0x85a>
	if (alt_form) {
    6b1e:	f1ba 0f00 	cmp.w	sl, #0
    6b22:	d008      	beq.n	6b36 <z_prf+0x83e>
		*buf++ = '0';
    6b24:	2330      	movs	r3, #48	; 0x30
    6b26:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    6b2a:	b979      	cbnz	r1, 6b4c <z_prf+0x854>
			*buf++ = 0;
    6b2c:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    6b30:	4688      	mov	r8, r1
			return 1;
    6b32:	2601      	movs	r6, #1
    6b34:	e5df      	b.n	66f6 <z_prf+0x3fe>
    6b36:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    6b38:	4628      	mov	r0, r5
    6b3a:	2208      	movs	r2, #8
    6b3c:	f017 fd22 	bl	1e584 <_to_x>
    6b40:	ae19      	add	r6, sp, #100	; 0x64
    6b42:	1bad      	subs	r5, r5, r6
    6b44:	182e      	adds	r6, r5, r0
			prefix = 0;
    6b46:	f04f 0800 	mov.w	r8, #0
    6b4a:	e5d4      	b.n	66f6 <z_prf+0x3fe>
		*buf++ = '0';
    6b4c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    6b50:	e7f2      	b.n	6b38 <z_prf+0x840>
				} else if (c == 'u') {
    6b52:	2d75      	cmp	r5, #117	; 0x75
    6b54:	d105      	bne.n	6b62 <z_prf+0x86a>
	return _to_x(buf, value, 10);
    6b56:	220a      	movs	r2, #10
    6b58:	a819      	add	r0, sp, #100	; 0x64
    6b5a:	f017 fd13 	bl	1e584 <_to_x>
    6b5e:	4606      	mov	r6, r0
    6b60:	e7f1      	b.n	6b46 <z_prf+0x84e>
	if (alt_form) {
    6b62:	f1ba 0f00 	cmp.w	sl, #0
    6b66:	d011      	beq.n	6b8c <z_prf+0x894>
		*buf++ = '0';
    6b68:	f647 0330 	movw	r3, #30768	; 0x7830
    6b6c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    6b70:	f10d 0766 	add.w	r7, sp, #102	; 0x66
	len = _to_x(buf, value, 16);
    6b74:	2210      	movs	r2, #16
    6b76:	4638      	mov	r0, r7
    6b78:	f017 fd04 	bl	1e584 <_to_x>
	if (prefix == 'X') {
    6b7c:	2d58      	cmp	r5, #88	; 0x58
    6b7e:	d007      	beq.n	6b90 <z_prf+0x898>
	return len + (buf - buf0);
    6b80:	ae19      	add	r6, sp, #100	; 0x64
    6b82:	1bbf      	subs	r7, r7, r6
    6b84:	183e      	adds	r6, r7, r0
						prefix = 2;
    6b86:	ea4f 084a 	mov.w	r8, sl, lsl #1
    6b8a:	e5b4      	b.n	66f6 <z_prf+0x3fe>
    6b8c:	af19      	add	r7, sp, #100	; 0x64
    6b8e:	e7f1      	b.n	6b74 <z_prf+0x87c>
    6b90:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    6b92:	f812 3b01 	ldrb.w	r3, [r2], #1
    6b96:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    6b9a:	2919      	cmp	r1, #25
    6b9c:	d803      	bhi.n	6ba6 <z_prf+0x8ae>
			*buf += 'A' - 'a';
    6b9e:	3b20      	subs	r3, #32
    6ba0:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    6ba4:	e7f5      	b.n	6b92 <z_prf+0x89a>
    6ba6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    6baa:	2b00      	cmp	r3, #0
    6bac:	d1f1      	bne.n	6b92 <z_prf+0x89a>
    6bae:	e7e7      	b.n	6b80 <z_prf+0x888>
				PUTC('%');
    6bb0:	4649      	mov	r1, r9
    6bb2:	4628      	mov	r0, r5
    6bb4:	f7ff bbb1 	b.w	631a <z_prf+0x22>
				count++;
    6bb8:	9b02      	ldr	r3, [sp, #8]
    6bba:	3301      	adds	r3, #1
				continue;
    6bbc:	e9cd 6301 	strd	r6, r3, [sp, #4]
    6bc0:	e77d      	b.n	6abe <z_prf+0x7c6>
					prefix = 1;
    6bc2:	f04f 0801 	mov.w	r8, #1
    6bc6:	e596      	b.n	66f6 <z_prf+0x3fe>
    6bc8:	461c      	mov	r4, r3
    6bca:	e79c      	b.n	6b06 <z_prf+0x80e>
			cptr = buf;
    6bcc:	af19      	add	r7, sp, #100	; 0x64
				zero_head = 0;
    6bce:	2300      	movs	r3, #0
    6bd0:	e51d      	b.n	660e <z_prf+0x316>
    6bd2:	9b08      	ldr	r3, [sp, #32]
    6bd4:	af19      	add	r7, sp, #100	; 0x64
    6bd6:	e51a      	b.n	660e <z_prf+0x316>
    6bd8:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    6bda:	4649      	mov	r1, r9
    6bdc:	9b03      	ldr	r3, [sp, #12]
    6bde:	9207      	str	r2, [sp, #28]
    6be0:	2020      	movs	r0, #32
    6be2:	4798      	blx	r3
    6be4:	3001      	adds	r0, #1
    6be6:	9a07      	ldr	r2, [sp, #28]
    6be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6bea:	f43f ab9b 	beq.w	6324 <z_prf+0x2c>
				while (width-- > 0) {
    6bee:	3a01      	subs	r2, #1
    6bf0:	d2f2      	bcs.n	6bd8 <z_prf+0x8e0>
				count += width;
    6bf2:	9902      	ldr	r1, [sp, #8]
    6bf4:	4429      	add	r1, r5
    6bf6:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    6bf8:	4615      	mov	r5, r2
    6bfa:	e512      	b.n	6622 <z_prf+0x32a>
    6bfc:	462a      	mov	r2, r5
    6bfe:	e7f6      	b.n	6bee <z_prf+0x8f6>
    6c00:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    6c02:	f817 0b01 	ldrb.w	r0, [r7], #1
    6c06:	9b03      	ldr	r3, [sp, #12]
    6c08:	9207      	str	r2, [sp, #28]
    6c0a:	4649      	mov	r1, r9
    6c0c:	4798      	blx	r3
    6c0e:	3001      	adds	r0, #1
    6c10:	9a07      	ldr	r2, [sp, #28]
    6c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6c14:	f47f ad07 	bne.w	6626 <z_prf+0x32e>
    6c18:	f7ff bb84 	b.w	6324 <z_prf+0x2c>
    6c1c:	9307      	str	r3, [sp, #28]
				PUTC('0');
    6c1e:	4649      	mov	r1, r9
    6c20:	9b03      	ldr	r3, [sp, #12]
    6c22:	2030      	movs	r0, #48	; 0x30
    6c24:	4798      	blx	r3
    6c26:	3001      	adds	r0, #1
    6c28:	9b07      	ldr	r3, [sp, #28]
    6c2a:	f47f acff 	bne.w	662c <z_prf+0x334>
    6c2e:	f7ff bb79 	b.w	6324 <z_prf+0x2c>
					PUTC(c);
    6c32:	9b03      	ldr	r3, [sp, #12]
    6c34:	4649      	mov	r1, r9
    6c36:	4798      	blx	r3
    6c38:	3001      	adds	r0, #1
    6c3a:	f43f ab73 	beq.w	6324 <z_prf+0x2c>
					c = *++cptr;
    6c3e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    6c42:	e4fe      	b.n	6642 <z_prf+0x34a>
					PUTC('0');
    6c44:	9b03      	ldr	r3, [sp, #12]
    6c46:	4649      	mov	r1, r9
    6c48:	2030      	movs	r0, #48	; 0x30
    6c4a:	4798      	blx	r3
    6c4c:	3001      	adds	r0, #1
    6c4e:	f47f ad00 	bne.w	6652 <z_prf+0x35a>
    6c52:	f7ff bb67 	b.w	6324 <z_prf+0x2c>
					PUTC('0');
    6c56:	9b03      	ldr	r3, [sp, #12]
    6c58:	4649      	mov	r1, r9
    6c5a:	2030      	movs	r0, #48	; 0x30
    6c5c:	4798      	blx	r3
    6c5e:	3001      	adds	r0, #1
    6c60:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6c64:	f47f ad0f 	bne.w	6686 <z_prf+0x38e>
    6c68:	f7ff bb5c 	b.w	6324 <z_prf+0x2c>
					PUTC(c);
    6c6c:	9b03      	ldr	r3, [sp, #12]
    6c6e:	4649      	mov	r1, r9
    6c70:	4798      	blx	r3
    6c72:	3001      	adds	r0, #1
    6c74:	f43f ab56 	beq.w	6324 <z_prf+0x2c>
					c = *++cptr;
    6c78:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    6c7c:	e50d      	b.n	669a <z_prf+0x3a2>
					PUTC('0');
    6c7e:	9b03      	ldr	r3, [sp, #12]
    6c80:	4649      	mov	r1, r9
    6c82:	2030      	movs	r0, #48	; 0x30
    6c84:	4798      	blx	r3
    6c86:	3001      	adds	r0, #1
    6c88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6c8c:	f47f ad10 	bne.w	66b0 <z_prf+0x3b8>
    6c90:	f7ff bb48 	b.w	6324 <z_prf+0x2c>
				PUTC(*cptr++);
    6c94:	f817 0b01 	ldrb.w	r0, [r7], #1
    6c98:	9b03      	ldr	r3, [sp, #12]
    6c9a:	4649      	mov	r1, r9
    6c9c:	4798      	blx	r3
    6c9e:	3001      	adds	r0, #1
    6ca0:	f43f ab40 	beq.w	6324 <z_prf+0x2c>
			while (clen-- > 0) {
    6ca4:	1bf3      	subs	r3, r6, r7
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	dcf4      	bgt.n	6c94 <z_prf+0x99c>
			count += clen;
    6caa:	9b02      	ldr	r3, [sp, #8]
    6cac:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    6cae:	2d00      	cmp	r5, #0
			count += clen;
    6cb0:	4413      	add	r3, r2
    6cb2:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    6cb4:	f77f af03 	ble.w	6abe <z_prf+0x7c6>
    6cb8:	462c      	mov	r4, r5
    6cba:	e006      	b.n	6cca <z_prf+0x9d2>
					PUTC(' ');
    6cbc:	9b03      	ldr	r3, [sp, #12]
    6cbe:	4649      	mov	r1, r9
    6cc0:	2020      	movs	r0, #32
    6cc2:	4798      	blx	r3
    6cc4:	3001      	adds	r0, #1
    6cc6:	f43f ab2d 	beq.w	6324 <z_prf+0x2c>
				while (width-- > 0) {
    6cca:	3c01      	subs	r4, #1
    6ccc:	d2f6      	bcs.n	6cbc <z_prf+0x9c4>
				count += width;
    6cce:	9b02      	ldr	r3, [sp, #8]
    6cd0:	442b      	add	r3, r5
    6cd2:	9302      	str	r3, [sp, #8]
    6cd4:	e6f3      	b.n	6abe <z_prf+0x7c6>
    6cd6:	bf00      	nop

00006cd8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6cd8:	4b01      	ldr	r3, [pc, #4]	; (6ce0 <__stdout_hook_install+0x8>)
    6cda:	6018      	str	r0, [r3, #0]
}
    6cdc:	4770      	bx	lr
    6cde:	bf00      	nop
    6ce0:	20005b0c 	.word	0x20005b0c

00006ce4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    6ce4:	b40c      	push	{r2, r3}
    6ce6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    6ce8:	b909      	cbnz	r1, 6cee <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    6cea:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    6cee:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    6cf2:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    6cf4:	9a06      	ldr	r2, [sp, #24]
    6cf6:	4806      	ldr	r0, [pc, #24]	; (6d10 <snprintf+0x2c>)
	va_start(vargs, format);
    6cf8:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    6cfa:	a902      	add	r1, sp, #8
    6cfc:	f7ff fafc 	bl	62f8 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    6d00:	9b02      	ldr	r3, [sp, #8]
    6d02:	2200      	movs	r2, #0
    6d04:	701a      	strb	r2, [r3, #0]
	return r;
}
    6d06:	b005      	add	sp, #20
    6d08:	f85d eb04 	ldr.w	lr, [sp], #4
    6d0c:	b002      	add	sp, #8
    6d0e:	4770      	bx	lr
    6d10:	0001e677 	.word	0x0001e677

00006d14 <nordicsemi_nrf52_init>:
    6d14:	f04f 0320 	mov.w	r3, #32
    6d18:	f3ef 8211 	mrs	r2, BASEPRI
    6d1c:	f383 8811 	msr	BASEPRI, r3
    6d20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6d24:	4906      	ldr	r1, [pc, #24]	; (6d40 <nordicsemi_nrf52_init+0x2c>)
    6d26:	2301      	movs	r3, #1
    6d28:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6d2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6d30:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6d34:	f382 8811 	msr	BASEPRI, r2
    6d38:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6d3c:	2000      	movs	r0, #0
    6d3e:	4770      	bx	lr
    6d40:	4001e000 	.word	0x4001e000

00006d44 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6d44:	b120      	cbz	r0, 6d50 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6d46:	4b03      	ldr	r3, [pc, #12]	; (6d54 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6d48:	0180      	lsls	r0, r0, #6
    6d4a:	f043 0301 	orr.w	r3, r3, #1
    6d4e:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6d50:	4770      	bx	lr
    6d52:	bf00      	nop
    6d54:	00021330 	.word	0x00021330

00006d58 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    6d58:	4b0e      	ldr	r3, [pc, #56]	; (6d94 <bt_hex_real+0x3c>)
    6d5a:	2940      	cmp	r1, #64	; 0x40
{
    6d5c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    6d5e:	bf28      	it	cs
    6d60:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    6d62:	4c0d      	ldr	r4, [pc, #52]	; (6d98 <bt_hex_real+0x40>)
    6d64:	1846      	adds	r6, r0, r1
    6d66:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    6d68:	42b0      	cmp	r0, r6
    6d6a:	f103 0302 	add.w	r3, r3, #2
    6d6e:	d104      	bne.n	6d7a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6d70:	2300      	movs	r3, #0
    6d72:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    6d76:	4807      	ldr	r0, [pc, #28]	; (6d94 <bt_hex_real+0x3c>)
    6d78:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    6d7a:	7802      	ldrb	r2, [r0, #0]
    6d7c:	0912      	lsrs	r2, r2, #4
    6d7e:	5ca2      	ldrb	r2, [r4, r2]
    6d80:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6d84:	f810 2b01 	ldrb.w	r2, [r0], #1
    6d88:	f002 020f 	and.w	r2, r2, #15
    6d8c:	5ca2      	ldrb	r2, [r4, r2]
    6d8e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    6d92:	e7e9      	b.n	6d68 <bt_hex_real+0x10>
    6d94:	20002121 	.word	0x20002121
    6d98:	00023560 	.word	0x00023560

00006d9c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6d9c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    6d9e:	7803      	ldrb	r3, [r0, #0]
    6da0:	b08b      	sub	sp, #44	; 0x2c
    6da2:	4604      	mov	r4, r0
    6da4:	ad07      	add	r5, sp, #28
    6da6:	2b03      	cmp	r3, #3
    6da8:	d821      	bhi.n	6dee <bt_addr_le_str_real+0x52>
    6daa:	e8df f003 	tbb	[pc, r3]
    6dae:	1a02      	.short	0x1a02
    6db0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    6db2:	4912      	ldr	r1, [pc, #72]	; (6dfc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    6db4:	4628      	mov	r0, r5
    6db6:	f017 fb3a 	bl	1e42e <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6dba:	7863      	ldrb	r3, [r4, #1]
    6dbc:	9304      	str	r3, [sp, #16]
    6dbe:	78a3      	ldrb	r3, [r4, #2]
    6dc0:	9303      	str	r3, [sp, #12]
    6dc2:	78e3      	ldrb	r3, [r4, #3]
    6dc4:	9302      	str	r3, [sp, #8]
    6dc6:	7923      	ldrb	r3, [r4, #4]
    6dc8:	9301      	str	r3, [sp, #4]
    6dca:	7963      	ldrb	r3, [r4, #5]
    6dcc:	9300      	str	r3, [sp, #0]
    6dce:	4a0c      	ldr	r2, [pc, #48]	; (6e00 <bt_addr_le_str_real+0x64>)
    6dd0:	79a3      	ldrb	r3, [r4, #6]
    6dd2:	9505      	str	r5, [sp, #20]
    6dd4:	211e      	movs	r1, #30
    6dd6:	480b      	ldr	r0, [pc, #44]	; (6e04 <bt_addr_le_str_real+0x68>)
    6dd8:	f015 fb25 	bl	1c426 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    6ddc:	4809      	ldr	r0, [pc, #36]	; (6e04 <bt_addr_le_str_real+0x68>)
    6dde:	b00b      	add	sp, #44	; 0x2c
    6de0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    6de2:	4909      	ldr	r1, [pc, #36]	; (6e08 <bt_addr_le_str_real+0x6c>)
    6de4:	e7e6      	b.n	6db4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    6de6:	4909      	ldr	r1, [pc, #36]	; (6e0c <bt_addr_le_str_real+0x70>)
    6de8:	e7e4      	b.n	6db4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    6dea:	4909      	ldr	r1, [pc, #36]	; (6e10 <bt_addr_le_str_real+0x74>)
    6dec:	e7e2      	b.n	6db4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    6dee:	4a09      	ldr	r2, [pc, #36]	; (6e14 <bt_addr_le_str_real+0x78>)
    6df0:	210a      	movs	r1, #10
    6df2:	4628      	mov	r0, r5
    6df4:	f015 fb17 	bl	1c426 <snprintk>
		break;
    6df8:	e7df      	b.n	6dba <bt_addr_le_str_real+0x1e>
    6dfa:	bf00      	nop
    6dfc:	00022c21 	.word	0x00022c21
    6e00:	00022c43 	.word	0x00022c43
    6e04:	200021a2 	.word	0x200021a2
    6e08:	00022c28 	.word	0x00022c28
    6e0c:	00022c2f 	.word	0x00022c2f
    6e10:	00022c39 	.word	0x00022c39
    6e14:	00024a33 	.word	0x00024a33

00006e18 <ecc_thread>:
    6e18:	4d62      	ldr	r5, [pc, #392]	; (6fa4 <ecc_thread+0x18c>)
    6e1a:	4b63      	ldr	r3, [pc, #396]	; (6fa8 <ecc_thread+0x190>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 6fc8 <ecc_thread+0x1b0>
	return z_impl_k_sem_take(sem, timeout);
    6e20:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 6fcc <ecc_thread+0x1b4>
    6e24:	1aed      	subs	r5, r5, r3

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    6e26:	b580      	push	{r7, lr}
    6e28:	08ed      	lsrs	r5, r5, #3
    6e2a:	4647      	mov	r7, r8
    6e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6e30:	4648      	mov	r0, r9
    6e32:	f014 fce3 	bl	1b7fc <z_impl_k_sem_take>
    6e36:	f3bf 8f5b 	dmb	ish
    6e3a:	f8d8 4000 	ldr.w	r4, [r8]
    6e3e:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6e42:	f014 0401 	ands.w	r4, r4, #1
    6e46:	d058      	beq.n	6efa <ecc_thread+0xe2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6e48:	f8df a174 	ldr.w	sl, [pc, #372]	; 6fc0 <ecc_thread+0x1a8>
    6e4c:	4c57      	ldr	r4, [pc, #348]	; (6fac <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6e4e:	4e58      	ldr	r6, [pc, #352]	; (6fb0 <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6e50:	4858      	ldr	r0, [pc, #352]	; (6fb4 <ecc_thread+0x19c>)
    6e52:	4652      	mov	r2, sl
    6e54:	4621      	mov	r1, r4
    6e56:	f015 fb35 	bl	1c4c4 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    6e5a:	bbd8      	cbnz	r0, 6ed4 <ecc_thread+0xbc>
			BT_ERR("Failed to create ECC public/private pair");
    6e5c:	01a9      	lsls	r1, r5, #6
    6e5e:	4856      	ldr	r0, [pc, #344]	; (6fb8 <ecc_thread+0x1a0>)
    6e60:	f041 0101 	orr.w	r1, r1, #1
    6e64:	f016 fc20 	bl	1d6a8 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    6e68:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6e70:	2001      	movs	r0, #1
    6e72:	f002 fc9d 	bl	97b0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6e76:	f100 0608 	add.w	r6, r0, #8
    6e7a:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6e7c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6e7e:	4630      	mov	r0, r6
    6e80:	f019 f95f 	bl	20142 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6e84:	233e      	movs	r3, #62	; 0x3e
    6e86:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6e88:	2342      	movs	r3, #66	; 0x42
    6e8a:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6e8c:	2101      	movs	r1, #1
    6e8e:	4630      	mov	r0, r6
    6e90:	f019 f957 	bl	20142 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    6e94:	2308      	movs	r3, #8
    6e96:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6e98:	2141      	movs	r1, #65	; 0x41
    6e9a:	4630      	mov	r0, r6
    6e9c:	f019 f951 	bl	20142 <net_buf_simple_add>
    6ea0:	4606      	mov	r6, r0
	evt->status = status;
    6ea2:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    6ea6:	f1ba 0f00 	cmp.w	sl, #0
    6eaa:	d01d      	beq.n	6ee8 <ecc_thread+0xd0>
		(void)memset(evt->key, 0, sizeof(evt->key));
    6eac:	2240      	movs	r2, #64	; 0x40
    6eae:	2100      	movs	r1, #0
    6eb0:	f017 fb45 	bl	1e53e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6eb4:	f3bf 8f5b 	dmb	ish
    6eb8:	e857 3f00 	ldrex	r3, [r7]
    6ebc:	f023 0301 	bic.w	r3, r3, #1
    6ec0:	e847 3200 	strex	r2, r3, [r7]
    6ec4:	2a00      	cmp	r2, #0
    6ec6:	d1f7      	bne.n	6eb8 <ecc_thread+0xa0>
    6ec8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6ecc:	4620      	mov	r0, r4
	bt_recv(buf);
    6ece:	f001 fd79 	bl	89c4 <bt_recv>
}
    6ed2:	e7ab      	b.n	6e2c <ecc_thread+0x14>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6ed4:	2220      	movs	r2, #32
    6ed6:	4631      	mov	r1, r6
    6ed8:	4620      	mov	r0, r4
    6eda:	f017 faf5 	bl	1e4c8 <memcmp>
    6ede:	2800      	cmp	r0, #0
    6ee0:	d0b6      	beq.n	6e50 <ecc_thread+0x38>
	return 0;
    6ee2:	f04f 0a00 	mov.w	sl, #0
    6ee6:	e7c1      	b.n	6e6c <ecc_thread+0x54>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    6ee8:	4932      	ldr	r1, [pc, #200]	; (6fb4 <ecc_thread+0x19c>)
    6eea:	f017 fc3c 	bl	1e766 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    6eee:	4933      	ldr	r1, [pc, #204]	; (6fbc <ecc_thread+0x1a4>)
    6ef0:	f106 0021 	add.w	r0, r6, #33	; 0x21
    6ef4:	f017 fc37 	bl	1e766 <sys_memcpy_swap.constprop.0>
    6ef8:	e7dc      	b.n	6eb4 <ecc_thread+0x9c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6efa:	f3bf 8f5b 	dmb	ish
    6efe:	f8d8 3000 	ldr.w	r3, [r8]
    6f02:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6f06:	079b      	lsls	r3, r3, #30
    6f08:	d590      	bpl.n	6e2c <ecc_thread+0x14>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    6f0a:	492d      	ldr	r1, [pc, #180]	; (6fc0 <ecc_thread+0x1a8>)
    6f0c:	4829      	ldr	r0, [pc, #164]	; (6fb4 <ecc_thread+0x19c>)
    6f0e:	f016 f9a8 	bl	1d262 <uECC_valid_public_key>
	if (ret < 0) {
    6f12:	1e01      	subs	r1, r0, #0
    6f14:	da36      	bge.n	6f84 <ecc_thread+0x16c>
		BT_ERR("public key is not valid (ret %d)", ret);
    6f16:	01aa      	lsls	r2, r5, #6
    6f18:	482a      	ldr	r0, [pc, #168]	; (6fc4 <ecc_thread+0x1ac>)
    6f1a:	f042 0201 	orr.w	r2, r2, #1
    6f1e:	f016 fbd0 	bl	1d6c2 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6f26:	2001      	movs	r0, #1
    6f28:	f002 fc42 	bl	97b0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6f2c:	f100 0a08 	add.w	sl, r0, #8
    6f30:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6f32:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6f34:	4650      	mov	r0, sl
    6f36:	f019 f904 	bl	20142 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6f3a:	233e      	movs	r3, #62	; 0x3e
    6f3c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6f3e:	2322      	movs	r3, #34	; 0x22
    6f40:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6f42:	2101      	movs	r1, #1
    6f44:	4650      	mov	r0, sl
    6f46:	f019 f8fc 	bl	20142 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    6f4a:	2309      	movs	r3, #9
    6f4c:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6f4e:	2121      	movs	r1, #33	; 0x21
    6f50:	4650      	mov	r0, sl
    6f52:	f019 f8f6 	bl	20142 <net_buf_simple_add>
    6f56:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    6f58:	3001      	adds	r0, #1
    6f5a:	b9e4      	cbnz	r4, 6f96 <ecc_thread+0x17e>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    6f5c:	221f      	movs	r2, #31
    6f5e:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    6f60:	4621      	mov	r1, r4
    6f62:	2220      	movs	r2, #32
    6f64:	f017 faeb 	bl	1e53e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f68:	f3bf 8f5b 	dmb	ish
    6f6c:	e857 3f00 	ldrex	r3, [r7]
    6f70:	f023 0302 	bic.w	r3, r3, #2
    6f74:	e847 3200 	strex	r2, r3, [r7]
    6f78:	2a00      	cmp	r2, #0
    6f7a:	d1f7      	bne.n	6f6c <ecc_thread+0x154>
    6f7c:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6f80:	4630      	mov	r0, r6
    6f82:	e7a4      	b.n	6ece <ecc_thread+0xb6>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    6f84:	4a0b      	ldr	r2, [pc, #44]	; (6fb4 <ecc_thread+0x19c>)
    6f86:	4b0e      	ldr	r3, [pc, #56]	; (6fc0 <ecc_thread+0x1a8>)
    6f88:	f1a2 0120 	sub.w	r1, r2, #32
    6f8c:	4610      	mov	r0, r2
    6f8e:	f015 fae8 	bl	1c562 <uECC_shared_secret>
    6f92:	4604      	mov	r4, r0
    6f94:	e7c5      	b.n	6f22 <ecc_thread+0x10a>
		evt->status = 0U;
    6f96:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6f98:	4906      	ldr	r1, [pc, #24]	; (6fb4 <ecc_thread+0x19c>)
		evt->status = 0U;
    6f9a:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6f9c:	f017 fbe3 	bl	1e766 <sys_memcpy_swap.constprop.0>
    6fa0:	e7e2      	b.n	6f68 <ecc_thread+0x150>
    6fa2:	bf00      	nop
    6fa4:	000211dc 	.word	0x000211dc
    6fa8:	00021114 	.word	0x00021114
    6fac:	200021c0 	.word	0x200021c0
    6fb0:	000218a0 	.word	0x000218a0
    6fb4:	200021e0 	.word	0x200021e0
    6fb8:	00023578 	.word	0x00023578
    6fbc:	20002200 	.word	0x20002200
    6fc0:	000217f0 	.word	0x000217f0
    6fc4:	000235a1 	.word	0x000235a1
    6fc8:	200002cc 	.word	0x200002cc
    6fcc:	2000619c 	.word	0x2000619c

00006fd0 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6fd0:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    6fd2:	7d05      	ldrb	r5, [r0, #20]
    6fd4:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    6fd6:	b9ad      	cbnz	r5, 7004 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    6fd8:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    6fda:	881a      	ldrh	r2, [r3, #0]
    6fdc:	f242 0125 	movw	r1, #8229	; 0x2025
    6fe0:	428a      	cmp	r2, r1
    6fe2:	d017      	beq.n	7014 <bt_hci_ecc_send+0x44>
    6fe4:	f242 0126 	movw	r1, #8230	; 0x2026
    6fe8:	428a      	cmp	r2, r1
    6fea:	d03c      	beq.n	7066 <bt_hci_ecc_send+0x96>
    6fec:	f242 0101 	movw	r1, #8193	; 0x2001
    6ff0:	428a      	cmp	r2, r1
    6ff2:	d107      	bne.n	7004 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    6ff4:	78da      	ldrb	r2, [r3, #3]
    6ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6ffa:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    6ffc:	791a      	ldrb	r2, [r3, #4]
    6ffe:	f022 0201 	bic.w	r2, r2, #1
    7002:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    7004:	4b31      	ldr	r3, [pc, #196]	; (70cc <bt_hci_ecc_send+0xfc>)
    7006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    700a:	4620      	mov	r0, r4
    700c:	691b      	ldr	r3, [r3, #16]
}
    700e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    7012:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    7014:	2103      	movs	r1, #3
    7016:	3008      	adds	r0, #8
    7018:	f019 f8b2 	bl	20180 <net_buf_simple_pull>
	net_buf_unref(buf);
    701c:	4620      	mov	r0, r4
    701e:	f012 fdeb 	bl	19bf8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7022:	f3bf 8f5b 	dmb	ish
    7026:	4b2a      	ldr	r3, [pc, #168]	; (70d0 <bt_hci_ecc_send+0x100>)
    7028:	681a      	ldr	r2, [r3, #0]
    702a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    702e:	0790      	lsls	r0, r2, #30
    7030:	d507      	bpl.n	7042 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7032:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7034:	4629      	mov	r1, r5
    7036:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    703a:	f017 fb72 	bl	1e722 <send_cmd_status>
}
    703e:	2000      	movs	r0, #0
    7040:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7042:	f3bf 8f5b 	dmb	ish
    7046:	e853 2f00 	ldrex	r2, [r3]
    704a:	f042 0101 	orr.w	r1, r2, #1
    704e:	e843 1000 	strex	r0, r1, [r3]
    7052:	2800      	cmp	r0, #0
    7054:	d1f7      	bne.n	7046 <bt_hci_ecc_send+0x76>
    7056:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    705a:	07d1      	lsls	r1, r2, #31
    705c:	d4e9      	bmi.n	7032 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    705e:	481d      	ldr	r0, [pc, #116]	; (70d4 <bt_hci_ecc_send+0x104>)
    7060:	f014 fba6 	bl	1b7b0 <z_impl_k_sem_give>
}
    7064:	e7e6      	b.n	7034 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    7066:	2103      	movs	r1, #3
    7068:	3008      	adds	r0, #8
    706a:	f019 f889 	bl	20180 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    706e:	f3bf 8f5b 	dmb	ish
    7072:	4b17      	ldr	r3, [pc, #92]	; (70d0 <bt_hci_ecc_send+0x100>)
    7074:	681a      	ldr	r2, [r3, #0]
    7076:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    707a:	07d2      	lsls	r2, r2, #31
    707c:	d507      	bpl.n	708e <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    707e:	250c      	movs	r5, #12
	net_buf_unref(buf);
    7080:	4620      	mov	r0, r4
    7082:	f012 fdb9 	bl	19bf8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7086:	4629      	mov	r1, r5
    7088:	f242 0026 	movw	r0, #8230	; 0x2026
    708c:	e7d5      	b.n	703a <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    708e:	89a2      	ldrh	r2, [r4, #12]
    7090:	2a3f      	cmp	r2, #63	; 0x3f
    7092:	d919      	bls.n	70c8 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7094:	f3bf 8f5b 	dmb	ish
    7098:	e853 2f00 	ldrex	r2, [r3]
    709c:	f042 0102 	orr.w	r1, r2, #2
    70a0:	e843 1000 	strex	r0, r1, [r3]
    70a4:	2800      	cmp	r0, #0
    70a6:	d1f7      	bne.n	7098 <bt_hci_ecc_send+0xc8>
    70a8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    70ac:	0793      	lsls	r3, r2, #30
    70ae:	d4e6      	bmi.n	707e <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    70b0:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    70b2:	4809      	ldr	r0, [pc, #36]	; (70d8 <bt_hci_ecc_send+0x108>)
    70b4:	f017 fb57 	bl	1e766 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    70b8:	4808      	ldr	r0, [pc, #32]	; (70dc <bt_hci_ecc_send+0x10c>)
    70ba:	3120      	adds	r1, #32
    70bc:	f017 fb53 	bl	1e766 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    70c0:	4804      	ldr	r0, [pc, #16]	; (70d4 <bt_hci_ecc_send+0x104>)
    70c2:	f014 fb75 	bl	1b7b0 <z_impl_k_sem_give>
}
    70c6:	e7db      	b.n	7080 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    70c8:	2512      	movs	r5, #18
    70ca:	e7d9      	b.n	7080 <bt_hci_ecc_send+0xb0>
    70cc:	20005888 	.word	0x20005888
    70d0:	200002cc 	.word	0x200002cc
    70d4:	2000619c 	.word	0x2000619c
    70d8:	200021e0 	.word	0x200021e0
    70dc:	20002200 	.word	0x20002200

000070e0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    70e0:	b510      	push	{r4, lr}
    70e2:	b086      	sub	sp, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    70e4:	4c0b      	ldr	r4, [pc, #44]	; (7114 <bt_hci_ecc_init+0x34>)
    70e6:	490c      	ldr	r1, [pc, #48]	; (7118 <bt_hci_ecc_init+0x38>)
    70e8:	2300      	movs	r3, #0
    70ea:	220a      	movs	r2, #10
    70ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
    70f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    70f4:	e9cd 3300 	strd	r3, r3, [sp]
    70f8:	f240 424c 	movw	r2, #1100	; 0x44c
    70fc:	4b07      	ldr	r3, [pc, #28]	; (711c <bt_hci_ecc_init+0x3c>)
    70fe:	4620      	mov	r0, r4
    7100:	f014 fbce 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7104:	4906      	ldr	r1, [pc, #24]	; (7120 <bt_hci_ecc_init+0x40>)
    7106:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    7108:	b006      	add	sp, #24
    710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    710e:	f019 bc3b 	b.w	20988 <z_impl_k_thread_name_set>
    7112:	bf00      	nop
    7114:	20000260 	.word	0x20000260
    7118:	200026e8 	.word	0x200026e8
    711c:	00006e19 	.word	0x00006e19
    7120:	000235c2 	.word	0x000235c2

00007124 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    7124:	b538      	push	{r3, r4, r5, lr}
    7126:	4b14      	ldr	r3, [pc, #80]	; (7178 <save_id+0x54>)
    7128:	4c14      	ldr	r4, [pc, #80]	; (717c <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    712a:	4d15      	ldr	r5, [pc, #84]	; (7180 <save_id+0x5c>)
	BT_INFO("Saving ID");
    712c:	4815      	ldr	r0, [pc, #84]	; (7184 <save_id+0x60>)
    712e:	1ae4      	subs	r4, r4, r3
    7130:	08e4      	lsrs	r4, r4, #3
    7132:	01a4      	lsls	r4, r4, #6
    7134:	f044 0103 	orr.w	r1, r4, #3
    7138:	f016 fab6 	bl	1d6a8 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    713c:	79ea      	ldrb	r2, [r5, #7]
    713e:	4812      	ldr	r0, [pc, #72]	; (7188 <save_id+0x64>)
    7140:	4629      	mov	r1, r5
    7142:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    7146:	f7fe f851 	bl	51ec <settings_save_one>
	if (err) {
    714a:	4601      	mov	r1, r0
    714c:	b120      	cbz	r0, 7158 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    714e:	480f      	ldr	r0, [pc, #60]	; (718c <save_id+0x68>)
    7150:	f044 0201 	orr.w	r2, r4, #1
    7154:	f016 fab5 	bl	1d6c2 <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    7158:	79ea      	ldrb	r2, [r5, #7]
    715a:	490d      	ldr	r1, [pc, #52]	; (7190 <save_id+0x6c>)
    715c:	480d      	ldr	r0, [pc, #52]	; (7194 <save_id+0x70>)
    715e:	0112      	lsls	r2, r2, #4
    7160:	f7fe f844 	bl	51ec <settings_save_one>
	if (err) {
    7164:	4601      	mov	r1, r0
    7166:	b130      	cbz	r0, 7176 <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    7168:	f044 0201 	orr.w	r2, r4, #1
    716c:	480a      	ldr	r0, [pc, #40]	; (7198 <save_id+0x74>)
	}
#endif
}
    716e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    7172:	f016 baa6 	b.w	1d6c2 <log_1>
}
    7176:	bd38      	pop	{r3, r4, r5, pc}
    7178:	00021114 	.word	0x00021114
    717c:	000211fc 	.word	0x000211fc
    7180:	20005888 	.word	0x20005888
    7184:	000235d4 	.word	0x000235d4
    7188:	000235de 	.word	0x000235de
    718c:	000235e4 	.word	0x000235e4
    7190:	20005960 	.word	0x20005960
    7194:	000235ff 	.word	0x000235ff
    7198:	00023606 	.word	0x00023606

0000719c <set>:
{
    719c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    71a0:	4605      	mov	r5, r0
    71a2:	4616      	mov	r6, r2
    71a4:	461f      	mov	r7, r3
	if (!name) {
    71a6:	b960      	cbnz	r0, 71c2 <set+0x26>
    71a8:	4942      	ldr	r1, [pc, #264]	; (72b4 <set+0x118>)
    71aa:	4b43      	ldr	r3, [pc, #268]	; (72b8 <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    71ac:	4843      	ldr	r0, [pc, #268]	; (72bc <set+0x120>)
    71ae:	1ac9      	subs	r1, r1, r3
    71b0:	08c9      	lsrs	r1, r1, #3
    71b2:	0189      	lsls	r1, r1, #6
    71b4:	f041 0101 	orr.w	r1, r1, #1
    71b8:	f016 fa76 	bl	1d6a8 <log_0>
	return -ENOENT;
    71bc:	f06f 0401 	mvn.w	r4, #1
    71c0:	e01c      	b.n	71fc <set+0x60>
	len = settings_name_next(name, &next);
    71c2:	a901      	add	r1, sp, #4
    71c4:	f016 fed8 	bl	1df78 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    71c8:	493d      	ldr	r1, [pc, #244]	; (72c0 <set+0x124>)
    71ca:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    71cc:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    71ce:	4628      	mov	r0, r5
    71d0:	f017 f96b 	bl	1e4aa <strncmp>
    71d4:	4604      	mov	r4, r0
    71d6:	bb90      	cbnz	r0, 723e <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    71d8:	f3bf 8f5b 	dmb	ish
    71dc:	4d39      	ldr	r5, [pc, #228]	; (72c4 <set+0x128>)
    71de:	682b      	ldr	r3, [r5, #0]
    71e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    71e4:	075b      	lsls	r3, r3, #29
    71e6:	d50d      	bpl.n	7204 <set+0x68>
    71e8:	4932      	ldr	r1, [pc, #200]	; (72b4 <set+0x118>)
    71ea:	4b33      	ldr	r3, [pc, #204]	; (72b8 <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    71ec:	4836      	ldr	r0, [pc, #216]	; (72c8 <set+0x12c>)
    71ee:	1ac9      	subs	r1, r1, r3
    71f0:	08c9      	lsrs	r1, r1, #3
    71f2:	0189      	lsls	r1, r1, #6
    71f4:	f041 0102 	orr.w	r1, r1, #2
    71f8:	f016 fa56 	bl	1d6a8 <log_0>
}
    71fc:	4620      	mov	r0, r4
    71fe:	b002      	add	sp, #8
    7200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    7204:	3d70      	subs	r5, #112	; 0x70
    7206:	2207      	movs	r2, #7
    7208:	4629      	mov	r1, r5
    720a:	4638      	mov	r0, r7
    720c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    720e:	2806      	cmp	r0, #6
    7210:	d810      	bhi.n	7234 <set+0x98>
    7212:	4b29      	ldr	r3, [pc, #164]	; (72b8 <set+0x11c>)
    7214:	4927      	ldr	r1, [pc, #156]	; (72b4 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    7216:	482d      	ldr	r0, [pc, #180]	; (72cc <set+0x130>)
    7218:	1ac9      	subs	r1, r1, r3
    721a:	08c9      	lsrs	r1, r1, #3
    721c:	0189      	lsls	r1, r1, #6
    721e:	f041 0101 	orr.w	r1, r1, #1
    7222:	f016 fa41 	bl	1d6a8 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    7226:	2207      	movs	r2, #7
    7228:	4621      	mov	r1, r4
    722a:	4628      	mov	r0, r5
    722c:	f017 f987 	bl	1e53e <memset>
			bt_dev.id_count = 0U;
    7230:	71ec      	strb	r4, [r5, #7]
    7232:	e7e3      	b.n	71fc <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    7234:	2307      	movs	r3, #7
    7236:	fbb0 f0f3 	udiv	r0, r0, r3
    723a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    723c:	e7de      	b.n	71fc <set+0x60>
	if (!strncmp(name, "name", len)) {
    723e:	4924      	ldr	r1, [pc, #144]	; (72d0 <set+0x134>)
    7240:	4642      	mov	r2, r8
    7242:	4628      	mov	r0, r5
    7244:	f017 f931 	bl	1e4aa <strncmp>
    7248:	4604      	mov	r4, r0
    724a:	b9a8      	cbnz	r0, 7278 <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    724c:	4921      	ldr	r1, [pc, #132]	; (72d4 <set+0x138>)
    724e:	2241      	movs	r2, #65	; 0x41
    7250:	4638      	mov	r0, r7
    7252:	47b0      	blx	r6
		if (len < 0) {
    7254:	1e01      	subs	r1, r0, #0
    7256:	da0a      	bge.n	726e <set+0xd2>
    7258:	4b17      	ldr	r3, [pc, #92]	; (72b8 <set+0x11c>)
    725a:	4a16      	ldr	r2, [pc, #88]	; (72b4 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    725c:	481e      	ldr	r0, [pc, #120]	; (72d8 <set+0x13c>)
    725e:	1ad2      	subs	r2, r2, r3
    7260:	08d2      	lsrs	r2, r2, #3
    7262:	0192      	lsls	r2, r2, #6
    7264:	f042 0201 	orr.w	r2, r2, #1
    7268:	f016 fa2b 	bl	1d6c2 <log_1>
    726c:	e7c6      	b.n	71fc <set+0x60>
			bt_dev.name[len] = '\0';
    726e:	481b      	ldr	r0, [pc, #108]	; (72dc <set+0x140>)
    7270:	4401      	add	r1, r0
    7272:	f881 4108 	strb.w	r4, [r1, #264]	; 0x108
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    7276:	e7c1      	b.n	71fc <set+0x60>
	if (!strncmp(name, "irk", len)) {
    7278:	4919      	ldr	r1, [pc, #100]	; (72e0 <set+0x144>)
    727a:	4642      	mov	r2, r8
    727c:	4628      	mov	r0, r5
    727e:	f017 f914 	bl	1e4aa <strncmp>
    7282:	4604      	mov	r4, r0
    7284:	2800      	cmp	r0, #0
    7286:	d199      	bne.n	71bc <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    7288:	4916      	ldr	r1, [pc, #88]	; (72e4 <set+0x148>)
    728a:	2210      	movs	r2, #16
    728c:	4638      	mov	r0, r7
    728e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    7290:	280f      	cmp	r0, #15
    7292:	d8b3      	bhi.n	71fc <set+0x60>
    7294:	4b08      	ldr	r3, [pc, #32]	; (72b8 <set+0x11c>)
    7296:	4907      	ldr	r1, [pc, #28]	; (72b4 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    7298:	4813      	ldr	r0, [pc, #76]	; (72e8 <set+0x14c>)
    729a:	1ac9      	subs	r1, r1, r3
    729c:	08c9      	lsrs	r1, r1, #3
    729e:	0189      	lsls	r1, r1, #6
    72a0:	f041 0101 	orr.w	r1, r1, #1
    72a4:	f016 fa00 	bl	1d6a8 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    72a8:	2210      	movs	r2, #16
    72aa:	4621      	mov	r1, r4
    72ac:	480d      	ldr	r0, [pc, #52]	; (72e4 <set+0x148>)
    72ae:	f017 f946 	bl	1e53e <memset>
    72b2:	e7a3      	b.n	71fc <set+0x60>
    72b4:	000211fc 	.word	0x000211fc
    72b8:	00021114 	.word	0x00021114
    72bc:	00023622 	.word	0x00023622
    72c0:	00022c36 	.word	0x00022c36
    72c4:	200058f8 	.word	0x200058f8
    72c8:	00023643 	.word	0x00023643
    72cc:	00023667 	.word	0x00023667
    72d0:	00023fb3 	.word	0x00023fb3
    72d4:	20005990 	.word	0x20005990
    72d8:	0002368c 	.word	0x0002368c
    72dc:	20005888 	.word	0x20005888
    72e0:	00023602 	.word	0x00023602
    72e4:	20005960 	.word	0x20005960
    72e8:	000236be 	.word	0x000236be

000072ec <bt_settings_encode_key>:
{
    72ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72f0:	b088      	sub	sp, #32
    72f2:	799c      	ldrb	r4, [r3, #6]
    72f4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    72f8:	795d      	ldrb	r5, [r3, #5]
    72fa:	791e      	ldrb	r6, [r3, #4]
    72fc:	78df      	ldrb	r7, [r3, #3]
    72fe:	f893 c002 	ldrb.w	ip, [r3, #2]
    7302:	f893 e001 	ldrb.w	lr, [r3, #1]
    7306:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    7308:	f1b8 0f00 	cmp.w	r8, #0
    730c:	d00e      	beq.n	732c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    730e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    7312:	e9cd ce04 	strd	ip, lr, [sp, #16]
    7316:	4613      	mov	r3, r2
    7318:	e9cd 6702 	strd	r6, r7, [sp, #8]
    731c:	e9cd 4500 	strd	r4, r5, [sp]
    7320:	4a08      	ldr	r2, [pc, #32]	; (7344 <bt_settings_encode_key+0x58>)
    7322:	f015 f880 	bl	1c426 <snprintk>
}
    7326:	b008      	add	sp, #32
    7328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    732c:	e9cd e305 	strd	lr, r3, [sp, #20]
    7330:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    7334:	4613      	mov	r3, r2
    7336:	e9cd 5601 	strd	r5, r6, [sp, #4]
    733a:	4a03      	ldr	r2, [pc, #12]	; (7348 <bt_settings_encode_key+0x5c>)
    733c:	9400      	str	r4, [sp, #0]
    733e:	f015 f872 	bl	1c426 <snprintk>
}
    7342:	e7f0      	b.n	7326 <bt_settings_encode_key+0x3a>
    7344:	000236dc 	.word	0x000236dc
    7348:	00023700 	.word	0x00023700

0000734c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    734c:	4909      	ldr	r1, [pc, #36]	; (7374 <bt_settings_save_id+0x28>)
    734e:	f3bf 8f5b 	dmb	ish
    7352:	e851 3f00 	ldrex	r3, [r1]
    7356:	f043 0201 	orr.w	r2, r3, #1
    735a:	e841 2000 	strex	r0, r2, [r1]
    735e:	2800      	cmp	r0, #0
    7360:	d1f7      	bne.n	7352 <bt_settings_save_id+0x6>
    7362:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7366:	07db      	lsls	r3, r3, #31
    7368:	d403      	bmi.n	7372 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    736a:	4803      	ldr	r0, [pc, #12]	; (7378 <bt_settings_save_id+0x2c>)
    736c:	3908      	subs	r1, #8
    736e:	f019 b95d 	b.w	2062c <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    7372:	4770      	bx	lr
    7374:	20005b18 	.word	0x20005b18
    7378:	20001c48 	.word	0x20001c48

0000737c <commit>:

static int commit(void)
{
    737c:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    737e:	4c1d      	ldr	r4, [pc, #116]	; (73f4 <commit+0x78>)
    7380:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
    7384:	b913      	cbnz	r3, 738c <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    7386:	481c      	ldr	r0, [pc, #112]	; (73f8 <commit+0x7c>)
    7388:	f001 fd1e 	bl	8dc8 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    738c:	79e3      	ldrb	r3, [r4, #7]
    738e:	b99b      	cbnz	r3, 73b8 <commit+0x3c>
		bt_setup_public_id_addr();
    7390:	f001 fdb0 	bl	8ef4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    7394:	79e3      	ldrb	r3, [r4, #7]
    7396:	b97b      	cbnz	r3, 73b8 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    7398:	f001 fe30 	bl	8ffc <bt_setup_random_id_addr>
		if (err) {
    739c:	4604      	mov	r4, r0
    739e:	b158      	cbz	r0, 73b8 <commit+0x3c>
    73a0:	4916      	ldr	r1, [pc, #88]	; (73fc <commit+0x80>)
    73a2:	4b17      	ldr	r3, [pc, #92]	; (7400 <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    73a4:	4817      	ldr	r0, [pc, #92]	; (7404 <commit+0x88>)
    73a6:	1ac9      	subs	r1, r1, r3
    73a8:	08c9      	lsrs	r1, r1, #3
    73aa:	0189      	lsls	r1, r1, #6
    73ac:	f041 0101 	orr.w	r1, r1, #1
    73b0:	f016 f97a 	bl	1d6a8 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    73b4:	4620      	mov	r0, r4
    73b6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73b8:	4d13      	ldr	r5, [pc, #76]	; (7408 <commit+0x8c>)
    73ba:	f3bf 8f5b 	dmb	ish
    73be:	682b      	ldr	r3, [r5, #0]
    73c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    73c4:	079b      	lsls	r3, r3, #30
    73c6:	d401      	bmi.n	73cc <commit+0x50>
		bt_finalize_init();
    73c8:	f001 fc10 	bl	8bec <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    73cc:	f3bf 8f5b 	dmb	ish
    73d0:	e855 4f00 	ldrex	r4, [r5]
    73d4:	f424 2380 	bic.w	r3, r4, #262144	; 0x40000
    73d8:	e845 3200 	strex	r2, r3, [r5]
    73dc:	2a00      	cmp	r2, #0
    73de:	d1f7      	bne.n	73d0 <commit+0x54>
    73e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    73e4:	f414 2480 	ands.w	r4, r4, #262144	; 0x40000
    73e8:	d0e4      	beq.n	73b4 <commit+0x38>
		bt_settings_save_id();
    73ea:	f7ff ffaf 	bl	734c <bt_settings_save_id>
	return 0;
    73ee:	2400      	movs	r4, #0
    73f0:	e7e0      	b.n	73b4 <commit+0x38>
    73f2:	bf00      	nop
    73f4:	20005888 	.word	0x20005888
    73f8:	00023721 	.word	0x00023721
    73fc:	000211fc 	.word	0x000211fc
    7400:	00021114 	.word	0x00021114
    7404:	00023744 	.word	0x00023744
    7408:	200058f8 	.word	0x200058f8

0000740c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    740c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    740e:	f7fe f853 	bl	54b8 <settings_subsys_init>
	if (err) {
    7412:	4604      	mov	r4, r0
    7414:	b150      	cbz	r0, 742c <bt_settings_init+0x20>
    7416:	4a06      	ldr	r2, [pc, #24]	; (7430 <bt_settings_init+0x24>)
    7418:	4b06      	ldr	r3, [pc, #24]	; (7434 <bt_settings_init+0x28>)
    741a:	1ad2      	subs	r2, r2, r3
    741c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    741e:	0192      	lsls	r2, r2, #6
    7420:	4601      	mov	r1, r0
    7422:	f042 0201 	orr.w	r2, r2, #1
    7426:	4804      	ldr	r0, [pc, #16]	; (7438 <bt_settings_init+0x2c>)
    7428:	f016 f94b 	bl	1d6c2 <log_1>
		return err;
	}

	return 0;
}
    742c:	4620      	mov	r0, r4
    742e:	bd10      	pop	{r4, pc}
    7430:	000211fc 	.word	0x000211fc
    7434:	00021114 	.word	0x00021114
    7438:	00023768 	.word	0x00023768

0000743c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    743c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    743e:	7802      	ldrb	r2, [r0, #0]
    7440:	2a01      	cmp	r2, #1
{
    7442:	4604      	mov	r4, r0
    7444:	460b      	mov	r3, r1
	switch (src->type) {
    7446:	d016      	beq.n	7476 <uuid_to_uuid128+0x3a>
    7448:	2a02      	cmp	r2, #2
    744a:	d02c      	beq.n	74a6 <uuid_to_uuid128+0x6a>
    744c:	b98a      	cbnz	r2, 7472 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    744e:	4a19      	ldr	r2, [pc, #100]	; (74b4 <uuid_to_uuid128+0x78>)
    7450:	460d      	mov	r5, r1
    7452:	f102 0710 	add.w	r7, r2, #16
    7456:	6810      	ldr	r0, [r2, #0]
    7458:	6851      	ldr	r1, [r2, #4]
    745a:	462e      	mov	r6, r5
    745c:	c603      	stmia	r6!, {r0, r1}
    745e:	3208      	adds	r2, #8
    7460:	42ba      	cmp	r2, r7
    7462:	4635      	mov	r5, r6
    7464:	d1f7      	bne.n	7456 <uuid_to_uuid128+0x1a>
    7466:	7812      	ldrb	r2, [r2, #0]
    7468:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    746a:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    746c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    746e:	0a12      	lsrs	r2, r2, #8
    7470:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7472:	bcf0      	pop	{r4, r5, r6, r7}
    7474:	4770      	bx	lr
		*dst = uuid128_base;
    7476:	4a0f      	ldr	r2, [pc, #60]	; (74b4 <uuid_to_uuid128+0x78>)
    7478:	460d      	mov	r5, r1
    747a:	f102 0710 	add.w	r7, r2, #16
    747e:	6810      	ldr	r0, [r2, #0]
    7480:	6851      	ldr	r1, [r2, #4]
    7482:	462e      	mov	r6, r5
    7484:	c603      	stmia	r6!, {r0, r1}
    7486:	3208      	adds	r2, #8
    7488:	42ba      	cmp	r2, r7
    748a:	4635      	mov	r5, r6
    748c:	d1f7      	bne.n	747e <uuid_to_uuid128+0x42>
    748e:	7812      	ldrb	r2, [r2, #0]
    7490:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    7492:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    7494:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7496:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    749a:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    749c:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    749e:	0a12      	lsrs	r2, r2, #8
    74a0:	7399      	strb	r1, [r3, #14]
    74a2:	741a      	strb	r2, [r3, #16]
}
    74a4:	e7e5      	b.n	7472 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    74a6:	4601      	mov	r1, r0
}
    74a8:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    74aa:	2211      	movs	r2, #17
    74ac:	4618      	mov	r0, r3
    74ae:	f017 b81b 	b.w	1e4e8 <memcpy>
    74b2:	bf00      	nop
    74b4:	0002379c 	.word	0x0002379c

000074b8 <le_dhkey_complete>:
{
    74b8:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    74ba:	4c06      	ldr	r4, [pc, #24]	; (74d4 <le_dhkey_complete+0x1c>)
    74bc:	6822      	ldr	r2, [r4, #0]
    74be:	b132      	cbz	r2, 74ce <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    74c0:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    74c2:	7803      	ldrb	r3, [r0, #0]
    74c4:	b923      	cbnz	r3, 74d0 <le_dhkey_complete+0x18>
    74c6:	3001      	adds	r0, #1
    74c8:	4790      	blx	r2
		dh_key_cb = NULL;
    74ca:	2300      	movs	r3, #0
    74cc:	6023      	str	r3, [r4, #0]
}
    74ce:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    74d0:	2000      	movs	r0, #0
    74d2:	e7f9      	b.n	74c8 <le_dhkey_complete+0x10>
    74d4:	200002e8 	.word	0x200002e8

000074d8 <ver_str>:
{
    74d8:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    74da:	4d0b      	ldr	r5, [pc, #44]	; (7508 <ver_str+0x30>)
{
    74dc:	4606      	mov	r6, r0
	const char * const str[] = {
    74de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    74e0:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    74e2:	466c      	mov	r4, sp
    74e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    74e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    74ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    74f2:	2e0b      	cmp	r6, #11
		return str[ver];
    74f4:	bf9b      	ittet	ls
    74f6:	ab0c      	addls	r3, sp, #48	; 0x30
    74f8:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    74fc:	4803      	ldrhi	r0, [pc, #12]	; (750c <ver_str+0x34>)
		return str[ver];
    74fe:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    7502:	b00c      	add	sp, #48	; 0x30
    7504:	bd70      	pop	{r4, r5, r6, pc}
    7506:	bf00      	nop
    7508:	000212ac 	.word	0x000212ac
    750c:	00023894 	.word	0x00023894

00007510 <hci_data_buf_overflow>:
    7510:	4905      	ldr	r1, [pc, #20]	; (7528 <hci_data_buf_overflow+0x18>)
    7512:	4a06      	ldr	r2, [pc, #24]	; (752c <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    7514:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7516:	4806      	ldr	r0, [pc, #24]	; (7530 <hci_data_buf_overflow+0x20>)
    7518:	1a52      	subs	r2, r2, r1
    751a:	08d2      	lsrs	r2, r2, #3
    751c:	0192      	lsls	r2, r2, #6
    751e:	7819      	ldrb	r1, [r3, #0]
    7520:	f042 0202 	orr.w	r2, r2, #2
    7524:	f016 b8cd 	b.w	1d6c2 <log_1>
    7528:	00021114 	.word	0x00021114
    752c:	000211d4 	.word	0x000211d4
    7530:	0002389c 	.word	0x0002389c

00007534 <le_pkey_complete>:
{
    7534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    7536:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7538:	480f      	ldr	r0, [pc, #60]	; (7578 <le_pkey_complete+0x44>)
    753a:	f06f 0110 	mvn.w	r1, #16
    753e:	f017 f999 	bl	1e874 <atomic_and>
	if (!evt->status) {
    7542:	7833      	ldrb	r3, [r6, #0]
    7544:	b943      	cbnz	r3, 7558 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    7546:	1c71      	adds	r1, r6, #1
    7548:	480c      	ldr	r0, [pc, #48]	; (757c <le_pkey_complete+0x48>)
    754a:	2240      	movs	r2, #64	; 0x40
    754c:	f016 ffcc 	bl	1e4e8 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7550:	4809      	ldr	r0, [pc, #36]	; (7578 <le_pkey_complete+0x44>)
    7552:	2108      	movs	r1, #8
    7554:	f017 f9a9 	bl	1e8aa <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7558:	4d09      	ldr	r5, [pc, #36]	; (7580 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    755a:	4f08      	ldr	r7, [pc, #32]	; (757c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    755c:	682c      	ldr	r4, [r5, #0]
    755e:	b90c      	cbnz	r4, 7564 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    7560:	602c      	str	r4, [r5, #0]
}
    7562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    7564:	7832      	ldrb	r2, [r6, #0]
    7566:	6823      	ldr	r3, [r4, #0]
    7568:	2a00      	cmp	r2, #0
    756a:	bf0c      	ite	eq
    756c:	4638      	moveq	r0, r7
    756e:	2000      	movne	r0, #0
    7570:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7572:	6864      	ldr	r4, [r4, #4]
    7574:	e7f3      	b.n	755e <le_pkey_complete+0x2a>
    7576:	bf00      	nop
    7578:	200058f8 	.word	0x200058f8
    757c:	20002220 	.word	0x20002220
    7580:	200002ec 	.word	0x200002ec

00007584 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7584:	6883      	ldr	r3, [r0, #8]
{
    7586:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7588:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    758a:	4620      	mov	r0, r4
    758c:	f002 fdb4 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    7590:	b960      	cbnz	r0, 75ac <le_data_len_change+0x28>
    7592:	4a08      	ldr	r2, [pc, #32]	; (75b4 <le_data_len_change+0x30>)
    7594:	4b08      	ldr	r3, [pc, #32]	; (75b8 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7596:	4809      	ldr	r0, [pc, #36]	; (75bc <le_data_len_change+0x38>)
    7598:	1ad2      	subs	r2, r2, r3
    759a:	08d2      	lsrs	r2, r2, #3
    759c:	0192      	lsls	r2, r2, #6
    759e:	4621      	mov	r1, r4
    75a0:	f042 0201 	orr.w	r2, r2, #1
}
    75a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    75a8:	f016 b88b 	b.w	1d6c2 <log_1>
}
    75ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    75b0:	f017 bb1b 	b.w	1ebea <bt_conn_unref>
    75b4:	000211d4 	.word	0x000211d4
    75b8:	00021114 	.word	0x00021114
    75bc:	000238c4 	.word	0x000238c4

000075c0 <le_conn_update_complete>:
{
    75c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    75c2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    75c4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    75c8:	4630      	mov	r0, r6
    75ca:	f002 fd95 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    75ce:	4604      	mov	r4, r0
    75d0:	b960      	cbnz	r0, 75ec <le_conn_update_complete+0x2c>
    75d2:	4a1f      	ldr	r2, [pc, #124]	; (7650 <le_conn_update_complete+0x90>)
    75d4:	4b1f      	ldr	r3, [pc, #124]	; (7654 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    75d6:	4820      	ldr	r0, [pc, #128]	; (7658 <le_conn_update_complete+0x98>)
    75d8:	1ad2      	subs	r2, r2, r3
    75da:	08d2      	lsrs	r2, r2, #3
    75dc:	0192      	lsls	r2, r2, #6
    75de:	f042 0201 	orr.w	r2, r2, #1
    75e2:	4631      	mov	r1, r6
    75e4:	f016 f86d 	bl	1d6c2 <log_1>
}
    75e8:	b002      	add	sp, #8
    75ea:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    75ec:	782b      	ldrb	r3, [r5, #0]
    75ee:	b9bb      	cbnz	r3, 7620 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    75f0:	792a      	ldrb	r2, [r5, #4]
    75f2:	78eb      	ldrb	r3, [r5, #3]
    75f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    75f8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    75fc:	79aa      	ldrb	r2, [r5, #6]
    75fe:	796b      	ldrb	r3, [r5, #5]
    7600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7604:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7608:	79eb      	ldrb	r3, [r5, #7]
    760a:	7a2a      	ldrb	r2, [r5, #8]
    760c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7610:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
		notify_le_param_updated(conn);
    7614:	f002 fa9e 	bl	9b54 <notify_le_param_updated>
	bt_conn_unref(conn);
    7618:	4620      	mov	r0, r4
    761a:	f017 fae6 	bl	1ebea <bt_conn_unref>
    761e:	e7e3      	b.n	75e8 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    7620:	2b1a      	cmp	r3, #26
    7622:	d1f9      	bne.n	7618 <le_conn_update_complete+0x58>
    7624:	78c3      	ldrb	r3, [r0, #3]
    7626:	2b01      	cmp	r3, #1
    7628:	d1f6      	bne.n	7618 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    762a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    762e:	3004      	adds	r0, #4
    7630:	f017 f93b 	bl	1e8aa <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    7634:	0543      	lsls	r3, r0, #21
    7636:	d4ef      	bmi.n	7618 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    7638:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    763c:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    763e:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    7640:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    7644:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    7646:	4620      	mov	r0, r4
    7648:	f003 f8bc 	bl	a7c4 <bt_l2cap_update_conn_param>
    764c:	e7e4      	b.n	7618 <le_conn_update_complete+0x58>
    764e:	bf00      	nop
    7650:	000211d4 	.word	0x000211d4
    7654:	00021114 	.word	0x00021114
    7658:	000238c4 	.word	0x000238c4

0000765c <hci_vendor_event>:
{
    765c:	b510      	push	{r4, lr}
    765e:	4a0a      	ldr	r2, [pc, #40]	; (7688 <hci_vendor_event+0x2c>)
    7660:	4c0a      	ldr	r4, [pc, #40]	; (768c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    7662:	8981      	ldrh	r1, [r0, #12]
    7664:	6880      	ldr	r0, [r0, #8]
    7666:	1aa4      	subs	r4, r4, r2
    7668:	f7ff fb76 	bl	6d58 <bt_hex_real>
    766c:	f7fc fc48 	bl	3f00 <log_strdup>
    7670:	08e4      	lsrs	r4, r4, #3
    7672:	01a4      	lsls	r4, r4, #6
    7674:	f044 0402 	orr.w	r4, r4, #2
    7678:	4601      	mov	r1, r0
    767a:	4622      	mov	r2, r4
    767c:	4804      	ldr	r0, [pc, #16]	; (7690 <hci_vendor_event+0x34>)
}
    767e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7682:	f016 b81e 	b.w	1d6c2 <log_1>
    7686:	bf00      	nop
    7688:	00021114 	.word	0x00021114
    768c:	000211d4 	.word	0x000211d4
    7690:	000238e8 	.word	0x000238e8

00007694 <update_sec_level>:
{
    7694:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    7696:	7ac3      	ldrb	r3, [r0, #11]
{
    7698:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    769a:	b913      	cbnz	r3, 76a2 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    769c:	2301      	movs	r3, #1
    769e:	7243      	strb	r3, [r0, #9]
}
    76a0:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    76a2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    76a6:	b1fb      	cbz	r3, 76e8 <update_sec_level+0x54>
    76a8:	7a5a      	ldrb	r2, [r3, #9]
    76aa:	07d1      	lsls	r1, r2, #31
    76ac:	d51c      	bpl.n	76e8 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    76ae:	06d2      	lsls	r2, r2, #27
    76b0:	d518      	bpl.n	76e4 <update_sec_level+0x50>
    76b2:	7a1b      	ldrb	r3, [r3, #8]
    76b4:	2b10      	cmp	r3, #16
    76b6:	d115      	bne.n	76e4 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    76b8:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    76ba:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    76bc:	7aa2      	ldrb	r2, [r4, #10]
    76be:	7a63      	ldrb	r3, [r4, #9]
    76c0:	429a      	cmp	r2, r3
    76c2:	d9ed      	bls.n	76a0 <update_sec_level+0xc>
    76c4:	4b09      	ldr	r3, [pc, #36]	; (76ec <update_sec_level+0x58>)
    76c6:	490a      	ldr	r1, [pc, #40]	; (76f0 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    76c8:	480a      	ldr	r0, [pc, #40]	; (76f4 <update_sec_level+0x60>)
    76ca:	1ac9      	subs	r1, r1, r3
    76cc:	08c9      	lsrs	r1, r1, #3
    76ce:	0189      	lsls	r1, r1, #6
    76d0:	f041 0101 	orr.w	r1, r1, #1
    76d4:	f015 ffe8 	bl	1d6a8 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    76d8:	4620      	mov	r0, r4
    76da:	2105      	movs	r1, #5
}
    76dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    76e0:	f017 ba88 	b.w	1ebf4 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    76e4:	2303      	movs	r3, #3
    76e6:	e7e8      	b.n	76ba <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    76e8:	2302      	movs	r3, #2
    76ea:	e7e6      	b.n	76ba <update_sec_level+0x26>
    76ec:	00021114 	.word	0x00021114
    76f0:	000211d4 	.word	0x000211d4
    76f4:	0002390c 	.word	0x0002390c

000076f8 <hci_encrypt_key_refresh_complete>:
{
    76f8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    76fa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    76fc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7700:	4630      	mov	r0, r6
    7702:	f002 fcf9 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    7706:	4604      	mov	r4, r0
    7708:	b960      	cbnz	r0, 7724 <hci_encrypt_key_refresh_complete+0x2c>
    770a:	4a18      	ldr	r2, [pc, #96]	; (776c <hci_encrypt_key_refresh_complete+0x74>)
    770c:	4b18      	ldr	r3, [pc, #96]	; (7770 <hci_encrypt_key_refresh_complete+0x78>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    770e:	4819      	ldr	r0, [pc, #100]	; (7774 <hci_encrypt_key_refresh_complete+0x7c>)
    7710:	1ad2      	subs	r2, r2, r3
    7712:	08d2      	lsrs	r2, r2, #3
    7714:	0192      	lsls	r2, r2, #6
    7716:	4631      	mov	r1, r6
    7718:	f042 0201 	orr.w	r2, r2, #1
}
    771c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7720:	f015 bfcf 	b.w	1d6c2 <log_1>
	if (evt->status) {
    7724:	7829      	ldrb	r1, [r5, #0]
    7726:	b189      	cbz	r1, 774c <hci_encrypt_key_refresh_complete+0x54>
	conn->required_sec_level = conn->sec_level;
    7728:	7a43      	ldrb	r3, [r0, #9]
    772a:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    772c:	f017 fafe 	bl	1ed2c <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    7730:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    7732:	2b29      	cmp	r3, #41	; 0x29
    7734:	bf9a      	itte	ls
    7736:	4a10      	ldrls	r2, [pc, #64]	; (7778 <hci_encrypt_key_refresh_complete+0x80>)
    7738:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    773a:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    773c:	4620      	mov	r0, r4
    773e:	f002 fa77 	bl	9c30 <bt_conn_security_changed>
	bt_conn_unref(conn);
    7742:	4620      	mov	r0, r4
}
    7744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7748:	f017 ba4f 	b.w	1ebea <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    774c:	7883      	ldrb	r3, [r0, #2]
    774e:	2b01      	cmp	r3, #1
    7750:	d104      	bne.n	775c <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
    7752:	f006 feab 	bl	e4ac <bt_smp_update_keys>
		update_sec_level(conn);
    7756:	4620      	mov	r0, r4
    7758:	f7ff ff9c 	bl	7694 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    775c:	7a63      	ldrb	r3, [r4, #9]
    775e:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    7760:	7829      	ldrb	r1, [r5, #0]
    7762:	4620      	mov	r0, r4
    7764:	f017 fae2 	bl	1ed2c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    7768:	2100      	movs	r1, #0
    776a:	e7e7      	b.n	773c <hci_encrypt_key_refresh_complete+0x44>
    776c:	000211d4 	.word	0x000211d4
    7770:	00021114 	.word	0x00021114
    7774:	00023932 	.word	0x00023932
    7778:	00024192 	.word	0x00024192

0000777c <hci_encrypt_change>:
{
    777c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    777e:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7780:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7784:	4630      	mov	r0, r6
    7786:	f002 fcb7 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    778a:	4604      	mov	r4, r0
    778c:	b960      	cbnz	r0, 77a8 <hci_encrypt_change+0x2c>
    778e:	4a1a      	ldr	r2, [pc, #104]	; (77f8 <hci_encrypt_change+0x7c>)
    7790:	4b1a      	ldr	r3, [pc, #104]	; (77fc <hci_encrypt_change+0x80>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7792:	481b      	ldr	r0, [pc, #108]	; (7800 <hci_encrypt_change+0x84>)
    7794:	1ad2      	subs	r2, r2, r3
    7796:	08d2      	lsrs	r2, r2, #3
    7798:	0192      	lsls	r2, r2, #6
    779a:	4631      	mov	r1, r6
    779c:	f042 0201 	orr.w	r2, r2, #1
}
    77a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    77a4:	f015 bf8d 	b.w	1d6c2 <log_1>
	if (evt->status) {
    77a8:	7829      	ldrb	r1, [r5, #0]
    77aa:	b189      	cbz	r1, 77d0 <hci_encrypt_change+0x54>
	conn->required_sec_level = conn->sec_level;
    77ac:	7a43      	ldrb	r3, [r0, #9]
    77ae:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    77b0:	f017 fabc 	bl	1ed2c <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    77b4:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    77b6:	2b29      	cmp	r3, #41	; 0x29
    77b8:	bf9a      	itte	ls
    77ba:	4a12      	ldrls	r2, [pc, #72]	; (7804 <hci_encrypt_change+0x88>)
    77bc:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    77be:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    77c0:	4620      	mov	r0, r4
    77c2:	f002 fa35 	bl	9c30 <bt_conn_security_changed>
	bt_conn_unref(conn);
    77c6:	4620      	mov	r0, r4
}
    77c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    77cc:	f017 ba0d 	b.w	1ebea <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    77d0:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    77d2:	78eb      	ldrb	r3, [r5, #3]
    77d4:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    77d6:	2a01      	cmp	r2, #1
    77d8:	d105      	bne.n	77e6 <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
    77da:	b10b      	cbz	r3, 77e0 <hci_encrypt_change+0x64>
			bt_smp_update_keys(conn);
    77dc:	f006 fe66 	bl	e4ac <bt_smp_update_keys>
		update_sec_level(conn);
    77e0:	4620      	mov	r0, r4
    77e2:	f7ff ff57 	bl	7694 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    77e6:	7a63      	ldrb	r3, [r4, #9]
    77e8:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    77ea:	7829      	ldrb	r1, [r5, #0]
    77ec:	4620      	mov	r0, r4
    77ee:	f017 fa9d 	bl	1ed2c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    77f2:	2100      	movs	r1, #0
    77f4:	e7e4      	b.n	77c0 <hci_encrypt_change+0x44>
    77f6:	bf00      	nop
    77f8:	000211d4 	.word	0x000211d4
    77fc:	00021114 	.word	0x00021114
    7800:	00023932 	.word	0x00023932
    7804:	00024192 	.word	0x00024192

00007808 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    7808:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_id, peer_addr,
    780a:	4c0b      	ldr	r4, [pc, #44]	; (7838 <find_pending_connect.part.0+0x30>)
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    780c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_id, peer_addr,
    780e:	2204      	movs	r2, #4
    7810:	7a20      	ldrb	r0, [r4, #8]
    7812:	f002 fca7 	bl	a164 <bt_conn_lookup_state_le>
		if (!conn) {
    7816:	b968      	cbnz	r0, 7834 <find_pending_connect.part.0+0x2c>
						       BT_ADDR_LE_NONE,
    7818:	4b08      	ldr	r3, [pc, #32]	; (783c <find_pending_connect.part.0+0x34>)
    781a:	6818      	ldr	r0, [r3, #0]
    781c:	889a      	ldrh	r2, [r3, #4]
    781e:	9000      	str	r0, [sp, #0]
    7820:	799b      	ldrb	r3, [r3, #6]
    7822:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_id,
    7826:	7a20      	ldrb	r0, [r4, #8]
						       BT_ADDR_LE_NONE,
    7828:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_id,
    782c:	2203      	movs	r2, #3
    782e:	4669      	mov	r1, sp
    7830:	f002 fc98 	bl	a164 <bt_conn_lookup_state_le>
}
    7834:	b002      	add	sp, #8
    7836:	bd10      	pop	{r4, pc}
    7838:	20005888 	.word	0x20005888
    783c:	000212dc 	.word	0x000212dc

00007840 <handle_event>:
{
    7840:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7846:	4605      	mov	r5, r0
    7848:	4608      	mov	r0, r1
		if (handler->event != event) {
    784a:	7811      	ldrb	r1, [r2, #0]
    784c:	42a9      	cmp	r1, r5
    784e:	d01a      	beq.n	7886 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    7850:	3208      	adds	r2, #8
    7852:	429a      	cmp	r2, r3
    7854:	d1f9      	bne.n	784a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7856:	8986      	ldrh	r6, [r0, #12]
    7858:	4b16      	ldr	r3, [pc, #88]	; (78b4 <handle_event+0x74>)
    785a:	4c17      	ldr	r4, [pc, #92]	; (78b8 <handle_event+0x78>)
    785c:	6880      	ldr	r0, [r0, #8]
    785e:	4631      	mov	r1, r6
    7860:	1ae4      	subs	r4, r4, r3
    7862:	f7ff fa79 	bl	6d58 <bt_hex_real>
    7866:	f7fc fb4b 	bl	3f00 <log_strdup>
    786a:	08e4      	lsrs	r4, r4, #3
    786c:	01a4      	lsls	r4, r4, #6
    786e:	f044 0402 	orr.w	r4, r4, #2
    7872:	4603      	mov	r3, r0
    7874:	f8ad 4000 	strh.w	r4, [sp]
    7878:	4810      	ldr	r0, [pc, #64]	; (78bc <handle_event+0x7c>)
    787a:	4632      	mov	r2, r6
    787c:	4629      	mov	r1, r5
    787e:	f015 ff4d 	bl	1d71c <log_3>
}
    7882:	b002      	add	sp, #8
    7884:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    7886:	8981      	ldrh	r1, [r0, #12]
    7888:	7853      	ldrb	r3, [r2, #1]
    788a:	428b      	cmp	r3, r1
    788c:	d90d      	bls.n	78aa <handle_event+0x6a>
    788e:	4a09      	ldr	r2, [pc, #36]	; (78b4 <handle_event+0x74>)
    7890:	4b09      	ldr	r3, [pc, #36]	; (78b8 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7892:	480b      	ldr	r0, [pc, #44]	; (78c0 <handle_event+0x80>)
    7894:	1a9b      	subs	r3, r3, r2
    7896:	08db      	lsrs	r3, r3, #3
    7898:	019b      	lsls	r3, r3, #6
    789a:	f043 0301 	orr.w	r3, r3, #1
    789e:	462a      	mov	r2, r5
}
    78a0:	b002      	add	sp, #8
    78a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    78a6:	f015 bf20 	b.w	1d6ea <log_2>
		handler->handler(buf);
    78aa:	6853      	ldr	r3, [r2, #4]
}
    78ac:	b002      	add	sp, #8
    78ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    78b2:	4718      	bx	r3
    78b4:	00021114 	.word	0x00021114
    78b8:	000211d4 	.word	0x000211d4
    78bc:	0002397a 	.word	0x0002397a
    78c0:	00023958 	.word	0x00023958

000078c4 <hci_le_meta_event>:
{
    78c4:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    78c6:	2101      	movs	r1, #1
{
    78c8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    78ca:	3008      	adds	r0, #8
    78cc:	f018 fc60 	bl	20190 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    78d0:	4621      	mov	r1, r4
    78d2:	4a03      	ldr	r2, [pc, #12]	; (78e0 <hci_le_meta_event+0x1c>)
    78d4:	7800      	ldrb	r0, [r0, #0]
}
    78d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    78da:	230a      	movs	r3, #10
    78dc:	f7ff bfb0 	b.w	7840 <handle_event>
    78e0:	000218c0 	.word	0x000218c0

000078e4 <hci_cmd_done>:
{
    78e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    78e8:	4607      	mov	r7, r0
    78ea:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    78ec:	7990      	ldrb	r0, [r2, #6]
    78ee:	4e34      	ldr	r6, [pc, #208]	; (79c0 <hci_cmd_done+0xdc>)
{
    78f0:	4688      	mov	r8, r1
    78f2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    78f4:	f012 f8e4 	bl	19ac0 <net_buf_pool_get>
    78f8:	4286      	cmp	r6, r0
    78fa:	d016      	beq.n	792a <hci_cmd_done+0x46>
    78fc:	4b31      	ldr	r3, [pc, #196]	; (79c4 <hci_cmd_done+0xe0>)
    78fe:	4d32      	ldr	r5, [pc, #200]	; (79c8 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7900:	79a0      	ldrb	r0, [r4, #6]
    7902:	9700      	str	r7, [sp, #0]
    7904:	1aed      	subs	r5, r5, r3
    7906:	08ed      	lsrs	r5, r5, #3
    7908:	9001      	str	r0, [sp, #4]
    790a:	f012 f8d9 	bl	19ac0 <net_buf_pool_get>
    790e:	01ad      	lsls	r5, r5, #6
    7910:	f045 0502 	orr.w	r5, r5, #2
    7914:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7918:	462b      	mov	r3, r5
    791a:	482c      	ldr	r0, [pc, #176]	; (79cc <hci_cmd_done+0xe8>)
    791c:	2204      	movs	r2, #4
    791e:	4669      	mov	r1, sp
    7920:	f015 ff18 	bl	1d754 <log_n>
}
    7924:	b005      	add	sp, #20
    7926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    792a:	4620      	mov	r0, r4
    792c:	f012 f8ce 	bl	19acc <net_buf_id>
    7930:	4d27      	ldr	r5, [pc, #156]	; (79d0 <hci_cmd_done+0xec>)
    7932:	f04f 090c 	mov.w	r9, #12
    7936:	fb09 5300 	mla	r3, r9, r0, r5
    793a:	885b      	ldrh	r3, [r3, #2]
    793c:	42bb      	cmp	r3, r7
    793e:	d011      	beq.n	7964 <hci_cmd_done+0x80>
    7940:	4b20      	ldr	r3, [pc, #128]	; (79c4 <hci_cmd_done+0xe0>)
    7942:	4e21      	ldr	r6, [pc, #132]	; (79c8 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7944:	4620      	mov	r0, r4
    7946:	1af6      	subs	r6, r6, r3
    7948:	f012 f8c0 	bl	19acc <net_buf_id>
    794c:	08f6      	lsrs	r6, r6, #3
    794e:	fb09 5000 	mla	r0, r9, r0, r5
    7952:	01b6      	lsls	r6, r6, #6
    7954:	f046 0602 	orr.w	r6, r6, #2
    7958:	8842      	ldrh	r2, [r0, #2]
    795a:	481e      	ldr	r0, [pc, #120]	; (79d4 <hci_cmd_done+0xf0>)
    795c:	4633      	mov	r3, r6
    795e:	4639      	mov	r1, r7
    7960:	f015 fec3 	bl	1d6ea <log_2>
	if (cmd(buf)->state && !status) {
    7964:	4620      	mov	r0, r4
    7966:	f012 f8b1 	bl	19acc <net_buf_id>
    796a:	260c      	movs	r6, #12
    796c:	fb06 5000 	mla	r0, r6, r0, r5
    7970:	6843      	ldr	r3, [r0, #4]
    7972:	b16b      	cbz	r3, 7990 <hci_cmd_done+0xac>
    7974:	f1b8 0f00 	cmp.w	r8, #0
    7978:	d10a      	bne.n	7990 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    797a:	4620      	mov	r0, r4
    797c:	f012 f8a6 	bl	19acc <net_buf_id>
    7980:	fb06 5000 	mla	r0, r6, r0, r5
    7984:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    7986:	e9d3 0100 	ldrd	r0, r1, [r3]
    798a:	7a1a      	ldrb	r2, [r3, #8]
    798c:	f016 ff9c 	bl	1e8c8 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7990:	4620      	mov	r0, r4
    7992:	f012 f89b 	bl	19acc <net_buf_id>
    7996:	260c      	movs	r6, #12
    7998:	fb06 5000 	mla	r0, r6, r0, r5
    799c:	6883      	ldr	r3, [r0, #8]
    799e:	2b00      	cmp	r3, #0
    79a0:	d0c0      	beq.n	7924 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    79a2:	4620      	mov	r0, r4
    79a4:	f012 f892 	bl	19acc <net_buf_id>
    79a8:	4370      	muls	r0, r6
    79aa:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    79ae:	4620      	mov	r0, r4
    79b0:	f012 f88c 	bl	19acc <net_buf_id>
    79b4:	fb06 5500 	mla	r5, r6, r0, r5
    79b8:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    79ba:	f013 fef9 	bl	1b7b0 <z_impl_k_sem_give>
}
    79be:	e7b1      	b.n	7924 <hci_cmd_done+0x40>
    79c0:	200062c0 	.word	0x200062c0
    79c4:	00021114 	.word	0x00021114
    79c8:	000211d4 	.word	0x000211d4
    79cc:	0002399c 	.word	0x0002399c
    79d0:	200002d0 	.word	0x200002d0
    79d4:	000239d1 	.word	0x000239d1

000079d8 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    79d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    79da:	4f0b      	ldr	r7, [pc, #44]	; (7a08 <id_find+0x30>)
{
    79dc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    79de:	2500      	movs	r5, #0
    79e0:	79fb      	ldrb	r3, [r7, #7]
    79e2:	b2ec      	uxtb	r4, r5
    79e4:	42a3      	cmp	r3, r4
    79e6:	d802      	bhi.n	79ee <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    79e8:	f06f 0401 	mvn.w	r4, #1
    79ec:	e009      	b.n	7a02 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    79ee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    79f2:	2207      	movs	r2, #7
    79f4:	4439      	add	r1, r7
    79f6:	4630      	mov	r0, r6
    79f8:	f016 fd66 	bl	1e4c8 <memcmp>
    79fc:	3501      	adds	r5, #1
    79fe:	2800      	cmp	r0, #0
    7a00:	d1ee      	bne.n	79e0 <id_find+0x8>
}
    7a02:	4620      	mov	r0, r4
    7a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a06:	bf00      	nop
    7a08:	20005888 	.word	0x20005888

00007a0c <hci_tx_thread>:
{
    7a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a10:	4c4e      	ldr	r4, [pc, #312]	; (7b4c <hci_tx_thread+0x140>)
    7a12:	4b4f      	ldr	r3, [pc, #316]	; (7b50 <hci_tx_thread+0x144>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7a14:	f8df 9140 	ldr.w	r9, [pc, #320]	; 7b58 <hci_tx_thread+0x14c>
		BT_ASSERT(err == 0);
    7a18:	f8df a168 	ldr.w	sl, [pc, #360]	; 7b84 <hci_tx_thread+0x178>
    7a1c:	1ae4      	subs	r4, r4, r3
    7a1e:	08e4      	lsrs	r4, r4, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7a20:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7a24:	484b      	ldr	r0, [pc, #300]	; (7b54 <hci_tx_thread+0x148>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7a26:	f36f 3310 	bfc	r3, #12, #5
    7a2a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7a2e:	f002 fa27 	bl	9e80 <bt_conn_prepare_events>
    7a32:	1c47      	adds	r7, r0, #1
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7a34:	4848      	ldr	r0, [pc, #288]	; (7b58 <hci_tx_thread+0x14c>)
    7a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a3a:	4639      	mov	r1, r7
    7a3c:	f014 f982 	bl	1bd44 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7a40:	b160      	cbz	r0, 7a5c <hci_tx_thread+0x50>
    7a42:	4946      	ldr	r1, [pc, #280]	; (7b5c <hci_tx_thread+0x150>)
    7a44:	4846      	ldr	r0, [pc, #280]	; (7b60 <hci_tx_thread+0x154>)
    7a46:	f241 034d 	movw	r3, #4173	; 0x104d
    7a4a:	4652      	mov	r2, sl
    7a4c:	f014 fcde 	bl	1c40c <printk>
    7a50:	4040      	eors	r0, r0
    7a52:	f380 8811 	msr	BASEPRI, r0
    7a56:	f04f 0003 	mov.w	r0, #3
    7a5a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7a5c:	4d41      	ldr	r5, [pc, #260]	; (7b64 <hci_tx_thread+0x158>)
{
    7a5e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 7b58 <hci_tx_thread+0x14c>
    7a62:	f105 0ba8 	add.w	fp, r5, #168	; 0xa8
	for (; count; ev++, count--) {
    7a66:	b917      	cbnz	r7, 7a6e <hci_tx_thread+0x62>
	z_impl_k_yield();
    7a68:	f013 fe26 	bl	1b6b8 <z_impl_k_yield>
}
    7a6c:	e7d8      	b.n	7a20 <hci_tx_thread+0x14>
		switch (ev->state) {
    7a6e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7a72:	f3c1 3104 	ubfx	r1, r1, #12, #5
    7a76:	2901      	cmp	r1, #1
    7a78:	d955      	bls.n	7b26 <hci_tx_thread+0x11a>
    7a7a:	2904      	cmp	r1, #4
    7a7c:	d15f      	bne.n	7b3e <hci_tx_thread+0x132>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7a7e:	f898 100c 	ldrb.w	r1, [r8, #12]
    7a82:	2900      	cmp	r1, #0
    7a84:	d153      	bne.n	7b2e <hci_tx_thread+0x122>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7a86:	4838      	ldr	r0, [pc, #224]	; (7b68 <hci_tx_thread+0x15c>)
    7a88:	f018 fb2d 	bl	200e6 <net_buf_get>
	BT_ASSERT(buf);
    7a8c:	4606      	mov	r6, r0
    7a8e:	b960      	cbnz	r0, 7aaa <hci_tx_thread+0x9e>
    7a90:	4936      	ldr	r1, [pc, #216]	; (7b6c <hci_tx_thread+0x160>)
    7a92:	4833      	ldr	r0, [pc, #204]	; (7b60 <hci_tx_thread+0x154>)
    7a94:	f640 73ee 	movw	r3, #4078	; 0xfee
    7a98:	4652      	mov	r2, sl
    7a9a:	f014 fcb7 	bl	1c40c <printk>
    7a9e:	4040      	eors	r0, r0
    7aa0:	f380 8811 	msr	BASEPRI, r0
    7aa4:	f04f 0003 	mov.w	r0, #3
    7aa8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7aaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7aae:	4658      	mov	r0, fp
    7ab0:	f013 fea4 	bl	1b7fc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7ab4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    7ab8:	b163      	cbz	r3, 7ad4 <hci_tx_thread+0xc8>
		BT_ERR("Uncleared pending sent_cmd");
    7aba:	01a1      	lsls	r1, r4, #6
    7abc:	482c      	ldr	r0, [pc, #176]	; (7b70 <hci_tx_thread+0x164>)
    7abe:	f041 0101 	orr.w	r1, r1, #1
    7ac2:	f015 fdf1 	bl	1d6a8 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    7ac6:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7aca:	f012 f895 	bl	19bf8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7ace:	2300      	movs	r3, #0
    7ad0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    7ad4:	4630      	mov	r0, r6
    7ad6:	f018 fb30 	bl	2013a <net_buf_ref>
    7ada:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
		return bt_hci_ecc_send(buf);
    7ade:	4630      	mov	r0, r6
    7ae0:	f7ff fa76 	bl	6fd0 <bt_hci_ecc_send>
	if (err) {
    7ae4:	4601      	mov	r1, r0
    7ae6:	b1f0      	cbz	r0, 7b26 <hci_tx_thread+0x11a>
		BT_ERR("Unable to send to driver (err %d)", err);
    7ae8:	01a2      	lsls	r2, r4, #6
    7aea:	4822      	ldr	r0, [pc, #136]	; (7b74 <hci_tx_thread+0x168>)
    7aec:	f042 0201 	orr.w	r2, r2, #1
    7af0:	f015 fde7 	bl	1d6c2 <log_1>
	z_impl_k_sem_give(sem);
    7af4:	4820      	ldr	r0, [pc, #128]	; (7b78 <hci_tx_thread+0x16c>)
    7af6:	f013 fe5b 	bl	1b7b0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    7afa:	4630      	mov	r0, r6
    7afc:	f011 ffe6 	bl	19acc <net_buf_id>
    7b00:	4b1e      	ldr	r3, [pc, #120]	; (7b7c <hci_tx_thread+0x170>)
    7b02:	220c      	movs	r2, #12
    7b04:	fb02 3000 	mla	r0, r2, r0, r3
    7b08:	211f      	movs	r1, #31
    7b0a:	8840      	ldrh	r0, [r0, #2]
    7b0c:	2200      	movs	r2, #0
    7b0e:	f7ff fee9 	bl	78e4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7b12:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7b16:	f012 f86f 	bl	19bf8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7b1a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7b1c:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    7b1e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    7b22:	f012 f869 	bl	19bf8 <net_buf_unref>
	for (; count; ev++, count--) {
    7b26:	f108 0814 	add.w	r8, r8, #20
    7b2a:	3f01      	subs	r7, #1
    7b2c:	e79b      	b.n	7a66 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7b2e:	2901      	cmp	r1, #1
    7b30:	d1f9      	bne.n	7b26 <hci_tx_thread+0x11a>
					conn = CONTAINER_OF(ev->fifo,
    7b32:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7b36:	3834      	subs	r0, #52	; 0x34
    7b38:	f002 fc26 	bl	a388 <bt_conn_process_tx>
    7b3c:	e7f3      	b.n	7b26 <hci_tx_thread+0x11a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7b3e:	01a2      	lsls	r2, r4, #6
    7b40:	480f      	ldr	r0, [pc, #60]	; (7b80 <hci_tx_thread+0x174>)
    7b42:	f042 0202 	orr.w	r2, r2, #2
    7b46:	f015 fdbc 	bl	1d6c2 <log_1>
    7b4a:	e7ec      	b.n	7b26 <hci_tx_thread+0x11a>
    7b4c:	000211d4 	.word	0x000211d4
    7b50:	00021114 	.word	0x00021114
    7b54:	20005b30 	.word	0x20005b30
    7b58:	20005b1c 	.word	0x20005b1c
    7b5c:	00023a38 	.word	0x00023a38
    7b60:	00023a41 	.word	0x00023a41
    7b64:	20005888 	.word	0x20005888
    7b68:	2000594c 	.word	0x2000594c
    7b6c:	00024d65 	.word	0x00024d65
    7b70:	00023a5e 	.word	0x00023a5e
    7b74:	00023a79 	.word	0x00023a79
    7b78:	20005930 	.word	0x20005930
    7b7c:	200002d0 	.word	0x200002d0
    7b80:	00023a9b 	.word	0x00023a9b
    7b84:	00023a04 	.word	0x00023a04

00007b88 <hci_num_completed_packets>:
{
    7b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b8c:	4b46      	ldr	r3, [pc, #280]	; (7ca8 <hci_num_completed_packets+0x120>)
    7b8e:	4d47      	ldr	r5, [pc, #284]	; (7cac <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7b90:	f8d0 8008 	ldr.w	r8, [r0, #8]
    7b94:	f8df a120 	ldr.w	sl, [pc, #288]	; 7cb8 <hci_num_completed_packets+0x130>
    7b98:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    7b9a:	2600      	movs	r6, #0
    7b9c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    7b9e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    7ba0:	f898 3000 	ldrb.w	r3, [r8]
    7ba4:	429e      	cmp	r6, r3
    7ba6:	db02      	blt.n	7bae <hci_num_completed_packets+0x26>
}
    7ba8:	b003      	add	sp, #12
    7baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7bae:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    7bb2:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7bb6:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    7bba:	f04f 0320 	mov.w	r3, #32
    7bbe:	f3ef 8b11 	mrs	fp, BASEPRI
    7bc2:	f383 8811 	msr	BASEPRI, r3
    7bc6:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    7bca:	4608      	mov	r0, r1
    7bcc:	9101      	str	r1, [sp, #4]
    7bce:	f002 fa93 	bl	a0f8 <bt_conn_lookup_handle>
		if (!conn) {
    7bd2:	9901      	ldr	r1, [sp, #4]
    7bd4:	4604      	mov	r4, r0
    7bd6:	b958      	cbnz	r0, 7bf0 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    7bd8:	f38b 8811 	msr	BASEPRI, fp
    7bdc:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    7be0:	01aa      	lsls	r2, r5, #6
    7be2:	4833      	ldr	r0, [pc, #204]	; (7cb0 <hci_num_completed_packets+0x128>)
    7be4:	f042 0201 	orr.w	r2, r2, #1
    7be8:	f015 fd6b 	bl	1d6c2 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7bec:	3601      	adds	r6, #1
    7bee:	e7d7      	b.n	7ba0 <hci_num_completed_packets+0x18>
    7bf0:	f38b 8811 	msr	BASEPRI, fp
    7bf4:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7bf8:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    7bfc:	b357      	cbz	r7, 7c54 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    7bfe:	f04f 0320 	mov.w	r3, #32
    7c02:	f3ef 8211 	mrs	r2, BASEPRI
    7c06:	f383 8811 	msr	BASEPRI, r3
    7c0a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7c0e:	69e3      	ldr	r3, [r4, #28]
    7c10:	b16b      	cbz	r3, 7c2e <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    7c12:	3b01      	subs	r3, #1
    7c14:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7c16:	f382 8811 	msr	BASEPRI, r2
    7c1a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    7c1e:	4620      	mov	r0, r4
    7c20:	f001 ff94 	bl	9b4c <bt_conn_get_pkts>
    7c24:	3f01      	subs	r7, #1
    7c26:	f013 fdc3 	bl	1b7b0 <z_impl_k_sem_give>
    7c2a:	b2bf      	uxth	r7, r7
    7c2c:	e7e6      	b.n	7bfc <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    7c2e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7c30:	b12b      	cbz	r3, 7c3e <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7c32:	69a1      	ldr	r1, [r4, #24]
    7c34:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7c36:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7c38:	428b      	cmp	r3, r1
	list->tail = node;
    7c3a:	bf08      	it	eq
    7c3c:	61a0      	streq	r0, [r4, #24]
    7c3e:	f382 8811 	msr	BASEPRI, r2
    7c42:	f3bf 8f6f 	isb	sy
			if (!node) {
    7c46:	b94b      	cbnz	r3, 7c5c <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    7c48:	01a9      	lsls	r1, r5, #6
    7c4a:	481a      	ldr	r0, [pc, #104]	; (7cb4 <hci_num_completed_packets+0x12c>)
    7c4c:	f041 0101 	orr.w	r1, r1, #1
    7c50:	f015 fd2a 	bl	1d6a8 <log_0>
		bt_conn_unref(conn);
    7c54:	4620      	mov	r0, r4
    7c56:	f016 ffc8 	bl	1ebea <bt_conn_unref>
    7c5a:	e7c7      	b.n	7bec <hci_num_completed_packets+0x64>
	__asm__ volatile(
    7c5c:	f04f 0220 	mov.w	r2, #32
    7c60:	f3ef 8111 	mrs	r1, BASEPRI
    7c64:	f382 8811 	msr	BASEPRI, r2
    7c68:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7c6c:	68da      	ldr	r2, [r3, #12]
    7c6e:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    7c70:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    7c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7c76:	f8c3 900c 	str.w	r9, [r3, #12]
    7c7a:	b98a      	cbnz	r2, 7ca0 <hci_num_completed_packets+0x118>
	list->head = node;
    7c7c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7c80:	f381 8811 	msr	BASEPRI, r1
    7c84:	f3bf 8f6f 	isb	sy
    7c88:	2101      	movs	r1, #1
    7c8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7c8e:	f016 fe0c 	bl	1e8aa <atomic_or>
    7c92:	07c3      	lsls	r3, r0, #31
    7c94:	d4c3      	bmi.n	7c1e <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    7c96:	4659      	mov	r1, fp
    7c98:	4650      	mov	r0, sl
    7c9a:	f018 fcc7 	bl	2062c <k_queue_append>
    7c9e:	e7be      	b.n	7c1e <hci_num_completed_packets+0x96>
	parent->next = child;
    7ca0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7ca2:	6263      	str	r3, [r4, #36]	; 0x24
}
    7ca4:	e7ec      	b.n	7c80 <hci_num_completed_packets+0xf8>
    7ca6:	bf00      	nop
    7ca8:	00021114 	.word	0x00021114
    7cac:	000211d4 	.word	0x000211d4
    7cb0:	00023abc 	.word	0x00023abc
    7cb4:	00023ad8 	.word	0x00023ad8
    7cb8:	20001c48 	.word	0x20001c48

00007cbc <hci_cmd_status>:
{
    7cbc:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cbe:	2104      	movs	r1, #4
{
    7cc0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cc2:	3008      	adds	r0, #8
    7cc4:	f018 fa64 	bl	20190 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7cc8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7cca:	7801      	ldrb	r1, [r0, #0]
    7ccc:	8840      	ldrh	r0, [r0, #2]
    7cce:	4622      	mov	r2, r4
    7cd0:	f7ff fe08 	bl	78e4 <hci_cmd_done>
	if (ncmd) {
    7cd4:	b125      	cbz	r5, 7ce0 <hci_cmd_status+0x24>
    7cd6:	4803      	ldr	r0, [pc, #12]	; (7ce4 <hci_cmd_status+0x28>)
}
    7cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7cdc:	f013 bd68 	b.w	1b7b0 <z_impl_k_sem_give>
    7ce0:	bd38      	pop	{r3, r4, r5, pc}
    7ce2:	bf00      	nop
    7ce4:	20005930 	.word	0x20005930

00007ce8 <hci_cmd_complete>:
{
    7ce8:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cea:	2103      	movs	r1, #3
{
    7cec:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7cee:	3008      	adds	r0, #8
    7cf0:	f018 fa4e 	bl	20190 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7cf4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7cf6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7cf8:	7819      	ldrb	r1, [r3, #0]
    7cfa:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7cfe:	4622      	mov	r2, r4
    7d00:	f7ff fdf0 	bl	78e4 <hci_cmd_done>
	if (ncmd) {
    7d04:	b125      	cbz	r5, 7d10 <hci_cmd_complete+0x28>
    7d06:	4803      	ldr	r0, [pc, #12]	; (7d14 <hci_cmd_complete+0x2c>)
}
    7d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7d0c:	f013 bd50 	b.w	1b7b0 <z_impl_k_sem_give>
    7d10:	bd38      	pop	{r3, r4, r5, pc}
    7d12:	bf00      	nop
    7d14:	20005930 	.word	0x20005930

00007d18 <bt_hci_cmd_create>:
{
    7d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d1c:	4605      	mov	r5, r0
    7d1e:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7d20:	4816      	ldr	r0, [pc, #88]	; (7d7c <bt_hci_cmd_create+0x64>)
	cmd(buf)->opcode = opcode;
    7d22:	f8df 805c 	ldr.w	r8, [pc, #92]	; 7d80 <bt_hci_cmd_create+0x68>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7d2a:	f018 f9d6 	bl	200da <net_buf_alloc_fixed>
    7d2e:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    7d30:	f100 0b08 	add.w	fp, r0, #8
    7d34:	2100      	movs	r1, #0
	*(u8_t *)net_buf_user_data(buf) = type;
    7d36:	2700      	movs	r7, #0
    7d38:	4658      	mov	r0, fp
    7d3a:	f018 f9ed 	bl	20118 <net_buf_simple_reserve>
    7d3e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    7d40:	4620      	mov	r0, r4
    7d42:	f011 fec3 	bl	19acc <net_buf_id>
    7d46:	f04f 0a0c 	mov.w	sl, #12
    7d4a:	fb0a 8000 	mla	r0, sl, r0, r8
    7d4e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    7d50:	4620      	mov	r0, r4
    7d52:	f011 febb 	bl	19acc <net_buf_id>
    7d56:	fb0a 8000 	mla	r0, sl, r0, r8
    7d5a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    7d5c:	4620      	mov	r0, r4
    7d5e:	f011 feb5 	bl	19acc <net_buf_id>
    7d62:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    7d66:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    7d68:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7d6a:	4658      	mov	r0, fp
    7d6c:	f018 f9e9 	bl	20142 <net_buf_simple_add>
	hdr->param_len = param_len;
    7d70:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7d72:	8005      	strh	r5, [r0, #0]
}
    7d74:	4620      	mov	r0, r4
    7d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d7a:	bf00      	nop
    7d7c:	200062c0 	.word	0x200062c0
    7d80:	200002d0 	.word	0x200002d0

00007d84 <bt_hci_cmd_send>:
{
    7d84:	b538      	push	{r3, r4, r5, lr}
    7d86:	4605      	mov	r5, r0
	if (!buf) {
    7d88:	460c      	mov	r4, r1
    7d8a:	b919      	cbnz	r1, 7d94 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    7d8c:	f7ff ffc4 	bl	7d18 <bt_hci_cmd_create>
		if (!buf) {
    7d90:	4604      	mov	r4, r0
    7d92:	b1f0      	cbz	r0, 7dd2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7d94:	f640 4335 	movw	r3, #3125	; 0xc35
    7d98:	429d      	cmp	r5, r3
    7d9a:	d114      	bne.n	7dc6 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    7d9c:	4620      	mov	r0, r4
    7d9e:	f7ff f917 	bl	6fd0 <bt_hci_ecc_send>
		if (err) {
    7da2:	4605      	mov	r5, r0
    7da4:	b168      	cbz	r0, 7dc2 <bt_hci_cmd_send+0x3e>
    7da6:	4b0c      	ldr	r3, [pc, #48]	; (7dd8 <bt_hci_cmd_send+0x54>)
    7da8:	4a0c      	ldr	r2, [pc, #48]	; (7ddc <bt_hci_cmd_send+0x58>)
    7daa:	1ad2      	subs	r2, r2, r3
    7dac:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    7dae:	0192      	lsls	r2, r2, #6
    7db0:	4601      	mov	r1, r0
    7db2:	f042 0201 	orr.w	r2, r2, #1
    7db6:	480a      	ldr	r0, [pc, #40]	; (7de0 <bt_hci_cmd_send+0x5c>)
    7db8:	f015 fc83 	bl	1d6c2 <log_1>
			net_buf_unref(buf);
    7dbc:	4620      	mov	r0, r4
    7dbe:	f011 ff1b 	bl	19bf8 <net_buf_unref>
}
    7dc2:	4628      	mov	r0, r5
    7dc4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7dc6:	4807      	ldr	r0, [pc, #28]	; (7de4 <bt_hci_cmd_send+0x60>)
    7dc8:	4621      	mov	r1, r4
    7dca:	f018 f9a9 	bl	20120 <net_buf_put>
	return 0;
    7dce:	2500      	movs	r5, #0
    7dd0:	e7f7      	b.n	7dc2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    7dd2:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7dd6:	e7f4      	b.n	7dc2 <bt_hci_cmd_send+0x3e>
    7dd8:	00021114 	.word	0x00021114
    7ddc:	000211d4 	.word	0x000211d4
    7de0:	00023a79 	.word	0x00023a79
    7de4:	2000594c 	.word	0x2000594c

00007de8 <le_ltk_request>:
{
    7de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    7dea:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7dec:	882e      	ldrh	r6, [r5, #0]
    7dee:	b2b7      	uxth	r7, r6
{
    7df0:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    7df2:	4638      	mov	r0, r7
    7df4:	f002 f980 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    7df8:	4604      	mov	r4, r0
    7dfa:	b960      	cbnz	r0, 7e16 <le_ltk_request+0x2e>
    7dfc:	4a26      	ldr	r2, [pc, #152]	; (7e98 <le_ltk_request+0xb0>)
    7dfe:	4b27      	ldr	r3, [pc, #156]	; (7e9c <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7e00:	4827      	ldr	r0, [pc, #156]	; (7ea0 <le_ltk_request+0xb8>)
    7e02:	1ad2      	subs	r2, r2, r3
    7e04:	08d2      	lsrs	r2, r2, #3
    7e06:	0192      	lsls	r2, r2, #6
    7e08:	f042 0201 	orr.w	r2, r2, #1
    7e0c:	4639      	mov	r1, r7
    7e0e:	f015 fc58 	bl	1d6c2 <log_1>
}
    7e12:	b007      	add	sp, #28
    7e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    7e16:	af02      	add	r7, sp, #8
    7e18:	f8d5 2002 	ldr.w	r2, [r5, #2]
    7e1c:	f8d5 3006 	ldr.w	r3, [r5, #6]
    7e20:	9701      	str	r7, [sp, #4]
    7e22:	8969      	ldrh	r1, [r5, #10]
    7e24:	9100      	str	r1, [sp, #0]
    7e26:	f018 f872 	bl	1ff0e <bt_smp_request_ltk>
    7e2a:	b320      	cbz	r0, 7e76 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7e2c:	2112      	movs	r1, #18
    7e2e:	f242 001a 	movw	r0, #8218	; 0x201a
    7e32:	f7ff ff71 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    7e36:	4605      	mov	r5, r0
    7e38:	b968      	cbnz	r0, 7e56 <le_ltk_request+0x6e>
    7e3a:	4917      	ldr	r1, [pc, #92]	; (7e98 <le_ltk_request+0xb0>)
    7e3c:	4b17      	ldr	r3, [pc, #92]	; (7e9c <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    7e3e:	4819      	ldr	r0, [pc, #100]	; (7ea4 <le_ltk_request+0xbc>)
    7e40:	1ac9      	subs	r1, r1, r3
    7e42:	08c9      	lsrs	r1, r1, #3
    7e44:	0189      	lsls	r1, r1, #6
    7e46:	f041 0101 	orr.w	r1, r1, #1
    7e4a:	f015 fc2d 	bl	1d6a8 <log_0>
	bt_conn_unref(conn);
    7e4e:	4620      	mov	r0, r4
    7e50:	f016 fecb 	bl	1ebea <bt_conn_unref>
    7e54:	e7dd      	b.n	7e12 <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    7e56:	2112      	movs	r1, #18
    7e58:	3008      	adds	r0, #8
    7e5a:	f018 f972 	bl	20142 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    7e5e:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    7e60:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    7e64:	2210      	movs	r2, #16
    7e66:	f016 fb3f 	bl	1e4e8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    7e6a:	4629      	mov	r1, r5
    7e6c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7e70:	f7ff ff88 	bl	7d84 <bt_hci_cmd_send>
    7e74:	e7eb      	b.n	7e4e <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    7e76:	2102      	movs	r1, #2
    7e78:	f242 001b 	movw	r0, #8219	; 0x201b
    7e7c:	f7ff ff4c 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    7e80:	4605      	mov	r5, r0
    7e82:	2800      	cmp	r0, #0
    7e84:	d0d9      	beq.n	7e3a <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    7e86:	2102      	movs	r1, #2
    7e88:	3008      	adds	r0, #8
    7e8a:	f018 f95a 	bl	20142 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7e8e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    7e90:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7e92:	f242 001b 	movw	r0, #8219	; 0x201b
    7e96:	e7eb      	b.n	7e70 <le_ltk_request+0x88>
    7e98:	000211d4 	.word	0x000211d4
    7e9c:	00021114 	.word	0x00021114
    7ea0:	000238c4 	.word	0x000238c4
    7ea4:	00023aef 	.word	0x00023aef

00007ea8 <le_conn_param_neg_reply>:
{
    7ea8:	b570      	push	{r4, r5, r6, lr}
    7eaa:	4606      	mov	r6, r0
    7eac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    7eae:	f242 0021 	movw	r0, #8225	; 0x2021
    7eb2:	2103      	movs	r1, #3
    7eb4:	f7ff ff30 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    7eb8:	4604      	mov	r4, r0
    7eba:	b958      	cbnz	r0, 7ed4 <le_conn_param_neg_reply+0x2c>
    7ebc:	490c      	ldr	r1, [pc, #48]	; (7ef0 <le_conn_param_neg_reply+0x48>)
    7ebe:	4b0d      	ldr	r3, [pc, #52]	; (7ef4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    7ec0:	480d      	ldr	r0, [pc, #52]	; (7ef8 <le_conn_param_neg_reply+0x50>)
    7ec2:	1ac9      	subs	r1, r1, r3
    7ec4:	08c9      	lsrs	r1, r1, #3
    7ec6:	0189      	lsls	r1, r1, #6
}
    7ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    7ecc:	f041 0101 	orr.w	r1, r1, #1
    7ed0:	f015 bbea 	b.w	1d6a8 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    7ed4:	2103      	movs	r1, #3
    7ed6:	3008      	adds	r0, #8
    7ed8:	f018 f933 	bl	20142 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    7edc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    7ede:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7ee0:	4621      	mov	r1, r4
    7ee2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    7ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7eea:	f7ff bf4b 	b.w	7d84 <bt_hci_cmd_send>
    7eee:	bf00      	nop
    7ef0:	000211d4 	.word	0x000211d4
    7ef4:	00021114 	.word	0x00021114
    7ef8:	00023b06 	.word	0x00023b06

00007efc <le_conn_param_req>:
{
    7efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    7efe:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    7f00:	78d9      	ldrb	r1, [r3, #3]
    7f02:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    7f04:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    7f06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7f0a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    7f0e:	7959      	ldrb	r1, [r3, #5]
    7f10:	791a      	ldrb	r2, [r3, #4]
    7f12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7f16:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    7f1a:	799a      	ldrb	r2, [r3, #6]
    7f1c:	79d9      	ldrb	r1, [r3, #7]
    7f1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7f22:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7f26:	7a1a      	ldrb	r2, [r3, #8]
    7f28:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    7f2a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7f2c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    7f30:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7f32:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    7f36:	f002 f8df 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    7f3a:	4606      	mov	r6, r0
    7f3c:	b980      	cbnz	r0, 7f60 <le_conn_param_req+0x64>
    7f3e:	4b20      	ldr	r3, [pc, #128]	; (7fc0 <le_conn_param_req+0xc4>)
    7f40:	4a20      	ldr	r2, [pc, #128]	; (7fc4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7f42:	4821      	ldr	r0, [pc, #132]	; (7fc8 <le_conn_param_req+0xcc>)
    7f44:	1ad2      	subs	r2, r2, r3
    7f46:	08d2      	lsrs	r2, r2, #3
    7f48:	0192      	lsls	r2, r2, #6
    7f4a:	4621      	mov	r1, r4
    7f4c:	f042 0201 	orr.w	r2, r2, #1
    7f50:	f015 fbb7 	bl	1d6c2 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    7f54:	2102      	movs	r1, #2
    7f56:	4620      	mov	r0, r4
    7f58:	f7ff ffa6 	bl	7ea8 <le_conn_param_neg_reply>
}
    7f5c:	b003      	add	sp, #12
    7f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    7f60:	4669      	mov	r1, sp
    7f62:	f001 fe2b 	bl	9bbc <le_param_req>
    7f66:	b938      	cbnz	r0, 7f78 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    7f68:	211e      	movs	r1, #30
    7f6a:	4620      	mov	r0, r4
    7f6c:	f7ff ff9c 	bl	7ea8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    7f70:	4630      	mov	r0, r6
    7f72:	f016 fe3a 	bl	1ebea <bt_conn_unref>
    7f76:	e7f1      	b.n	7f5c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    7f78:	210e      	movs	r1, #14
    7f7a:	f242 0020 	movw	r0, #8224	; 0x2020
    7f7e:	f7ff fecb 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    7f82:	4605      	mov	r5, r0
    7f84:	2800      	cmp	r0, #0
    7f86:	d0f3      	beq.n	7f70 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    7f88:	210e      	movs	r1, #14
    7f8a:	3008      	adds	r0, #8
    7f8c:	f018 f8d9 	bl	20142 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    7f90:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    7f92:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    7f94:	2100      	movs	r1, #0
    7f96:	f016 fad2 	bl	1e53e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    7f9a:	f8bd 3000 	ldrh.w	r3, [sp]
    7f9e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    7fa0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7fa4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    7fa6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7faa:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    7fac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    7fb0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    7fb2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    7fb4:	4629      	mov	r1, r5
    7fb6:	f242 0020 	movw	r0, #8224	; 0x2020
    7fba:	f7ff fee3 	bl	7d84 <bt_hci_cmd_send>
    7fbe:	e7d7      	b.n	7f70 <le_conn_param_req+0x74>
    7fc0:	00021114 	.word	0x00021114
    7fc4:	000211d4 	.word	0x000211d4
    7fc8:	000238c4 	.word	0x000238c4

00007fcc <bt_hci_cmd_send_sync>:
{
    7fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fce:	4615      	mov	r5, r2
    7fd0:	b087      	sub	sp, #28
	if (!buf) {
    7fd2:	460c      	mov	r4, r1
    7fd4:	b919      	cbnz	r1, 7fde <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    7fd6:	f7ff fe9f 	bl	7d18 <bt_hci_cmd_create>
		if (!buf) {
    7fda:	4604      	mov	r4, r0
    7fdc:	b3a8      	cbz	r0, 804a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7fde:	2201      	movs	r2, #1
    7fe0:	2100      	movs	r1, #0
    7fe2:	4668      	mov	r0, sp
    7fe4:	f018 fcb8 	bl	20958 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    7fe8:	4620      	mov	r0, r4
    7fea:	f011 fd6f 	bl	19acc <net_buf_id>
    7fee:	4f18      	ldr	r7, [pc, #96]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7ff0:	260c      	movs	r6, #12
    7ff2:	fb06 7000 	mla	r0, r6, r0, r7
    7ff6:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    7ffa:	4620      	mov	r0, r4
    7ffc:	f018 f89d 	bl	2013a <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8000:	4814      	ldr	r0, [pc, #80]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    8002:	4621      	mov	r1, r4
    8004:	f018 f88c 	bl	20120 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8008:	f242 7110 	movw	r1, #10000	; 0x2710
    800c:	4668      	mov	r0, sp
    800e:	f013 fbf5 	bl	1b7fc <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    8012:	4620      	mov	r0, r4
    8014:	f011 fd5a 	bl	19acc <net_buf_id>
    8018:	4370      	muls	r0, r6
    801a:	5c3a      	ldrb	r2, [r7, r0]
    801c:	b172      	cbz	r2, 803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
		switch (cmd(buf)->status) {
    801e:	4620      	mov	r0, r4
    8020:	f011 fd54 	bl	19acc <net_buf_id>
    8024:	4346      	muls	r6, r0
    8026:	5dbb      	ldrb	r3, [r7, r6]
    8028:	2b09      	cmp	r3, #9
			err = -EIO;
    802a:	bf0c      	ite	eq
    802c:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    8030:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    8034:	4620      	mov	r0, r4
    8036:	f011 fddf 	bl	19bf8 <net_buf_unref>
    803a:	e003      	b.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
		if (rsp) {
    803c:	2d00      	cmp	r5, #0
    803e:	d0f9      	beq.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
			*rsp = buf;
    8040:	602c      	str	r4, [r5, #0]
		err = 0;
    8042:	4615      	mov	r5, r2
}
    8044:	4628      	mov	r0, r5
    8046:	b007      	add	sp, #28
    8048:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOBUFS;
    804a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    804e:	e7f9      	b.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    8050:	200002d0 	.word	0x200002d0
    8054:	2000594c 	.word	0x2000594c

00008058 <set_random_address>:
{
    8058:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    805a:	4e14      	ldr	r6, [pc, #80]	; (80ac <set_random_address+0x54>)
    805c:	2206      	movs	r2, #6
    805e:	f106 010a 	add.w	r1, r6, #10
    8062:	4605      	mov	r5, r0
    8064:	f016 fa30 	bl	1e4c8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8068:	4604      	mov	r4, r0
    806a:	b1d0      	cbz	r0, 80a2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    806c:	2106      	movs	r1, #6
    806e:	f242 0005 	movw	r0, #8197	; 0x2005
    8072:	f7ff fe51 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    8076:	4604      	mov	r4, r0
    8078:	b1a8      	cbz	r0, 80a6 <set_random_address+0x4e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    807a:	2206      	movs	r2, #6
    807c:	4629      	mov	r1, r5
    807e:	3008      	adds	r0, #8
    8080:	f018 f865 	bl	2014e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8084:	4621      	mov	r1, r4
    8086:	2200      	movs	r2, #0
    8088:	f242 0005 	movw	r0, #8197	; 0x2005
    808c:	f7ff ff9e 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    8090:	4604      	mov	r4, r0
    8092:	b930      	cbnz	r0, 80a2 <set_random_address+0x4a>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    8094:	4629      	mov	r1, r5
    8096:	f106 000a 	add.w	r0, r6, #10
    809a:	f016 fc00 	bl	1e89e <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    809e:	2301      	movs	r3, #1
    80a0:	7273      	strb	r3, [r6, #9]
}
    80a2:	4620      	mov	r0, r4
    80a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    80a6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    80aa:	e7fa      	b.n	80a2 <set_random_address+0x4a>
    80ac:	20005888 	.word	0x20005888

000080b0 <le_set_private_addr>:
{
    80b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    80b2:	4d12      	ldr	r5, [pc, #72]	; (80fc <le_set_private_addr+0x4c>)
    80b4:	4603      	mov	r3, r0
    80b6:	f105 0070 	add.w	r0, r5, #112	; 0x70
    80ba:	f016 fbea 	bl	1e892 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    80be:	03c2      	lsls	r2, r0, #15
    80c0:	d41a      	bmi.n	80f8 <le_set_private_addr+0x48>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    80c2:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    80c6:	4669      	mov	r1, sp
    80c8:	30d8      	adds	r0, #216	; 0xd8
    80ca:	f016 fb13 	bl	1e6f4 <bt_rpa_create>
	if (!err) {
    80ce:	4604      	mov	r4, r0
    80d0:	b950      	cbnz	r0, 80e8 <le_set_private_addr+0x38>
		err = set_random_address(&rpa);
    80d2:	4668      	mov	r0, sp
    80d4:	f7ff ffc0 	bl	8058 <set_random_address>
		if (!err) {
    80d8:	4604      	mov	r4, r0
    80da:	b928      	cbnz	r0, 80e8 <le_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    80dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    80e0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    80e4:	f016 fbe1 	bl	1e8aa <atomic_or>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    80e8:	4a05      	ldr	r2, [pc, #20]	; (8100 <le_set_private_addr+0x50>)
    80ea:	4906      	ldr	r1, [pc, #24]	; (8104 <le_set_private_addr+0x54>)
    80ec:	4806      	ldr	r0, [pc, #24]	; (8108 <le_set_private_addr+0x58>)
    80ee:	f013 fca5 	bl	1ba3c <k_delayed_work_submit_to_queue>
}
    80f2:	4620      	mov	r0, r4
    80f4:	b003      	add	sp, #12
    80f6:	bd30      	pop	{r4, r5, pc}
		return 0;
    80f8:	2400      	movs	r4, #0
    80fa:	e7fa      	b.n	80f2 <le_set_private_addr+0x42>
    80fc:	20005888 	.word	0x20005888
    8100:	000dbba0 	.word	0x000dbba0
    8104:	20005970 	.word	0x20005970
    8108:	20001c48 	.word	0x20001c48

0000810c <set_advertise_enable>:
{
    810c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    810e:	2101      	movs	r1, #1
{
    8110:	b085      	sub	sp, #20
    8112:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    8114:	f242 000a 	movw	r0, #8202	; 0x200a
    8118:	f7ff fdfe 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    811c:	4604      	mov	r4, r0
    811e:	b1e8      	cbz	r0, 815c <set_advertise_enable+0x50>
	if (enable) {
    8120:	3008      	adds	r0, #8
    8122:	b1cd      	cbz	r5, 8158 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    8124:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8126:	f018 f81b 	bl	20160 <net_buf_simple_add_u8>
	state->target = target;
    812a:	4b0e      	ldr	r3, [pc, #56]	; (8164 <set_advertise_enable+0x58>)
    812c:	9301      	str	r3, [sp, #4]
	cmd(buf)->state = &state;
    812e:	4620      	mov	r0, r4
	state->bit = bit;
    8130:	2305      	movs	r3, #5
    8132:	9302      	str	r3, [sp, #8]
	state->val = val;
    8134:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    8138:	f011 fcc8 	bl	19acc <net_buf_id>
    813c:	4b0a      	ldr	r3, [pc, #40]	; (8168 <set_advertise_enable+0x5c>)
    813e:	220c      	movs	r2, #12
    8140:	fb02 3000 	mla	r0, r2, r0, r3
    8144:	ab01      	add	r3, sp, #4
    8146:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    8148:	2200      	movs	r2, #0
    814a:	4621      	mov	r1, r4
    814c:	f242 000a 	movw	r0, #8202	; 0x200a
    8150:	f7ff ff3c 	bl	7fcc <bt_hci_cmd_send_sync>
}
    8154:	b005      	add	sp, #20
    8156:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8158:	4629      	mov	r1, r5
    815a:	e7e4      	b.n	8126 <set_advertise_enable+0x1a>
		return -ENOBUFS;
    815c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8160:	e7f8      	b.n	8154 <set_advertise_enable+0x48>
    8162:	bf00      	nop
    8164:	200058f8 	.word	0x200058f8
    8168:	200002d0 	.word	0x200002d0

0000816c <rpa_timeout>:
{
    816c:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    816e:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
    8172:	4821      	ldr	r0, [pc, #132]	; (81f8 <rpa_timeout+0x8c>)
    8174:	f016 fb7e 	bl	1e874 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8178:	481f      	ldr	r0, [pc, #124]	; (81f8 <rpa_timeout+0x8c>)
    817a:	f016 fb8a 	bl	1e892 <atomic_get>
	if (!((atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING) &&
    817e:	0685      	lsls	r5, r0, #26
    8180:	d40f      	bmi.n	81a2 <rpa_timeout+0x36>
    8182:	481d      	ldr	r0, [pc, #116]	; (81f8 <rpa_timeout+0x8c>)
    8184:	f016 fb85 	bl	1e892 <atomic_get>
	       !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY)) ||
    8188:	0404      	lsls	r4, r0, #16
    818a:	d40f      	bmi.n	81ac <rpa_timeout+0x40>
    818c:	481a      	ldr	r0, [pc, #104]	; (81f8 <rpa_timeout+0x8c>)
    818e:	f016 fb80 	bl	1e892 <atomic_get>
	if (!((atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING) &&
    8192:	0542      	lsls	r2, r0, #21
    8194:	d504      	bpl.n	81a0 <rpa_timeout+0x34>
    8196:	4818      	ldr	r0, [pc, #96]	; (81f8 <rpa_timeout+0x8c>)
    8198:	f016 fb7b 	bl	1e892 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    819c:	04c3      	lsls	r3, r0, #19
    819e:	d405      	bmi.n	81ac <rpa_timeout+0x40>
}
    81a0:	bd38      	pop	{r3, r4, r5, pc}
    81a2:	4815      	ldr	r0, [pc, #84]	; (81f8 <rpa_timeout+0x8c>)
    81a4:	f016 fb75 	bl	1e892 <atomic_get>
	if (!((atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING) &&
    81a8:	05c0      	lsls	r0, r0, #23
    81aa:	d4ea      	bmi.n	8182 <rpa_timeout+0x16>
    81ac:	4d13      	ldr	r5, [pc, #76]	; (81fc <rpa_timeout+0x90>)
    81ae:	f105 0070 	add.w	r0, r5, #112	; 0x70
    81b2:	f016 fb6e 	bl	1e892 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    81b6:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    81b8:	f3c0 1440 	ubfx	r4, r0, #5, #1
    81bc:	d410      	bmi.n	81e0 <rpa_timeout+0x74>
	err = le_set_private_addr(adv_enabled ? bt_dev.adv_id : BT_ID_DEFAULT);
    81be:	4620      	mov	r0, r4
    81c0:	f7ff ff76 	bl	80b0 <le_set_private_addr>
	if (err) {
    81c4:	4601      	mov	r1, r0
    81c6:	b180      	cbz	r0, 81ea <rpa_timeout+0x7e>
    81c8:	4b0d      	ldr	r3, [pc, #52]	; (8200 <rpa_timeout+0x94>)
    81ca:	4a0e      	ldr	r2, [pc, #56]	; (8204 <rpa_timeout+0x98>)
		BT_WARN("Failed to update RPA address (%d)", err);
    81cc:	480e      	ldr	r0, [pc, #56]	; (8208 <rpa_timeout+0x9c>)
    81ce:	1ad2      	subs	r2, r2, r3
    81d0:	08d2      	lsrs	r2, r2, #3
    81d2:	0192      	lsls	r2, r2, #6
}
    81d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    81d8:	f042 0202 	orr.w	r2, r2, #2
    81dc:	f015 ba71 	b.w	1d6c2 <log_1>
		set_advertise_enable(false);
    81e0:	2000      	movs	r0, #0
    81e2:	f7ff ff93 	bl	810c <set_advertise_enable>
	err = le_set_private_addr(adv_enabled ? bt_dev.adv_id : BT_ID_DEFAULT);
    81e6:	7a28      	ldrb	r0, [r5, #8]
    81e8:	e7ea      	b.n	81c0 <rpa_timeout+0x54>
	if (adv_enabled) {
    81ea:	2c00      	cmp	r4, #0
    81ec:	d0d8      	beq.n	81a0 <rpa_timeout+0x34>
}
    81ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_advertise_enable(true);
    81f2:	2001      	movs	r0, #1
    81f4:	f7ff bf8a 	b.w	810c <set_advertise_enable>
    81f8:	200058f8 	.word	0x200058f8
    81fc:	20005888 	.word	0x20005888
    8200:	00021114 	.word	0x00021114
    8204:	000211d4 	.word	0x000211d4
    8208:	00023b20 	.word	0x00023b20

0000820c <hci_id_add>:
{
    820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    820e:	4607      	mov	r7, r0
    8210:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    8212:	f242 0027 	movw	r0, #8231	; 0x2027
    8216:	2127      	movs	r1, #39	; 0x27
    8218:	f7ff fd7e 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    821c:	4604      	mov	r4, r0
    821e:	b1d0      	cbz	r0, 8256 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    8220:	2127      	movs	r1, #39	; 0x27
    8222:	3008      	adds	r0, #8
    8224:	f017 ff8d 	bl	20142 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    8228:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    822a:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    822c:	f016 fb3a 	bl	1e8a4 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    8230:	4631      	mov	r1, r6
    8232:	2210      	movs	r2, #16
    8234:	1de8      	adds	r0, r5, #7
    8236:	f016 f957 	bl	1e4e8 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk, 16);
    823a:	4908      	ldr	r1, [pc, #32]	; (825c <hci_id_add+0x50>)
    823c:	2210      	movs	r2, #16
    823e:	f105 0017 	add.w	r0, r5, #23
    8242:	f016 f951 	bl	1e4e8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    8246:	4621      	mov	r1, r4
    8248:	2200      	movs	r2, #0
}
    824a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    824e:	f242 0027 	movw	r0, #8231	; 0x2027
    8252:	f7ff bebb 	b.w	7fcc <bt_hci_cmd_send_sync>
}
    8256:	f06f 0036 	mvn.w	r0, #54	; 0x36
    825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    825c:	20005960 	.word	0x20005960

00008260 <set_ad>:
{
    8260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8264:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8266:	2120      	movs	r1, #32
{
    8268:	4682      	mov	sl, r0
    826a:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    826c:	f7ff fd54 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    8270:	4606      	mov	r6, r0
    8272:	2800      	cmp	r0, #0
    8274:	d05e      	beq.n	8334 <set_ad+0xd4>
	set_data = net_buf_add(buf, sizeof(*set_data));
    8276:	2120      	movs	r1, #32
    8278:	3008      	adds	r0, #8
    827a:	f017 ff62 	bl	20142 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    827e:	2220      	movs	r2, #32
    8280:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    8282:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    8284:	f016 f95b 	bl	1e53e <memset>
	for (c = 0; c < ad_len; c++) {
    8288:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    828c:	42bc      	cmp	r4, r7
    828e:	d106      	bne.n	829e <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8290:	4631      	mov	r1, r6
    8292:	4650      	mov	r0, sl
    8294:	2200      	movs	r2, #0
}
    8296:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    829a:	f7ff be97 	b.w	7fcc <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    829e:	f8d4 8000 	ldr.w	r8, [r4]
    82a2:	f04f 0b00 	mov.w	fp, #0
    82a6:	6863      	ldr	r3, [r4, #4]
    82a8:	455b      	cmp	r3, fp
    82aa:	d801      	bhi.n	82b0 <set_ad+0x50>
	for (c = 0; c < ad_len; c++) {
    82ac:	3408      	adds	r4, #8
    82ae:	e7ed      	b.n	828c <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    82b0:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    82b2:	f898 2001 	ldrb.w	r2, [r8, #1]
			u8_t type = data[i].type;
    82b6:	f898 1000 	ldrb.w	r1, [r8]
			if (set_data->len + len + 2 > 31) {
    82ba:	1c98      	adds	r0, r3, #2
    82bc:	eb02 0c00 	add.w	ip, r2, r0
    82c0:	f1bc 0f1f 	cmp.w	ip, #31
    82c4:	dd16      	ble.n	82f4 <set_ad+0x94>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    82c6:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    82c8:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    82cc:	d100      	bne.n	82d0 <set_ad+0x70>
    82ce:	b982      	cbnz	r2, 82f2 <set_ad+0x92>
					net_buf_unref(buf);
    82d0:	4630      	mov	r0, r6
    82d2:	f011 fc91 	bl	19bf8 <net_buf_unref>
    82d6:	4b19      	ldr	r3, [pc, #100]	; (833c <set_ad+0xdc>)
    82d8:	4919      	ldr	r1, [pc, #100]	; (8340 <set_ad+0xe0>)
					BT_ERR("Too big advertising data");
    82da:	481a      	ldr	r0, [pc, #104]	; (8344 <set_ad+0xe4>)
    82dc:	1ac9      	subs	r1, r1, r3
    82de:	08c9      	lsrs	r1, r1, #3
    82e0:	0189      	lsls	r1, r1, #6
    82e2:	f041 0101 	orr.w	r1, r1, #1
    82e6:	f015 f9df 	bl	1d6a8 <log_0>
					return -EINVAL;
    82ea:	f06f 0015 	mvn.w	r0, #21
}
    82ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    82f2:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    82f4:	fa4f f982 	sxtb.w	r9, r2
    82f8:	eb05 0c03 	add.w	ip, r5, r3
    82fc:	f109 0e01 	add.w	lr, r9, #1
    8300:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    8304:	f103 0c02 	add.w	ip, r3, #2
			set_data->data[set_data->len++] = len + 1;
    8308:	3301      	adds	r3, #1
			set_data->data[set_data->len++] = type;
    830a:	fa55 f383 	uxtab	r3, r5, r3
			memcpy(&set_data->data[set_data->len], data[i].data,
    830e:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = type;
    8310:	f885 c000 	strb.w	ip, [r5]
			memcpy(&set_data->data[set_data->len], data[i].data,
    8314:	3001      	adds	r0, #1
			set_data->data[set_data->len++] = type;
    8316:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    8318:	f8d8 1004 	ldr.w	r1, [r8, #4]
    831c:	4428      	add	r0, r5
    831e:	f016 f8e3 	bl	1e4e8 <memcpy>
			set_data->len += len;
    8322:	782b      	ldrb	r3, [r5, #0]
    8324:	4499      	add	r9, r3
    8326:	f885 9000 	strb.w	r9, [r5]
		for (i = 0; i < ad[c].len; i++) {
    832a:	f10b 0b01 	add.w	fp, fp, #1
    832e:	f108 0808 	add.w	r8, r8, #8
    8332:	e7b8      	b.n	82a6 <set_ad+0x46>
		return -ENOBUFS;
    8334:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8338:	e7d9      	b.n	82ee <set_ad+0x8e>
    833a:	bf00      	nop
    833c:	00021114 	.word	0x00021114
    8340:	000211d4 	.word	0x000211d4
    8344:	00023b42 	.word	0x00023b42

00008348 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    8348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    834c:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    834e:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    8352:	4615      	mov	r5, r2
    8354:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    8356:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    8358:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    835a:	a902      	add	r1, sp, #8
    835c:	f242 0008 	movw	r0, #8200	; 0x2008
	struct bt_ad d[2] = {};
    8360:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
    8364:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    8368:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    836c:	f7ff ff78 	bl	8260 <set_ad>
	if (err) {
    8370:	4604      	mov	r4, r0
    8372:	bb10      	cbnz	r0, 83ba <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    8374:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    8378:	f1b8 0f00 	cmp.w	r8, #0
    837c:	d011      	beq.n	83a2 <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    837e:	b115      	cbz	r5, 8386 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    8380:	4603      	mov	r3, r0
    8382:	42b3      	cmp	r3, r6
    8384:	d11d      	bne.n	83c2 <le_adv_update+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    8386:	4d14      	ldr	r5, [pc, #80]	; (83d8 <le_adv_update+0x90>)
    8388:	4628      	mov	r0, r5
    838a:	f016 f87b 	bl	1e484 <strlen>
    838e:	2309      	movs	r3, #9
    8390:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    8394:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    8396:	f88d 0001 	strb.w	r0, [sp, #1]
    839a:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    839c:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    83a0:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    83a2:	9b02      	ldr	r3, [sp, #8]
    83a4:	b913      	cbnz	r3, 83ac <le_adv_update+0x64>
    83a6:	9b04      	ldr	r3, [sp, #16]
    83a8:	b903      	cbnz	r3, 83ac <le_adv_update+0x64>
    83aa:	b137      	cbz	r7, 83ba <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    83ac:	2202      	movs	r2, #2
    83ae:	a902      	add	r1, sp, #8
    83b0:	f242 0009 	movw	r0, #8201	; 0x2009
    83b4:	f7ff ff54 	bl	8260 <set_ad>
    83b8:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    83ba:	4620      	mov	r0, r4
    83bc:	b006      	add	sp, #24
    83be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    83c2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    83c6:	3a08      	subs	r2, #8
    83c8:	2a01      	cmp	r2, #1
    83ca:	d901      	bls.n	83d0 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    83cc:	3301      	adds	r3, #1
    83ce:	e7d8      	b.n	8382 <le_adv_update+0x3a>
				return -EINVAL;
    83d0:	f06f 0415 	mvn.w	r4, #21
    83d4:	e7f1      	b.n	83ba <le_adv_update+0x72>
    83d6:	bf00      	nop
    83d8:	20005990 	.word	0x20005990

000083dc <conn_auto_initiate>:
{
    83dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    83e0:	7b43      	ldrb	r3, [r0, #13]
    83e2:	2b06      	cmp	r3, #6
{
    83e4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    83e6:	d11e      	bne.n	8426 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    83e8:	1d05      	adds	r5, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    83ea:	4628      	mov	r0, r5
    83ec:	f016 fa51 	bl	1e892 <atomic_get>
    83f0:	0486      	lsls	r6, r0, #18
    83f2:	d41b      	bmi.n	842c <conn_auto_initiate+0x50>
    83f4:	78e3      	ldrb	r3, [r4, #3]
    83f6:	b123      	cbz	r3, 8402 <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    83f8:	4b4d      	ldr	r3, [pc, #308]	; (8530 <conn_auto_initiate+0x154>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    83fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    83fe:	0718      	lsls	r0, r3, #28
    8400:	d514      	bpl.n	842c <conn_auto_initiate+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8402:	2102      	movs	r1, #2
    8404:	f242 0016 	movw	r0, #8214	; 0x2016
    8408:	f7ff fc86 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    840c:	4606      	mov	r6, r0
    840e:	b168      	cbz	r0, 842c <conn_auto_initiate+0x50>
	cp = net_buf_add(buf, sizeof(*cp));
    8410:	2102      	movs	r1, #2
    8412:	3008      	adds	r0, #8
    8414:	f017 fe95 	bl	20142 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8418:	8823      	ldrh	r3, [r4, #0]
    841a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    841c:	4631      	mov	r1, r6
    841e:	f242 0016 	movw	r0, #8214	; 0x2016
    8422:	f7ff fcaf 	bl	7d84 <bt_hci_cmd_send>
}
    8426:	b002      	add	sp, #8
    8428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    842c:	4628      	mov	r0, r5
    842e:	f016 fa30 	bl	1e892 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8432:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    8436:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8530 <conn_auto_initiate+0x154>
    843a:	f3c0 3700 	ubfx	r7, r0, #12, #1
    843e:	d120      	bne.n	8482 <conn_auto_initiate+0xa6>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    8440:	f898 3079 	ldrb.w	r3, [r8, #121]	; 0x79
    8444:	07d9      	lsls	r1, r3, #31
    8446:	d51c      	bpl.n	8482 <conn_auto_initiate+0xa6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    8448:	2107      	movs	r1, #7
    844a:	f242 0032 	movw	r0, #8242	; 0x2032
    844e:	f7ff fc63 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    8452:	4606      	mov	r6, r0
    8454:	b1a8      	cbz	r0, 8482 <conn_auto_initiate+0xa6>
	cp = net_buf_add(buf, sizeof(*cp));
    8456:	2107      	movs	r1, #7
    8458:	3008      	adds	r0, #8
    845a:	f017 fe72 	bl	20142 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    845e:	8823      	ldrh	r3, [r4, #0]
    8460:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8462:	2302      	movs	r3, #2
	cp->all_phys = 0U;
    8464:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8466:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    8468:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    846a:	7147      	strb	r7, [r0, #5]
    846c:	7187      	strb	r7, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    846e:	4631      	mov	r1, r6
    8470:	f242 0032 	movw	r0, #8242	; 0x2032
    8474:	f7ff fc86 	bl	7d84 <bt_hci_cmd_send>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8478:	2180      	movs	r1, #128	; 0x80
    847a:	4628      	mov	r0, r5
    847c:	f016 fa15 	bl	1e8aa <atomic_or>
			return;
    8480:	e7d1      	b.n	8426 <conn_auto_initiate+0x4a>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    8482:	f898 3078 	ldrb.w	r3, [r8, #120]	; 0x78
    8486:	069a      	lsls	r2, r3, #26
    8488:	d510      	bpl.n	84ac <conn_auto_initiate+0xd0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    848a:	aa01      	add	r2, sp, #4
    848c:	2100      	movs	r1, #0
    848e:	f242 002f 	movw	r0, #8239	; 0x202f
    8492:	f7ff fd9b 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    8496:	b1c8      	cbz	r0, 84cc <conn_auto_initiate+0xf0>
    8498:	4926      	ldr	r1, [pc, #152]	; (8534 <conn_auto_initiate+0x158>)
    849a:	4b27      	ldr	r3, [pc, #156]	; (8538 <conn_auto_initiate+0x15c>)
		BT_ERR("Failed to read DLE max data len");
    849c:	4827      	ldr	r0, [pc, #156]	; (853c <conn_auto_initiate+0x160>)
    849e:	1ac9      	subs	r1, r1, r3
    84a0:	08c9      	lsrs	r1, r1, #3
    84a2:	0189      	lsls	r1, r1, #6
    84a4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to send LE Set Data Length Command");
    84a8:	f015 f8fe 	bl	1d6a8 <log_0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    84ac:	78e3      	ldrb	r3, [r4, #3]
    84ae:	2b01      	cmp	r3, #1
    84b0:	d1b9      	bne.n	8426 <conn_auto_initiate+0x4a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    84b2:	4628      	mov	r0, r5
    84b4:	f016 f9ed 	bl	1e892 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    84b8:	05c3      	lsls	r3, r0, #23
    84ba:	d4b4      	bmi.n	8426 <conn_auto_initiate+0x4a>
    84bc:	f241 3288 	movw	r2, #5000	; 0x1388
    84c0:	f104 0150 	add.w	r1, r4, #80	; 0x50
    84c4:	481e      	ldr	r0, [pc, #120]	; (8540 <conn_auto_initiate+0x164>)
    84c6:	f013 fab9 	bl	1ba3c <k_delayed_work_submit_to_queue>
    84ca:	e7ac      	b.n	8426 <conn_auto_initiate+0x4a>
	rp = (void *)rsp->data;
    84cc:	9801      	ldr	r0, [sp, #4]
    84ce:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    84d0:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    84d4:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	net_buf_unref(rsp);
    84d8:	f011 fb8e 	bl	19bf8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    84dc:	2106      	movs	r1, #6
    84de:	f242 0022 	movw	r0, #8226	; 0x2022
    84e2:	f7ff fc19 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    84e6:	4606      	mov	r6, r0
    84e8:	b940      	cbnz	r0, 84fc <conn_auto_initiate+0x120>
    84ea:	4912      	ldr	r1, [pc, #72]	; (8534 <conn_auto_initiate+0x158>)
    84ec:	4b12      	ldr	r3, [pc, #72]	; (8538 <conn_auto_initiate+0x15c>)
		BT_ERR("Failed to create LE Set Data Length Command");
    84ee:	4815      	ldr	r0, [pc, #84]	; (8544 <conn_auto_initiate+0x168>)
    84f0:	1ac9      	subs	r1, r1, r3
    84f2:	08c9      	lsrs	r1, r1, #3
    84f4:	0189      	lsls	r1, r1, #6
    84f6:	f041 0101 	orr.w	r1, r1, #1
    84fa:	e7d5      	b.n	84a8 <conn_auto_initiate+0xcc>
	cp = net_buf_add(buf, sizeof(*cp));
    84fc:	2106      	movs	r1, #6
    84fe:	3008      	adds	r0, #8
    8500:	f017 fe1f 	bl	20142 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8504:	8823      	ldrh	r3, [r4, #0]
    8506:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    8508:	f8a0 8002 	strh.w	r8, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    850c:	8087      	strh	r7, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    850e:	4631      	mov	r1, r6
    8510:	f242 0022 	movw	r0, #8226	; 0x2022
    8514:	f7ff fc36 	bl	7d84 <bt_hci_cmd_send>
	if (err) {
    8518:	2800      	cmp	r0, #0
    851a:	d0c7      	beq.n	84ac <conn_auto_initiate+0xd0>
    851c:	4905      	ldr	r1, [pc, #20]	; (8534 <conn_auto_initiate+0x158>)
    851e:	4b06      	ldr	r3, [pc, #24]	; (8538 <conn_auto_initiate+0x15c>)
		BT_ERR("Failed to send LE Set Data Length Command");
    8520:	4809      	ldr	r0, [pc, #36]	; (8548 <conn_auto_initiate+0x16c>)
    8522:	1ac9      	subs	r1, r1, r3
    8524:	08c9      	lsrs	r1, r1, #3
    8526:	0189      	lsls	r1, r1, #6
    8528:	f041 0101 	orr.w	r1, r1, #1
    852c:	e7bc      	b.n	84a8 <conn_auto_initiate+0xcc>
    852e:	bf00      	nop
    8530:	20005888 	.word	0x20005888
    8534:	000211d4 	.word	0x000211d4
    8538:	00021114 	.word	0x00021114
    853c:	00023b5b 	.word	0x00023b5b
    8540:	20001c48 	.word	0x20001c48
    8544:	00023b7b 	.word	0x00023b7b
    8548:	00023ba7 	.word	0x00023ba7

0000854c <le_phy_update_complete>:
{
    854c:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    854e:	6883      	ldr	r3, [r0, #8]
    8550:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8554:	4628      	mov	r0, r5
    8556:	f001 fdcf 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    855a:	4604      	mov	r4, r0
    855c:	b960      	cbnz	r0, 8578 <le_phy_update_complete+0x2c>
    855e:	4b11      	ldr	r3, [pc, #68]	; (85a4 <le_phy_update_complete+0x58>)
    8560:	4a11      	ldr	r2, [pc, #68]	; (85a8 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8562:	4812      	ldr	r0, [pc, #72]	; (85ac <le_phy_update_complete+0x60>)
    8564:	1ad2      	subs	r2, r2, r3
    8566:	08d2      	lsrs	r2, r2, #3
    8568:	0192      	lsls	r2, r2, #6
    856a:	4629      	mov	r1, r5
    856c:	f042 0201 	orr.w	r2, r2, #1
}
    8570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8574:	f015 b8a5 	b.w	1d6c2 <log_1>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    8578:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    857a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    857e:	4628      	mov	r0, r5
    8580:	f016 f978 	bl	1e874 <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    8584:	0603      	lsls	r3, r0, #24
    8586:	d507      	bpl.n	8598 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    858c:	4628      	mov	r0, r5
    858e:	f016 f98c 	bl	1e8aa <atomic_or>
	conn_auto_initiate(conn);
    8592:	4620      	mov	r0, r4
    8594:	f7ff ff22 	bl	83dc <conn_auto_initiate>
	bt_conn_unref(conn);
    8598:	4620      	mov	r0, r4
}
    859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    859e:	f016 bb24 	b.w	1ebea <bt_conn_unref>
    85a2:	bf00      	nop
    85a4:	00021114 	.word	0x00021114
    85a8:	000211d4 	.word	0x000211d4
    85ac:	000238c4 	.word	0x000238c4

000085b0 <le_remote_feat_complete>:
{
    85b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    85b2:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    85b4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    85b8:	4630      	mov	r0, r6
    85ba:	f001 fd9d 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    85be:	4604      	mov	r4, r0
    85c0:	b960      	cbnz	r0, 85dc <le_remote_feat_complete+0x2c>
    85c2:	4a10      	ldr	r2, [pc, #64]	; (8604 <le_remote_feat_complete+0x54>)
    85c4:	4b10      	ldr	r3, [pc, #64]	; (8608 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    85c6:	4811      	ldr	r0, [pc, #68]	; (860c <le_remote_feat_complete+0x5c>)
    85c8:	1ad2      	subs	r2, r2, r3
    85ca:	08d2      	lsrs	r2, r2, #3
    85cc:	0192      	lsls	r2, r2, #6
    85ce:	4631      	mov	r1, r6
    85d0:	f042 0201 	orr.w	r2, r2, #1
}
    85d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    85d8:	f015 b873 	b.w	1d6c2 <log_1>
	if (!evt->status) {
    85dc:	782b      	ldrb	r3, [r5, #0]
    85de:	b923      	cbnz	r3, 85ea <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    85e0:	2208      	movs	r2, #8
    85e2:	1ce9      	adds	r1, r5, #3
    85e4:	3094      	adds	r0, #148	; 0x94
    85e6:	f015 ff7f 	bl	1e4e8 <memcpy>
    85ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    85ee:	1d20      	adds	r0, r4, #4
    85f0:	f016 f95b 	bl	1e8aa <atomic_or>
	conn_auto_initiate(conn);
    85f4:	4620      	mov	r0, r4
    85f6:	f7ff fef1 	bl	83dc <conn_auto_initiate>
	bt_conn_unref(conn);
    85fa:	4620      	mov	r0, r4
}
    85fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8600:	f016 baf3 	b.w	1ebea <bt_conn_unref>
    8604:	000211d4 	.word	0x000211d4
    8608:	00021114 	.word	0x00021114
    860c:	000238c4 	.word	0x000238c4

00008610 <bt_unpair>:
{
    8610:	b530      	push	{r4, r5, lr}
    8612:	b085      	sub	sp, #20
    8614:	460d      	mov	r5, r1
    8616:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    861a:	b9d0      	cbnz	r0, 8652 <bt_unpair+0x42>
	if (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    861c:	b949      	cbnz	r1, 8632 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    861e:	490e      	ldr	r1, [pc, #56]	; (8658 <bt_unpair+0x48>)
    8620:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8624:	f10d 0207 	add.w	r2, sp, #7
    8628:	f006 f824 	bl	e674 <bt_foreach_bond>
		return 0;
    862c:	2000      	movs	r0, #0
}
    862e:	b005      	add	sp, #20
    8630:	bd30      	pop	{r4, r5, pc}
	if (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8632:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
    8634:	2207      	movs	r2, #7
    8636:	f8cd 000b 	str.w	r0, [sp, #11]
    863a:	a902      	add	r1, sp, #8
    863c:	4628      	mov	r0, r5
    863e:	f015 ff43 	bl	1e4c8 <memcmp>
    8642:	2800      	cmp	r0, #0
    8644:	d0eb      	beq.n	861e <bt_unpair+0xe>
	unpair(id, addr);
    8646:	f89d 0007 	ldrb.w	r0, [sp, #7]
    864a:	4629      	mov	r1, r5
    864c:	f016 f94d 	bl	1e8ea <unpair>
	return 0;
    8650:	e7ec      	b.n	862c <bt_unpair+0x1c>
		return -EINVAL;
    8652:	f06f 0015 	mvn.w	r0, #21
    8656:	e7ea      	b.n	862e <bt_unpair+0x1e>
    8658:	0001e941 	.word	0x0001e941

0000865c <bt_id_add>:
{
    865c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    865e:	4e59      	ldr	r6, [pc, #356]	; (87c4 <bt_id_add+0x168>)
    8660:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    8664:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    8668:	4605      	mov	r5, r0
    866a:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    866c:	b10a      	cbz	r2, 8672 <bt_id_add+0x16>
    866e:	429a      	cmp	r2, r3
    8670:	d204      	bcs.n	867c <bt_id_add+0x20>
		bt_dev.le.rl_entries++;
    8672:	3301      	adds	r3, #1
    8674:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    8678:	b003      	add	sp, #12
    867a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    867c:	2100      	movs	r1, #0
    867e:	2205      	movs	r2, #5
    8680:	4608      	mov	r0, r1
    8682:	f001 fd6f 	bl	a164 <bt_conn_lookup_state_le>
	if (conn) {
    8686:	4607      	mov	r7, r0
    8688:	b168      	cbz	r0, 86a6 <bt_id_add+0x4a>
    868a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    868e:	f106 0070 	add.w	r0, r6, #112	; 0x70
    8692:	f016 f90a 	bl	1e8aa <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_ADD;
    8696:	7a6b      	ldrb	r3, [r5, #9]
    8698:	f043 0304 	orr.w	r3, r3, #4
    869c:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    869e:	4638      	mov	r0, r7
    86a0:	f016 faa3 	bl	1ebea <bt_conn_unref>
		return;
    86a4:	e7e8      	b.n	8678 <bt_id_add+0x1c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    86a6:	f106 0070 	add.w	r0, r6, #112	; 0x70
    86aa:	f016 f8f2 	bl	1e892 <atomic_get>
	if (adv_enabled) {
    86ae:	0682      	lsls	r2, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    86b0:	f3c0 1640 	ubfx	r6, r0, #5, #1
    86b4:	d502      	bpl.n	86bc <bt_id_add+0x60>
		set_advertise_enable(false);
    86b6:	4638      	mov	r0, r7
    86b8:	f7ff fd28 	bl	810c <set_advertise_enable>
	if (bt_dev.le.rl_entries) {
    86bc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    86c0:	b173      	cbz	r3, 86e0 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    86c2:	2000      	movs	r0, #0
    86c4:	f016 f956 	bl	1e974 <addr_res_enable>
		if (err) {
    86c8:	b150      	cbz	r0, 86e0 <bt_id_add+0x84>
    86ca:	493f      	ldr	r1, [pc, #252]	; (87c8 <bt_id_add+0x16c>)
    86cc:	4b3f      	ldr	r3, [pc, #252]	; (87cc <bt_id_add+0x170>)
			BT_WARN("Failed to disable address resolution");
    86ce:	4840      	ldr	r0, [pc, #256]	; (87d0 <bt_id_add+0x174>)
    86d0:	1ac9      	subs	r1, r1, r3
    86d2:	08c9      	lsrs	r1, r1, #3
    86d4:	0189      	lsls	r1, r1, #6
    86d6:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    86da:	f014 ffe5 	bl	1d6a8 <log_0>
	if (err) {
    86de:	e01f      	b.n	8720 <bt_id_add+0xc4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    86e0:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    86e4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    86e8:	429a      	cmp	r2, r3
    86ea:	d122      	bne.n	8732 <bt_id_add+0xd6>
    86ec:	4b37      	ldr	r3, [pc, #220]	; (87cc <bt_id_add+0x170>)
    86ee:	4d36      	ldr	r5, [pc, #216]	; (87c8 <bt_id_add+0x16c>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    86f0:	4838      	ldr	r0, [pc, #224]	; (87d4 <bt_id_add+0x178>)
    86f2:	1aed      	subs	r5, r5, r3
    86f4:	08ed      	lsrs	r5, r5, #3
    86f6:	01ad      	lsls	r5, r5, #6
    86f8:	f045 0102 	orr.w	r1, r5, #2
    86fc:	f014 ffd4 	bl	1d6a8 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    8700:	2200      	movs	r2, #0
    8702:	4611      	mov	r1, r2
    8704:	f242 0029 	movw	r0, #8233	; 0x2029
    8708:	f7ff fc60 	bl	7fcc <bt_hci_cmd_send_sync>
		if (err) {
    870c:	b118      	cbz	r0, 8716 <bt_id_add+0xba>
			BT_ERR("Failed to clear resolution list");
    870e:	4832      	ldr	r0, [pc, #200]	; (87d8 <bt_id_add+0x17c>)
    8710:	f045 0101 	orr.w	r1, r5, #1
    8714:	e7e1      	b.n	86da <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
    8716:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    871a:	3301      	adds	r3, #1
    871c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8720:	2001      	movs	r0, #1
    8722:	f016 f927 	bl	1e974 <addr_res_enable>
	if (adv_enabled) {
    8726:	2e00      	cmp	r6, #0
    8728:	d0a6      	beq.n	8678 <bt_id_add+0x1c>
		set_advertise_enable(true);
    872a:	2001      	movs	r0, #1
    872c:	f7ff fcee 	bl	810c <set_advertise_enable>
    8730:	e7a2      	b.n	8678 <bt_id_add+0x1c>
	err = hci_id_add(&keys->addr, keys->irk.val);
    8732:	1c6f      	adds	r7, r5, #1
    8734:	f105 0126 	add.w	r1, r5, #38	; 0x26
    8738:	4638      	mov	r0, r7
    873a:	f7ff fd67 	bl	820c <hci_id_add>
	if (err) {
    873e:	4605      	mov	r5, r0
    8740:	b140      	cbz	r0, 8754 <bt_id_add+0xf8>
    8742:	4921      	ldr	r1, [pc, #132]	; (87c8 <bt_id_add+0x16c>)
    8744:	4b21      	ldr	r3, [pc, #132]	; (87cc <bt_id_add+0x170>)
		BT_ERR("Failed to add IRK to controller");
    8746:	4825      	ldr	r0, [pc, #148]	; (87dc <bt_id_add+0x180>)
    8748:	1ac9      	subs	r1, r1, r3
    874a:	08c9      	lsrs	r1, r1, #3
    874c:	0189      	lsls	r1, r1, #6
    874e:	f041 0101 	orr.w	r1, r1, #1
    8752:	e7c2      	b.n	86da <bt_id_add+0x7e>
	bt_dev.le.rl_entries++;
    8754:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    8758:	3301      	adds	r3, #1
    875a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    875e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    8762:	075b      	lsls	r3, r3, #29
    8764:	d408      	bmi.n	8778 <bt_id_add+0x11c>
    8766:	4918      	ldr	r1, [pc, #96]	; (87c8 <bt_id_add+0x16c>)
    8768:	4b18      	ldr	r3, [pc, #96]	; (87cc <bt_id_add+0x170>)
		BT_WARN("Set privacy mode command is not supported");
    876a:	481d      	ldr	r0, [pc, #116]	; (87e0 <bt_id_add+0x184>)
    876c:	1ac9      	subs	r1, r1, r3
    876e:	08c9      	lsrs	r1, r1, #3
    8770:	0189      	lsls	r1, r1, #6
    8772:	f041 0102 	orr.w	r1, r1, #2
    8776:	e7b0      	b.n	86da <bt_id_add+0x7e>
	bt_addr_le_copy(&cp.id_addr, addr);
    8778:	4639      	mov	r1, r7
    877a:	4668      	mov	r0, sp
    877c:	f016 f892 	bl	1e8a4 <bt_addr_le_copy>
	cp.mode = mode;
    8780:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8782:	2108      	movs	r1, #8
    8784:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    8788:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    878c:	f7ff fac4 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    8790:	4604      	mov	r4, r0
    8792:	b940      	cbnz	r0, 87a6 <bt_id_add+0x14a>
    8794:	490c      	ldr	r1, [pc, #48]	; (87c8 <bt_id_add+0x16c>)
    8796:	4b0d      	ldr	r3, [pc, #52]	; (87cc <bt_id_add+0x170>)
		BT_ERR("Failed to set privacy mode");
    8798:	4812      	ldr	r0, [pc, #72]	; (87e4 <bt_id_add+0x188>)
    879a:	1ac9      	subs	r1, r1, r3
    879c:	08c9      	lsrs	r1, r1, #3
    879e:	0189      	lsls	r1, r1, #6
    87a0:	f041 0101 	orr.w	r1, r1, #1
    87a4:	e799      	b.n	86da <bt_id_add+0x7e>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    87a6:	2208      	movs	r2, #8
    87a8:	4669      	mov	r1, sp
    87aa:	4410      	add	r0, r2
    87ac:	f017 fccf 	bl	2014e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    87b0:	462a      	mov	r2, r5
    87b2:	4621      	mov	r1, r4
    87b4:	f242 004e 	movw	r0, #8270	; 0x204e
    87b8:	f7ff fc08 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    87bc:	2800      	cmp	r0, #0
    87be:	d0af      	beq.n	8720 <bt_id_add+0xc4>
    87c0:	e7e8      	b.n	8794 <bt_id_add+0x138>
    87c2:	bf00      	nop
    87c4:	20005888 	.word	0x20005888
    87c8:	000211d4 	.word	0x000211d4
    87cc:	00021114 	.word	0x00021114
    87d0:	00023bd1 	.word	0x00023bd1
    87d4:	00023bf6 	.word	0x00023bf6
    87d8:	00023c27 	.word	0x00023c27
    87dc:	00023c47 	.word	0x00023c47
    87e0:	00023c67 	.word	0x00023c67
    87e4:	00023c91 	.word	0x00023c91

000087e8 <bt_id_del>:
{
    87e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    87ec:	4e43      	ldr	r6, [pc, #268]	; (88fc <bt_id_del+0x114>)
    87ee:	f896 20a4 	ldrb.w	r2, [r6, #164]	; 0xa4
    87f2:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
{
    87f6:	4605      	mov	r5, r0
    87f8:	4634      	mov	r4, r6
	if (!bt_dev.le.rl_size ||
    87fa:	b112      	cbz	r2, 8802 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    87fc:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    87fe:	4293      	cmp	r3, r2
    8800:	dd04      	ble.n	880c <bt_id_del+0x24>
		bt_dev.le.rl_entries--;
    8802:	3b01      	subs	r3, #1
    8804:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    8808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    880c:	2100      	movs	r1, #0
    880e:	2205      	movs	r2, #5
    8810:	4608      	mov	r0, r1
    8812:	f001 fca7 	bl	a164 <bt_conn_lookup_state_le>
	if (conn) {
    8816:	4607      	mov	r7, r0
    8818:	b170      	cbz	r0, 8838 <bt_id_del+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    881a:	f106 0070 	add.w	r0, r6, #112	; 0x70
    881e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8822:	f016 f842 	bl	1e8aa <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_DEL;
    8826:	7a6b      	ldrb	r3, [r5, #9]
    8828:	f043 0308 	orr.w	r3, r3, #8
    882c:	726b      	strb	r3, [r5, #9]
		bt_conn_unref(conn);
    882e:	4638      	mov	r0, r7
}
    8830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    8834:	f016 b9d9 	b.w	1ebea <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8838:	f106 0070 	add.w	r0, r6, #112	; 0x70
    883c:	f016 f829 	bl	1e892 <atomic_get>
	if (adv_enabled) {
    8840:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8842:	f3c0 1640 	ubfx	r6, r0, #5, #1
    8846:	d502      	bpl.n	884e <bt_id_del+0x66>
		set_advertise_enable(false);
    8848:	4638      	mov	r0, r7
    884a:	f7ff fc5f 	bl	810c <set_advertise_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    884e:	2000      	movs	r0, #0
    8850:	f016 f890 	bl	1e974 <addr_res_enable>
	if (err) {
    8854:	4607      	mov	r7, r0
    8856:	b1b8      	cbz	r0, 8888 <bt_id_del+0xa0>
    8858:	4a29      	ldr	r2, [pc, #164]	; (8900 <bt_id_del+0x118>)
    885a:	4b2a      	ldr	r3, [pc, #168]	; (8904 <bt_id_del+0x11c>)
    885c:	1ad2      	subs	r2, r2, r3
    885e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8860:	0192      	lsls	r2, r2, #6
    8862:	4601      	mov	r1, r0
    8864:	f042 0201 	orr.w	r2, r2, #1
    8868:	4827      	ldr	r0, [pc, #156]	; (8908 <bt_id_del+0x120>)
    886a:	f014 ff2a 	bl	1d6c2 <log_1>
	if (bt_dev.le.rl_entries) {
    886e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    8872:	b113      	cbz	r3, 887a <bt_id_del+0x92>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8874:	2001      	movs	r0, #1
    8876:	f016 f87d 	bl	1e974 <addr_res_enable>
	if (adv_enabled) {
    887a:	2e00      	cmp	r6, #0
    887c:	d0c4      	beq.n	8808 <bt_id_del+0x20>
}
    887e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		set_advertise_enable(true);
    8882:	2001      	movs	r0, #1
    8884:	f7ff bc42 	b.w	810c <set_advertise_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8888:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    888c:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    8890:	429a      	cmp	r2, r3
    8892:	d20c      	bcs.n	88ae <bt_id_del+0xc6>
		bt_dev.le.rl_entries--;
    8894:	3b01      	subs	r3, #1
    8896:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    889a:	896b      	ldrh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    889c:	491b      	ldr	r1, [pc, #108]	; (890c <bt_id_del+0x124>)
		keys->keys &= ~BT_KEYS_IRK;
    889e:	f023 0302 	bic.w	r3, r3, #2
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    88a2:	4602      	mov	r2, r0
		keys->keys &= ~BT_KEYS_IRK;
    88a4:	816b      	strh	r3, [r5, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    88a6:	2002      	movs	r0, #2
    88a8:	f005 fefa 	bl	e6a0 <bt_keys_foreach>
		goto done;
    88ac:	e7df      	b.n	886e <bt_id_del+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    88ae:	2107      	movs	r1, #7
    88b0:	f242 0028 	movw	r0, #8232	; 0x2028
    88b4:	f7ff fa30 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    88b8:	4680      	mov	r8, r0
    88ba:	2800      	cmp	r0, #0
    88bc:	d0d7      	beq.n	886e <bt_id_del+0x86>
	cp = net_buf_add(buf, sizeof(*cp));
    88be:	2107      	movs	r1, #7
    88c0:	3008      	adds	r0, #8
    88c2:	f017 fc3e 	bl	20142 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    88c6:	1c69      	adds	r1, r5, #1
    88c8:	f015 ffec 	bl	1e8a4 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    88cc:	463a      	mov	r2, r7
    88ce:	4641      	mov	r1, r8
    88d0:	f242 0028 	movw	r0, #8232	; 0x2028
    88d4:	f7ff fb7a 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    88d8:	b150      	cbz	r0, 88f0 <bt_id_del+0x108>
    88da:	4b0a      	ldr	r3, [pc, #40]	; (8904 <bt_id_del+0x11c>)
    88dc:	4908      	ldr	r1, [pc, #32]	; (8900 <bt_id_del+0x118>)
		BT_ERR("Failed to remove IRK from controller");
    88de:	480c      	ldr	r0, [pc, #48]	; (8910 <bt_id_del+0x128>)
    88e0:	1ac9      	subs	r1, r1, r3
    88e2:	08c9      	lsrs	r1, r1, #3
    88e4:	0189      	lsls	r1, r1, #6
    88e6:	f041 0101 	orr.w	r1, r1, #1
    88ea:	f014 fedd 	bl	1d6a8 <log_0>
		goto done;
    88ee:	e7be      	b.n	886e <bt_id_del+0x86>
	bt_dev.le.rl_entries--;
    88f0:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    88f4:	3b01      	subs	r3, #1
    88f6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    88fa:	e7b8      	b.n	886e <bt_id_del+0x86>
    88fc:	20005888 	.word	0x20005888
    8900:	000211d4 	.word	0x000211d4
    8904:	00021114 	.word	0x00021114
    8908:	00023cac 	.word	0x00023cac
    890c:	0001e96b 	.word	0x0001e96b
    8910:	00023cd9 	.word	0x00023cd9

00008914 <id_create>:
{
    8914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8918:	4604      	mov	r4, r0
    891a:	4828      	ldr	r0, [pc, #160]	; (89bc <id_create+0xa8>)
    891c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    8920:	b086      	sub	sp, #24
    8922:	4615      	mov	r5, r2
    8924:	4407      	add	r7, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8926:	460e      	mov	r6, r1
    8928:	4680      	mov	r8, r0
    892a:	b361      	cbz	r1, 8986 <id_create+0x72>
    892c:	2300      	movs	r3, #0
    892e:	2207      	movs	r2, #7
    8930:	4669      	mov	r1, sp
    8932:	4630      	mov	r0, r6
    8934:	9300      	str	r3, [sp, #0]
    8936:	f8cd 3003 	str.w	r3, [sp, #3]
    893a:	f015 fdc5 	bl	1e4c8 <memcmp>
    893e:	b310      	cbz	r0, 8986 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8940:	4631      	mov	r1, r6
    8942:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8944:	f015 ffae 	bl	1e8a4 <bt_addr_le_copy>
		u8_t zero_irk[16] = { 0 };
    8948:	2610      	movs	r6, #16
    894a:	2300      	movs	r3, #0
    894c:	fb06 8404 	mla	r4, r6, r4, r8
    8950:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8954:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (irk && memcmp(irk, zero_irk, 16)) {
    8958:	34d8      	adds	r4, #216	; 0xd8
    895a:	b32d      	cbz	r5, 89a8 <id_create+0x94>
    895c:	4632      	mov	r2, r6
    895e:	a902      	add	r1, sp, #8
    8960:	4628      	mov	r0, r5
    8962:	f015 fdb1 	bl	1e4c8 <memcmp>
    8966:	b1f8      	cbz	r0, 89a8 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    8968:	4632      	mov	r2, r6
    896a:	4629      	mov	r1, r5
    896c:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    896e:	f015 fdbb 	bl	1e4e8 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8972:	4813      	ldr	r0, [pc, #76]	; (89c0 <id_create+0xac>)
    8974:	f015 ff8d 	bl	1e892 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8978:	0783      	lsls	r3, r0, #30
    897a:	d501      	bpl.n	8980 <id_create+0x6c>
		bt_settings_save_id();
    897c:	f7fe fce6 	bl	734c <bt_settings_save_id>
}
    8980:	b006      	add	sp, #24
    8982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    8986:	a802      	add	r0, sp, #8
    8988:	f016 f85e 	bl	1ea48 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    898c:	a802      	add	r0, sp, #8
    898e:	f7ff f823 	bl	79d8 <id_find>
    8992:	2800      	cmp	r0, #0
    8994:	daf7      	bge.n	8986 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8996:	a902      	add	r1, sp, #8
    8998:	4638      	mov	r0, r7
    899a:	f015 ff83 	bl	1e8a4 <bt_addr_le_copy>
		if (addr) {
    899e:	2e00      	cmp	r6, #0
    89a0:	d0d2      	beq.n	8948 <id_create+0x34>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    89a2:	4639      	mov	r1, r7
    89a4:	4630      	mov	r0, r6
    89a6:	e7cd      	b.n	8944 <id_create+0x30>
			bt_rand(&bt_dev.irk[id], 16);
    89a8:	2110      	movs	r1, #16
    89aa:	4620      	mov	r0, r4
    89ac:	f008 fc9c 	bl	112e8 <bt_rand>
			if (irk) {
    89b0:	2d00      	cmp	r5, #0
    89b2:	d0de      	beq.n	8972 <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    89b4:	2210      	movs	r2, #16
    89b6:	4621      	mov	r1, r4
    89b8:	4628      	mov	r0, r5
    89ba:	e7d8      	b.n	896e <id_create+0x5a>
    89bc:	20005888 	.word	0x20005888
    89c0:	200058f8 	.word	0x200058f8

000089c4 <bt_recv>:
{
    89c4:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    89c6:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    89c8:	2901      	cmp	r1, #1
{
    89ca:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    89cc:	d04b      	beq.n	8a66 <bt_recv+0xa2>
    89ce:	2903      	cmp	r1, #3
    89d0:	d17b      	bne.n	8aca <bt_recv+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    89d2:	8983      	ldrh	r3, [r0, #12]
    89d4:	2b03      	cmp	r3, #3
    89d6:	d80c      	bhi.n	89f2 <bt_recv+0x2e>
    89d8:	4a44      	ldr	r2, [pc, #272]	; (8aec <bt_recv+0x128>)
    89da:	4945      	ldr	r1, [pc, #276]	; (8af0 <bt_recv+0x12c>)
    89dc:	4845      	ldr	r0, [pc, #276]	; (8af4 <bt_recv+0x130>)
    89de:	f240 3307 	movw	r3, #775	; 0x307
    89e2:	f013 fd13 	bl	1c40c <printk>
    89e6:	4040      	eors	r0, r0
    89e8:	f380 8811 	msr	BASEPRI, r0
    89ec:	f04f 0003 	mov.w	r0, #3
    89f0:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    89f2:	2104      	movs	r1, #4
    89f4:	f104 0008 	add.w	r0, r4, #8
    89f8:	f017 fbca 	bl	20190 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    89fc:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    89fe:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8a00:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8a02:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    8a04:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8a08:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    8a0a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8a0c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    8a0e:	d00d      	beq.n	8a2c <bt_recv+0x68>
    8a10:	4839      	ldr	r0, [pc, #228]	; (8af8 <bt_recv+0x134>)
    8a12:	4b3a      	ldr	r3, [pc, #232]	; (8afc <bt_recv+0x138>)
    8a14:	1a1b      	subs	r3, r3, r0
    8a16:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8a18:	019b      	lsls	r3, r3, #6
    8a1a:	4839      	ldr	r0, [pc, #228]	; (8b00 <bt_recv+0x13c>)
    8a1c:	f043 0301 	orr.w	r3, r3, #1
    8a20:	f014 fe63 	bl	1d6ea <log_2>
	net_buf_unref(buf);
    8a24:	4620      	mov	r0, r4
    8a26:	f011 f8e7 	bl	19bf8 <net_buf_unref>
    8a2a:	e01a      	b.n	8a62 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8a2c:	f001 fb64 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    8a30:	4605      	mov	r5, r0
    8a32:	b958      	cbnz	r0, 8a4c <bt_recv+0x88>
    8a34:	4b30      	ldr	r3, [pc, #192]	; (8af8 <bt_recv+0x134>)
    8a36:	4a31      	ldr	r2, [pc, #196]	; (8afc <bt_recv+0x138>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8a38:	8ae1      	ldrh	r1, [r4, #22]
    8a3a:	4832      	ldr	r0, [pc, #200]	; (8b04 <bt_recv+0x140>)
    8a3c:	1ad2      	subs	r2, r2, r3
    8a3e:	08d2      	lsrs	r2, r2, #3
    8a40:	0192      	lsls	r2, r2, #6
    8a42:	f042 0201 	orr.w	r2, r2, #1
    8a46:	f014 fe3c 	bl	1d6c2 <log_1>
		net_buf_unref(buf);
    8a4a:	e7eb      	b.n	8a24 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    8a4c:	f001 fd20 	bl	a490 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8a50:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    8a52:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8a54:	4621      	mov	r1, r4
    8a56:	4628      	mov	r0, r5
    8a58:	f001 f90e 	bl	9c78 <bt_conn_recv>
	bt_conn_unref(conn);
    8a5c:	4628      	mov	r0, r5
    8a5e:	f016 f8c4 	bl	1ebea <bt_conn_unref>
		return 0;
    8a62:	2000      	movs	r0, #0
}
    8a64:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8a66:	8983      	ldrh	r3, [r0, #12]
    8a68:	2b01      	cmp	r3, #1
    8a6a:	d80c      	bhi.n	8a86 <bt_recv+0xc2>
    8a6c:	4a1f      	ldr	r2, [pc, #124]	; (8aec <bt_recv+0x128>)
    8a6e:	4920      	ldr	r1, [pc, #128]	; (8af0 <bt_recv+0x12c>)
    8a70:	4820      	ldr	r0, [pc, #128]	; (8af4 <bt_recv+0x130>)
    8a72:	f640 73db 	movw	r3, #4059	; 0xfdb
    8a76:	f013 fcc9 	bl	1c40c <printk>
    8a7a:	4040      	eors	r0, r0
    8a7c:	f380 8811 	msr	BASEPRI, r0
    8a80:	f04f 0003 	mov.w	r0, #3
    8a84:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8a86:	2102      	movs	r1, #2
    8a88:	f104 0008 	add.w	r0, r4, #8
    8a8c:	f017 fb80 	bl	20190 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    8a90:	7802      	ldrb	r2, [r0, #0]
    8a92:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8a94:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    8a96:	d811      	bhi.n	8abc <bt_recv+0xf8>
    8a98:	2301      	movs	r3, #1
    8a9a:	4093      	lsls	r3, r2
    8a9c:	4a1a      	ldr	r2, [pc, #104]	; (8b08 <bt_recv+0x144>)
    8a9e:	4213      	tst	r3, r2
    8aa0:	d00c      	beq.n	8abc <bt_recv+0xf8>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    8aa2:	4a12      	ldr	r2, [pc, #72]	; (8aec <bt_recv+0x128>)
    8aa4:	4919      	ldr	r1, [pc, #100]	; (8b0c <bt_recv+0x148>)
    8aa6:	4813      	ldr	r0, [pc, #76]	; (8af4 <bt_recv+0x130>)
    8aa8:	f640 73df 	movw	r3, #4063	; 0xfdf
    8aac:	f013 fcae 	bl	1c40c <printk>
    8ab0:	4040      	eors	r0, r0
    8ab2:	f380 8811 	msr	BASEPRI, r0
    8ab6:	f04f 0003 	mov.w	r0, #3
    8aba:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8abc:	4a14      	ldr	r2, [pc, #80]	; (8b10 <bt_recv+0x14c>)
    8abe:	7828      	ldrb	r0, [r5, #0]
    8ac0:	2305      	movs	r3, #5
    8ac2:	4621      	mov	r1, r4
    8ac4:	f7fe febc 	bl	7840 <handle_event>
    8ac8:	e7ac      	b.n	8a24 <bt_recv+0x60>
    8aca:	4b0b      	ldr	r3, [pc, #44]	; (8af8 <bt_recv+0x134>)
    8acc:	4a0b      	ldr	r2, [pc, #44]	; (8afc <bt_recv+0x138>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8ace:	4811      	ldr	r0, [pc, #68]	; (8b14 <bt_recv+0x150>)
    8ad0:	1ad2      	subs	r2, r2, r3
    8ad2:	08d2      	lsrs	r2, r2, #3
    8ad4:	0192      	lsls	r2, r2, #6
    8ad6:	f042 0201 	orr.w	r2, r2, #1
    8ada:	f014 fdf2 	bl	1d6c2 <log_1>
		net_buf_unref(buf);
    8ade:	4620      	mov	r0, r4
    8ae0:	f011 f88a 	bl	19bf8 <net_buf_unref>
		return -EINVAL;
    8ae4:	f06f 0015 	mvn.w	r0, #21
    8ae8:	e7bc      	b.n	8a64 <bt_recv+0xa0>
    8aea:	bf00      	nop
    8aec:	00023a04 	.word	0x00023a04
    8af0:	00023cfe 	.word	0x00023cfe
    8af4:	00023a41 	.word	0x00023a41
    8af8:	00021114 	.word	0x00021114
    8afc:	000211d4 	.word	0x000211d4
    8b00:	00023d17 	.word	0x00023d17
    8b04:	00023d3b 	.word	0x00023d3b
    8b08:	0408c000 	.word	0x0408c000
    8b0c:	00023d5d 	.word	0x00023d5d
    8b10:	00021960 	.word	0x00021960
    8b14:	00023d7b 	.word	0x00023d7b

00008b18 <bt_recv_prio>:
{
    8b18:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8b1a:	7d03      	ldrb	r3, [r0, #20]
    8b1c:	2b01      	cmp	r3, #1
{
    8b1e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8b20:	d00c      	beq.n	8b3c <bt_recv_prio+0x24>
    8b22:	4a21      	ldr	r2, [pc, #132]	; (8ba8 <bt_recv_prio+0x90>)
    8b24:	4921      	ldr	r1, [pc, #132]	; (8bac <bt_recv_prio+0x94>)
    8b26:	4822      	ldr	r0, [pc, #136]	; (8bb0 <bt_recv_prio+0x98>)
    8b28:	f241 4353 	movw	r3, #5203	; 0x1453
    8b2c:	f013 fc6e 	bl	1c40c <printk>
    8b30:	4040      	eors	r0, r0
    8b32:	f380 8811 	msr	BASEPRI, r0
    8b36:	f04f 0003 	mov.w	r0, #3
    8b3a:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8b3c:	89a3      	ldrh	r3, [r4, #12]
    8b3e:	2b01      	cmp	r3, #1
    8b40:	d80c      	bhi.n	8b5c <bt_recv_prio+0x44>
    8b42:	4a19      	ldr	r2, [pc, #100]	; (8ba8 <bt_recv_prio+0x90>)
    8b44:	491b      	ldr	r1, [pc, #108]	; (8bb4 <bt_recv_prio+0x9c>)
    8b46:	481a      	ldr	r0, [pc, #104]	; (8bb0 <bt_recv_prio+0x98>)
    8b48:	f241 4354 	movw	r3, #5204	; 0x1454
    8b4c:	f013 fc5e 	bl	1c40c <printk>
    8b50:	4040      	eors	r0, r0
    8b52:	f380 8811 	msr	BASEPRI, r0
    8b56:	f04f 0003 	mov.w	r0, #3
    8b5a:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8b5c:	2102      	movs	r1, #2
    8b5e:	f104 0008 	add.w	r0, r4, #8
    8b62:	f017 fb15 	bl	20190 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8b66:	7802      	ldrb	r2, [r0, #0]
    8b68:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8b6a:	4605      	mov	r5, r0
    8b6c:	d804      	bhi.n	8b78 <bt_recv_prio+0x60>
    8b6e:	2301      	movs	r3, #1
    8b70:	4093      	lsls	r3, r2
    8b72:	4a11      	ldr	r2, [pc, #68]	; (8bb8 <bt_recv_prio+0xa0>)
    8b74:	4213      	tst	r3, r2
    8b76:	d10c      	bne.n	8b92 <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8b78:	4a0b      	ldr	r2, [pc, #44]	; (8ba8 <bt_recv_prio+0x90>)
    8b7a:	4910      	ldr	r1, [pc, #64]	; (8bbc <bt_recv_prio+0xa4>)
    8b7c:	480c      	ldr	r0, [pc, #48]	; (8bb0 <bt_recv_prio+0x98>)
    8b7e:	f241 4357 	movw	r3, #5207	; 0x1457
    8b82:	f013 fc43 	bl	1c40c <printk>
    8b86:	4040      	eors	r0, r0
    8b88:	f380 8811 	msr	BASEPRI, r0
    8b8c:	f04f 0003 	mov.w	r0, #3
    8b90:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8b92:	4a0b      	ldr	r2, [pc, #44]	; (8bc0 <bt_recv_prio+0xa8>)
    8b94:	7828      	ldrb	r0, [r5, #0]
    8b96:	2304      	movs	r3, #4
    8b98:	4621      	mov	r1, r4
    8b9a:	f7fe fe51 	bl	7840 <handle_event>
	net_buf_unref(buf);
    8b9e:	4620      	mov	r0, r4
    8ba0:	f011 f82a 	bl	19bf8 <net_buf_unref>
}
    8ba4:	2000      	movs	r0, #0
    8ba6:	bd38      	pop	{r3, r4, r5, pc}
    8ba8:	00023a04 	.word	0x00023a04
    8bac:	00023d8f 	.word	0x00023d8f
    8bb0:	00023a41 	.word	0x00023a41
    8bb4:	00023cfe 	.word	0x00023cfe
    8bb8:	0408c000 	.word	0x0408c000
    8bbc:	00023d5e 	.word	0x00023d5e
    8bc0:	00021998 	.word	0x00021998

00008bc4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8bc4:	4a08      	ldr	r2, [pc, #32]	; (8be8 <bt_hci_driver_register+0x24>)
{
    8bc6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    8bc8:	f8d2 00d4 	ldr.w	r0, [r2, #212]	; 0xd4
    8bcc:	b930      	cbnz	r0, 8bdc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8bce:	68d9      	ldr	r1, [r3, #12]
    8bd0:	b139      	cbz	r1, 8be2 <bt_hci_driver_register+0x1e>
    8bd2:	6919      	ldr	r1, [r3, #16]
    8bd4:	b129      	cbz	r1, 8be2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8bd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	return 0;
    8bda:	4770      	bx	lr
		return -EALREADY;
    8bdc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8be0:	4770      	bx	lr
		return -EINVAL;
    8be2:	f06f 0015 	mvn.w	r0, #21
}
    8be6:	4770      	bx	lr
    8be8:	20005888 	.word	0x20005888

00008bec <bt_finalize_init>:
{
    8bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8bf0:	4c2a      	ldr	r4, [pc, #168]	; (8c9c <bt_finalize_init+0xb0>)
    8bf2:	4d2b      	ldr	r5, [pc, #172]	; (8ca0 <bt_finalize_init+0xb4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8bf4:	4e2b      	ldr	r6, [pc, #172]	; (8ca4 <bt_finalize_init+0xb8>)
		BT_INFO("Identity[%d]: %s",
    8bf6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8cbc <bt_finalize_init+0xd0>
{
    8bfa:	b087      	sub	sp, #28
    8bfc:	2102      	movs	r1, #2
    8bfe:	f104 0070 	add.w	r0, r4, #112	; 0x70
    8c02:	f015 fe52 	bl	1e8aa <atomic_or>
    8c06:	4b28      	ldr	r3, [pc, #160]	; (8ca8 <bt_finalize_init+0xbc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8c08:	4928      	ldr	r1, [pc, #160]	; (8cac <bt_finalize_init+0xc0>)
    8c0a:	1aed      	subs	r5, r5, r3
    8c0c:	79e3      	ldrb	r3, [r4, #7]
    8c0e:	4620      	mov	r0, r4
    8c10:	2b01      	cmp	r3, #1
    8c12:	bf88      	it	hi
    8c14:	460e      	movhi	r6, r1
    8c16:	f7fe f8c1 	bl	6d9c <bt_addr_le_str_real>
    8c1a:	f7fb f971 	bl	3f00 <log_strdup>
    8c1e:	08ed      	lsrs	r5, r5, #3
    8c20:	01ad      	lsls	r5, r5, #6
    8c22:	f045 0703 	orr.w	r7, r5, #3
    8c26:	4602      	mov	r2, r0
    8c28:	4631      	mov	r1, r6
    8c2a:	4821      	ldr	r0, [pc, #132]	; (8cb0 <bt_finalize_init+0xc4>)
    8c2c:	463b      	mov	r3, r7
    8c2e:	f014 fd5c 	bl	1d6ea <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    8c32:	46a0      	mov	r8, r4
    8c34:	2601      	movs	r6, #1
    8c36:	79e3      	ldrb	r3, [r4, #7]
    8c38:	429e      	cmp	r6, r3
    8c3a:	f108 0807 	add.w	r8, r8, #7
    8c3e:	db20      	blt.n	8c82 <bt_finalize_init+0x96>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8c40:	7c26      	ldrb	r6, [r4, #16]
    8c42:	4630      	mov	r0, r6
    8c44:	f7fe fc48 	bl	74d8 <ver_str>
    8c48:	8a63      	ldrh	r3, [r4, #18]
    8c4a:	9304      	str	r3, [sp, #16]
    8c4c:	f045 0503 	orr.w	r5, r5, #3
    8c50:	8ae3      	ldrh	r3, [r4, #22]
    8c52:	9305      	str	r3, [sp, #20]
    8c54:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8c58:	462b      	mov	r3, r5
    8c5a:	a902      	add	r1, sp, #8
    8c5c:	2204      	movs	r2, #4
    8c5e:	4815      	ldr	r0, [pc, #84]	; (8cb4 <bt_finalize_init+0xc8>)
    8c60:	f014 fd78 	bl	1d754 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    8c64:	7c66      	ldrb	r6, [r4, #17]
    8c66:	4630      	mov	r0, r6
    8c68:	f7fe fc36 	bl	74d8 <ver_str>
    8c6c:	8aa3      	ldrh	r3, [r4, #20]
    8c6e:	f8ad 5000 	strh.w	r5, [sp]
    8c72:	4601      	mov	r1, r0
    8c74:	4632      	mov	r2, r6
    8c76:	4810      	ldr	r0, [pc, #64]	; (8cb8 <bt_finalize_init+0xcc>)
    8c78:	f014 fd50 	bl	1d71c <log_3>
}
    8c7c:	b007      	add	sp, #28
    8c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    8c82:	4640      	mov	r0, r8
    8c84:	f7fe f88a 	bl	6d9c <bt_addr_le_str_real>
    8c88:	f7fb f93a 	bl	3f00 <log_strdup>
    8c8c:	4631      	mov	r1, r6
    8c8e:	4602      	mov	r2, r0
    8c90:	463b      	mov	r3, r7
    8c92:	4648      	mov	r0, r9
    8c94:	f014 fd29 	bl	1d6ea <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    8c98:	3601      	adds	r6, #1
    8c9a:	e7cc      	b.n	8c36 <bt_finalize_init+0x4a>
    8c9c:	20005888 	.word	0x20005888
    8ca0:	000211d4 	.word	0x000211d4
    8ca4:	00022ef5 	.word	0x00022ef5
    8ca8:	00021114 	.word	0x00021114
    8cac:	00023db2 	.word	0x00023db2
    8cb0:	00023db6 	.word	0x00023db6
    8cb4:	00023dd6 	.word	0x00023dd6
    8cb8:	00023e14 	.word	0x00023e14
    8cbc:	00023dc5 	.word	0x00023dc5

00008cc0 <init_work>:
{
    8cc0:	b510      	push	{r4, lr}
	err = bt_init();
    8cc2:	f7f7 fb99 	bl	3f8 <bt_init>
	if (ready_cb) {
    8cc6:	4b03      	ldr	r3, [pc, #12]	; (8cd4 <init_work+0x14>)
    8cc8:	681b      	ldr	r3, [r3, #0]
    8cca:	b113      	cbz	r3, 8cd2 <init_work+0x12>
}
    8ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    8cd0:	4718      	bx	r3
}
    8cd2:	bd10      	pop	{r4, pc}
    8cd4:	200002f0 	.word	0x200002f0

00008cd8 <bt_enable>:
{
    8cd8:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    8cda:	4d30      	ldr	r5, [pc, #192]	; (8d9c <bt_enable+0xc4>)
    8cdc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    8ce0:	b086      	sub	sp, #24
    8ce2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    8ce4:	b973      	cbnz	r3, 8d04 <bt_enable+0x2c>
    8ce6:	4b2e      	ldr	r3, [pc, #184]	; (8da0 <bt_enable+0xc8>)
    8ce8:	492e      	ldr	r1, [pc, #184]	; (8da4 <bt_enable+0xcc>)
		BT_ERR("No HCI driver registered");
    8cea:	482f      	ldr	r0, [pc, #188]	; (8da8 <bt_enable+0xd0>)
    8cec:	1ac9      	subs	r1, r1, r3
    8cee:	08c9      	lsrs	r1, r1, #3
    8cf0:	0189      	lsls	r1, r1, #6
    8cf2:	f041 0101 	orr.w	r1, r1, #1
    8cf6:	f014 fcd7 	bl	1d6a8 <log_0>
		return -ENODEV;
    8cfa:	f06f 0412 	mvn.w	r4, #18
}
    8cfe:	4620      	mov	r0, r4
    8d00:	b006      	add	sp, #24
    8d02:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8d04:	2101      	movs	r1, #1
    8d06:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8d0a:	f015 fdce 	bl	1e8aa <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    8d0e:	07c2      	lsls	r2, r0, #31
    8d10:	d440      	bmi.n	8d94 <bt_enable+0xbc>
		err = bt_settings_init();
    8d12:	f7fe fb7b 	bl	740c <bt_settings_init>
		if (err) {
    8d16:	4604      	mov	r4, r0
    8d18:	2800      	cmp	r0, #0
    8d1a:	d1f0      	bne.n	8cfe <bt_enable+0x26>
	ready_cb = cb;
    8d1c:	4b23      	ldr	r3, [pc, #140]	; (8dac <bt_enable+0xd4>)
    8d1e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8d20:	f06f 0308 	mvn.w	r3, #8
    8d24:	e9cd 0302 	strd	r0, r3, [sp, #8]
    8d28:	e9cd 0004 	strd	r0, r0, [sp, #16]
    8d2c:	e9cd 0000 	strd	r0, r0, [sp]
    8d30:	4b1f      	ldr	r3, [pc, #124]	; (8db0 <bt_enable+0xd8>)
    8d32:	4920      	ldr	r1, [pc, #128]	; (8db4 <bt_enable+0xdc>)
    8d34:	4820      	ldr	r0, [pc, #128]	; (8db8 <bt_enable+0xe0>)
    8d36:	f44f 7220 	mov.w	r2, #640	; 0x280
    8d3a:	f012 fdb1 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8d3e:	491f      	ldr	r1, [pc, #124]	; (8dbc <bt_enable+0xe4>)
    8d40:	481d      	ldr	r0, [pc, #116]	; (8db8 <bt_enable+0xe0>)
    8d42:	f017 fe21 	bl	20988 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    8d46:	f7fe f9cb 	bl	70e0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    8d4a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    8d4e:	68db      	ldr	r3, [r3, #12]
    8d50:	4798      	blx	r3
	if (err) {
    8d52:	4604      	mov	r4, r0
    8d54:	b158      	cbz	r0, 8d6e <bt_enable+0x96>
    8d56:	4b12      	ldr	r3, [pc, #72]	; (8da0 <bt_enable+0xc8>)
    8d58:	4a12      	ldr	r2, [pc, #72]	; (8da4 <bt_enable+0xcc>)
    8d5a:	1ad2      	subs	r2, r2, r3
    8d5c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    8d5e:	0192      	lsls	r2, r2, #6
    8d60:	4601      	mov	r1, r0
    8d62:	f042 0201 	orr.w	r2, r2, #1
    8d66:	4816      	ldr	r0, [pc, #88]	; (8dc0 <bt_enable+0xe8>)
    8d68:	f014 fcab 	bl	1d6c2 <log_1>
		return err;
    8d6c:	e7c7      	b.n	8cfe <bt_enable+0x26>
	if (!cb) {
    8d6e:	b926      	cbnz	r6, 8d7a <bt_enable+0xa2>
}
    8d70:	b006      	add	sp, #24
    8d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    8d76:	f7f7 bb3f 	b.w	3f8 <bt_init>
    8d7a:	2101      	movs	r1, #1
    8d7c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    8d80:	f015 fd93 	bl	1e8aa <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8d84:	07c3      	lsls	r3, r0, #31
    8d86:	d4ba      	bmi.n	8cfe <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    8d88:	480e      	ldr	r0, [pc, #56]	; (8dc4 <bt_enable+0xec>)
    8d8a:	f105 0164 	add.w	r1, r5, #100	; 0x64
    8d8e:	f017 fc4d 	bl	2062c <k_queue_append>
    8d92:	e7b4      	b.n	8cfe <bt_enable+0x26>
		return -EALREADY;
    8d94:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8d98:	e7b1      	b.n	8cfe <bt_enable+0x26>
    8d9a:	bf00      	nop
    8d9c:	20005888 	.word	0x20005888
    8da0:	00021114 	.word	0x00021114
    8da4:	000211d4 	.word	0x000211d4
    8da8:	00023f60 	.word	0x00023f60
    8dac:	200002f0 	.word	0x200002f0
    8db0:	00007a0d 	.word	0x00007a0d
    8db4:	20002b38 	.word	0x20002b38
    8db8:	200002f4 	.word	0x200002f4
    8dbc:	00023f79 	.word	0x00023f79
    8dc0:	00023f7f 	.word	0x00023f7f
    8dc4:	20001c48 	.word	0x20001c48

00008dc8 <bt_set_name>:
{
    8dc8:	b530      	push	{r4, r5, lr}
    8dca:	b085      	sub	sp, #20
    8dcc:	4604      	mov	r4, r0
	size_t len = strlen(name);
    8dce:	f015 fb59 	bl	1e484 <strlen>
	if (len >= sizeof(bt_dev.name)) {
    8dd2:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    8dd4:	4605      	mov	r5, r0
	if (len >= sizeof(bt_dev.name)) {
    8dd6:	d835      	bhi.n	8e44 <bt_set_name+0x7c>
	if (!strcmp(bt_dev.name, name)) {
    8dd8:	481c      	ldr	r0, [pc, #112]	; (8e4c <bt_set_name+0x84>)
    8dda:	4621      	mov	r1, r4
    8ddc:	f015 fb59 	bl	1e492 <strcmp>
    8de0:	b910      	cbnz	r0, 8de8 <bt_set_name+0x20>
	return 0;
    8de2:	2000      	movs	r0, #0
}
    8de4:	b005      	add	sp, #20
    8de6:	bd30      	pop	{r4, r5, pc}
	strncpy(bt_dev.name, name, sizeof(bt_dev.name));
    8de8:	2242      	movs	r2, #66	; 0x42
    8dea:	4621      	mov	r1, r4
    8dec:	4817      	ldr	r0, [pc, #92]	; (8e4c <bt_set_name+0x84>)
    8dee:	f015 fb28 	bl	1e442 <strncpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8df2:	4817      	ldr	r0, [pc, #92]	; (8e50 <bt_set_name+0x88>)
    8df4:	f015 fd4d 	bl	1e892 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_NAME)) {
    8df8:	0643      	lsls	r3, r0, #25
    8dfa:	d511      	bpl.n	8e20 <bt_set_name+0x58>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    8dfc:	2309      	movs	r3, #9
    8dfe:	4620      	mov	r0, r4
    8e00:	f88d 3000 	strb.w	r3, [sp]
    8e04:	f015 fb3e 	bl	1e484 <strlen>
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    8e08:	2201      	movs	r2, #1
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    8e0a:	f88d 0001 	strb.w	r0, [sp, #1]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    8e0e:	a902      	add	r1, sp, #8
    8e10:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    8e14:	9401      	str	r4, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    8e16:	f8cd d008 	str.w	sp, [sp, #8]
    8e1a:	9203      	str	r2, [sp, #12]
		set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, &sd, 1);
    8e1c:	f7ff fa20 	bl	8260 <set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    8e20:	490a      	ldr	r1, [pc, #40]	; (8e4c <bt_set_name+0x84>)
    8e22:	480c      	ldr	r0, [pc, #48]	; (8e54 <bt_set_name+0x8c>)
    8e24:	462a      	mov	r2, r5
    8e26:	f7fc f9e1 	bl	51ec <settings_save_one>
		if (err) {
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d0d9      	beq.n	8de2 <bt_set_name+0x1a>
    8e2e:	4b0a      	ldr	r3, [pc, #40]	; (8e58 <bt_set_name+0x90>)
    8e30:	490a      	ldr	r1, [pc, #40]	; (8e5c <bt_set_name+0x94>)
			BT_WARN("Unable to store name");
    8e32:	480b      	ldr	r0, [pc, #44]	; (8e60 <bt_set_name+0x98>)
    8e34:	1ac9      	subs	r1, r1, r3
    8e36:	08c9      	lsrs	r1, r1, #3
    8e38:	0189      	lsls	r1, r1, #6
    8e3a:	f041 0102 	orr.w	r1, r1, #2
    8e3e:	f014 fc33 	bl	1d6a8 <log_0>
    8e42:	e7ce      	b.n	8de2 <bt_set_name+0x1a>
		return -ENOMEM;
    8e44:	f06f 000b 	mvn.w	r0, #11
    8e48:	e7cc      	b.n	8de4 <bt_set_name+0x1c>
    8e4a:	bf00      	nop
    8e4c:	20005990 	.word	0x20005990
    8e50:	200058f8 	.word	0x200058f8
    8e54:	00023f9b 	.word	0x00023f9b
    8e58:	00021114 	.word	0x00021114
    8e5c:	000211d4 	.word	0x000211d4
    8e60:	00023fa3 	.word	0x00023fa3

00008e64 <bt_get_name>:
}
    8e64:	4800      	ldr	r0, [pc, #0]	; (8e68 <bt_get_name+0x4>)
    8e66:	4770      	bx	lr
    8e68:	20005990 	.word	0x20005990

00008e6c <bt_id_create>:
{
    8e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8e6e:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8e70:	4605      	mov	r5, r0
    8e72:	b930      	cbnz	r0, 8e82 <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8e74:	4b1b      	ldr	r3, [pc, #108]	; (8ee4 <bt_id_create+0x78>)
    8e76:	79dc      	ldrb	r4, [r3, #7]
    8e78:	2c01      	cmp	r4, #1
    8e7a:	d12b      	bne.n	8ed4 <bt_id_create+0x68>
		return -ENOMEM;
    8e7c:	f06f 040b 	mvn.w	r4, #11
    8e80:	e01d      	b.n	8ebe <bt_id_create+0x52>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8e82:	2300      	movs	r3, #0
    8e84:	2207      	movs	r2, #7
    8e86:	4669      	mov	r1, sp
    8e88:	9300      	str	r3, [sp, #0]
    8e8a:	f8cd 3003 	str.w	r3, [sp, #3]
    8e8e:	f015 fb1b 	bl	1e4c8 <memcmp>
    8e92:	2800      	cmp	r0, #0
    8e94:	d0ee      	beq.n	8e74 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8e96:	782b      	ldrb	r3, [r5, #0]
    8e98:	2b01      	cmp	r3, #1
    8e9a:	d104      	bne.n	8ea6 <bt_id_create+0x3a>
    8e9c:	79ab      	ldrb	r3, [r5, #6]
    8e9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8ea2:	2bc0      	cmp	r3, #192	; 0xc0
    8ea4:	d00e      	beq.n	8ec4 <bt_id_create+0x58>
    8ea6:	4b10      	ldr	r3, [pc, #64]	; (8ee8 <bt_id_create+0x7c>)
    8ea8:	4910      	ldr	r1, [pc, #64]	; (8eec <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    8eaa:	4811      	ldr	r0, [pc, #68]	; (8ef0 <bt_id_create+0x84>)
    8eac:	1ac9      	subs	r1, r1, r3
    8eae:	08c9      	lsrs	r1, r1, #3
    8eb0:	0189      	lsls	r1, r1, #6
    8eb2:	f041 0101 	orr.w	r1, r1, #1
    8eb6:	f014 fbf7 	bl	1d6a8 <log_0>
			return -EINVAL;
    8eba:	f06f 0415 	mvn.w	r4, #21
}
    8ebe:	4620      	mov	r0, r4
    8ec0:	b002      	add	sp, #8
    8ec2:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
    8ec4:	4628      	mov	r0, r5
    8ec6:	f7fe fd87 	bl	79d8 <id_find>
    8eca:	2800      	cmp	r0, #0
    8ecc:	dbd2      	blt.n	8e74 <bt_id_create+0x8>
			return -EALREADY;
    8ece:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8ed2:	e7f4      	b.n	8ebe <bt_id_create+0x52>
	new_id = bt_dev.id_count++;
    8ed4:	1c62      	adds	r2, r4, #1
    8ed6:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    8ed8:	4629      	mov	r1, r5
    8eda:	4632      	mov	r2, r6
    8edc:	4620      	mov	r0, r4
    8ede:	f7ff fd19 	bl	8914 <id_create>
	return new_id;
    8ee2:	e7ec      	b.n	8ebe <bt_id_create+0x52>
    8ee4:	20005888 	.word	0x20005888
    8ee8:	00021114 	.word	0x00021114
    8eec:	000211d4 	.word	0x000211d4
    8ef0:	00023fb8 	.word	0x00023fb8

00008ef4 <bt_setup_public_id_addr>:
{
    8ef4:	b570      	push	{r4, r5, r6, lr}
    8ef6:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8ef8:	aa01      	add	r2, sp, #4
    8efa:	2100      	movs	r1, #0
    8efc:	f241 0009 	movw	r0, #4105	; 0x1009
    8f00:	f7ff f864 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    8f04:	4e37      	ldr	r6, [pc, #220]	; (8fe4 <bt_setup_public_id_addr+0xf0>)
    8f06:	4604      	mov	r4, r0
    8f08:	b168      	cbz	r0, 8f26 <bt_setup_public_id_addr+0x32>
    8f0a:	4937      	ldr	r1, [pc, #220]	; (8fe8 <bt_setup_public_id_addr+0xf4>)
    8f0c:	4b37      	ldr	r3, [pc, #220]	; (8fec <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read public address");
    8f0e:	4838      	ldr	r0, [pc, #224]	; (8ff0 <bt_setup_public_id_addr+0xfc>)
    8f10:	1ac9      	subs	r1, r1, r3
    8f12:	08c9      	lsrs	r1, r1, #3
    8f14:	0189      	lsls	r1, r1, #6
    8f16:	f041 0102 	orr.w	r1, r1, #2
    8f1a:	f014 fbc5 	bl	1d6a8 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8f1e:	2300      	movs	r3, #0
    8f20:	71f3      	strb	r3, [r6, #7]
}
    8f22:	b00c      	add	sp, #48	; 0x30
    8f24:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8f26:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8f28:	689d      	ldr	r5, [r3, #8]
    8f2a:	9008      	str	r0, [sp, #32]
    8f2c:	3501      	adds	r5, #1
    8f2e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	return memcmp(a, b, sizeof(*a));
    8f32:	2206      	movs	r2, #6
    8f34:	a908      	add	r1, sp, #32
    8f36:	4628      	mov	r0, r5
    8f38:	f015 fac6 	bl	1e4c8 <memcmp>
    8f3c:	b918      	cbnz	r0, 8f46 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    8f3e:	9801      	ldr	r0, [sp, #4]
    8f40:	f010 fe5a 	bl	19bf8 <net_buf_unref>
    8f44:	e7eb      	b.n	8f1e <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    8f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f4a:	2206      	movs	r2, #6
    8f4c:	a904      	add	r1, sp, #16
    8f4e:	4628      	mov	r0, r5
    8f50:	9304      	str	r3, [sp, #16]
    8f52:	f8ad 3014 	strh.w	r3, [sp, #20]
    8f56:	f015 fab7 	bl	1e4c8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8f5a:	2800      	cmp	r0, #0
    8f5c:	d0ef      	beq.n	8f3e <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    8f5e:	4629      	mov	r1, r5
    8f60:	f10d 0009 	add.w	r0, sp, #9
    8f64:	f015 fc9b 	bl	1e89e <bt_addr_copy>
	net_buf_unref(rsp);
    8f68:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    8f6a:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    8f6e:	f010 fe43 	bl	19bf8 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8f72:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    8f74:	2210      	movs	r2, #16
    8f76:	4621      	mov	r1, r4
    8f78:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    8f7a:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    8f7c:	f015 fadf 	bl	1e53e <memset>
	if (!(bt_dev.vs_commands[1] & BIT(1))) {
    8f80:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    8f84:	079b      	lsls	r3, r3, #30
    8f86:	d510      	bpl.n	8faa <bt_setup_public_id_addr+0xb6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    8f88:	aa04      	add	r2, sp, #16
    8f8a:	4621      	mov	r1, r4
    8f8c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    8f90:	f7ff f81c 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    8f94:	b1c8      	cbz	r0, 8fca <bt_setup_public_id_addr+0xd6>
    8f96:	4914      	ldr	r1, [pc, #80]	; (8fe8 <bt_setup_public_id_addr+0xf4>)
    8f98:	4b14      	ldr	r3, [pc, #80]	; (8fec <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read identity root");
    8f9a:	4816      	ldr	r0, [pc, #88]	; (8ff4 <bt_setup_public_id_addr+0x100>)
    8f9c:	1ac9      	subs	r1, r1, r3
    8f9e:	08c9      	lsrs	r1, r1, #3
    8fa0:	0189      	lsls	r1, r1, #6
    8fa2:	f041 0102 	orr.w	r1, r1, #2
    8fa6:	f014 fb7f 	bl	1d6a8 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    8faa:	a904      	add	r1, sp, #16
    8fac:	a808      	add	r0, sp, #32
    8fae:	f017 f858 	bl	20062 <bt_smp_irk_get>
    8fb2:	b1a8      	cbz	r0, 8fe0 <bt_setup_public_id_addr+0xec>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8fb4:	4810      	ldr	r0, [pc, #64]	; (8ff8 <bt_setup_public_id_addr+0x104>)
    8fb6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    8fba:	f015 fc76 	bl	1e8aa <atomic_or>
	u8_t *irk = NULL;
    8fbe:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    8fc0:	a902      	add	r1, sp, #8
    8fc2:	2000      	movs	r0, #0
    8fc4:	f7ff fca6 	bl	8914 <id_create>
    8fc8:	e7ab      	b.n	8f22 <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    8fca:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    8fcc:	6899      	ldr	r1, [r3, #8]
    8fce:	2210      	movs	r2, #16
    8fd0:	3101      	adds	r1, #1
    8fd2:	a808      	add	r0, sp, #32
    8fd4:	f015 fa88 	bl	1e4e8 <memcpy>
	net_buf_unref(rsp);
    8fd8:	9804      	ldr	r0, [sp, #16]
    8fda:	f010 fe0d 	bl	19bf8 <net_buf_unref>
    8fde:	e7e4      	b.n	8faa <bt_setup_public_id_addr+0xb6>
		irk = ir_irk;
    8fe0:	aa04      	add	r2, sp, #16
    8fe2:	e7ed      	b.n	8fc0 <bt_setup_public_id_addr+0xcc>
    8fe4:	20005888 	.word	0x20005888
    8fe8:	000211d4 	.word	0x000211d4
    8fec:	00021114 	.word	0x00021114
    8ff0:	00023fe6 	.word	0x00023fe6
    8ff4:	00024004 	.word	0x00024004
    8ff8:	200058f8 	.word	0x200058f8

00008ffc <bt_setup_random_id_addr>:
{
    8ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    9000:	4d43      	ldr	r5, [pc, #268]	; (9110 <bt_setup_random_id_addr+0x114>)
    9002:	79ef      	ldrb	r7, [r5, #7]
{
    9004:	b08c      	sub	sp, #48	; 0x30
    9006:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    9008:	b97f      	cbnz	r7, 902a <bt_setup_random_id_addr+0x2e>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    900a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    900e:	f013 0401 	ands.w	r4, r3, #1
    9012:	d115      	bne.n	9040 <bt_setup_random_id_addr+0x44>
    9014:	4b3f      	ldr	r3, [pc, #252]	; (9114 <bt_setup_random_id_addr+0x118>)
    9016:	4940      	ldr	r1, [pc, #256]	; (9118 <bt_setup_random_id_addr+0x11c>)
		BT_WARN("Read Static Addresses command not available");
    9018:	4840      	ldr	r0, [pc, #256]	; (911c <bt_setup_random_id_addr+0x120>)
    901a:	1ac9      	subs	r1, r1, r3
    901c:	08c9      	lsrs	r1, r1, #3
    901e:	0189      	lsls	r1, r1, #6
    9020:	f041 0102 	orr.w	r1, r1, #2
    9024:	f014 fb40 	bl	1d6a8 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9028:	71ec      	strb	r4, [r5, #7]
    902a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    902e:	483c      	ldr	r0, [pc, #240]	; (9120 <bt_setup_random_id_addr+0x124>)
    9030:	f015 fc3b 	bl	1e8aa <atomic_or>
	return bt_id_create(NULL, NULL);
    9034:	2100      	movs	r1, #0
    9036:	4608      	mov	r0, r1
    9038:	f7ff ff18 	bl	8e6c <bt_id_create>
    903c:	4604      	mov	r4, r0
    903e:	e058      	b.n	90f2 <bt_setup_random_id_addr+0xf6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9040:	aa02      	add	r2, sp, #8
    9042:	4639      	mov	r1, r7
    9044:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9048:	f7fe ffc0 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    904c:	4604      	mov	r4, r0
    904e:	b158      	cbz	r0, 9068 <bt_setup_random_id_addr+0x6c>
    9050:	4b30      	ldr	r3, [pc, #192]	; (9114 <bt_setup_random_id_addr+0x118>)
    9052:	4931      	ldr	r1, [pc, #196]	; (9118 <bt_setup_random_id_addr+0x11c>)
		BT_WARN("Failed to read static addresses");
    9054:	4833      	ldr	r0, [pc, #204]	; (9124 <bt_setup_random_id_addr+0x128>)
    9056:	1ac9      	subs	r1, r1, r3
    9058:	08c9      	lsrs	r1, r1, #3
    905a:	0189      	lsls	r1, r1, #6
    905c:	f041 0102 	orr.w	r1, r1, #2
    9060:	f014 fb22 	bl	1d6a8 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9064:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    9066:	e7e0      	b.n	902a <bt_setup_random_id_addr+0x2e>
	rp = (void *)rsp->data;
    9068:	9b02      	ldr	r3, [sp, #8]
    906a:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    906c:	784d      	ldrb	r5, [r1, #1]
    906e:	1e2f      	subs	r7, r5, #0
    9070:	bf18      	it	ne
    9072:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    9074:	4603      	mov	r3, r0
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    9076:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    907a:	429f      	cmp	r7, r3
    907c:	dc3d      	bgt.n	90fa <bt_setup_random_id_addr+0xfe>
	net_buf_unref(rsp);
    907e:	9802      	ldr	r0, [sp, #8]
    9080:	f010 fdba 	bl	19bf8 <net_buf_unref>
	if (!cnt) {
    9084:	b94d      	cbnz	r5, 909a <bt_setup_random_id_addr+0x9e>
    9086:	4924      	ldr	r1, [pc, #144]	; (9118 <bt_setup_random_id_addr+0x11c>)
    9088:	4b22      	ldr	r3, [pc, #136]	; (9114 <bt_setup_random_id_addr+0x118>)
		BT_WARN("No static addresses stored in controller");
    908a:	4827      	ldr	r0, [pc, #156]	; (9128 <bt_setup_random_id_addr+0x12c>)
    908c:	1ac9      	subs	r1, r1, r3
    908e:	08c9      	lsrs	r1, r1, #3
    9090:	0189      	lsls	r1, r1, #6
    9092:	f041 0102 	orr.w	r1, r1, #2
    9096:	f014 fb07 	bl	1d6a8 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    909a:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    909c:	2d00      	cmp	r5, #0
    909e:	d0c4      	beq.n	902a <bt_setup_random_id_addr+0x2e>
    90a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 9120 <bt_setup_random_id_addr+0x124>
    90a4:	2500      	movs	r5, #0
    90a6:	fa5f f885 	uxtb.w	r8, r5
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    90aa:	2716      	movs	r7, #22
    90ac:	fb07 f708 	mul.w	r7, r7, r8
    90b0:	1db8      	adds	r0, r7, #6
    90b2:	ab06      	add	r3, sp, #24
    90b4:	a902      	add	r1, sp, #8
    90b6:	4418      	add	r0, r3
    90b8:	f016 ffd3 	bl	20062 <bt_smp_irk_get>
    90bc:	b320      	cbz	r0, 9108 <bt_setup_random_id_addr+0x10c>
    90be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    90c2:	4650      	mov	r0, sl
    90c4:	f015 fbf1 	bl	1e8aa <atomic_or>
				u8_t *irk = NULL;
    90c8:	f04f 0900 	mov.w	r9, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    90cc:	ab06      	add	r3, sp, #24
    90ce:	19d9      	adds	r1, r3, r7
    90d0:	f10d 0001 	add.w	r0, sp, #1
    90d4:	f015 fbe3 	bl	1e89e <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    90d8:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    90da:	464a      	mov	r2, r9
    90dc:	4669      	mov	r1, sp
    90de:	4640      	mov	r0, r8
				addr.type = BT_ADDR_LE_RANDOM;
    90e0:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    90e4:	3501      	adds	r5, #1
    90e6:	f7ff fc15 	bl	8914 <id_create>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    90ea:	79f2      	ldrb	r2, [r6, #7]
    90ec:	b2eb      	uxtb	r3, r5
    90ee:	429a      	cmp	r2, r3
    90f0:	d8d9      	bhi.n	90a6 <bt_setup_random_id_addr+0xaa>
}
    90f2:	4620      	mov	r0, r4
    90f4:	b00c      	add	sp, #48	; 0x30
    90f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    90fa:	2216      	movs	r2, #22
    90fc:	4641      	mov	r1, r8
    90fe:	a806      	add	r0, sp, #24
    9100:	f015 f9f2 	bl	1e4e8 <memcpy>
	for (i = 0; i < cnt; i++) {
    9104:	2301      	movs	r3, #1
    9106:	e7b8      	b.n	907a <bt_setup_random_id_addr+0x7e>
					irk = ir_irk;
    9108:	f10d 0908 	add.w	r9, sp, #8
    910c:	e7de      	b.n	90cc <bt_setup_random_id_addr+0xd0>
    910e:	bf00      	nop
    9110:	20005888 	.word	0x20005888
    9114:	00021114 	.word	0x00021114
    9118:	000211d4 	.word	0x000211d4
    911c:	00024021 	.word	0x00024021
    9120:	200058f8 	.word	0x200058f8
    9124:	0002404d 	.word	0x0002404d
    9128:	0002406d 	.word	0x0002406d

0000912c <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9130:	4ca7      	ldr	r4, [pc, #668]	; (93d0 <bt_le_adv_start_internal+0x2a4>)
    9132:	b08b      	sub	sp, #44	; 0x2c
    9134:	4605      	mov	r5, r0
    9136:	f104 0070 	add.w	r0, r4, #112	; 0x70
    913a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    913e:	9102      	str	r1, [sp, #8]
    9140:	4693      	mov	fp, r2
    9142:	4699      	mov	r9, r3
    9144:	f015 fba5 	bl	1e892 <atomic_get>
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9148:	f010 0f02 	tst.w	r0, #2
    914c:	4627      	mov	r7, r4
    914e:	f000 8135 	beq.w	93bc <bt_le_adv_start_internal+0x290>
	if (param->id >= bt_dev.id_count ||
    9152:	7828      	ldrb	r0, [r5, #0]
    9154:	79e3      	ldrb	r3, [r4, #7]
    9156:	4283      	cmp	r3, r0
    9158:	d802      	bhi.n	9160 <bt_le_adv_start_internal+0x34>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    915a:	f06f 0415 	mvn.w	r4, #21
    915e:	e0b3      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9160:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9164:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9166:	2207      	movs	r2, #7
    9168:	a906      	add	r1, sp, #24
    916a:	4420      	add	r0, r4
    916c:	9306      	str	r3, [sp, #24]
    916e:	f8cd 301b 	str.w	r3, [sp, #27]
    9172:	f015 f9a9 	bl	1e4c8 <memcmp>
	if (param->id >= bt_dev.id_count ||
    9176:	2800      	cmp	r0, #0
    9178:	d0ef      	beq.n	915a <bt_le_adv_start_internal+0x2e>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    917a:	786b      	ldrb	r3, [r5, #1]
    917c:	07de      	lsls	r6, r3, #31
    917e:	d405      	bmi.n	918c <bt_le_adv_start_internal+0x60>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    9180:	7c22      	ldrb	r2, [r4, #16]
    9182:	2a08      	cmp	r2, #8
    9184:	d802      	bhi.n	918c <bt_le_adv_start_internal+0x60>
    9186:	886a      	ldrh	r2, [r5, #2]
    9188:	2a9f      	cmp	r2, #159	; 0x9f
    918a:	d9e6      	bls.n	915a <bt_le_adv_start_internal+0x2e>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    918c:	06dc      	lsls	r4, r3, #27
    918e:	d402      	bmi.n	9196 <bt_le_adv_start_internal+0x6a>
    9190:	f1b8 0f00 	cmp.w	r8, #0
    9194:	d108      	bne.n	91a8 <bt_le_adv_start_internal+0x7c>
		if (param->interval_min > param->interval_max ||
    9196:	886a      	ldrh	r2, [r5, #2]
    9198:	88ab      	ldrh	r3, [r5, #4]
    919a:	429a      	cmp	r2, r3
    919c:	d8dd      	bhi.n	915a <bt_le_adv_start_internal+0x2e>
    919e:	2a1f      	cmp	r2, #31
    91a0:	d9db      	bls.n	915a <bt_le_adv_start_internal+0x2e>
		    param->interval_min < 0x0020 ||
    91a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    91a6:	d8d8      	bhi.n	915a <bt_le_adv_start_internal+0x2e>
    91a8:	488a      	ldr	r0, [pc, #552]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    91aa:	f015 fb72 	bl	1e892 <atomic_get>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    91ae:	f3c0 1140 	ubfx	r1, r0, #5, #1
    91b2:	0680      	lsls	r0, r0, #26
    91b4:	f100 8105 	bmi.w	93c2 <bt_le_adv_start_internal+0x296>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    91b8:	220f      	movs	r2, #15
    91ba:	a806      	add	r0, sp, #24
    91bc:	f015 f9bf 	bl	1e53e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    91c0:	886b      	ldrh	r3, [r5, #2]
    91c2:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    91c6:	88ab      	ldrh	r3, [r5, #4]
    91c8:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = 0x07;
    91cc:	2307      	movs	r3, #7

	if (bt_dev.adv_id != param->id) {
    91ce:	7a3a      	ldrb	r2, [r7, #8]
	set_param.channel_map  = 0x07;
    91d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (bt_dev.adv_id != param->id) {
    91d4:	782b      	ldrb	r3, [r5, #0]
    91d6:	429a      	cmp	r2, r3
    91d8:	d004      	beq.n	91e4 <bt_le_adv_start_internal+0xb8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    91da:	487e      	ldr	r0, [pc, #504]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    91dc:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
    91e0:	f015 fb48 	bl	1e874 <atomic_and>
#endif /* defined(CONFIG_BT_WHITELIST) */
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
	}

	/* Set which local identity address we're advertising with */
	bt_dev.adv_id = param->id;
    91e4:	782e      	ldrb	r6, [r5, #0]
    91e6:	723e      	strb	r6, [r7, #8]
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    91e8:	2300      	movs	r3, #0
    91ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	id_addr = &bt_dev.id_addr[param->id];

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    91ee:	786b      	ldrb	r3, [r5, #1]
    91f0:	f013 0a01 	ands.w	sl, r3, #1
    91f4:	f003 0204 	and.w	r2, r3, #4
    91f8:	d06d      	beq.n	92d6 <bt_le_adv_start_internal+0x1aa>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    91fa:	2a00      	cmp	r2, #0
    91fc:	d150      	bne.n	92a0 <bt_le_adv_start_internal+0x174>
		    !(param->options & BT_LE_ADV_OPT_USE_IDENTITY)) {
			err = le_set_private_addr(param->id);
    91fe:	4630      	mov	r0, r6
    9200:	f7fe ff56 	bl	80b0 <le_set_private_addr>
			if (err) {
    9204:	4604      	mov	r4, r0
    9206:	2800      	cmp	r0, #0
    9208:	d15e      	bne.n	92c8 <bt_le_adv_start_internal+0x19c>
				return err;
			}

			if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    920a:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
    920e:	0652      	lsls	r2, r2, #25
				set_param.own_addr_type =
    9210:	bf4c      	ite	mi
    9212:	2203      	movmi	r2, #3
					BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
			} else {
				set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9214:	2201      	movpl	r2, #1
    9216:	f88d 201d 	strb.w	r2, [sp, #29]
			}

			set_param.own_addr_type = id_addr->type;
		}

		if (dir_adv) {
    921a:	f1b8 0f00 	cmp.w	r8, #0
    921e:	d057      	beq.n	92d0 <bt_le_adv_start_internal+0x1a4>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    9220:	786a      	ldrb	r2, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    9222:	f012 0f10 	tst.w	r2, #16
    9226:	bf18      	it	ne
    9228:	f04f 0a04 	movne.w	sl, #4
			} else {
				set_param.type = BT_LE_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, peer);
    922c:	4641      	mov	r1, r8
    922e:	f10d 001e 	add.w	r0, sp, #30
    9232:	f88d a01c 	strb.w	sl, [sp, #28]
    9236:	f015 fb35 	bl	1e8a4 <bt_addr_le_copy>
		} else {
			set_param.type = BT_LE_ADV_NONCONN_IND;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    923a:	210f      	movs	r1, #15
    923c:	f242 0006 	movw	r0, #8198	; 0x2006
    9240:	f7fe fd6a 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    9244:	4604      	mov	r4, r0
    9246:	2800      	cmp	r0, #0
    9248:	f000 80be 	beq.w	93c8 <bt_le_adv_start_internal+0x29c>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    924c:	220f      	movs	r2, #15
    924e:	a906      	add	r1, sp, #24
    9250:	3008      	adds	r0, #8
    9252:	f016 ff7c 	bl	2014e <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9256:	4621      	mov	r1, r4
    9258:	2200      	movs	r2, #0
    925a:	f242 0006 	movw	r0, #8198	; 0x2006
    925e:	f7fe feb5 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    9262:	4604      	mov	r4, r0
    9264:	bb80      	cbnz	r0, 92c8 <bt_le_adv_start_internal+0x19c>
		return err;
	}

	if (!dir_adv) {
    9266:	f1b8 0f00 	cmp.w	r8, #0
    926a:	d05b      	beq.n	9324 <bt_le_adv_start_internal+0x1f8>
	struct bt_conn *conn = NULL;
    926c:	2600      	movs	r6, #0

			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		}
	}

	err = set_advertise_enable(true);
    926e:	2001      	movs	r0, #1
    9270:	f7fe ff4c 	bl	810c <set_advertise_enable>
	if (err) {
    9274:	4604      	mov	r4, r0
    9276:	2800      	cmp	r0, #0
    9278:	d07d      	beq.n	9376 <bt_le_adv_start_internal+0x24a>
    927a:	4957      	ldr	r1, [pc, #348]	; (93d8 <bt_le_adv_start_internal+0x2ac>)
    927c:	4b57      	ldr	r3, [pc, #348]	; (93dc <bt_le_adv_start_internal+0x2b0>)
		BT_ERR("Failed to start advertiser");
    927e:	4858      	ldr	r0, [pc, #352]	; (93e0 <bt_le_adv_start_internal+0x2b4>)
    9280:	1ac9      	subs	r1, r1, r3
    9282:	08c9      	lsrs	r1, r1, #3
    9284:	0189      	lsls	r1, r1, #6
    9286:	f041 0101 	orr.w	r1, r1, #1
    928a:	f014 fa0d 	bl	1d6a8 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    928e:	b1de      	cbz	r6, 92c8 <bt_le_adv_start_internal+0x19c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9290:	4630      	mov	r0, r6
    9292:	2100      	movs	r1, #0
    9294:	f000 fe70 	bl	9f78 <bt_conn_set_state>
			bt_conn_unref(conn);
    9298:	4630      	mov	r0, r6
    929a:	f015 fca6 	bl	1ebea <bt_conn_unref>
    929e:	e013      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    92a0:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
    92a4:	00f2      	lsls	r2, r6, #3
    92a6:	5c79      	ldrb	r1, [r7, r1]
    92a8:	2901      	cmp	r1, #1
    92aa:	d002      	beq.n	92b2 <bt_le_adv_start_internal+0x186>
			set_param.own_addr_type = id_addr->type;
    92ac:	1b96      	subs	r6, r2, r6
    92ae:	5dba      	ldrb	r2, [r7, r6]
    92b0:	e7b1      	b.n	9216 <bt_le_adv_start_internal+0xea>
				err = set_random_address(&id_addr->a);
    92b2:	2007      	movs	r0, #7
    92b4:	fb10 1006 	smlabb	r0, r0, r6, r1
    92b8:	4438      	add	r0, r7
    92ba:	9203      	str	r2, [sp, #12]
    92bc:	f7fe fecc 	bl	8058 <set_random_address>
				if (err) {
    92c0:	9a03      	ldr	r2, [sp, #12]
    92c2:	4604      	mov	r4, r0
    92c4:	2800      	cmp	r0, #0
    92c6:	d0f1      	beq.n	92ac <bt_le_adv_start_internal+0x180>

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    92c8:	4620      	mov	r0, r4
    92ca:	b00b      	add	sp, #44	; 0x2c
    92cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_param.type = BT_LE_ADV_IND;
    92d0:	f88d 801c 	strb.w	r8, [sp, #28]
    92d4:	e7b1      	b.n	923a <bt_le_adv_start_internal+0x10e>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    92d6:	b1ea      	cbz	r2, 9314 <bt_le_adv_start_internal+0x1e8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    92d8:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
    92dc:	00f2      	lsls	r2, r6, #3
    92de:	5c79      	ldrb	r1, [r7, r1]
    92e0:	2901      	cmp	r1, #1
    92e2:	d115      	bne.n	9310 <bt_le_adv_start_internal+0x1e4>
				err = set_random_address(&id_addr->a);
    92e4:	2007      	movs	r0, #7
    92e6:	fb10 1006 	smlabb	r0, r0, r6, r1
    92ea:	4438      	add	r0, r7
    92ec:	9203      	str	r2, [sp, #12]
    92ee:	f7fe feb3 	bl	8058 <set_random_address>
    92f2:	9a03      	ldr	r2, [sp, #12]
    92f4:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    92f6:	1b96      	subs	r6, r2, r6
    92f8:	5dbb      	ldrb	r3, [r7, r6]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    92fa:	f88d 301d 	strb.w	r3, [sp, #29]
		if (err) {
    92fe:	2c00      	cmp	r4, #0
    9300:	d1e2      	bne.n	92c8 <bt_le_adv_start_internal+0x19c>
		if (sd) {
    9302:	f1b9 0f00 	cmp.w	r9, #0
    9306:	d00b      	beq.n	9320 <bt_le_adv_start_internal+0x1f4>
			set_param.type = BT_LE_ADV_SCAN_IND;
    9308:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    930a:	f88d 301c 	strb.w	r3, [sp, #28]
    930e:	e794      	b.n	923a <bt_le_adv_start_internal+0x10e>
	int err = 0;
    9310:	4654      	mov	r4, sl
    9312:	e7f0      	b.n	92f6 <bt_le_adv_start_internal+0x1ca>
			err = le_set_private_addr(param->id);
    9314:	4630      	mov	r0, r6
    9316:	f7fe fecb 	bl	80b0 <le_set_private_addr>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    931a:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    931c:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    931e:	e7ec      	b.n	92fa <bt_le_adv_start_internal+0x1ce>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    9320:	2303      	movs	r3, #3
    9322:	e7f2      	b.n	930a <bt_le_adv_start_internal+0x1de>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    9324:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    9326:	9802      	ldr	r0, [sp, #8]
    9328:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    932c:	f003 0301 	and.w	r3, r3, #1
    9330:	9201      	str	r2, [sp, #4]
    9332:	9300      	str	r3, [sp, #0]
    9334:	464a      	mov	r2, r9
    9336:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9338:	4659      	mov	r1, fp
    933a:	f7ff f805 	bl	8348 <le_adv_update>
		if (err) {
    933e:	4604      	mov	r4, r0
    9340:	2800      	cmp	r0, #0
    9342:	d1c1      	bne.n	92c8 <bt_le_adv_start_internal+0x19c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9344:	786b      	ldrb	r3, [r5, #1]
    9346:	07db      	lsls	r3, r3, #31
    9348:	d590      	bpl.n	926c <bt_le_adv_start_internal+0x140>
			conn = bt_conn_add_le(param->id, BT_ADDR_LE_NONE);
    934a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    934e:	9304      	str	r3, [sp, #16]
    9350:	7828      	ldrb	r0, [r5, #0]
    9352:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9356:	a904      	add	r1, sp, #16
    9358:	f8ad 3014 	strh.w	r3, [sp, #20]
    935c:	f88d 3016 	strb.w	r3, [sp, #22]
    9360:	f000 fdca 	bl	9ef8 <bt_conn_add_le>
			if (!conn) {
    9364:	4606      	mov	r6, r0
    9366:	b910      	cbnz	r0, 936e <bt_le_adv_start_internal+0x242>
				return -ENOMEM;
    9368:	f06f 040b 	mvn.w	r4, #11
    936c:	e7ac      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    936e:	2103      	movs	r1, #3
    9370:	f000 fe02 	bl	9f78 <bt_conn_set_state>
    9374:	e77b      	b.n	926e <bt_le_adv_start_internal+0x142>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9376:	b116      	cbz	r6, 937e <bt_le_adv_start_internal+0x252>
		bt_conn_unref(conn);
    9378:	4630      	mov	r0, r6
    937a:	f015 fc36 	bl	1ebea <bt_conn_unref>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    937e:	786a      	ldrb	r2, [r5, #1]
    9380:	4814      	ldr	r0, [pc, #80]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    9382:	f082 0202 	eor.w	r2, r2, #2
    9386:	f3c2 0240 	ubfx	r2, r2, #1, #1
    938a:	2109      	movs	r1, #9
    938c:	f015 fa9c 	bl	1e8c8 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    9390:	786a      	ldrb	r2, [r5, #1]
    9392:	4810      	ldr	r0, [pc, #64]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    9394:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9398:	2106      	movs	r1, #6
    939a:	f015 fa95 	bl	1e8c8 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    939e:	786a      	ldrb	r2, [r5, #1]
    93a0:	480c      	ldr	r0, [pc, #48]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    93a2:	f002 0201 	and.w	r2, r2, #1
    93a6:	2107      	movs	r1, #7
    93a8:	f015 fa8e 	bl	1e8c8 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
    93ac:	786a      	ldrb	r2, [r5, #1]
    93ae:	4809      	ldr	r0, [pc, #36]	; (93d4 <bt_le_adv_start_internal+0x2a8>)
    93b0:	f3c2 0280 	ubfx	r2, r2, #2, #1
    93b4:	2108      	movs	r1, #8
    93b6:	f015 fa87 	bl	1e8c8 <atomic_set_bit_to>
	return 0;
    93ba:	e785      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
		return -EAGAIN;
    93bc:	f06f 040a 	mvn.w	r4, #10
    93c0:	e782      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
		return -EALREADY;
    93c2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    93c6:	e77f      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
		return -ENOBUFS;
    93c8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    93cc:	e77c      	b.n	92c8 <bt_le_adv_start_internal+0x19c>
    93ce:	bf00      	nop
    93d0:	20005888 	.word	0x20005888
    93d4:	200058f8 	.word	0x200058f8
    93d8:	000211d4 	.word	0x000211d4
    93dc:	00021114 	.word	0x00021114
    93e0:	00024096 	.word	0x00024096

000093e4 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    93e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    93e6:	4c1c      	ldr	r4, [pc, #112]	; (9458 <bt_le_adv_stop+0x74>)
    93e8:	f46f 7100 	mvn.w	r1, #512	; 0x200
    93ec:	f104 0070 	add.w	r0, r4, #112	; 0x70
    93f0:	f015 fa40 	bl	1e874 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    93f4:	f104 0070 	add.w	r0, r4, #112	; 0x70
    93f8:	f015 fa4b 	bl	1e892 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    93fc:	0682      	lsls	r2, r0, #26
    93fe:	f3c0 1340 	ubfx	r3, r0, #5, #1
    9402:	d527      	bpl.n	9454 <bt_le_adv_stop+0x70>
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL)) {
		struct bt_conn *conn;

		conn = bt_conn_lookup_state_le(bt_dev.adv_id, BT_ADDR_LE_NONE,
    9404:	4b15      	ldr	r3, [pc, #84]	; (945c <bt_le_adv_stop+0x78>)
    9406:	6818      	ldr	r0, [r3, #0]
    9408:	889a      	ldrh	r2, [r3, #4]
    940a:	9000      	str	r0, [sp, #0]
    940c:	799b      	ldrb	r3, [r3, #6]
    940e:	f8ad 2004 	strh.w	r2, [sp, #4]
    9412:	7a20      	ldrb	r0, [r4, #8]
    9414:	f88d 3006 	strb.w	r3, [sp, #6]
    9418:	2203      	movs	r2, #3
    941a:	4669      	mov	r1, sp
    941c:	f000 fea2 	bl	a164 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_ADV);
		if (conn) {
    9420:	4605      	mov	r5, r0
    9422:	b128      	cbz	r0, 9430 <bt_le_adv_stop+0x4c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9424:	2100      	movs	r1, #0
    9426:	f000 fda7 	bl	9f78 <bt_conn_set_state>
			bt_conn_unref(conn);
    942a:	4628      	mov	r0, r5
    942c:	f015 fbdd 	bl	1ebea <bt_conn_unref>
		}

		conn = bt_conn_lookup_state_le(bt_dev.adv_id, NULL,
    9430:	7a20      	ldrb	r0, [r4, #8]
    9432:	2204      	movs	r2, #4
    9434:	2100      	movs	r1, #0
    9436:	f000 fe95 	bl	a164 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_DIR_ADV);
		if (conn) {
    943a:	4604      	mov	r4, r0
    943c:	b128      	cbz	r0, 944a <bt_le_adv_stop+0x66>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    943e:	2100      	movs	r1, #0
    9440:	f000 fd9a 	bl	9f78 <bt_conn_set_state>
			bt_conn_unref(conn);
    9444:	4620      	mov	r0, r4
    9446:	f015 fbd0 	bl	1ebea <bt_conn_unref>
		}
	}

	err = set_advertise_enable(false);
    944a:	2000      	movs	r0, #0
    944c:	f7fe fe5e 	bl	810c <set_advertise_enable>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9450:	b003      	add	sp, #12
    9452:	bd30      	pop	{r4, r5, pc}
		return 0;
    9454:	4618      	mov	r0, r3
    9456:	e7fb      	b.n	9450 <bt_le_adv_stop+0x6c>
    9458:	20005888 	.word	0x20005888
    945c:	000212dc 	.word	0x000212dc

00009460 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    9460:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9462:	481d      	ldr	r0, [pc, #116]	; (94d8 <bt_le_adv_resume+0x78>)
    9464:	f015 fa15 	bl	1e892 <atomic_get>
	struct bt_conn *adv_conn;
	int err;

	BT_ASSERT(atomic_test_bit(bt_dev.flags,
    9468:	0602      	lsls	r2, r0, #24
    946a:	d40c      	bmi.n	9486 <bt_le_adv_resume+0x26>
    946c:	4a1b      	ldr	r2, [pc, #108]	; (94dc <bt_le_adv_resume+0x7c>)
    946e:	491c      	ldr	r1, [pc, #112]	; (94e0 <bt_le_adv_resume+0x80>)
    9470:	481c      	ldr	r0, [pc, #112]	; (94e4 <bt_le_adv_resume+0x84>)
    9472:	f641 036e 	movw	r3, #6254	; 0x186e
    9476:	f012 ffc9 	bl	1c40c <printk>
    947a:	4040      	eors	r0, r0
    947c:	f380 8811 	msr	BASEPRI, r0
    9480:	f04f 0003 	mov.w	r0, #3
    9484:	df02      	svc	2
				  BT_DEV_ADVERTISING_CONNECTABLE));

	adv_conn = bt_conn_add_le(bt_dev.adv_id, BT_ADDR_LE_NONE);
    9486:	4b18      	ldr	r3, [pc, #96]	; (94e8 <bt_le_adv_resume+0x88>)
    9488:	4d18      	ldr	r5, [pc, #96]	; (94ec <bt_le_adv_resume+0x8c>)
    948a:	6818      	ldr	r0, [r3, #0]
    948c:	889a      	ldrh	r2, [r3, #4]
    948e:	9000      	str	r0, [sp, #0]
    9490:	799b      	ldrb	r3, [r3, #6]
    9492:	7a28      	ldrb	r0, [r5, #8]
    9494:	f8ad 2004 	strh.w	r2, [sp, #4]
    9498:	4669      	mov	r1, sp
    949a:	f88d 3006 	strb.w	r3, [sp, #6]
    949e:	f000 fd2b 	bl	9ef8 <bt_conn_add_le>
	if (!adv_conn) {
    94a2:	4604      	mov	r4, r0
    94a4:	b1b0      	cbz	r0, 94d4 <bt_le_adv_resume+0x74>
		return;
	}

	bt_conn_set_state(adv_conn, BT_CONN_CONNECT_ADV);
    94a6:	2103      	movs	r1, #3
    94a8:	f000 fd66 	bl	9f78 <bt_conn_set_state>
    94ac:	f105 0070 	add.w	r0, r5, #112	; 0x70
    94b0:	f015 f9ef 	bl	1e892 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    94b4:	05c3      	lsls	r3, r0, #23
    94b6:	d402      	bmi.n	94be <bt_le_adv_resume+0x5e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY)) {
		le_set_private_addr(bt_dev.adv_id);
    94b8:	7a28      	ldrb	r0, [r5, #8]
    94ba:	f7fe fdf9 	bl	80b0 <le_set_private_addr>
	}

	err = set_advertise_enable(true);
    94be:	2001      	movs	r0, #1
    94c0:	f7fe fe24 	bl	810c <set_advertise_enable>
	if (err) {
    94c4:	b118      	cbz	r0, 94ce <bt_le_adv_resume+0x6e>
		bt_conn_set_state(adv_conn, BT_CONN_DISCONNECTED);
    94c6:	2100      	movs	r1, #0
    94c8:	4620      	mov	r0, r4
    94ca:	f000 fd55 	bl	9f78 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(adv_conn);
    94ce:	4620      	mov	r0, r4
    94d0:	f015 fb8b 	bl	1ebea <bt_conn_unref>
}
    94d4:	b003      	add	sp, #12
    94d6:	bd30      	pop	{r4, r5, pc}
    94d8:	200058f8 	.word	0x200058f8
    94dc:	00023a04 	.word	0x00023a04
    94e0:	000240b1 	.word	0x000240b1
    94e4:	00023a41 	.word	0x00023a41
    94e8:	000212dc 	.word	0x000212dc
    94ec:	20005888 	.word	0x20005888

000094f0 <hci_disconn_complete>:
{
    94f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    94f2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    94f4:	7835      	ldrb	r5, [r6, #0]
    94f6:	bb85      	cbnz	r5, 955a <hci_disconn_complete+0x6a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    94f8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    94fc:	4638      	mov	r0, r7
    94fe:	f000 fdfb 	bl	a0f8 <bt_conn_lookup_handle>
	if (!conn) {
    9502:	4604      	mov	r4, r0
    9504:	b9c0      	cbnz	r0, 9538 <hci_disconn_complete+0x48>
    9506:	4a15      	ldr	r2, [pc, #84]	; (955c <hci_disconn_complete+0x6c>)
    9508:	4b15      	ldr	r3, [pc, #84]	; (9560 <hci_disconn_complete+0x70>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    950a:	4816      	ldr	r0, [pc, #88]	; (9564 <hci_disconn_complete+0x74>)
    950c:	1ad2      	subs	r2, r2, r3
    950e:	08d2      	lsrs	r2, r2, #3
    9510:	0192      	lsls	r2, r2, #6
    9512:	f042 0201 	orr.w	r2, r2, #1
    9516:	4639      	mov	r1, r7
    9518:	f014 f8d3 	bl	1d6c2 <log_1>
    951c:	4812      	ldr	r0, [pc, #72]	; (9568 <hci_disconn_complete+0x78>)
    951e:	f015 f9b8 	bl	1e892 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9522:	0582      	lsls	r2, r0, #22
    9524:	d519      	bpl.n	955a <hci_disconn_complete+0x6a>
    9526:	4810      	ldr	r0, [pc, #64]	; (9568 <hci_disconn_complete+0x78>)
    9528:	f015 f9b3 	bl	1e892 <atomic_get>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    952c:	0683      	lsls	r3, r0, #26
    952e:	d414      	bmi.n	955a <hci_disconn_complete+0x6a>
}
    9530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    9534:	f7ff bf94 	b.w	9460 <bt_le_adv_resume>
	conn->err = evt->reason;
    9538:	78f3      	ldrb	r3, [r6, #3]
    953a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    953c:	4629      	mov	r1, r5
    953e:	f000 fd1b 	bl	9f78 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    9542:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    9544:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    9546:	2b01      	cmp	r3, #1
		bt_conn_unref(conn);
    9548:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    954a:	d003      	beq.n	9554 <hci_disconn_complete+0x64>
}
    954c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    9550:	f015 bb4b 	b.w	1ebea <bt_conn_unref>
	bt_conn_unref(conn);
    9554:	f015 fb49 	bl	1ebea <bt_conn_unref>
    9558:	e7e0      	b.n	951c <hci_disconn_complete+0x2c>
}
    955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    955c:	000211d4 	.word	0x000211d4
    9560:	00021114 	.word	0x00021114
    9564:	00023932 	.word	0x00023932
    9568:	200058f8 	.word	0x200058f8

0000956c <enh_conn_complete>:
{
    956c:	b5f0      	push	{r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    956e:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
	u16_t handle = sys_le16_to_cpu(evt->handle);
    9572:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    9576:	b085      	sub	sp, #20
    9578:	4605      	mov	r5, r0
    957a:	485b      	ldr	r0, [pc, #364]	; (96e8 <enh_conn_complete+0x17c>)
    957c:	f015 f97a 	bl	1e874 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9580:	0381      	lsls	r1, r0, #14
	u16_t handle = sys_le16_to_cpu(evt->handle);
    9582:	b2be      	uxth	r6, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9584:	d504      	bpl.n	9590 <enh_conn_complete+0x24>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id, NULL);
    9586:	4959      	ldr	r1, [pc, #356]	; (96ec <enh_conn_complete+0x180>)
    9588:	2200      	movs	r2, #0
    958a:	2002      	movs	r0, #2
    958c:	f005 f888 	bl	e6a0 <bt_keys_foreach>
	if (evt->status) {
    9590:	7829      	ldrb	r1, [r5, #0]
    9592:	b359      	cbz	r1, 95ec <enh_conn_complete+0x80>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9594:	293c      	cmp	r1, #60	; 0x3c
    9596:	d11e      	bne.n	95d6 <enh_conn_complete+0x6a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9598:	f06f 0120 	mvn.w	r1, #32
    959c:	4852      	ldr	r0, [pc, #328]	; (96e8 <enh_conn_complete+0x17c>)
    959e:	f015 f969 	bl	1e874 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    95a2:	2000      	movs	r0, #0
    95a4:	f7fe f930 	bl	7808 <find_pending_connect.part.0>
			if (!conn) {
    95a8:	4604      	mov	r4, r0
    95aa:	b958      	cbnz	r0, 95c4 <enh_conn_complete+0x58>
    95ac:	4950      	ldr	r1, [pc, #320]	; (96f0 <enh_conn_complete+0x184>)
    95ae:	4b51      	ldr	r3, [pc, #324]	; (96f4 <enh_conn_complete+0x188>)
				BT_ERR("No pending slave connection");
    95b0:	4851      	ldr	r0, [pc, #324]	; (96f8 <enh_conn_complete+0x18c>)
    95b2:	1ac9      	subs	r1, r1, r3
    95b4:	08c9      	lsrs	r1, r1, #3
    95b6:	0189      	lsls	r1, r1, #6
    95b8:	f041 0101 	orr.w	r1, r1, #1
    95bc:	f014 f874 	bl	1d6a8 <log_0>
}
    95c0:	b005      	add	sp, #20
    95c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			conn->err = evt->status;
    95c4:	782b      	ldrb	r3, [r5, #0]
    95c6:	7303      	strb	r3, [r0, #12]
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    95c8:	2100      	movs	r1, #0
    95ca:	f000 fcd5 	bl	9f78 <bt_conn_set_state>
	bt_conn_unref(conn);
    95ce:	4620      	mov	r0, r4
    95d0:	f015 fb0b 	bl	1ebea <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    95d4:	e7f4      	b.n	95c0 <enh_conn_complete+0x54>
    95d6:	4b47      	ldr	r3, [pc, #284]	; (96f4 <enh_conn_complete+0x188>)
    95d8:	4a45      	ldr	r2, [pc, #276]	; (96f0 <enh_conn_complete+0x184>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    95da:	4848      	ldr	r0, [pc, #288]	; (96fc <enh_conn_complete+0x190>)
    95dc:	1ad2      	subs	r2, r2, r3
    95de:	08d2      	lsrs	r2, r2, #3
    95e0:	0192      	lsls	r2, r2, #6
    95e2:	f042 0202 	orr.w	r2, r2, #2
    95e6:	f014 f86c 	bl	1d6c2 <log_1>
		return;
    95ea:	e7e9      	b.n	95c0 <enh_conn_complete+0x54>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    95ec:	1d2c      	adds	r4, r5, #4
    95ee:	4621      	mov	r1, r4
    95f0:	a802      	add	r0, sp, #8
    95f2:	f015 f957 	bl	1e8a4 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    95f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    95fa:	3b02      	subs	r3, #2
    95fc:	b2db      	uxtb	r3, r3
    95fe:	2b01      	cmp	r3, #1
    9600:	d82a      	bhi.n	9658 <enh_conn_complete+0xec>
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9602:	f105 0111 	add.w	r1, r5, #17
    9606:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    960a:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    960e:	f015 f946 	bl	1e89e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9612:	2301      	movs	r3, #1
    9614:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9618:	78eb      	ldrb	r3, [r5, #3]
    961a:	2b01      	cmp	r3, #1
    961c:	d10c      	bne.n	9638 <enh_conn_complete+0xcc>
    961e:	a802      	add	r0, sp, #8
    9620:	f7fe f8f2 	bl	7808 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9624:	78eb      	ldrb	r3, [r5, #3]
    9626:	2b01      	cmp	r3, #1
    9628:	4604      	mov	r4, r0
    962a:	d104      	bne.n	9636 <enh_conn_complete+0xca>
    962c:	482e      	ldr	r0, [pc, #184]	; (96e8 <enh_conn_complete+0x17c>)
    962e:	f06f 0120 	mvn.w	r1, #32
    9632:	f015 f91f 	bl	1e874 <atomic_and>
	if (!conn) {
    9636:	b9a4      	cbnz	r4, 9662 <enh_conn_complete+0xf6>
    9638:	4b2e      	ldr	r3, [pc, #184]	; (96f4 <enh_conn_complete+0x188>)
    963a:	4a2d      	ldr	r2, [pc, #180]	; (96f0 <enh_conn_complete+0x184>)
		BT_ERR("Unable to add new conn for handle %u", handle);
    963c:	4830      	ldr	r0, [pc, #192]	; (9700 <enh_conn_complete+0x194>)
    963e:	1ad2      	subs	r2, r2, r3
    9640:	08d2      	lsrs	r2, r2, #3
    9642:	0192      	lsls	r2, r2, #6
    9644:	4631      	mov	r1, r6
    9646:	f042 0201 	orr.w	r2, r2, #1
    964a:	f014 f83a 	bl	1d6c2 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    964e:	2107      	movs	r1, #7
    9650:	4630      	mov	r0, r6
    9652:	f015 f9af 	bl	1e9b4 <bt_hci_disconnect>
		return;
    9656:	e7b3      	b.n	95c0 <enh_conn_complete+0x54>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9658:	4621      	mov	r1, r4
    965a:	4668      	mov	r0, sp
    965c:	f015 f922 	bl	1e8a4 <bt_addr_le_copy>
    9660:	e7da      	b.n	9618 <enh_conn_complete+0xac>
	conn->handle = handle;
    9662:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9664:	a902      	add	r1, sp, #8
	conn->handle = handle;
    9666:	f820 7b70 	strh.w	r7, [r0], #112
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    966a:	f015 f91b 	bl	1e8a4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    966e:	7e2a      	ldrb	r2, [r5, #24]
    9670:	7deb      	ldrb	r3, [r5, #23]
    9672:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9676:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    967a:	7eaa      	ldrb	r2, [r5, #26]
    967c:	7e6b      	ldrb	r3, [r5, #25]
    967e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9682:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9686:	7eeb      	ldrb	r3, [r5, #27]
    9688:	7f2a      	ldrb	r2, [r5, #28]
    968a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    968e:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
	conn->role = evt->role;
    9692:	78ee      	ldrb	r6, [r5, #3]
    9694:	70e6      	strb	r6, [r4, #3]
	conn->err = 0U;
    9696:	2700      	movs	r7, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9698:	2e01      	cmp	r6, #1
	conn->err = 0U;
    969a:	7327      	strb	r7, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    969c:	d11c      	bne.n	96d8 <enh_conn_complete+0x16c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    969e:	4669      	mov	r1, sp
    96a0:	f104 0077 	add.w	r0, r4, #119	; 0x77
    96a4:	f015 f8fe 	bl	1e8a4 <bt_addr_le_copy>
			bt_addr_copy(&conn->le.resp_addr.a, &evt->local_rpa);
    96a8:	f105 010b 	add.w	r1, r5, #11
    96ac:	f104 007f 	add.w	r0, r4, #127	; 0x7f
    96b0:	f015 f8f5 	bl	1e89e <bt_addr_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    96b4:	4b13      	ldr	r3, [pc, #76]	; (9704 <enh_conn_complete+0x198>)
			conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    96b6:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
    96ba:	f103 0070 	add.w	r0, r3, #112	; 0x70
    96be:	f015 f8e8 	bl	1e892 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    96c2:	0582      	lsls	r2, r0, #22
    96c4:	d508      	bpl.n	96d8 <enh_conn_complete+0x16c>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    96c6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    96ca:	463a      	mov	r2, r7
    96cc:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    96d0:	4313      	orrs	r3, r2
    96d2:	d001      	beq.n	96d8 <enh_conn_complete+0x16c>
			bt_le_adv_resume();
    96d4:	f7ff fec4 	bl	9460 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    96d8:	4620      	mov	r0, r4
    96da:	2106      	movs	r1, #6
    96dc:	f000 fc4c 	bl	9f78 <bt_conn_set_state>
	conn_auto_initiate(conn);
    96e0:	4620      	mov	r0, r4
    96e2:	f7fe fe7b 	bl	83dc <conn_auto_initiate>
    96e6:	e772      	b.n	95ce <enh_conn_complete+0x62>
    96e8:	200058f8 	.word	0x200058f8
    96ec:	0001ea29 	.word	0x0001ea29
    96f0:	000211d4 	.word	0x000211d4
    96f4:	00021114 	.word	0x00021114
    96f8:	000240ef 	.word	0x000240ef
    96fc:	0002410b 	.word	0x0002410b
    9700:	00024124 	.word	0x00024124
    9704:	20005888 	.word	0x20005888

00009708 <le_legacy_conn_complete>:
{
    9708:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    970a:	6884      	ldr	r4, [r0, #8]
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    970c:	4e27      	ldr	r6, [pc, #156]	; (97ac <le_legacy_conn_complete+0xa4>)
	enh.status         = evt->status;
    970e:	7823      	ldrb	r3, [r4, #0]
{
    9710:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    9712:	ad03      	add	r5, sp, #12
	enh.status         = evt->status;
    9714:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    9718:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    971c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    9720:	78e3      	ldrb	r3, [r4, #3]
    9722:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    9726:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    972a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    972e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9732:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    9736:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    973a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    973e:	7c63      	ldrb	r3, [r4, #17]
    9740:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    9744:	1d21      	adds	r1, r4, #4
    9746:	4628      	mov	r0, r5
    9748:	f015 f8ac 	bl	1e8a4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    974c:	f10d 0013 	add.w	r0, sp, #19
    9750:	f106 010a 	add.w	r1, r6, #10
    9754:	f015 f8a3 	bl	1e89e <bt_addr_copy>
	if (evt->role == BT_HCI_ROLE_SLAVE) {
    9758:	78e3      	ldrb	r3, [r4, #3]
    975a:	2b01      	cmp	r3, #1
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    975c:	bf0c      	ite	eq
    975e:	7a30      	ldrbeq	r0, [r6, #8]
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    9760:	2000      	movne	r0, #0
		id_addr = bt_lookup_id_addr(bt_dev.adv_id, &enh.peer_addr);
    9762:	4629      	mov	r1, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    9764:	f015 f91e 	bl	1e9a4 <bt_lookup_id_addr>
	if (id_addr != &enh.peer_addr) {
    9768:	42a8      	cmp	r0, r5
		id_addr = bt_lookup_id_addr(BT_ID_DEFAULT, &enh.peer_addr);
    976a:	4604      	mov	r4, r0
	if (id_addr != &enh.peer_addr) {
    976c:	d013      	beq.n	9796 <le_legacy_conn_complete+0x8e>
		bt_addr_copy(&enh.peer_rpa, &enh.peer_addr.a);
    976e:	f10d 010d 	add.w	r1, sp, #13
    9772:	f10d 0019 	add.w	r0, sp, #25
    9776:	f015 f892 	bl	1e89e <bt_addr_copy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    977a:	4621      	mov	r1, r4
    977c:	4628      	mov	r0, r5
    977e:	f015 f891 	bl	1e8a4 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    9782:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9786:	3302      	adds	r3, #2
    9788:	f88d 300c 	strb.w	r3, [sp, #12]
	enh_conn_complete(&enh);
    978c:	a802      	add	r0, sp, #8
    978e:	f7ff feed 	bl	956c <enh_conn_complete>
}
    9792:	b00a      	add	sp, #40	; 0x28
    9794:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    9796:	2300      	movs	r3, #0
    9798:	4669      	mov	r1, sp
    979a:	f10d 0019 	add.w	r0, sp, #25
    979e:	9300      	str	r3, [sp, #0]
    97a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    97a4:	f015 f87b 	bl	1e89e <bt_addr_copy>
    97a8:	e7f0      	b.n	978c <le_legacy_conn_complete+0x84>
    97aa:	bf00      	nop
    97ac:	20005888 	.word	0x20005888

000097b0 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    97b0:	b538      	push	{r3, r4, r5, lr}
    97b2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    97b4:	4805      	ldr	r0, [pc, #20]	; (97cc <bt_buf_get_rx+0x1c>)
    97b6:	f016 fc90 	bl	200da <net_buf_alloc_fixed>
#endif

	if (buf) {
    97ba:	4604      	mov	r4, r0
    97bc:	b120      	cbz	r0, 97c8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    97be:	2100      	movs	r1, #0
    97c0:	3008      	adds	r0, #8
    97c2:	f016 fca9 	bl	20118 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    97c6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    97c8:	4620      	mov	r0, r4
    97ca:	bd38      	pop	{r3, r4, r5, pc}
    97cc:	200062e0 	.word	0x200062e0

000097d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    97d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    97d2:	f04f 0320 	mov.w	r3, #32
    97d6:	f3ef 8211 	mrs	r2, BASEPRI
    97da:	f383 8811 	msr	BASEPRI, r3
    97de:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    97e2:	4b0d      	ldr	r3, [pc, #52]	; (9818 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    97e4:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    97e6:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    97ea:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	__asm__ volatile(
    97ee:	f382 8811 	msr	BASEPRI, r2
    97f2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    97f6:	b92c      	cbnz	r4, 9804 <bt_buf_get_cmd_complete+0x34>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    97f8:	4601      	mov	r1, r0
}
    97fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    97fe:	2001      	movs	r0, #1
    9800:	f7ff bfd6 	b.w	97b0 <bt_buf_get_rx>
    9804:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9806:	f104 0008 	add.w	r0, r4, #8
    980a:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    980c:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    980e:	f016 fc83 	bl	20118 <net_buf_simple_reserve>
}
    9812:	4620      	mov	r0, r4
    9814:	bd10      	pop	{r4, pc}
    9816:	bf00      	nop
    9818:	20005888 	.word	0x20005888

0000981c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    981c:	280f      	cmp	r0, #15
{
    981e:	460b      	mov	r3, r1
    9820:	b510      	push	{r4, lr}
    9822:	4611      	mov	r1, r2
	switch (evt) {
    9824:	d806      	bhi.n	9834 <bt_buf_get_evt+0x18>
    9826:	280d      	cmp	r0, #13
    9828:	d913      	bls.n	9852 <bt_buf_get_evt+0x36>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    982a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    982e:	4610      	mov	r0, r2
    9830:	f7ff bfce 	b.w	97d0 <bt_buf_get_cmd_complete>
	switch (evt) {
    9834:	2813      	cmp	r0, #19
    9836:	d10c      	bne.n	9852 <bt_buf_get_evt+0x36>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    9838:	480a      	ldr	r0, [pc, #40]	; (9864 <bt_buf_get_evt+0x48>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    983a:	f016 fc4e 	bl	200da <net_buf_alloc_fixed>
			if (buf) {
    983e:	4604      	mov	r4, r0
    9840:	b128      	cbz	r0, 984e <bt_buf_get_evt+0x32>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    9842:	2100      	movs	r1, #0
    9844:	3008      	adds	r0, #8
    9846:	f016 fc67 	bl	20118 <net_buf_simple_reserve>
    984a:	2301      	movs	r3, #1
    984c:	7523      	strb	r3, [r4, #20]
}
    984e:	4620      	mov	r0, r4
    9850:	bd10      	pop	{r4, pc}
		if (discardable) {
    9852:	b10b      	cbz	r3, 9858 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    9854:	4804      	ldr	r0, [pc, #16]	; (9868 <bt_buf_get_evt+0x4c>)
    9856:	e7f0      	b.n	983a <bt_buf_get_evt+0x1e>
}
    9858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    985c:	2001      	movs	r0, #1
    985e:	f7ff bfa7 	b.w	97b0 <bt_buf_get_rx>
    9862:	bf00      	nop
    9864:	20006300 	.word	0x20006300
    9868:	20006280 	.word	0x20006280

0000986c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    986e:	4e22      	ldr	r6, [pc, #136]	; (98f8 <bt_pub_key_gen+0x8c>)
    9870:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
    9874:	f003 0306 	and.w	r3, r3, #6
    9878:	2b06      	cmp	r3, #6
    987a:	d00d      	beq.n	9898 <bt_pub_key_gen+0x2c>
    987c:	4b1f      	ldr	r3, [pc, #124]	; (98fc <bt_pub_key_gen+0x90>)
    987e:	4920      	ldr	r1, [pc, #128]	; (9900 <bt_pub_key_gen+0x94>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9880:	4820      	ldr	r0, [pc, #128]	; (9904 <bt_pub_key_gen+0x98>)
    9882:	1ac9      	subs	r1, r1, r3
    9884:	08c9      	lsrs	r1, r1, #3
    9886:	0189      	lsls	r1, r1, #6
    9888:	f041 0102 	orr.w	r1, r1, #2
    988c:	f013 ff0c 	bl	1d6a8 <log_0>
		return -ENOTSUP;
    9890:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9894:	4620      	mov	r0, r4
    9896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    9898:	4f1b      	ldr	r7, [pc, #108]	; (9908 <bt_pub_key_gen+0x9c>)
    989a:	683b      	ldr	r3, [r7, #0]
    989c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    989e:	6038      	str	r0, [r7, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    98a0:	2110      	movs	r1, #16
    98a2:	f106 0070 	add.w	r0, r6, #112	; 0x70
    98a6:	f015 f800 	bl	1e8aa <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    98aa:	f010 0510 	ands.w	r5, r0, #16
    98ae:	d120      	bne.n	98f2 <bt_pub_key_gen+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    98b0:	f06f 0108 	mvn.w	r1, #8
    98b4:	f106 0070 	add.w	r0, r6, #112	; 0x70
    98b8:	f014 ffdc 	bl	1e874 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    98bc:	462a      	mov	r2, r5
    98be:	4629      	mov	r1, r5
    98c0:	f242 0025 	movw	r0, #8229	; 0x2025
    98c4:	f7fe fb82 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    98c8:	4604      	mov	r4, r0
    98ca:	2800      	cmp	r0, #0
    98cc:	d0e2      	beq.n	9894 <bt_pub_key_gen+0x28>
    98ce:	4b0b      	ldr	r3, [pc, #44]	; (98fc <bt_pub_key_gen+0x90>)
    98d0:	490b      	ldr	r1, [pc, #44]	; (9900 <bt_pub_key_gen+0x94>)
		BT_ERR("Sending LE P256 Public Key command failed");
    98d2:	480e      	ldr	r0, [pc, #56]	; (990c <bt_pub_key_gen+0xa0>)
    98d4:	1ac9      	subs	r1, r1, r3
    98d6:	08c9      	lsrs	r1, r1, #3
    98d8:	0189      	lsls	r1, r1, #6
    98da:	f041 0101 	orr.w	r1, r1, #1
    98de:	f013 fee3 	bl	1d6a8 <log_0>
    98e2:	f06f 0110 	mvn.w	r1, #16
    98e6:	f106 0070 	add.w	r0, r6, #112	; 0x70
    98ea:	f014 ffc3 	bl	1e874 <atomic_and>
		pub_key_cb = NULL;
    98ee:	603d      	str	r5, [r7, #0]
		return err;
    98f0:	e7d0      	b.n	9894 <bt_pub_key_gen+0x28>
		return 0;
    98f2:	2400      	movs	r4, #0
    98f4:	e7ce      	b.n	9894 <bt_pub_key_gen+0x28>
    98f6:	bf00      	nop
    98f8:	20005888 	.word	0x20005888
    98fc:	00021114 	.word	0x00021114
    9900:	000211d4 	.word	0x000211d4
    9904:	00024149 	.word	0x00024149
    9908:	200002ec 	.word	0x200002ec
    990c:	00024168 	.word	0x00024168

00009910 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    9910:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9912:	4804      	ldr	r0, [pc, #16]	; (9924 <bt_pub_key_get+0x14>)
    9914:	f014 ffbd 	bl	1e892 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9918:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    991c:	4802      	ldr	r0, [pc, #8]	; (9928 <bt_pub_key_get+0x18>)
    991e:	bf08      	it	eq
    9920:	2000      	moveq	r0, #0
    9922:	bd08      	pop	{r3, pc}
    9924:	200058f8 	.word	0x200058f8
    9928:	20002220 	.word	0x20002220

0000992c <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    992e:	4d1a      	ldr	r5, [pc, #104]	; (9998 <bt_dh_key_gen+0x6c>)
    9930:	682b      	ldr	r3, [r5, #0]
{
    9932:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9934:	b113      	cbz	r3, 993c <bt_dh_key_gen+0x10>
		return -EBUSY;
    9936:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    993c:	4817      	ldr	r0, [pc, #92]	; (999c <bt_dh_key_gen+0x70>)
    993e:	f014 ffa8 	bl	1e892 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9942:	06c2      	lsls	r2, r0, #27
    9944:	f3c0 1700 	ubfx	r7, r0, #4, #1
    9948:	d4f5      	bmi.n	9936 <bt_dh_key_gen+0xa>
    994a:	4814      	ldr	r0, [pc, #80]	; (999c <bt_dh_key_gen+0x70>)
    994c:	f014 ffa1 	bl	1e892 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9950:	0703      	lsls	r3, r0, #28
    9952:	d51d      	bpl.n	9990 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    9954:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9956:	f242 0026 	movw	r0, #8230	; 0x2026
    995a:	2140      	movs	r1, #64	; 0x40
    995c:	f7fe f9dc 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
    9960:	4604      	mov	r4, r0
    9962:	b918      	cbnz	r0, 996c <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    9964:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    9966:	f06f 0036 	mvn.w	r0, #54	; 0x36
    996a:	e7e6      	b.n	993a <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    996c:	2140      	movs	r1, #64	; 0x40
    996e:	3008      	adds	r0, #8
    9970:	f016 fbe7 	bl	20142 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    9974:	2240      	movs	r2, #64	; 0x40
    9976:	4631      	mov	r1, r6
    9978:	f014 fdb6 	bl	1e4e8 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    997c:	463a      	mov	r2, r7
    997e:	4621      	mov	r1, r4
    9980:	f242 0026 	movw	r0, #8230	; 0x2026
    9984:	f7fe fb22 	bl	7fcc <bt_hci_cmd_send_sync>
	if (err) {
    9988:	2800      	cmp	r0, #0
    998a:	d0d6      	beq.n	993a <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    998c:	602f      	str	r7, [r5, #0]
		return err;
    998e:	e7d4      	b.n	993a <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    9990:	f06f 0030 	mvn.w	r0, #48	; 0x30
    9994:	e7d1      	b.n	993a <bt_dh_key_gen+0xe>
    9996:	bf00      	nop
    9998:	200002e8 	.word	0x200002e8
    999c:	200058f8 	.word	0x200058f8

000099a0 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    99a0:	2300      	movs	r3, #0
	tx->user_data = NULL;
    99a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    99a6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    99a8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    99aa:	4801      	ldr	r0, [pc, #4]	; (99b0 <tx_free+0x10>)
    99ac:	f016 be3e 	b.w	2062c <k_queue_append>
    99b0:	20006220 	.word	0x20006220

000099b4 <notify_connected>:
{
    99b4:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    99b6:	4b09      	ldr	r3, [pc, #36]	; (99dc <notify_connected+0x28>)
    99b8:	681d      	ldr	r5, [r3, #0]
{
    99ba:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    99bc:	7b21      	ldrb	r1, [r4, #12]
    99be:	b92d      	cbnz	r5, 99cc <notify_connected+0x18>
	if (!conn->err) {
    99c0:	b951      	cbnz	r1, 99d8 <notify_connected+0x24>
		bt_gatt_connected(conn);
    99c2:	4620      	mov	r0, r4
}
    99c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    99c8:	f002 bfc8 	b.w	c95c <bt_gatt_connected>
		if (cb->connected) {
    99cc:	682b      	ldr	r3, [r5, #0]
    99ce:	b10b      	cbz	r3, 99d4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    99d0:	4620      	mov	r0, r4
    99d2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    99d4:	69ad      	ldr	r5, [r5, #24]
    99d6:	e7f1      	b.n	99bc <notify_connected+0x8>
}
    99d8:	bd38      	pop	{r3, r4, r5, pc}
    99da:	bf00      	nop
    99dc:	20000364 	.word	0x20000364

000099e0 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    99e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    99e4:	694d      	ldr	r5, [r1, #20]
{
    99e6:	4604      	mov	r4, r0
    99e8:	460e      	mov	r6, r1
    99ea:	4691      	mov	r9, r2
    99ec:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    99ee:	4843      	ldr	r0, [pc, #268]	; (9afc <send_frag+0x11c>)
    99f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    99f4:	f011 ff02 	bl	1b7fc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    99f8:	7b63      	ldrb	r3, [r4, #13]
    99fa:	2b06      	cmp	r3, #6
    99fc:	d14e      	bne.n	9a9c <send_frag+0xbc>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    99fe:	2104      	movs	r1, #4
    9a00:	f106 0008 	add.w	r0, r6, #8
    9a04:	f016 fbb4 	bl	20170 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9a08:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9a0a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9a0c:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9a10:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9a12:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9a14:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    9a16:	f04f 0320 	mov.w	r3, #32
    9a1a:	f3ef 8211 	mrs	r2, BASEPRI
    9a1e:	f383 8811 	msr	BASEPRI, r3
    9a22:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    9a26:	2d00      	cmp	r5, #0
    9a28:	d04a      	beq.n	9ac0 <send_frag+0xe0>
	parent->next = child;
    9a2a:	2300      	movs	r3, #0
    9a2c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    9a2e:	69a3      	ldr	r3, [r4, #24]
    9a30:	2b00      	cmp	r3, #0
    9a32:	d142      	bne.n	9aba <send_frag+0xda>
	list->head = node;
    9a34:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    9a38:	f382 8811 	msr	BASEPRI, r2
    9a3c:	f3bf 8f6f 	isb	sy
    9a40:	2302      	movs	r3, #2
    9a42:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    9a44:	4630      	mov	r0, r6
    9a46:	f015 f80d 	bl	1ea64 <bt_send>
	if (err) {
    9a4a:	4601      	mov	r1, r0
    9a4c:	2800      	cmp	r0, #0
    9a4e:	d053      	beq.n	9af8 <send_frag+0x118>
    9a50:	4b2b      	ldr	r3, [pc, #172]	; (9b00 <send_frag+0x120>)
    9a52:	4a2c      	ldr	r2, [pc, #176]	; (9b04 <send_frag+0x124>)
		BT_ERR("Unable to send to driver (err %d)", err);
    9a54:	482c      	ldr	r0, [pc, #176]	; (9b08 <send_frag+0x128>)
    9a56:	1ad2      	subs	r2, r2, r3
    9a58:	08d2      	lsrs	r2, r2, #3
    9a5a:	0192      	lsls	r2, r2, #6
    9a5c:	f042 0201 	orr.w	r2, r2, #1
    9a60:	f013 fe2f 	bl	1d6c2 <log_1>
	__asm__ volatile(
    9a64:	f04f 0320 	mov.w	r3, #32
    9a68:	f3ef 8111 	mrs	r1, BASEPRI
    9a6c:	f383 8811 	msr	BASEPRI, r3
    9a70:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    9a74:	2d00      	cmp	r5, #0
    9a76:	d039      	beq.n	9aec <send_frag+0x10c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9a78:	6963      	ldr	r3, [r4, #20]
    9a7a:	2200      	movs	r2, #0
    9a7c:	b153      	cbz	r3, 9a94 <send_frag+0xb4>
    9a7e:	429d      	cmp	r5, r3
    9a80:	d131      	bne.n	9ae6 <send_frag+0x106>
Z_GENLIST_REMOVE(slist, snode)
    9a82:	682b      	ldr	r3, [r5, #0]
    9a84:	bb4a      	cbnz	r2, 9ada <send_frag+0xfa>
    9a86:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    9a88:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    9a8a:	4295      	cmp	r5, r2
    9a8c:	d100      	bne.n	9a90 <send_frag+0xb0>
	list->tail = node;
    9a8e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    9a90:	2300      	movs	r3, #0
    9a92:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    9a94:	f381 8811 	msr	BASEPRI, r1
    9a98:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    9a9c:	4817      	ldr	r0, [pc, #92]	; (9afc <send_frag+0x11c>)
    9a9e:	f011 fe87 	bl	1b7b0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    9aa2:	b115      	cbz	r5, 9aaa <send_frag+0xca>
		tx_free(tx);
    9aa4:	4628      	mov	r0, r5
    9aa6:	f7ff ff7b 	bl	99a0 <tx_free>
	}

	if (always_consume) {
    9aaa:	b11f      	cbz	r7, 9ab4 <send_frag+0xd4>
		net_buf_unref(buf);
    9aac:	4630      	mov	r0, r6
    9aae:	f010 f8a3 	bl	19bf8 <net_buf_unref>
	}
	return false;
    9ab2:	2700      	movs	r7, #0
}
    9ab4:	4638      	mov	r0, r7
    9ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9aba:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9abc:	61a5      	str	r5, [r4, #24]
}
    9abe:	e7bb      	b.n	9a38 <send_frag+0x58>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    9ac0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    9ac2:	b133      	cbz	r3, 9ad2 <send_frag+0xf2>
			pending_no_cb = &tail_tx->pending_no_cb;
    9ac4:	f103 080c 	add.w	r8, r3, #12
    9ac8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    9aca:	3301      	adds	r3, #1
    9acc:	f8c8 3000 	str.w	r3, [r8]
    9ad0:	e7b2      	b.n	9a38 <send_frag+0x58>
			pending_no_cb = &conn->pending_no_cb;
    9ad2:	69e3      	ldr	r3, [r4, #28]
    9ad4:	f104 081c 	add.w	r8, r4, #28
    9ad8:	e7f7      	b.n	9aca <send_frag+0xea>
	parent->next = child;
    9ada:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9adc:	69a3      	ldr	r3, [r4, #24]
    9ade:	429d      	cmp	r5, r3
	list->tail = node;
    9ae0:	bf08      	it	eq
    9ae2:	61a2      	streq	r2, [r4, #24]
}
    9ae4:	e7d4      	b.n	9a90 <send_frag+0xb0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9ae6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ae8:	681b      	ldr	r3, [r3, #0]
    9aea:	e7c7      	b.n	9a7c <send_frag+0x9c>
			(*pending_no_cb)--;
    9aec:	f8d8 3000 	ldr.w	r3, [r8]
    9af0:	3b01      	subs	r3, #1
    9af2:	f8c8 3000 	str.w	r3, [r8]
    9af6:	e7cd      	b.n	9a94 <send_frag+0xb4>
	return true;
    9af8:	2701      	movs	r7, #1
    9afa:	e7db      	b.n	9ab4 <send_frag+0xd4>
    9afc:	20005914 	.word	0x20005914
    9b00:	00021114 	.word	0x00021114
    9b04:	00021124 	.word	0x00021124
    9b08:	00023a79 	.word	0x00023a79

00009b0c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    9b0c:	b570      	push	{r4, r5, r6, lr}
    9b0e:	4605      	mov	r5, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    9b10:	f100 0634 	add.w	r6, r0, #52	; 0x34
    9b14:	2100      	movs	r1, #0
    9b16:	4630      	mov	r0, r6
    9b18:	f016 fae5 	bl	200e6 <net_buf_get>
    9b1c:	4604      	mov	r4, r0
    9b1e:	b950      	cbnz	r0, 9b36 <conn_cleanup+0x2a>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    9b20:	4628      	mov	r0, r5
    9b22:	f014 ffc2 	bl	1eaaa <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9b26:	4622      	mov	r2, r4
    9b28:	f105 0150 	add.w	r1, r5, #80	; 0x50
    9b2c:	4806      	ldr	r0, [pc, #24]	; (9b48 <conn_cleanup+0x3c>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    9b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9b32:	f011 bf83 	b.w	1ba3c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    9b36:	6960      	ldr	r0, [r4, #20]
    9b38:	b108      	cbz	r0, 9b3e <conn_cleanup+0x32>
			tx_free(tx_data(buf)->tx);
    9b3a:	f7ff ff31 	bl	99a0 <tx_free>
		net_buf_unref(buf);
    9b3e:	4620      	mov	r0, r4
    9b40:	f010 f85a 	bl	19bf8 <net_buf_unref>
    9b44:	e7e6      	b.n	9b14 <conn_cleanup+0x8>
    9b46:	bf00      	nop
    9b48:	20001c48 	.word	0x20001c48

00009b4c <bt_conn_get_pkts>:
}
    9b4c:	4800      	ldr	r0, [pc, #0]	; (9b50 <bt_conn_get_pkts+0x4>)
    9b4e:	4770      	bx	lr
    9b50:	20005914 	.word	0x20005914

00009b54 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9b54:	1d03      	adds	r3, r0, #4
{
    9b56:	b570      	push	{r4, r5, r6, lr}
    9b58:	4604      	mov	r4, r0
    9b5a:	4618      	mov	r0, r3
    9b5c:	f014 ff9f 	bl	1ea9e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9b60:	0582      	lsls	r2, r0, #22
    9b62:	d519      	bpl.n	9b98 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9b64:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9b68:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    9b6c:	4291      	cmp	r1, r2
    9b6e:	d813      	bhi.n	9b98 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9b70:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    9b74:	4291      	cmp	r1, r2
    9b76:	d30f      	bcc.n	9b98 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    9b78:	e9d4 1223 	ldrd	r1, r2, [r4, #140]	; 0x8c
    9b7c:	4291      	cmp	r1, r2
    9b7e:	d10b      	bne.n	9b98 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9b80:	f3bf 8f5b 	dmb	ish
    9b84:	e853 2f00 	ldrex	r2, [r3]
    9b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    9b8c:	e843 2100 	strex	r1, r2, [r3]
    9b90:	2900      	cmp	r1, #0
    9b92:	d1f7      	bne.n	9b84 <notify_le_param_updated+0x30>
    9b94:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    9b98:	4b07      	ldr	r3, [pc, #28]	; (9bb8 <notify_le_param_updated+0x64>)
    9b9a:	681d      	ldr	r5, [r3, #0]
    9b9c:	b905      	cbnz	r5, 9ba0 <notify_le_param_updated+0x4c>
}
    9b9e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    9ba0:	68ee      	ldr	r6, [r5, #12]
    9ba2:	b13e      	cbz	r6, 9bb4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    9ba4:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
    9ba8:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
    9bac:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    9bb0:	4620      	mov	r0, r4
    9bb2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    9bb4:	69ad      	ldr	r5, [r5, #24]
    9bb6:	e7f1      	b.n	9b9c <notify_le_param_updated+0x48>
    9bb8:	20000364 	.word	0x20000364

00009bbc <le_param_req>:
{
    9bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bbe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9bc0:	4608      	mov	r0, r1
{
    9bc2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9bc4:	f014 ff10 	bl	1e9e8 <bt_le_conn_params_valid>
    9bc8:	4604      	mov	r4, r0
    9bca:	b910      	cbnz	r0, 9bd2 <le_param_req+0x16>
		return false;
    9bcc:	2400      	movs	r4, #0
}
    9bce:	4620      	mov	r0, r4
    9bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9bd2:	4b09      	ldr	r3, [pc, #36]	; (9bf8 <le_param_req+0x3c>)
    9bd4:	681e      	ldr	r6, [r3, #0]
    9bd6:	2e00      	cmp	r6, #0
    9bd8:	d0f9      	beq.n	9bce <le_param_req+0x12>
		if (!cb->le_param_req) {
    9bda:	68b3      	ldr	r3, [r6, #8]
    9bdc:	b90b      	cbnz	r3, 9be2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    9bde:	69b6      	ldr	r6, [r6, #24]
    9be0:	e7f9      	b.n	9bd6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9be2:	4629      	mov	r1, r5
    9be4:	4638      	mov	r0, r7
    9be6:	4798      	blx	r3
    9be8:	2800      	cmp	r0, #0
    9bea:	d0ef      	beq.n	9bcc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    9bec:	4628      	mov	r0, r5
    9bee:	f014 fefb 	bl	1e9e8 <bt_le_conn_params_valid>
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d1f3      	bne.n	9bde <le_param_req+0x22>
    9bf6:	e7e9      	b.n	9bcc <le_param_req+0x10>
    9bf8:	20000364 	.word	0x20000364

00009bfc <bt_conn_identity_resolved>:
{
    9bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9bfe:	78c3      	ldrb	r3, [r0, #3]
{
    9c00:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9c02:	b93b      	cbnz	r3, 9c14 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    9c04:	f100 067e 	add.w	r6, r0, #126	; 0x7e
	for (cb = callback_list; cb; cb = cb->_next) {
    9c08:	4b08      	ldr	r3, [pc, #32]	; (9c2c <bt_conn_identity_resolved+0x30>)
    9c0a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9c0c:	f104 0770 	add.w	r7, r4, #112	; 0x70
	for (cb = callback_list; cb; cb = cb->_next) {
    9c10:	b91d      	cbnz	r5, 9c1a <bt_conn_identity_resolved+0x1e>
}
    9c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    9c14:	f100 0677 	add.w	r6, r0, #119	; 0x77
    9c18:	e7f6      	b.n	9c08 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    9c1a:	692b      	ldr	r3, [r5, #16]
    9c1c:	b11b      	cbz	r3, 9c26 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9c1e:	463a      	mov	r2, r7
    9c20:	4631      	mov	r1, r6
    9c22:	4620      	mov	r0, r4
    9c24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9c26:	69ad      	ldr	r5, [r5, #24]
    9c28:	e7f2      	b.n	9c10 <bt_conn_identity_resolved+0x14>
    9c2a:	bf00      	nop
    9c2c:	20000364 	.word	0x20000364

00009c30 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    9c30:	4b0c      	ldr	r3, [pc, #48]	; (9c64 <bt_conn_security_changed+0x34>)
{
    9c32:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9c34:	681e      	ldr	r6, [r3, #0]
{
    9c36:	4604      	mov	r4, r0
    9c38:	460d      	mov	r5, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    9c3a:	b956      	cbnz	r6, 9c52 <bt_conn_security_changed+0x22>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    9c3c:	b98d      	cbnz	r5, 9c62 <bt_conn_security_changed+0x32>
    9c3e:	7a63      	ldrb	r3, [r4, #9]
    9c40:	2b01      	cmp	r3, #1
    9c42:	d90e      	bls.n	9c62 <bt_conn_security_changed+0x32>
		bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    9c44:	7a20      	ldrb	r0, [r4, #8]
    9c46:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    9c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    9c4e:	f004 bea9 	b.w	e9a4 <bt_keys_update_usage>
		if (cb->security_changed) {
    9c52:	6973      	ldr	r3, [r6, #20]
    9c54:	b11b      	cbz	r3, 9c5e <bt_conn_security_changed+0x2e>
			cb->security_changed(conn, conn->sec_level, err);
    9c56:	7a61      	ldrb	r1, [r4, #9]
    9c58:	462a      	mov	r2, r5
    9c5a:	4620      	mov	r0, r4
    9c5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9c5e:	69b6      	ldr	r6, [r6, #24]
    9c60:	e7eb      	b.n	9c3a <bt_conn_security_changed+0xa>
}
    9c62:	bd70      	pop	{r4, r5, r6, pc}
    9c64:	20000364 	.word	0x20000364

00009c68 <bt_conn_cb_register>:
	cb->_next = callback_list;
    9c68:	4b02      	ldr	r3, [pc, #8]	; (9c74 <bt_conn_cb_register+0xc>)
    9c6a:	681a      	ldr	r2, [r3, #0]
    9c6c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    9c6e:	6018      	str	r0, [r3, #0]
}
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	20000364 	.word	0x20000364

00009c78 <bt_conn_recv>:
{
    9c78:	b570      	push	{r4, r5, r6, lr}
    9c7a:	4616      	mov	r6, r2
    9c7c:	4604      	mov	r4, r0
    9c7e:	460d      	mov	r5, r1
	tx_notify(conn);
    9c80:	f014 ff38 	bl	1eaf4 <tx_notify>
	switch (flags) {
    9c84:	2e01      	cmp	r6, #1
    9c86:	d01b      	beq.n	9cc0 <bt_conn_recv+0x48>
    9c88:	2e02      	cmp	r6, #2
    9c8a:	d16c      	bne.n	9d66 <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    9c8c:	68ab      	ldr	r3, [r5, #8]
    9c8e:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    9c90:	89e3      	ldrh	r3, [r4, #14]
    9c92:	b163      	cbz	r3, 9cae <bt_conn_recv+0x36>
    9c94:	4b3d      	ldr	r3, [pc, #244]	; (9d8c <bt_conn_recv+0x114>)
    9c96:	493e      	ldr	r1, [pc, #248]	; (9d90 <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    9c98:	483e      	ldr	r0, [pc, #248]	; (9d94 <bt_conn_recv+0x11c>)
    9c9a:	1ac9      	subs	r1, r1, r3
    9c9c:	08c9      	lsrs	r1, r1, #3
    9c9e:	0189      	lsls	r1, r1, #6
    9ca0:	f041 0101 	orr.w	r1, r1, #1
    9ca4:	f013 fd00 	bl	1d6a8 <log_0>
			bt_conn_reset_rx_state(conn);
    9ca8:	4620      	mov	r0, r4
    9caa:	f014 fefe 	bl	1eaaa <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    9cae:	89ab      	ldrh	r3, [r5, #12]
    9cb0:	1af3      	subs	r3, r6, r3
    9cb2:	3304      	adds	r3, #4
    9cb4:	b29b      	uxth	r3, r3
    9cb6:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d043      	beq.n	9d44 <bt_conn_recv+0xcc>
			conn->rx = buf;
    9cbc:	6125      	str	r5, [r4, #16]
}
    9cbe:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    9cc0:	89e3      	ldrh	r3, [r4, #14]
    9cc2:	b98b      	cbnz	r3, 9ce8 <bt_conn_recv+0x70>
    9cc4:	4932      	ldr	r1, [pc, #200]	; (9d90 <bt_conn_recv+0x118>)
    9cc6:	4b31      	ldr	r3, [pc, #196]	; (9d8c <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    9cc8:	4833      	ldr	r0, [pc, #204]	; (9d98 <bt_conn_recv+0x120>)
    9cca:	1ac9      	subs	r1, r1, r3
    9ccc:	08c9      	lsrs	r1, r1, #3
    9cce:	0189      	lsls	r1, r1, #6
    9cd0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    9cd4:	f013 fce8 	bl	1d6a8 <log_0>
			bt_conn_reset_rx_state(conn);
    9cd8:	4620      	mov	r0, r4
    9cda:	f014 fee6 	bl	1eaaa <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    9cde:	4628      	mov	r0, r5
}
    9ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    9ce4:	f00f bf88 	b.w	19bf8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    9ce8:	89ae      	ldrh	r6, [r5, #12]
    9cea:	42b3      	cmp	r3, r6
    9cec:	d208      	bcs.n	9d00 <bt_conn_recv+0x88>
    9cee:	4928      	ldr	r1, [pc, #160]	; (9d90 <bt_conn_recv+0x118>)
    9cf0:	4b26      	ldr	r3, [pc, #152]	; (9d8c <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    9cf2:	482a      	ldr	r0, [pc, #168]	; (9d9c <bt_conn_recv+0x124>)
    9cf4:	1ac9      	subs	r1, r1, r3
    9cf6:	08c9      	lsrs	r1, r1, #3
    9cf8:	0189      	lsls	r1, r1, #6
    9cfa:	f041 0101 	orr.w	r1, r1, #1
    9cfe:	e7e9      	b.n	9cd4 <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9d00:	6920      	ldr	r0, [r4, #16]
    9d02:	3008      	adds	r0, #8
    9d04:	f016 fa58 	bl	201b8 <net_buf_simple_tailroom>
    9d08:	4286      	cmp	r6, r0
    9d0a:	d908      	bls.n	9d1e <bt_conn_recv+0xa6>
    9d0c:	4920      	ldr	r1, [pc, #128]	; (9d90 <bt_conn_recv+0x118>)
    9d0e:	4b1f      	ldr	r3, [pc, #124]	; (9d8c <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    9d10:	4823      	ldr	r0, [pc, #140]	; (9da0 <bt_conn_recv+0x128>)
    9d12:	1ac9      	subs	r1, r1, r3
    9d14:	08c9      	lsrs	r1, r1, #3
    9d16:	0189      	lsls	r1, r1, #6
    9d18:	f041 0101 	orr.w	r1, r1, #1
    9d1c:	e7da      	b.n	9cd4 <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    9d1e:	6920      	ldr	r0, [r4, #16]
    9d20:	89aa      	ldrh	r2, [r5, #12]
    9d22:	68a9      	ldr	r1, [r5, #8]
    9d24:	3008      	adds	r0, #8
    9d26:	f016 fa12 	bl	2014e <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    9d2a:	89e3      	ldrh	r3, [r4, #14]
    9d2c:	89aa      	ldrh	r2, [r5, #12]
    9d2e:	1a9b      	subs	r3, r3, r2
    9d30:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    9d32:	4628      	mov	r0, r5
    9d34:	f00f ff60 	bl	19bf8 <net_buf_unref>
		if (conn->rx_len) {
    9d38:	89e3      	ldrh	r3, [r4, #14]
    9d3a:	2b00      	cmp	r3, #0
    9d3c:	d1bf      	bne.n	9cbe <bt_conn_recv+0x46>
		buf = conn->rx;
    9d3e:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    9d40:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    9d42:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    9d44:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    9d46:	89aa      	ldrh	r2, [r5, #12]
    9d48:	8819      	ldrh	r1, [r3, #0]
    9d4a:	1d0b      	adds	r3, r1, #4
    9d4c:	4293      	cmp	r3, r2
    9d4e:	d016      	beq.n	9d7e <bt_conn_recv+0x106>
    9d50:	480e      	ldr	r0, [pc, #56]	; (9d8c <bt_conn_recv+0x114>)
    9d52:	4b0f      	ldr	r3, [pc, #60]	; (9d90 <bt_conn_recv+0x118>)
    9d54:	1a1b      	subs	r3, r3, r0
    9d56:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    9d58:	019b      	lsls	r3, r3, #6
    9d5a:	4812      	ldr	r0, [pc, #72]	; (9da4 <bt_conn_recv+0x12c>)
    9d5c:	f043 0301 	orr.w	r3, r3, #1
    9d60:	f013 fcc3 	bl	1d6ea <log_2>
		net_buf_unref(buf);
    9d64:	e7bb      	b.n	9cde <bt_conn_recv+0x66>
    9d66:	4a09      	ldr	r2, [pc, #36]	; (9d8c <bt_conn_recv+0x114>)
    9d68:	4b09      	ldr	r3, [pc, #36]	; (9d90 <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9d6a:	480f      	ldr	r0, [pc, #60]	; (9da8 <bt_conn_recv+0x130>)
    9d6c:	1a9b      	subs	r3, r3, r2
    9d6e:	08db      	lsrs	r3, r3, #3
    9d70:	019b      	lsls	r3, r3, #6
    9d72:	f043 0201 	orr.w	r2, r3, #1
    9d76:	4631      	mov	r1, r6
    9d78:	f013 fca3 	bl	1d6c2 <log_1>
		bt_conn_reset_rx_state(conn);
    9d7c:	e7ac      	b.n	9cd8 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    9d7e:	4629      	mov	r1, r5
    9d80:	4620      	mov	r0, r4
}
    9d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9d86:	f000 bce5 	b.w	a754 <bt_l2cap_recv>
    9d8a:	bf00      	nop
    9d8c:	00021114 	.word	0x00021114
    9d90:	00021124 	.word	0x00021124
    9d94:	000241bc 	.word	0x000241bc
    9d98:	000241d9 	.word	0x000241d9
    9d9c:	000241f7 	.word	0x000241f7
    9da0:	0002420b 	.word	0x0002420b
    9da4:	00024250 	.word	0x00024250
    9da8:	00024232 	.word	0x00024232

00009dac <bt_conn_send_cb>:
{
    9dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9db0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    9db2:	7b43      	ldrb	r3, [r0, #13]
    9db4:	2b06      	cmp	r3, #6
{
    9db6:	4606      	mov	r6, r0
    9db8:	460d      	mov	r5, r1
    9dba:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9dbc:	d00f      	beq.n	9dde <bt_conn_send_cb+0x32>
    9dbe:	4b29      	ldr	r3, [pc, #164]	; (9e64 <bt_conn_send_cb+0xb8>)
    9dc0:	4929      	ldr	r1, [pc, #164]	; (9e68 <bt_conn_send_cb+0xbc>)
		BT_ERR("not connected!");
    9dc2:	482a      	ldr	r0, [pc, #168]	; (9e6c <bt_conn_send_cb+0xc0>)
    9dc4:	1ac9      	subs	r1, r1, r3
    9dc6:	08c9      	lsrs	r1, r1, #3
    9dc8:	0189      	lsls	r1, r1, #6
    9dca:	f041 0101 	orr.w	r1, r1, #1
    9dce:	f013 fc6b 	bl	1d6a8 <log_0>
		net_buf_unref(buf);
    9dd2:	4628      	mov	r0, r5
    9dd4:	f00f ff10 	bl	19bf8 <net_buf_unref>
			return -ENOTCONN;
    9dd8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9ddc:	e01d      	b.n	9e1a <bt_conn_send_cb+0x6e>
	if (cb) {
    9dde:	2a00      	cmp	r2, #0
    9de0:	d03d      	beq.n	9e5e <bt_conn_send_cb+0xb2>
	return z_impl_k_current_get();
    9de2:	f011 fcdf 	bl	1b7a4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    9de6:	4b22      	ldr	r3, [pc, #136]	; (9e70 <bt_conn_send_cb+0xc4>)
    9de8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    9dea:	4822      	ldr	r0, [pc, #136]	; (9e74 <bt_conn_send_cb+0xc8>)
    9dec:	bf0c      	ite	eq
    9dee:	2100      	moveq	r1, #0
    9df0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    9df4:	f016 fc49 	bl	2068a <z_impl_k_queue_get>
    9df8:	4604      	mov	r4, r0
		if (!tx) {
    9dfa:	b980      	cbnz	r0, 9e1e <bt_conn_send_cb+0x72>
    9dfc:	4b19      	ldr	r3, [pc, #100]	; (9e64 <bt_conn_send_cb+0xb8>)
    9dfe:	491a      	ldr	r1, [pc, #104]	; (9e68 <bt_conn_send_cb+0xbc>)
			BT_ERR("Unable to allocate TX context");
    9e00:	481d      	ldr	r0, [pc, #116]	; (9e78 <bt_conn_send_cb+0xcc>)
    9e02:	1ac9      	subs	r1, r1, r3
    9e04:	08c9      	lsrs	r1, r1, #3
    9e06:	0189      	lsls	r1, r1, #6
    9e08:	f041 0101 	orr.w	r1, r1, #1
    9e0c:	f013 fc4c 	bl	1d6a8 <log_0>
			net_buf_unref(buf);
    9e10:	4628      	mov	r0, r5
    9e12:	f00f fef1 	bl	19bf8 <net_buf_unref>
			return -ENOBUFS;
    9e16:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    9e1e:	7b73      	ldrb	r3, [r6, #13]
    9e20:	2b06      	cmp	r3, #6
    9e22:	d010      	beq.n	9e46 <bt_conn_send_cb+0x9a>
    9e24:	4b0f      	ldr	r3, [pc, #60]	; (9e64 <bt_conn_send_cb+0xb8>)
    9e26:	4910      	ldr	r1, [pc, #64]	; (9e68 <bt_conn_send_cb+0xbc>)
			BT_WARN("Disconnected while allocating context");
    9e28:	4814      	ldr	r0, [pc, #80]	; (9e7c <bt_conn_send_cb+0xd0>)
    9e2a:	1ac9      	subs	r1, r1, r3
    9e2c:	08c9      	lsrs	r1, r1, #3
    9e2e:	0189      	lsls	r1, r1, #6
    9e30:	f041 0102 	orr.w	r1, r1, #2
    9e34:	f013 fc38 	bl	1d6a8 <log_0>
			net_buf_unref(buf);
    9e38:	4628      	mov	r0, r5
    9e3a:	f00f fedd 	bl	19bf8 <net_buf_unref>
			tx_free(tx);
    9e3e:	4620      	mov	r0, r4
    9e40:	f7ff fdae 	bl	99a0 <tx_free>
    9e44:	e7c8      	b.n	9dd8 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    9e46:	2300      	movs	r3, #0
		tx->user_data = user_data;
    9e48:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    9e4c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    9e4e:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    9e50:	f106 0034 	add.w	r0, r6, #52	; 0x34
    9e54:	4629      	mov	r1, r5
    9e56:	f016 f963 	bl	20120 <net_buf_put>
	return 0;
    9e5a:	2000      	movs	r0, #0
    9e5c:	e7dd      	b.n	9e1a <bt_conn_send_cb+0x6e>
		tx_data(buf)->tx = NULL;
    9e5e:	614a      	str	r2, [r1, #20]
    9e60:	e7f6      	b.n	9e50 <bt_conn_send_cb+0xa4>
    9e62:	bf00      	nop
    9e64:	00021114 	.word	0x00021114
    9e68:	00021124 	.word	0x00021124
    9e6c:	0002426c 	.word	0x0002426c
    9e70:	20001c58 	.word	0x20001c58
    9e74:	20006220 	.word	0x20006220
    9e78:	0002427b 	.word	0x0002427b
    9e7c:	00024299 	.word	0x00024299

00009e80 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    9e80:	4b1a      	ldr	r3, [pc, #104]	; (9eec <bt_conn_prepare_events+0x6c>)
{
    9e82:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    9e84:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9e86:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    9e88:	609a      	str	r2, [r3, #8]
{
    9e8a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9e8c:	f016 ff93 	bl	20db6 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    9e90:	4b17      	ldr	r3, [pc, #92]	; (9ef0 <bt_conn_prepare_events+0x70>)
    9e92:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    9e96:	f014 fe02 	bl	1ea9e <atomic_get>
    9e9a:	4619      	mov	r1, r3
    9e9c:	b908      	cbnz	r0, 9ea2 <bt_conn_prepare_events+0x22>
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
    9e9e:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    9ea0:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    9ea2:	7b5a      	ldrb	r2, [r3, #13]
    9ea4:	b99a      	cbnz	r2, 9ece <bt_conn_prepare_events+0x4e>
    9ea6:	f3bf 8f5b 	dmb	ish
    9eaa:	1d1a      	adds	r2, r3, #4
    9eac:	e852 0f00 	ldrex	r0, [r2]
    9eb0:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    9eb4:	e842 ce00 	strex	lr, ip, [r2]
    9eb8:	f1be 0f00 	cmp.w	lr, #0
    9ebc:	d1f6      	bne.n	9eac <bt_conn_prepare_events+0x2c>
    9ebe:	f3bf 8f5b 	dmb	ish
    9ec2:	0642      	lsls	r2, r0, #25
    9ec4:	d503      	bpl.n	9ece <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    9ec6:	4618      	mov	r0, r3
    9ec8:	f7ff fe20 	bl	9b0c <conn_cleanup>
    9ecc:	e7e7      	b.n	9e9e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    9ece:	7b4b      	ldrb	r3, [r1, #13]
    9ed0:	2b06      	cmp	r3, #6
    9ed2:	d1e4      	bne.n	9e9e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    9ed4:	4b07      	ldr	r3, [pc, #28]	; (9ef4 <bt_conn_prepare_events+0x74>)
    9ed6:	f104 0014 	add.w	r0, r4, #20
    9eda:	2200      	movs	r2, #0
    9edc:	2104      	movs	r1, #4
    9ede:	f016 ff6a 	bl	20db6 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    9ee2:	2301      	movs	r3, #1
    9ee4:	f884 3020 	strb.w	r3, [r4, #32]
    9ee8:	2002      	movs	r0, #2
	return ev_count;
    9eea:	e7d9      	b.n	9ea0 <bt_conn_prepare_events+0x20>
    9eec:	20005b58 	.word	0x20005b58
    9ef0:	20000398 	.word	0x20000398
    9ef4:	200003cc 	.word	0x200003cc

00009ef8 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    9ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    9efc:	4c1a      	ldr	r4, [pc, #104]	; (9f68 <bt_conn_add_le+0x70>)
    9efe:	f104 084c 	add.w	r8, r4, #76	; 0x4c
{
    9f02:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    9f04:	4640      	mov	r0, r8
{
    9f06:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    9f08:	f014 fdc9 	bl	1ea9e <atomic_get>
    9f0c:	4605      	mov	r5, r0
    9f0e:	b110      	cbz	r0, 9f16 <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    9f10:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    9f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    9f16:	4601      	mov	r1, r0
    9f18:	22a0      	movs	r2, #160	; 0xa0
    9f1a:	4620      	mov	r0, r4
    9f1c:	f014 fb0f 	bl	1e53e <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    9f20:	4912      	ldr	r1, [pc, #72]	; (9f6c <bt_conn_add_le+0x74>)
    9f22:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9f26:	f016 fda9 	bl	20a7c <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    9f2a:	4b11      	ldr	r3, [pc, #68]	; (9f70 <bt_conn_add_le+0x78>)
    9f2c:	62a5      	str	r5, [r4, #40]	; 0x28
    9f2e:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9f32:	2501      	movs	r5, #1
    9f34:	f3bf 8f5b 	dmb	ish
    9f38:	e858 3f00 	ldrex	r3, [r8]
    9f3c:	e848 5200 	strex	r2, r5, [r8]
    9f40:	2a00      	cmp	r2, #0
    9f42:	d1f9      	bne.n	9f38 <bt_conn_add_le+0x40>
    9f44:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9f48:	2207      	movs	r2, #7
    9f4a:	4631      	mov	r1, r6
    9f4c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->id = id;
    9f50:	7227      	strb	r7, [r4, #8]
    9f52:	f014 fac9 	bl	1e4e8 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9f56:	4b07      	ldr	r3, [pc, #28]	; (9f74 <bt_conn_add_le+0x7c>)
	conn->sec_level = BT_SECURITY_L1;
    9f58:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    9f5a:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    9f5c:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9f5e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			conn = &conns[i];
    9f62:	4620      	mov	r0, r4
	return conn;
    9f64:	e7d5      	b.n	9f12 <bt_conn_add_le+0x1a>
    9f66:	bf00      	nop
    9f68:	20000398 	.word	0x20000398
    9f6c:	0000a20d 	.word	0x0000a20d
    9f70:	0001eb3b 	.word	0x0001eb3b
    9f74:	00280018 	.word	0x00280018

00009f78 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    9f78:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    9f7a:	7b45      	ldrb	r5, [r0, #13]
    9f7c:	428d      	cmp	r5, r1
{
    9f7e:	4604      	mov	r4, r0
    9f80:	460e      	mov	r6, r1
	if (conn->state == state) {
    9f82:	d10b      	bne.n	9f9c <bt_conn_set_state+0x24>
    9f84:	4956      	ldr	r1, [pc, #344]	; (a0e0 <bt_conn_set_state+0x168>)
    9f86:	4b57      	ldr	r3, [pc, #348]	; (a0e4 <bt_conn_set_state+0x16c>)
		BT_WARN("no transition");
    9f88:	4857      	ldr	r0, [pc, #348]	; (a0e8 <bt_conn_set_state+0x170>)
    9f8a:	1ac9      	subs	r1, r1, r3
    9f8c:	08c9      	lsrs	r1, r1, #3
    9f8e:	0189      	lsls	r1, r1, #6
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    9f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    9f94:	f041 0102 	orr.w	r1, r1, #2
    9f98:	f013 bb86 	b.w	1d6a8 <log_0>
	conn->state = state;
    9f9c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    9f9e:	b915      	cbnz	r5, 9fa6 <bt_conn_set_state+0x2e>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    9fa0:	304c      	adds	r0, #76	; 0x4c
    9fa2:	f014 fd9a 	bl	1eada <atomic_inc>
	switch (conn->state) {
    9fa6:	7b63      	ldrb	r3, [r4, #13]
    9fa8:	2b07      	cmp	r3, #7
    9faa:	f200 808c 	bhi.w	a0c6 <bt_conn_set_state+0x14e>
    9fae:	e8df f003 	tbb	[pc, r3]
    9fb2:	891b      	.short	0x891b
    9fb4:	89898989 	.word	0x89898989
    9fb8:	8904      	.short	0x8904
		if (conn->type == BT_CONN_TYPE_SCO) {
    9fba:	78a3      	ldrb	r3, [r4, #2]
    9fbc:	2b04      	cmp	r3, #4
    9fbe:	f000 8081 	beq.w	a0c4 <bt_conn_set_state+0x14c>
	z_impl_k_queue_init(queue);
    9fc2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    9fc6:	f016 fb29 	bl	2061c <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9fca:	2100      	movs	r1, #0
    9fcc:	4847      	ldr	r0, [pc, #284]	; (a0ec <bt_conn_set_state+0x174>)
    9fce:	f011 ff0d 	bl	1bdec <z_impl_k_poll_signal_raise>
	list->head = NULL;
    9fd2:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    9fd4:	4620      	mov	r0, r4
	list->tail = NULL;
    9fd6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    9fda:	f000 faef 	bl	a5bc <bt_l2cap_connected>
		notify_connected(conn);
    9fde:	4620      	mov	r0, r4
}
    9fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    9fe4:	f7ff bce6 	b.w	99b4 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    9fe8:	78a3      	ldrb	r3, [r4, #2]
    9fea:	2b04      	cmp	r3, #4
    9fec:	d105      	bne.n	9ffa <bt_conn_set_state+0x82>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    9fee:	f104 004c 	add.w	r0, r4, #76	; 0x4c
}
    9ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_dec(&conn->ref);
    9ff6:	f014 bd63 	b.w	1eac0 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    9ffa:	1fab      	subs	r3, r5, #6
    9ffc:	2b01      	cmp	r3, #1
    9ffe:	d851      	bhi.n	a0a4 <bt_conn_set_state+0x12c>
	z_impl_k_sem_give(sem);
    a000:	4d3b      	ldr	r5, [pc, #236]	; (a0f0 <bt_conn_set_state+0x178>)
		tx->pending_no_cb = 0U;
    a002:	2600      	movs	r6, #0
	__asm__ volatile(
    a004:	f04f 0320 	mov.w	r3, #32
    a008:	f3ef 8211 	mrs	r2, BASEPRI
    a00c:	f383 8811 	msr	BASEPRI, r3
    a010:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a014:	69e3      	ldr	r3, [r4, #28]
    a016:	b14b      	cbz	r3, a02c <bt_conn_set_state+0xb4>
			conn->pending_no_cb--;
    a018:	3b01      	subs	r3, #1
    a01a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a01c:	f382 8811 	msr	BASEPRI, r2
    a020:	f3bf 8f6f 	isb	sy
    a024:	4628      	mov	r0, r5
    a026:	f011 fbc3 	bl	1b7b0 <z_impl_k_sem_give>
}
    a02a:	e7eb      	b.n	a004 <bt_conn_set_state+0x8c>
Z_GENLIST_IS_EMPTY(slist)
    a02c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a02e:	b128      	cbz	r0, a03c <bt_conn_set_state+0xc4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a030:	69a1      	ldr	r1, [r4, #24]
    a032:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a034:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a036:	4288      	cmp	r0, r1
	list->tail = node;
    a038:	bf08      	it	eq
    a03a:	61a3      	streq	r3, [r4, #24]
    a03c:	f382 8811 	msr	BASEPRI, r2
    a040:	f3bf 8f6f 	isb	sy
		if (!node) {
    a044:	b188      	cbz	r0, a06a <bt_conn_set_state+0xf2>
	__asm__ volatile(
    a046:	f04f 0220 	mov.w	r2, #32
    a04a:	f3ef 8311 	mrs	r3, BASEPRI
    a04e:	f382 8811 	msr	BASEPRI, r2
    a052:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a056:	68c2      	ldr	r2, [r0, #12]
    a058:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a05a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a05c:	f383 8811 	msr	BASEPRI, r3
    a060:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a064:	f7ff fc9c 	bl	99a0 <tx_free>
    a068:	e7dc      	b.n	a024 <bt_conn_set_state+0xac>
			tx_notify(conn);
    a06a:	4620      	mov	r0, r4
    a06c:	f014 fd42 	bl	1eaf4 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a070:	78a3      	ldrb	r3, [r4, #2]
    a072:	2b01      	cmp	r3, #1
    a074:	d103      	bne.n	a07e <bt_conn_set_state+0x106>
				k_delayed_work_cancel(&conn->update_work);
    a076:	f104 0050 	add.w	r0, r4, #80	; 0x50
    a07a:	f016 fd07 	bl	20a8c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a07e:	f3bf 8f5b 	dmb	ish
    a082:	3404      	adds	r4, #4
    a084:	e854 3f00 	ldrex	r3, [r4]
    a088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a08c:	e844 3200 	strex	r2, r3, [r4]
    a090:	2a00      	cmp	r2, #0
    a092:	d1f7      	bne.n	a084 <bt_conn_set_state+0x10c>
    a094:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    a098:	4814      	ldr	r0, [pc, #80]	; (a0ec <bt_conn_set_state+0x174>)
}
    a09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a09e:	2100      	movs	r1, #0
    a0a0:	f011 bea4 	b.w	1bdec <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    a0a4:	2d05      	cmp	r5, #5
    a0a6:	d106      	bne.n	a0b6 <bt_conn_set_state+0x13e>
			if (conn->err) {
    a0a8:	7b23      	ldrb	r3, [r4, #12]
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	d09f      	beq.n	9fee <bt_conn_set_state+0x76>
				notify_connected(conn);
    a0ae:	4620      	mov	r0, r4
    a0b0:	f7ff fc80 	bl	99b4 <notify_connected>
    a0b4:	e79b      	b.n	9fee <bt_conn_set_state+0x76>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    a0b6:	2d01      	cmp	r5, #1
    a0b8:	d0f6      	beq.n	a0a8 <bt_conn_set_state+0x130>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    a0ba:	2d04      	cmp	r5, #4
    a0bc:	d0f4      	beq.n	a0a8 <bt_conn_set_state+0x130>
		} else if (old_state == BT_CONN_CONNECT_AUTO) {
    a0be:	3d02      	subs	r5, #2
    a0c0:	2d01      	cmp	r5, #1
    a0c2:	d994      	bls.n	9fee <bt_conn_set_state+0x76>
}
    a0c4:	bd70      	pop	{r4, r5, r6, pc}
    a0c6:	4a06      	ldr	r2, [pc, #24]	; (a0e0 <bt_conn_set_state+0x168>)
    a0c8:	4b06      	ldr	r3, [pc, #24]	; (a0e4 <bt_conn_set_state+0x16c>)
		BT_WARN("no valid (%u) state was set", state);
    a0ca:	480a      	ldr	r0, [pc, #40]	; (a0f4 <bt_conn_set_state+0x17c>)
    a0cc:	1ad2      	subs	r2, r2, r3
    a0ce:	08d2      	lsrs	r2, r2, #3
    a0d0:	0192      	lsls	r2, r2, #6
    a0d2:	4631      	mov	r1, r6
    a0d4:	f042 0202 	orr.w	r2, r2, #2
}
    a0d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a0dc:	f013 baf1 	b.w	1d6c2 <log_1>
    a0e0:	00021124 	.word	0x00021124
    a0e4:	00021114 	.word	0x00021114
    a0e8:	000242bf 	.word	0x000242bf
    a0ec:	20005b58 	.word	0x20005b58
    a0f0:	20005914 	.word	0x20005914
    a0f4:	000242cd 	.word	0x000242cd

0000a0f8 <bt_conn_lookup_handle>:
{
    a0f8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a0fa:	4c0b      	ldr	r4, [pc, #44]	; (a128 <bt_conn_lookup_handle+0x30>)
{
    a0fc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a0fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    a102:	f014 fccc 	bl	1ea9e <atomic_get>
    a106:	b158      	cbz	r0, a120 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a108:	7b62      	ldrb	r2, [r4, #13]
    a10a:	3a06      	subs	r2, #6
    a10c:	2a01      	cmp	r2, #1
    a10e:	d808      	bhi.n	a122 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    a110:	8822      	ldrh	r2, [r4, #0]
    a112:	429a      	cmp	r2, r3
    a114:	d105      	bne.n	a122 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    a116:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    a11a:	f014 fcde 	bl	1eada <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a11e:	4620      	mov	r0, r4
}
    a120:	bd10      	pop	{r4, pc}
	return NULL;
    a122:	2000      	movs	r0, #0
    a124:	e7fc      	b.n	a120 <bt_conn_lookup_handle+0x28>
    a126:	bf00      	nop
    a128:	20000398 	.word	0x20000398

0000a12c <bt_conn_lookup_addr_le>:
{
    a12c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a12e:	4c0c      	ldr	r4, [pc, #48]	; (a160 <bt_conn_lookup_addr_le+0x34>)
{
    a130:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a132:	f104 004c 	add.w	r0, r4, #76	; 0x4c
{
    a136:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    a138:	f014 fcb1 	bl	1ea9e <atomic_get>
    a13c:	b908      	cbnz	r0, a142 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    a13e:	2000      	movs	r0, #0
}
    a140:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a142:	78a1      	ldrb	r1, [r4, #2]
    a144:	2901      	cmp	r1, #1
    a146:	d1fa      	bne.n	a13e <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a148:	4619      	mov	r1, r3
    a14a:	4620      	mov	r0, r4
    a14c:	f014 fd2d 	bl	1ebaa <bt_conn_is_peer_addr_le>
    a150:	2800      	cmp	r0, #0
    a152:	d0f4      	beq.n	a13e <bt_conn_lookup_addr_le+0x12>
	atomic_inc(&conn->ref);
    a154:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    a158:	f014 fcbf 	bl	1eada <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a15c:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    a15e:	e7ef      	b.n	a140 <bt_conn_lookup_addr_le+0x14>
    a160:	20000398 	.word	0x20000398

0000a164 <bt_conn_lookup_state_le>:
{
    a164:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    a166:	4c10      	ldr	r4, [pc, #64]	; (a1a8 <bt_conn_lookup_state_le+0x44>)
{
    a168:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    a16a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
{
    a16e:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    a170:	f014 fc95 	bl	1ea9e <atomic_get>
    a174:	b908      	cbnz	r0, a17a <bt_conn_lookup_state_le+0x16>
	return NULL;
    a176:	2000      	movs	r0, #0
}
    a178:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a17a:	78a3      	ldrb	r3, [r4, #2]
    a17c:	2b01      	cmp	r3, #1
    a17e:	d1fa      	bne.n	a176 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a180:	b951      	cbnz	r1, a198 <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    a182:	7b63      	ldrb	r3, [r4, #13]
    a184:	42b3      	cmp	r3, r6
    a186:	d1f6      	bne.n	a176 <bt_conn_lookup_state_le+0x12>
    a188:	7a23      	ldrb	r3, [r4, #8]
    a18a:	42ab      	cmp	r3, r5
    a18c:	d1f3      	bne.n	a176 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    a18e:	4807      	ldr	r0, [pc, #28]	; (a1ac <bt_conn_lookup_state_le+0x48>)
    a190:	f014 fca3 	bl	1eada <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a194:	4804      	ldr	r0, [pc, #16]	; (a1a8 <bt_conn_lookup_state_le+0x44>)
    a196:	e7ef      	b.n	a178 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a198:	460a      	mov	r2, r1
    a19a:	4620      	mov	r0, r4
    a19c:	4629      	mov	r1, r5
    a19e:	f014 fd04 	bl	1ebaa <bt_conn_is_peer_addr_le>
    a1a2:	2800      	cmp	r0, #0
    a1a4:	d1ed      	bne.n	a182 <bt_conn_lookup_state_le+0x1e>
    a1a6:	e7e6      	b.n	a176 <bt_conn_lookup_state_le+0x12>
    a1a8:	20000398 	.word	0x20000398
    a1ac:	200003e4 	.word	0x200003e4

0000a1b0 <send_conn_le_param_update>:
{
    a1b0:	b538      	push	{r3, r4, r5, lr}
    a1b2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    a1b4:	4608      	mov	r0, r1
{
    a1b6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a1b8:	f014 fc16 	bl	1e9e8 <bt_le_conn_params_valid>
    a1bc:	b308      	cbz	r0, a202 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a1be:	4b12      	ldr	r3, [pc, #72]	; (a208 <send_conn_le_param_update+0x58>)
    a1c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    a1c4:	0799      	lsls	r1, r3, #30
    a1c6:	d407      	bmi.n	a1d8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a1c8:	78e3      	ldrb	r3, [r4, #3]
    a1ca:	b173      	cbz	r3, a1ea <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    a1cc:	4629      	mov	r1, r5
    a1ce:	4620      	mov	r0, r4
}
    a1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a1d4:	f000 baf6 	b.w	a7c4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a1d8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    a1dc:	079a      	lsls	r2, r3, #30
    a1de:	d5f3      	bpl.n	a1c8 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a1e0:	1d20      	adds	r0, r4, #4
    a1e2:	f014 fc5c 	bl	1ea9e <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a1e6:	0543      	lsls	r3, r0, #21
    a1e8:	d4ee      	bmi.n	a1c8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    a1ea:	4629      	mov	r1, r5
    a1ec:	4620      	mov	r0, r4
    a1ee:	f014 fd2a 	bl	1ec46 <bt_conn_le_conn_update>
		if (rc == 0) {
    a1f2:	b928      	cbnz	r0, a200 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    a1f4:	88ab      	ldrh	r3, [r5, #4]
    a1f6:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			conn->le.pending_timeout = param->timeout;
    a1fa:	88eb      	ldrh	r3, [r5, #6]
    a1fc:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
}
    a200:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a202:	f06f 0015 	mvn.w	r0, #21
    a206:	e7fb      	b.n	a200 <send_conn_le_param_update+0x50>
    a208:	20005888 	.word	0x20005888

0000a20c <conn_update_timeout>:
{
    a20c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a20e:	f810 3c43 	ldrb.w	r3, [r0, #-67]
{
    a212:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    a214:	f1a0 0650 	sub.w	r6, r0, #80	; 0x50
	if (conn->state == BT_CONN_DISCONNECTED) {
    a218:	b9f3      	cbnz	r3, a258 <conn_update_timeout+0x4c>
		bt_l2cap_disconnected(conn);
    a21a:	4630      	mov	r0, r6
    a21c:	f014 fd70 	bl	1ed00 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a220:	4b25      	ldr	r3, [pc, #148]	; (a2b8 <conn_update_timeout+0xac>)
    a222:	681d      	ldr	r5, [r3, #0]
    a224:	b985      	cbnz	r5, a248 <conn_update_timeout+0x3c>
	atomic_dec(&conn->ref);
    a226:	1f20      	subs	r0, r4, #4
    a228:	f014 fc4a 	bl	1eac0 <atomic_dec>
    a22c:	4823      	ldr	r0, [pc, #140]	; (a2bc <conn_update_timeout+0xb0>)
    a22e:	f014 fc36 	bl	1ea9e <atomic_get>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a232:	0581      	lsls	r1, r0, #22
    a234:	d506      	bpl.n	a244 <conn_update_timeout+0x38>
    a236:	4821      	ldr	r0, [pc, #132]	; (a2bc <conn_update_timeout+0xb0>)
    a238:	f014 fc31 	bl	1ea9e <atomic_get>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    a23c:	0682      	lsls	r2, r0, #26
    a23e:	d401      	bmi.n	a244 <conn_update_timeout+0x38>
			bt_le_adv_resume();
    a240:	f7ff f90e 	bl	9460 <bt_le_adv_resume>
}
    a244:	b002      	add	sp, #8
    a246:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    a248:	686b      	ldr	r3, [r5, #4]
    a24a:	b11b      	cbz	r3, a254 <conn_update_timeout+0x48>
			cb->disconnected(conn, conn->err);
    a24c:	f814 1c44 	ldrb.w	r1, [r4, #-68]
    a250:	4630      	mov	r0, r6
    a252:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a254:	69ad      	ldr	r5, [r5, #24]
    a256:	e7e5      	b.n	a224 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a258:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
    a25c:	2b01      	cmp	r3, #1
    a25e:	d1f1      	bne.n	a244 <conn_update_timeout+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a260:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    a264:	f1a0 054c 	sub.w	r5, r0, #76	; 0x4c
    a268:	e855 3f00 	ldrex	r3, [r5]
    a26c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    a270:	e845 2100 	strex	r1, r2, [r5]
    a274:	2900      	cmp	r1, #0
    a276:	d1f7      	bne.n	a268 <conn_update_timeout+0x5c>
    a278:	f3bf 8f5b 	dmb	ish
    a27c:	059b      	lsls	r3, r3, #22
    a27e:	d514      	bpl.n	a2aa <conn_update_timeout+0x9e>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a282:	9300      	str	r3, [sp, #0]
    a284:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a286:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    a288:	4669      	mov	r1, sp
    a28a:	4630      	mov	r0, r6
    a28c:	f7ff ff90 	bl	a1b0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a290:	f3bf 8f5b 	dmb	ish
    a294:	e855 3f00 	ldrex	r3, [r5]
    a298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a29c:	e845 3200 	strex	r2, r3, [r5]
    a2a0:	2a00      	cmp	r2, #0
    a2a2:	d1f7      	bne.n	a294 <conn_update_timeout+0x88>
    a2a4:	f3bf 8f5b 	dmb	ish
    a2a8:	e7cc      	b.n	a244 <conn_update_timeout+0x38>
			param = BT_LE_CONN_PARAM(
    a2aa:	4a05      	ldr	r2, [pc, #20]	; (a2c0 <conn_update_timeout+0xb4>)
    a2ac:	6810      	ldr	r0, [r2, #0]
    a2ae:	6851      	ldr	r1, [r2, #4]
    a2b0:	466b      	mov	r3, sp
    a2b2:	c303      	stmia	r3!, {r0, r1}
    a2b4:	e7e8      	b.n	a288 <conn_update_timeout+0x7c>
    a2b6:	bf00      	nop
    a2b8:	20000364 	.word	0x20000364
    a2bc:	200058f8 	.word	0x200058f8
    a2c0:	000212f0 	.word	0x000212f0

0000a2c4 <bt_conn_create_pdu_timeout>:
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    a2c4:	4b0e      	ldr	r3, [pc, #56]	; (a300 <bt_conn_create_pdu_timeout+0x3c>)
{
    a2c6:	b570      	push	{r4, r5, r6, lr}
		buf = net_buf_alloc(pool, timeout);
    a2c8:	2800      	cmp	r0, #0
    a2ca:	bf08      	it	eq
    a2cc:	4618      	moveq	r0, r3
{
    a2ce:	460e      	mov	r6, r1
		buf = net_buf_alloc(pool, timeout);
    a2d0:	4611      	mov	r1, r2
{
    a2d2:	4615      	mov	r5, r2
		buf = net_buf_alloc(pool, timeout);
    a2d4:	f015 ff01 	bl	200da <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    a2d8:	4604      	mov	r4, r0
    a2da:	b960      	cbnz	r0, a2f6 <bt_conn_create_pdu_timeout+0x32>
    a2dc:	4a09      	ldr	r2, [pc, #36]	; (a304 <bt_conn_create_pdu_timeout+0x40>)
    a2de:	4b0a      	ldr	r3, [pc, #40]	; (a308 <bt_conn_create_pdu_timeout+0x44>)
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    a2e0:	480a      	ldr	r0, [pc, #40]	; (a30c <bt_conn_create_pdu_timeout+0x48>)
    a2e2:	1a9b      	subs	r3, r3, r2
    a2e4:	08db      	lsrs	r3, r3, #3
    a2e6:	019b      	lsls	r3, r3, #6
    a2e8:	f043 0202 	orr.w	r2, r3, #2
    a2ec:	4629      	mov	r1, r5
    a2ee:	f013 f9e8 	bl	1d6c2 <log_1>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a2f2:	4620      	mov	r0, r4
    a2f4:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_reserve(buf, reserve);
    a2f6:	1d31      	adds	r1, r6, #4
    a2f8:	3008      	adds	r0, #8
    a2fa:	f015 ff0d 	bl	20118 <net_buf_simple_reserve>
	return buf;
    a2fe:	e7f8      	b.n	a2f2 <bt_conn_create_pdu_timeout+0x2e>
    a300:	20006240 	.word	0x20006240
    a304:	00021114 	.word	0x00021114
    a308:	00021124 	.word	0x00021124
    a30c:	000242e9 	.word	0x000242e9

0000a310 <bt_conn_create_frag_timeout>:
{
    a310:	460a      	mov	r2, r1
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    a312:	4601      	mov	r1, r0
    a314:	4801      	ldr	r0, [pc, #4]	; (a31c <bt_conn_create_frag_timeout+0xc>)
    a316:	f7ff bfd5 	b.w	a2c4 <bt_conn_create_pdu_timeout>
    a31a:	bf00      	nop
    a31c:	200062a0 	.word	0x200062a0

0000a320 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a324:	4606      	mov	r6, r0
    a326:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    a328:	2000      	movs	r0, #0
    a32a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a32e:	f7ff ffef 	bl	a310 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    a332:	7833      	ldrb	r3, [r6, #0]
    a334:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    a336:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a338:	f04f 0600 	mov.w	r6, #0
    a33c:	d005      	beq.n	a34a <create_frag.isra.0+0x2a>
		net_buf_unref(frag);
    a33e:	f00f fc5b 	bl	19bf8 <net_buf_unref>
		return NULL;
    a342:	4635      	mov	r5, r6
}
    a344:	4628      	mov	r0, r5
    a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    a34a:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a34c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    a350:	4e0c      	ldr	r6, [pc, #48]	; (a384 <create_frag.isra.0+0x64>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a352:	4638      	mov	r0, r7
    a354:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    a358:	f015 ff2e 	bl	201b8 <net_buf_simple_tailroom>
    a35c:	4580      	cmp	r8, r0
    a35e:	d20c      	bcs.n	a37a <create_frag.isra.0+0x5a>
	return bt_dev.le.mtu;
    a360:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    a364:	f854 1f08 	ldr.w	r1, [r4, #8]!
    a368:	4632      	mov	r2, r6
    a36a:	4638      	mov	r0, r7
    a36c:	f015 feef 	bl	2014e <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    a370:	4631      	mov	r1, r6
    a372:	4620      	mov	r0, r4
    a374:	f015 ff04 	bl	20180 <net_buf_simple_pull>
	return frag;
    a378:	e7e4      	b.n	a344 <create_frag.isra.0+0x24>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a37a:	4638      	mov	r0, r7
    a37c:	f015 ff1c 	bl	201b8 <net_buf_simple_tailroom>
    a380:	b286      	uxth	r6, r0
    a382:	e7ef      	b.n	a364 <create_frag.isra.0+0x44>
    a384:	20005888 	.word	0x20005888

0000a388 <bt_conn_process_tx>:
{
    a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a38a:	7b43      	ldrb	r3, [r0, #13]
{
    a38c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a38e:	b993      	cbnz	r3, a3b6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a390:	f3bf 8f5b 	dmb	ish
    a394:	1d03      	adds	r3, r0, #4
    a396:	e853 2f00 	ldrex	r2, [r3]
    a39a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a39e:	e843 1400 	strex	r4, r1, [r3]
    a3a2:	2c00      	cmp	r4, #0
    a3a4:	d1f7      	bne.n	a396 <bt_conn_process_tx+0xe>
    a3a6:	f3bf 8f5b 	dmb	ish
    a3aa:	0653      	lsls	r3, r2, #25
    a3ac:	d503      	bpl.n	a3b6 <bt_conn_process_tx+0x2e>
}
    a3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a3b2:	f7ff bbab 	b.w	9b0c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a3b6:	2100      	movs	r1, #0
    a3b8:	f105 0034 	add.w	r0, r5, #52	; 0x34
    a3bc:	f015 fe93 	bl	200e6 <net_buf_get>
	BT_ASSERT(buf);
    a3c0:	4604      	mov	r4, r0
    a3c2:	b960      	cbnz	r0, a3de <bt_conn_process_tx+0x56>
    a3c4:	4a20      	ldr	r2, [pc, #128]	; (a448 <bt_conn_process_tx+0xc0>)
    a3c6:	4921      	ldr	r1, [pc, #132]	; (a44c <bt_conn_process_tx+0xc4>)
    a3c8:	4821      	ldr	r0, [pc, #132]	; (a450 <bt_conn_process_tx+0xc8>)
    a3ca:	f240 6316 	movw	r3, #1558	; 0x616
    a3ce:	f012 f81d 	bl	1c40c <printk>
    a3d2:	4040      	eors	r0, r0
    a3d4:	f380 8811 	msr	BASEPRI, r0
    a3d8:	f04f 0003 	mov.w	r0, #3
    a3dc:	df02      	svc	2
	return bt_dev.le.mtu;
    a3de:	4f1d      	ldr	r7, [pc, #116]	; (a454 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    a3e0:	89a1      	ldrh	r1, [r4, #12]
    a3e2:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
    a3e6:	4291      	cmp	r1, r2
    a3e8:	d807      	bhi.n	a3fa <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    a3ea:	2300      	movs	r3, #0
    a3ec:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a3ee:	4621      	mov	r1, r4
    a3f0:	4628      	mov	r0, r5
    a3f2:	f7ff faf5 	bl	99e0 <send_frag>
	if (!send_buf(conn, buf)) {
    a3f6:	b140      	cbz	r0, a40a <bt_conn_process_tx+0x82>
}
    a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a3fa:	f105 060d 	add.w	r6, r5, #13
    a3fe:	4621      	mov	r1, r4
    a400:	4630      	mov	r0, r6
    a402:	f7ff ff8d 	bl	a320 <create_frag.isra.0>
	if (!frag) {
    a406:	4601      	mov	r1, r0
    a408:	b920      	cbnz	r0, a414 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    a40a:	4620      	mov	r0, r4
}
    a40c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a410:	f00f bbf2 	b.w	19bf8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    a414:	2301      	movs	r3, #1
    a416:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a418:	4628      	mov	r0, r5
    a41a:	f7ff fae1 	bl	99e0 <send_frag>
    a41e:	2800      	cmp	r0, #0
    a420:	d0f3      	beq.n	a40a <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    a422:	89a2      	ldrh	r2, [r4, #12]
    a424:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
    a428:	429a      	cmp	r2, r3
    a42a:	d802      	bhi.n	a432 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a42c:	2300      	movs	r3, #0
    a42e:	2201      	movs	r2, #1
    a430:	e7dd      	b.n	a3ee <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    a432:	4621      	mov	r1, r4
    a434:	4630      	mov	r0, r6
    a436:	f7ff ff73 	bl	a320 <create_frag.isra.0>
		if (!frag) {
    a43a:	4601      	mov	r1, r0
    a43c:	2800      	cmp	r0, #0
    a43e:	d0e4      	beq.n	a40a <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a440:	2301      	movs	r3, #1
    a442:	461a      	mov	r2, r3
    a444:	e7e8      	b.n	a418 <bt_conn_process_tx+0x90>
    a446:	bf00      	nop
    a448:	0002430f 	.word	0x0002430f
    a44c:	00024d65 	.word	0x00024d65
    a450:	00023a41 	.word	0x00023a41
    a454:	20005888 	.word	0x20005888

0000a458 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    a458:	4b0c      	ldr	r3, [pc, #48]	; (a48c <bt_conn_auth_cb_register+0x34>)
    a45a:	b908      	cbnz	r0, a460 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    a45c:	6018      	str	r0, [r3, #0]
		return 0;
    a45e:	4770      	bx	lr
	}

	if (bt_auth) {
    a460:	681a      	ldr	r2, [r3, #0]
    a462:	b962      	cbnz	r2, a47e <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    a464:	6902      	ldr	r2, [r0, #16]
    a466:	b93a      	cbnz	r2, a478 <bt_conn_auth_cb_register+0x20>
    a468:	6802      	ldr	r2, [r0, #0]
    a46a:	b95a      	cbnz	r2, a484 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    a46c:	6842      	ldr	r2, [r0, #4]
    a46e:	b94a      	cbnz	r2, a484 <bt_conn_auth_cb_register+0x2c>
    a470:	6882      	ldr	r2, [r0, #8]
    a472:	b93a      	cbnz	r2, a484 <bt_conn_auth_cb_register+0x2c>
    a474:	6942      	ldr	r2, [r0, #20]
    a476:	b92a      	cbnz	r2, a484 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    a478:	6018      	str	r0, [r3, #0]
	return 0;
    a47a:	2000      	movs	r0, #0
    a47c:	4770      	bx	lr
		return -EALREADY;
    a47e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a482:	4770      	bx	lr
		return -EINVAL;
    a484:	f06f 0015 	mvn.w	r0, #21
}
    a488:	4770      	bx	lr
    a48a:	bf00      	nop
    a48c:	20000360 	.word	0x20000360

0000a490 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    a490:	4b03      	ldr	r3, [pc, #12]	; (a4a0 <bt_conn_index+0x10>)
    a492:	1ac0      	subs	r0, r0, r3
    a494:	4b03      	ldr	r3, [pc, #12]	; (a4a4 <bt_conn_index+0x14>)
    a496:	1140      	asrs	r0, r0, #5
    a498:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    a49a:	b2c0      	uxtb	r0, r0
    a49c:	4770      	bx	lr
    a49e:	bf00      	nop
    a4a0:	20000398 	.word	0x20000398
    a4a4:	cccccccd 	.word	0xcccccccd

0000a4a8 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    a4a8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    a4aa:	490b      	ldr	r1, [pc, #44]	; (a4d8 <bt_conn_init+0x30>)
    a4ac:	480b      	ldr	r0, [pc, #44]	; (a4dc <bt_conn_init+0x34>)
    a4ae:	f016 f8bd 	bl	2062c <k_queue_append>
    a4b2:	490b      	ldr	r1, [pc, #44]	; (a4e0 <bt_conn_init+0x38>)
    a4b4:	4809      	ldr	r0, [pc, #36]	; (a4dc <bt_conn_init+0x34>)
    a4b6:	f016 f8b9 	bl	2062c <k_queue_append>
    a4ba:	490a      	ldr	r1, [pc, #40]	; (a4e4 <bt_conn_init+0x3c>)
    a4bc:	4807      	ldr	r0, [pc, #28]	; (a4dc <bt_conn_init+0x34>)
    a4be:	f016 f8b5 	bl	2062c <k_queue_append>
	}

	bt_att_init();
    a4c2:	f014 ff09 	bl	1f2d8 <bt_att_init>

	err = bt_smp_init();
    a4c6:	f004 f87f 	bl	e5c8 <bt_smp_init>
	if (err) {
    a4ca:	4604      	mov	r4, r0
    a4cc:	b908      	cbnz	r0, a4d2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    a4ce:	f014 fc7a 	bl	1edc6 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    a4d2:	4620      	mov	r0, r4
    a4d4:	bd10      	pop	{r4, pc}
    a4d6:	bf00      	nop
    a4d8:	20000368 	.word	0x20000368
    a4dc:	20006220 	.word	0x20006220
    a4e0:	20000378 	.word	0x20000378
    a4e4:	20000388 	.word	0x20000388

0000a4e8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    a4e8:	4a0b      	ldr	r2, [pc, #44]	; (a518 <l2cap_accept+0x30>)
{
    a4ea:	b508      	push	{r3, lr}
    a4ec:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    a4ee:	6810      	ldr	r0, [r2, #0]
    a4f0:	b918      	cbnz	r0, a4fa <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    a4f2:	4b0a      	ldr	r3, [pc, #40]	; (a51c <l2cap_accept+0x34>)
    a4f4:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    a4f6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    a4f8:	bd08      	pop	{r3, pc}
    a4fa:	4909      	ldr	r1, [pc, #36]	; (a520 <l2cap_accept+0x38>)
    a4fc:	4a09      	ldr	r2, [pc, #36]	; (a524 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    a4fe:	480a      	ldr	r0, [pc, #40]	; (a528 <l2cap_accept+0x40>)
    a500:	1a52      	subs	r2, r2, r1
    a502:	08d2      	lsrs	r2, r2, #3
    a504:	0192      	lsls	r2, r2, #6
    a506:	f042 0201 	orr.w	r2, r2, #1
    a50a:	4619      	mov	r1, r3
    a50c:	f013 f8d9 	bl	1d6c2 <log_1>
	return -ENOMEM;
    a510:	f06f 000b 	mvn.w	r0, #11
    a514:	e7f0      	b.n	a4f8 <l2cap_accept+0x10>
    a516:	bf00      	nop
    a518:	20000438 	.word	0x20000438
    a51c:	000219f8 	.word	0x000219f8
    a520:	00021114 	.word	0x00021114
    a524:	000211ec 	.word	0x000211ec
    a528:	00024388 	.word	0x00024388

0000a52c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a52e:	4605      	mov	r5, r0
    a530:	460f      	mov	r7, r1
    a532:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    a534:	2104      	movs	r1, #4
    a536:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a53a:	2000      	movs	r0, #0
    a53c:	f7ff fec2 	bl	a2c4 <bt_conn_create_pdu_timeout>
	if (!buf) {
    a540:	4604      	mov	r4, r0
    a542:	b960      	cbnz	r0, a55e <l2cap_create_le_sig_pdu.isra.0+0x32>
    a544:	4a0a      	ldr	r2, [pc, #40]	; (a570 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    a546:	4b0b      	ldr	r3, [pc, #44]	; (a574 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    a548:	480b      	ldr	r0, [pc, #44]	; (a578 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    a54a:	1ad2      	subs	r2, r2, r3
    a54c:	08d2      	lsrs	r2, r2, #3
    a54e:	0192      	lsls	r2, r2, #6
    a550:	f042 0201 	orr.w	r2, r2, #1
    a554:	4629      	mov	r1, r5
    a556:	f013 f8b4 	bl	1d6c2 <log_1>
}
    a55a:	4620      	mov	r0, r4
    a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    a55e:	2104      	movs	r1, #4
    a560:	3008      	adds	r0, #8
    a562:	f015 fdee 	bl	20142 <net_buf_simple_add>
	hdr->code = code;
    a566:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    a568:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    a56a:	8046      	strh	r6, [r0, #2]
	return buf;
    a56c:	e7f5      	b.n	a55a <l2cap_create_le_sig_pdu.isra.0+0x2e>
    a56e:	bf00      	nop
    a570:	000211ec 	.word	0x000211ec
    a574:	00021114 	.word	0x00021114
    a578:	000243af 	.word	0x000243af

0000a57c <l2cap_rtx_timeout>:
{
    a57c:	b538      	push	{r3, r4, r5, lr}
    a57e:	4a0c      	ldr	r2, [pc, #48]	; (a5b0 <l2cap_rtx_timeout+0x34>)
    a580:	4b0c      	ldr	r3, [pc, #48]	; (a5b4 <l2cap_rtx_timeout+0x38>)
    a582:	1ad2      	subs	r2, r2, r3
    a584:	08d2      	lsrs	r2, r2, #3
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    a586:	f1a0 0510 	sub.w	r5, r0, #16
{
    a58a:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    a58c:	0192      	lsls	r2, r2, #6
    a58e:	4629      	mov	r1, r5
    a590:	4809      	ldr	r0, [pc, #36]	; (a5b8 <l2cap_rtx_timeout+0x3c>)
    a592:	f042 0201 	orr.w	r2, r2, #1
    a596:	f013 f894 	bl	1d6c2 <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    a59a:	f854 0c10 	ldr.w	r0, [r4, #-16]
    a59e:	4629      	mov	r1, r5
    a5a0:	f014 fb7b 	bl	1ec9a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    a5a4:	4628      	mov	r0, r5
}
    a5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    a5aa:	f014 bb98 	b.w	1ecde <bt_l2cap_chan_del>
    a5ae:	bf00      	nop
    a5b0:	000211ec 	.word	0x000211ec
    a5b4:	00021114 	.word	0x00021114
    a5b8:	000243d7 	.word	0x000243d7

0000a5bc <bt_l2cap_connected>:
{
    a5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a5c0:	4e28      	ldr	r6, [pc, #160]	; (a664 <bt_l2cap_connected+0xa8>)
    a5c2:	4f29      	ldr	r7, [pc, #164]	; (a668 <bt_l2cap_connected+0xac>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a5c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; a66c <bt_l2cap_connected+0xb0>
{
    a5c8:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a5ca:	42be      	cmp	r6, r7
    a5cc:	d302      	bcc.n	a5d4 <bt_l2cap_connected+0x18>
}
    a5ce:	b003      	add	sp, #12
    a5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    a5d4:	6873      	ldr	r3, [r6, #4]
    a5d6:	a901      	add	r1, sp, #4
    a5d8:	4620      	mov	r0, r4
    a5da:	4798      	blx	r3
    a5dc:	2800      	cmp	r0, #0
    a5de:	db3c      	blt.n	a65a <bt_l2cap_connected+0x9e>
		ch = BT_L2CAP_LE_CHAN(chan);
    a5e0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    a5e2:	8833      	ldrh	r3, [r6, #0]
    a5e4:	86ab      	strh	r3, [r5, #52]	; 0x34
		ch->tx.cid = fchan->cid;
    a5e6:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a5ea:	4641      	mov	r1, r8
    a5ec:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    a5f0:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a5f4:	f016 fa42 	bl	20a7c <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a5f8:	f3bf 8f5b 	dmb	ish
    a5fc:	f105 0330 	add.w	r3, r5, #48	; 0x30
    a600:	2200      	movs	r2, #0
    a602:	e853 1f00 	ldrex	r1, [r3]
    a606:	e843 2000 	strex	r0, r2, [r3]
    a60a:	2800      	cmp	r0, #0
    a60c:	d1f9      	bne.n	a602 <bt_l2cap_connected+0x46>
    a60e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    a612:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    a614:	6ca2      	ldr	r2, [r4, #72]	; 0x48
	sys_slist_append(&conn->channels, &chan->node);
    a616:	f105 0308 	add.w	r3, r5, #8
    a61a:	bb02      	cbnz	r2, a65e <bt_l2cap_connected+0xa2>
	list->head = node;
    a61c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
		if (chan->ops->connected) {
    a620:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    a622:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    a624:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    a626:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    a62a:	681b      	ldr	r3, [r3, #0]
    a62c:	b103      	cbz	r3, a630 <bt_l2cap_connected+0x74>
			chan->ops->connected(chan);
    a62e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a630:	9b01      	ldr	r3, [sp, #4]
    a632:	f3bf 8f5b 	dmb	ish
    a636:	3330      	adds	r3, #48	; 0x30
    a638:	e853 2f00 	ldrex	r2, [r3]
    a63c:	f042 0201 	orr.w	r2, r2, #1
    a640:	e843 2100 	strex	r1, r2, [r3]
    a644:	2900      	cmp	r1, #0
    a646:	d1f7      	bne.n	a638 <bt_l2cap_connected+0x7c>
    a648:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    a64c:	9801      	ldr	r0, [sp, #4]
    a64e:	6843      	ldr	r3, [r0, #4]
    a650:	699b      	ldr	r3, [r3, #24]
    a652:	b113      	cbz	r3, a65a <bt_l2cap_connected+0x9e>
			chan->ops->status(chan, chan->status);
    a654:	f100 0130 	add.w	r1, r0, #48	; 0x30
    a658:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a65a:	360c      	adds	r6, #12
    a65c:	e7b5      	b.n	a5ca <bt_l2cap_connected+0xe>
	parent->next = child;
    a65e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a660:	64a3      	str	r3, [r4, #72]	; 0x48
}
    a662:	e7dd      	b.n	a620 <bt_l2cap_connected+0x64>
    a664:	00021054 	.word	0x00021054
    a668:	00021078 	.word	0x00021078
    a66c:	0000a57d 	.word	0x0000a57d

0000a670 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    a670:	898b      	ldrh	r3, [r1, #12]
    a672:	2b03      	cmp	r3, #3
{
    a674:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a676:	4606      	mov	r6, r0
    a678:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    a67a:	d80a      	bhi.n	a692 <l2cap_recv+0x22>
    a67c:	492e      	ldr	r1, [pc, #184]	; (a738 <l2cap_recv+0xc8>)
    a67e:	4b2f      	ldr	r3, [pc, #188]	; (a73c <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    a680:	482f      	ldr	r0, [pc, #188]	; (a740 <l2cap_recv+0xd0>)
    a682:	1ac9      	subs	r1, r1, r3
    a684:	08c9      	lsrs	r1, r1, #3
    a686:	0189      	lsls	r1, r1, #6
    a688:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    a68c:	f013 f80c 	bl	1d6a8 <log_0>
		return 0;
    a690:	e013      	b.n	a6ba <l2cap_recv+0x4a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a692:	2104      	movs	r1, #4
    a694:	f105 0008 	add.w	r0, r5, #8
    a698:	f015 fd7a 	bl	20190 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a69c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    a69e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    a6a0:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a6a2:	4604      	mov	r4, r0
	if (buf->len != len) {
    a6a4:	d00c      	beq.n	a6c0 <l2cap_recv+0x50>
    a6a6:	4825      	ldr	r0, [pc, #148]	; (a73c <l2cap_recv+0xcc>)
    a6a8:	4b23      	ldr	r3, [pc, #140]	; (a738 <l2cap_recv+0xc8>)
    a6aa:	1a1b      	subs	r3, r3, r0
    a6ac:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    a6ae:	019b      	lsls	r3, r3, #6
    a6b0:	4824      	ldr	r0, [pc, #144]	; (a744 <l2cap_recv+0xd4>)
    a6b2:	f043 0301 	orr.w	r3, r3, #1
    a6b6:	f013 f818 	bl	1d6ea <log_2>
}
    a6ba:	2000      	movs	r0, #0
    a6bc:	b002      	add	sp, #8
    a6be:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    a6c0:	7843      	ldrb	r3, [r0, #1]
    a6c2:	b943      	cbnz	r3, a6d6 <l2cap_recv+0x66>
    a6c4:	491c      	ldr	r1, [pc, #112]	; (a738 <l2cap_recv+0xc8>)
    a6c6:	4b1d      	ldr	r3, [pc, #116]	; (a73c <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    a6c8:	481f      	ldr	r0, [pc, #124]	; (a748 <l2cap_recv+0xd8>)
    a6ca:	1ac9      	subs	r1, r1, r3
    a6cc:	08c9      	lsrs	r1, r1, #3
    a6ce:	0189      	lsls	r1, r1, #6
    a6d0:	f041 0101 	orr.w	r1, r1, #1
    a6d4:	e7da      	b.n	a68c <l2cap_recv+0x1c>
	switch (hdr->code) {
    a6d6:	7801      	ldrb	r1, [r0, #0]
    a6d8:	2901      	cmp	r1, #1
    a6da:	d0ee      	beq.n	a6ba <l2cap_recv+0x4a>
    a6dc:	2913      	cmp	r1, #19
    a6de:	d10a      	bne.n	a6f6 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    a6e0:	2a01      	cmp	r2, #1
    a6e2:	d8ea      	bhi.n	a6ba <l2cap_recv+0x4a>
    a6e4:	4914      	ldr	r1, [pc, #80]	; (a738 <l2cap_recv+0xc8>)
    a6e6:	4b15      	ldr	r3, [pc, #84]	; (a73c <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    a6e8:	4818      	ldr	r0, [pc, #96]	; (a74c <l2cap_recv+0xdc>)
    a6ea:	1ac9      	subs	r1, r1, r3
    a6ec:	08c9      	lsrs	r1, r1, #3
    a6ee:	0189      	lsls	r1, r1, #6
    a6f0:	f041 0101 	orr.w	r1, r1, #1
    a6f4:	e7ca      	b.n	a68c <l2cap_recv+0x1c>
    a6f6:	4b11      	ldr	r3, [pc, #68]	; (a73c <l2cap_recv+0xcc>)
    a6f8:	4a0f      	ldr	r2, [pc, #60]	; (a738 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    a6fa:	4815      	ldr	r0, [pc, #84]	; (a750 <l2cap_recv+0xe0>)
    a6fc:	1ad2      	subs	r2, r2, r3
    a6fe:	08d2      	lsrs	r2, r2, #3
    a700:	0192      	lsls	r2, r2, #6
    a702:	f042 0202 	orr.w	r2, r2, #2
    a706:	f012 ffdc 	bl	1d6c2 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a70a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    a70c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a70e:	2202      	movs	r2, #2
    a710:	2001      	movs	r0, #1
    a712:	f7ff ff0b 	bl	a52c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    a716:	4604      	mov	r4, r0
    a718:	2800      	cmp	r0, #0
    a71a:	d0ce      	beq.n	a6ba <l2cap_recv+0x4a>
	rej = net_buf_add(buf, sizeof(*rej));
    a71c:	2102      	movs	r1, #2
    a71e:	3008      	adds	r0, #8
    a720:	f015 fd0f 	bl	20142 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    a724:	2300      	movs	r3, #0
    a726:	7003      	strb	r3, [r0, #0]
    a728:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    a72a:	4622      	mov	r2, r4
    a72c:	9300      	str	r3, [sp, #0]
    a72e:	2105      	movs	r1, #5
    a730:	4628      	mov	r0, r5
    a732:	f014 fb10 	bl	1ed56 <bt_l2cap_send_cb>
}
    a736:	e7c0      	b.n	a6ba <l2cap_recv+0x4a>
    a738:	000211ec 	.word	0x000211ec
    a73c:	00021114 	.word	0x00021114
    a740:	000243e7 	.word	0x000243e7
    a744:	00024405 	.word	0x00024405
    a748:	00024426 	.word	0x00024426
    a74c:	00024447 	.word	0x00024447
    a750:	00024463 	.word	0x00024463

0000a754 <bt_l2cap_recv>:
{
    a754:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    a756:	898b      	ldrh	r3, [r1, #12]
    a758:	2b03      	cmp	r3, #3
{
    a75a:	4605      	mov	r5, r0
    a75c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    a75e:	d80e      	bhi.n	a77e <bt_l2cap_recv+0x2a>
    a760:	4914      	ldr	r1, [pc, #80]	; (a7b4 <bt_l2cap_recv+0x60>)
    a762:	4b15      	ldr	r3, [pc, #84]	; (a7b8 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    a764:	4815      	ldr	r0, [pc, #84]	; (a7bc <bt_l2cap_recv+0x68>)
    a766:	1ac9      	subs	r1, r1, r3
    a768:	08c9      	lsrs	r1, r1, #3
    a76a:	0189      	lsls	r1, r1, #6
    a76c:	f041 0101 	orr.w	r1, r1, #1
    a770:	f012 ff9a 	bl	1d6a8 <log_0>
	net_buf_unref(buf);
    a774:	4620      	mov	r0, r4
}
    a776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    a77a:	f00f ba3d 	b.w	19bf8 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a77e:	2104      	movs	r1, #4
    a780:	f104 0008 	add.w	r0, r4, #8
    a784:	f015 fd04 	bl	20190 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    a788:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    a78a:	4628      	mov	r0, r5
    a78c:	f014 fb0c 	bl	1eda8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a790:	b950      	cbnz	r0, a7a8 <bt_l2cap_recv+0x54>
    a792:	4b09      	ldr	r3, [pc, #36]	; (a7b8 <bt_l2cap_recv+0x64>)
    a794:	4a07      	ldr	r2, [pc, #28]	; (a7b4 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    a796:	480a      	ldr	r0, [pc, #40]	; (a7c0 <bt_l2cap_recv+0x6c>)
    a798:	1ad2      	subs	r2, r2, r3
    a79a:	08d2      	lsrs	r2, r2, #3
    a79c:	0192      	lsls	r2, r2, #6
    a79e:	f042 0202 	orr.w	r2, r2, #2
    a7a2:	f012 ff8e 	bl	1d6c2 <log_1>
		net_buf_unref(buf);
    a7a6:	e7e5      	b.n	a774 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    a7a8:	6843      	ldr	r3, [r0, #4]
    a7aa:	4621      	mov	r1, r4
    a7ac:	691b      	ldr	r3, [r3, #16]
    a7ae:	4798      	blx	r3
    a7b0:	e7e0      	b.n	a774 <bt_l2cap_recv+0x20>
    a7b2:	bf00      	nop
    a7b4:	000211ec 	.word	0x000211ec
    a7b8:	00021114 	.word	0x00021114
    a7bc:	00024481 	.word	0x00024481
    a7c0:	0002449e 	.word	0x0002449e

0000a7c4 <bt_l2cap_update_conn_param>:
{
    a7c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    a7c6:	4b15      	ldr	r3, [pc, #84]	; (a81c <bt_l2cap_update_conn_param+0x58>)
    a7c8:	781a      	ldrb	r2, [r3, #0]
    a7ca:	3201      	adds	r2, #1
	if (!ident) {
    a7cc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    a7d0:	bf08      	it	eq
    a7d2:	2201      	moveq	r2, #1
    a7d4:	701a      	strb	r2, [r3, #0]
{
    a7d6:	4605      	mov	r5, r0
    a7d8:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    a7da:	2208      	movs	r2, #8
    a7dc:	7819      	ldrb	r1, [r3, #0]
    a7de:	2012      	movs	r0, #18
    a7e0:	f7ff fea4 	bl	a52c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    a7e4:	4606      	mov	r6, r0
    a7e6:	b1b0      	cbz	r0, a816 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    a7e8:	2108      	movs	r1, #8
    a7ea:	4408      	add	r0, r1
    a7ec:	f015 fca9 	bl	20142 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    a7f0:	8822      	ldrh	r2, [r4, #0]
    a7f2:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    a7f4:	8862      	ldrh	r2, [r4, #2]
    a7f6:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    a7f8:	88a2      	ldrh	r2, [r4, #4]
    a7fa:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    a7fc:	88e2      	ldrh	r2, [r4, #6]
    a7fe:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    a800:	2400      	movs	r4, #0
    a802:	9400      	str	r4, [sp, #0]
    a804:	4623      	mov	r3, r4
    a806:	4632      	mov	r2, r6
    a808:	2105      	movs	r1, #5
    a80a:	4628      	mov	r0, r5
    a80c:	f014 faa3 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    a810:	4620      	mov	r0, r4
}
    a812:	b002      	add	sp, #8
    a814:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    a816:	f06f 000b 	mvn.w	r0, #11
    a81a:	e7fa      	b.n	a812 <bt_l2cap_update_conn_param+0x4e>
    a81c:	20002260 	.word	0x20002260

0000a820 <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    a820:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    a822:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    a824:	a901      	add	r1, sp, #4
    a826:	4803      	ldr	r0, [pc, #12]	; (a834 <bt_att_destroy+0x14>)
    a828:	f010 fab6 	bl	1ad98 <k_mem_slab_free>
}
    a82c:	b003      	add	sp, #12
    a82e:	f85d fb04 	ldr.w	pc, [sp], #4
    a832:	bf00      	nop
    a834:	2000614c 	.word	0x2000614c

0000a838 <find_type_cb>:
{
    a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    a83c:	680e      	ldr	r6, [r1, #0]
{
    a83e:	b090      	sub	sp, #64	; 0x40
    a840:	4605      	mov	r5, r0
    a842:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a844:	f04f 0800 	mov.w	r8, #0
    a848:	f642 0301 	movw	r3, #10241	; 0x2801
    a84c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    a84e:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a850:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    a854:	a90b      	add	r1, sp, #44	; 0x2c
    a856:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a85a:	f013 ffb9 	bl	1e7d0 <bt_uuid_cmp>
    a85e:	2800      	cmp	r0, #0
    a860:	d039      	beq.n	a8d6 <find_type_cb+0x9e>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    a862:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a866:	6828      	ldr	r0, [r5, #0]
    a868:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    a86c:	a90b      	add	r1, sp, #44	; 0x2c
    a86e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a872:	f013 ffad 	bl	1e7d0 <bt_uuid_cmp>
    a876:	b150      	cbz	r0, a88e <find_type_cb+0x56>
		if (data->group &&
    a878:	68a3      	ldr	r3, [r4, #8]
    a87a:	b123      	cbz	r3, a886 <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    a87c:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    a87e:	8859      	ldrh	r1, [r3, #2]
    a880:	4291      	cmp	r1, r2
    a882:	d200      	bcs.n	a886 <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a884:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    a886:	2001      	movs	r0, #1
}
    a888:	b010      	add	sp, #64	; 0x40
    a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    a88e:	6862      	ldr	r2, [r4, #4]
    a890:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
    a894:	8992      	ldrh	r2, [r2, #12]
    a896:	1a9b      	subs	r3, r3, r2
    a898:	2b03      	cmp	r3, #3
    a89a:	d9f5      	bls.n	a888 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    a89c:	686e      	ldr	r6, [r5, #4]
    a89e:	9000      	str	r0, [sp, #0]
    a8a0:	2310      	movs	r3, #16
    a8a2:	aa02      	add	r2, sp, #8
    a8a4:	4629      	mov	r1, r5
    a8a6:	4638      	mov	r0, r7
    a8a8:	47b0      	blx	r6
	if (read < 0) {
    a8aa:	1e06      	subs	r6, r0, #0
    a8ac:	db13      	blt.n	a8d6 <find_type_cb+0x9e>
	if (read != data->value_len) {
    a8ae:	7c22      	ldrb	r2, [r4, #16]
    a8b0:	68e0      	ldr	r0, [r4, #12]
    a8b2:	4296      	cmp	r6, r2
    a8b4:	d034      	beq.n	a920 <find_type_cb+0xe8>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    a8b6:	4601      	mov	r1, r0
    a8b8:	a80b      	add	r0, sp, #44	; 0x2c
    a8ba:	f013 ffb3 	bl	1e824 <bt_uuid_create>
    a8be:	b968      	cbnz	r0, a8dc <find_type_cb+0xa4>
    a8c0:	4a1a      	ldr	r2, [pc, #104]	; (a92c <find_type_cb+0xf4>)
    a8c2:	4b1b      	ldr	r3, [pc, #108]	; (a930 <find_type_cb+0xf8>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    a8c4:	7c21      	ldrb	r1, [r4, #16]
    a8c6:	481b      	ldr	r0, [pc, #108]	; (a934 <find_type_cb+0xfc>)
    a8c8:	1ad2      	subs	r2, r2, r3
    a8ca:	08d2      	lsrs	r2, r2, #3
    a8cc:	0192      	lsls	r2, r2, #6
    a8ce:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    a8d2:	f012 fef6 	bl	1d6c2 <log_1>
	data->group = NULL;
    a8d6:	2300      	movs	r3, #0
    a8d8:	60a3      	str	r3, [r4, #8]
    a8da:	e7d4      	b.n	a886 <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    a8dc:	b2f2      	uxtb	r2, r6
    a8de:	a902      	add	r1, sp, #8
    a8e0:	a806      	add	r0, sp, #24
    a8e2:	f013 ff9f 	bl	1e824 <bt_uuid_create>
    a8e6:	b948      	cbnz	r0, a8fc <find_type_cb+0xc4>
    a8e8:	4a10      	ldr	r2, [pc, #64]	; (a92c <find_type_cb+0xf4>)
    a8ea:	4b11      	ldr	r3, [pc, #68]	; (a930 <find_type_cb+0xf8>)
			BT_WARN("Unable to create UUID: size %d", read);
    a8ec:	4812      	ldr	r0, [pc, #72]	; (a938 <find_type_cb+0x100>)
    a8ee:	1ad2      	subs	r2, r2, r3
    a8f0:	08d2      	lsrs	r2, r2, #3
    a8f2:	0192      	lsls	r2, r2, #6
    a8f4:	f042 0202 	orr.w	r2, r2, #2
    a8f8:	4631      	mov	r1, r6
    a8fa:	e7ea      	b.n	a8d2 <find_type_cb+0x9a>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    a8fc:	a906      	add	r1, sp, #24
    a8fe:	a80b      	add	r0, sp, #44	; 0x2c
    a900:	f013 ff66 	bl	1e7d0 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    a904:	2800      	cmp	r0, #0
    a906:	d1e6      	bne.n	a8d6 <find_type_cb+0x9e>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a908:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    a90a:	2300      	movs	r3, #0
    a90c:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a90e:	2104      	movs	r1, #4
    a910:	3008      	adds	r0, #8
    a912:	f015 fc16 	bl	20142 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a916:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a918:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a91a:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a91c:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    a91e:	e7b2      	b.n	a886 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    a920:	4632      	mov	r2, r6
    a922:	a902      	add	r1, sp, #8
    a924:	f013 fdd0 	bl	1e4c8 <memcmp>
    a928:	e7ec      	b.n	a904 <find_type_cb+0xcc>
    a92a:	bf00      	nop
    a92c:	0002111c 	.word	0x0002111c
    a930:	00021114 	.word	0x00021114
    a934:	000244d3 	.word	0x000244d3
    a938:	000244f2 	.word	0x000244f2

0000a93c <att_cb.isra.0>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    a93c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    a93e:	7800      	ldrb	r0, [r0, #0]
    a940:	f014 fa42 	bl	1edc8 <att_op_get_type>
    a944:	3801      	subs	r0, #1
    a946:	b2c0      	uxtb	r0, r0
    a948:	2804      	cmp	r0, #4
    a94a:	bf96      	itet	ls
    a94c:	4b02      	ldrls	r3, [pc, #8]	; (a958 <att_cb.isra.0+0x1c>)
    a94e:	4803      	ldrhi	r0, [pc, #12]	; (a95c <att_cb.isra.0+0x20>)
    a950:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    a954:	bd08      	pop	{r3, pc}
    a956:	bf00      	nop
    a958:	00021a14 	.word	0x00021a14
    a95c:	0001f0c1 	.word	0x0001f0c1

0000a960 <att_send>:
{
    a960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a964:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a966:	688b      	ldr	r3, [r1, #8]
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	2bd2      	cmp	r3, #210	; 0xd2
{
    a96c:	4607      	mov	r7, r0
    a96e:	460e      	mov	r6, r1
    a970:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a972:	d114      	bne.n	a99e <att_send+0x3e>
		err = bt_smp_sign(conn, buf);
    a974:	f003 fc7e 	bl	e274 <bt_smp_sign>
		if (err) {
    a978:	4604      	mov	r4, r0
    a97a:	b180      	cbz	r0, a99e <att_send+0x3e>
    a97c:	490f      	ldr	r1, [pc, #60]	; (a9bc <att_send+0x5c>)
    a97e:	4b10      	ldr	r3, [pc, #64]	; (a9c0 <att_send+0x60>)
			BT_ERR("Error signing data");
    a980:	4810      	ldr	r0, [pc, #64]	; (a9c4 <att_send+0x64>)
    a982:	1a5b      	subs	r3, r3, r1
    a984:	08db      	lsrs	r3, r3, #3
    a986:	019b      	lsls	r3, r3, #6
    a988:	f043 0101 	orr.w	r1, r3, #1
    a98c:	f012 fe8c 	bl	1d6a8 <log_0>
			net_buf_unref(buf);
    a990:	4630      	mov	r0, r6
    a992:	f00f f931 	bl	19bf8 <net_buf_unref>
}
    a996:	4620      	mov	r0, r4
    a998:	b002      	add	sp, #8
    a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    a99e:	b91d      	cbnz	r5, a9a8 <att_send+0x48>
				cb ? cb : att_cb(buf),
    a9a0:	68b0      	ldr	r0, [r6, #8]
    a9a2:	f7ff ffcb 	bl	a93c <att_cb.isra.0>
    a9a6:	4605      	mov	r5, r0
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    a9a8:	f8cd 8000 	str.w	r8, [sp]
    a9ac:	462b      	mov	r3, r5
    a9ae:	4632      	mov	r2, r6
    a9b0:	2104      	movs	r1, #4
    a9b2:	4638      	mov	r0, r7
    a9b4:	f014 f9cf 	bl	1ed56 <bt_l2cap_send_cb>
    a9b8:	4604      	mov	r4, r0
    a9ba:	e7ec      	b.n	a996 <att_send+0x36>
    a9bc:	00021114 	.word	0x00021114
    a9c0:	0002111c 	.word	0x0002111c
    a9c4:	00024511 	.word	0x00024511

0000a9c8 <bt_att_accept>:
{
    a9c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a9ca:	2200      	movs	r2, #0
{
    a9cc:	4606      	mov	r6, r0
    a9ce:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a9d0:	4812      	ldr	r0, [pc, #72]	; (aa1c <bt_att_accept+0x54>)
    a9d2:	a901      	add	r1, sp, #4
    a9d4:	f010 f9b4 	bl	1ad40 <k_mem_slab_alloc>
    a9d8:	4604      	mov	r4, r0
    a9da:	b178      	cbz	r0, a9fc <bt_att_accept+0x34>
    a9dc:	4b10      	ldr	r3, [pc, #64]	; (aa20 <bt_att_accept+0x58>)
    a9de:	4a11      	ldr	r2, [pc, #68]	; (aa24 <bt_att_accept+0x5c>)
		BT_ERR("No available ATT context for conn %p", conn);
    a9e0:	4811      	ldr	r0, [pc, #68]	; (aa28 <bt_att_accept+0x60>)
    a9e2:	1ad2      	subs	r2, r2, r3
    a9e4:	08d2      	lsrs	r2, r2, #3
    a9e6:	0192      	lsls	r2, r2, #6
    a9e8:	f042 0201 	orr.w	r2, r2, #1
    a9ec:	4631      	mov	r1, r6
    a9ee:	f012 fe68 	bl	1d6c2 <log_1>
		return -ENOMEM;
    a9f2:	f06f 040b 	mvn.w	r4, #11
}
    a9f6:	4620      	mov	r0, r4
    a9f8:	b002      	add	sp, #8
    a9fa:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    a9fc:	4601      	mov	r1, r0
    a9fe:	22f8      	movs	r2, #248	; 0xf8
    aa00:	9801      	ldr	r0, [sp, #4]
    aa02:	f013 fd9c 	bl	1e53e <memset>
	att->chan.chan.ops = &ops;
    aa06:	9801      	ldr	r0, [sp, #4]
    aa08:	4b08      	ldr	r3, [pc, #32]	; (aa2c <bt_att_accept+0x64>)
    aa0a:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    aa0c:	2203      	movs	r2, #3
    aa0e:	4611      	mov	r1, r2
    aa10:	30c0      	adds	r0, #192	; 0xc0
    aa12:	f015 ffa1 	bl	20958 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    aa16:	9b01      	ldr	r3, [sp, #4]
    aa18:	602b      	str	r3, [r5, #0]
	return 0;
    aa1a:	e7ec      	b.n	a9f6 <bt_att_accept+0x2e>
    aa1c:	2000614c 	.word	0x2000614c
    aa20:	00021114 	.word	0x00021114
    aa24:	0002111c 	.word	0x0002111c
    aa28:	00024524 	.word	0x00024524
    aa2c:	00021aa8 	.word	0x00021aa8

0000aa30 <bt_att_connected>:
{
    aa30:	b510      	push	{r4, lr}
    aa32:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    aa34:	30d8      	adds	r0, #216	; 0xd8
    aa36:	f015 fdf1 	bl	2061c <z_impl_k_queue_init>
    aa3a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    aa3e:	f015 fded 	bl	2061c <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    aa42:	2317      	movs	r3, #23
    aa44:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    aa48:	86e3      	strh	r3, [r4, #54]	; 0x36
	k_delayed_work_init(&att->timeout_work, att_timeout);
    aa4a:	4904      	ldr	r1, [pc, #16]	; (aa5c <bt_att_connected+0x2c>)
    aa4c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    aa50:	f016 f814 	bl	20a7c <k_delayed_work_init>
	list->head = NULL;
    aa54:	2300      	movs	r3, #0
	list->tail = NULL;
    aa56:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
}
    aa5a:	bd10      	pop	{r4, pc}
    aa5c:	0000b6b5 	.word	0x0000b6b5

0000aa60 <att_chan_get>:
{
    aa60:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    aa62:	7b43      	ldrb	r3, [r0, #13]
    aa64:	2b06      	cmp	r3, #6
    aa66:	d00b      	beq.n	aa80 <att_chan_get+0x20>
    aa68:	4916      	ldr	r1, [pc, #88]	; (aac4 <att_chan_get+0x64>)
    aa6a:	4b17      	ldr	r3, [pc, #92]	; (aac8 <att_chan_get+0x68>)
		BT_WARN("Not connected");
    aa6c:	4817      	ldr	r0, [pc, #92]	; (aacc <att_chan_get+0x6c>)
    aa6e:	1ac9      	subs	r1, r1, r3
    aa70:	08c9      	lsrs	r1, r1, #3
    aa72:	0189      	lsls	r1, r1, #6
    aa74:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT context flagged as disconnected");
    aa78:	f012 fe16 	bl	1d6a8 <log_0>
		return NULL;
    aa7c:	2400      	movs	r4, #0
    aa7e:	e00e      	b.n	aa9e <att_chan_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    aa80:	2104      	movs	r1, #4
    aa82:	f014 f991 	bl	1eda8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    aa86:	4604      	mov	r4, r0
    aa88:	b958      	cbnz	r0, aaa2 <att_chan_get+0x42>
    aa8a:	490e      	ldr	r1, [pc, #56]	; (aac4 <att_chan_get+0x64>)
    aa8c:	4b0e      	ldr	r3, [pc, #56]	; (aac8 <att_chan_get+0x68>)
		BT_ERR("Unable to find ATT channel");
    aa8e:	4810      	ldr	r0, [pc, #64]	; (aad0 <att_chan_get+0x70>)
    aa90:	1ac9      	subs	r1, r1, r3
    aa92:	08c9      	lsrs	r1, r1, #3
    aa94:	0189      	lsls	r1, r1, #6
    aa96:	f041 0101 	orr.w	r1, r1, #1
    aa9a:	f012 fe05 	bl	1d6a8 <log_0>
}
    aa9e:	4620      	mov	r0, r4
    aaa0:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aaa2:	f3bf 8f5b 	dmb	ish
    aaa6:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    aaaa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    aaae:	075b      	lsls	r3, r3, #29
    aab0:	d5f5      	bpl.n	aa9e <att_chan_get+0x3e>
    aab2:	4904      	ldr	r1, [pc, #16]	; (aac4 <att_chan_get+0x64>)
    aab4:	4b04      	ldr	r3, [pc, #16]	; (aac8 <att_chan_get+0x68>)
		BT_WARN("ATT context flagged as disconnected");
    aab6:	4807      	ldr	r0, [pc, #28]	; (aad4 <att_chan_get+0x74>)
    aab8:	1ac9      	subs	r1, r1, r3
    aaba:	08c9      	lsrs	r1, r1, #3
    aabc:	0189      	lsls	r1, r1, #6
    aabe:	f041 0102 	orr.w	r1, r1, #2
    aac2:	e7d9      	b.n	aa78 <att_chan_get+0x18>
    aac4:	0002111c 	.word	0x0002111c
    aac8:	00021114 	.word	0x00021114
    aacc:	00024549 	.word	0x00024549
    aad0:	00024557 	.word	0x00024557
    aad4:	00024572 	.word	0x00024572

0000aad8 <att_req_sent>:
{
    aad8:	b538      	push	{r3, r4, r5, lr}
    aada:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    aadc:	2104      	movs	r1, #4
{
    aade:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    aae0:	f014 f952 	bl	1ed88 <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    aae4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    aae8:	b133      	cbz	r3, aaf8 <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    aaea:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
    aaee:	f247 5230 	movw	r2, #30000	; 0x7530
    aaf2:	4804      	ldr	r0, [pc, #16]	; (ab04 <att_req_sent+0x2c>)
    aaf4:	f010 ffa2 	bl	1ba3c <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    aaf8:	4629      	mov	r1, r5
    aafa:	4620      	mov	r0, r4
}
    aafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    ab00:	f014 bade 	b.w	1f0c0 <att_pdu_sent>
    ab04:	20001c48 	.word	0x20001c48

0000ab08 <prep_write_cb>:
{
    ab08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab0a:	460c      	mov	r4, r1
    ab0c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    ab0e:	4601      	mov	r1, r0
    ab10:	222a      	movs	r2, #42	; 0x2a
    ab12:	6820      	ldr	r0, [r4, #0]
    ab14:	f014 fede 	bl	1f8d4 <bt_gatt_check_perm>
    ab18:	4605      	mov	r5, r0
    ab1a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d12c      	bne.n	ab7a <prep_write_cb+0x72>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    ab20:	7cb3      	ldrb	r3, [r6, #18]
    ab22:	065b      	lsls	r3, r3, #25
    ab24:	d514      	bpl.n	ab50 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    ab26:	2301      	movs	r3, #1
    ab28:	9301      	str	r3, [sp, #4]
    ab2a:	89e3      	ldrh	r3, [r4, #14]
    ab2c:	9300      	str	r3, [sp, #0]
    ab2e:	68b7      	ldr	r7, [r6, #8]
    ab30:	89a3      	ldrh	r3, [r4, #12]
    ab32:	68a2      	ldr	r2, [r4, #8]
    ab34:	6820      	ldr	r0, [r4, #0]
    ab36:	4631      	mov	r1, r6
    ab38:	47b8      	blx	r7
	if (write != 0) {
    ab3a:	b148      	cbz	r0, ab50 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    ab3c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    ab40:	bf26      	itte	cs
    ab42:	4243      	negcs	r3, r0
    ab44:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    ab46:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    ab48:	7423      	strb	r3, [r4, #16]
}
    ab4a:	4628      	mov	r0, r5
    ab4c:	b003      	add	sp, #12
    ab4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    ab50:	480b      	ldr	r0, [pc, #44]	; (ab80 <prep_write_cb+0x78>)
    ab52:	2100      	movs	r1, #0
    ab54:	f015 fac1 	bl	200da <net_buf_alloc_fixed>
    ab58:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    ab5a:	b908      	cbnz	r0, ab60 <prep_write_cb+0x58>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    ab5c:	2309      	movs	r3, #9
    ab5e:	e7f3      	b.n	ab48 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    ab60:	8a33      	ldrh	r3, [r6, #16]
    ab62:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    ab64:	89e3      	ldrh	r3, [r4, #14]
    ab66:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    ab68:	89a2      	ldrh	r2, [r4, #12]
    ab6a:	68a1      	ldr	r1, [r4, #8]
    ab6c:	3008      	adds	r0, #8
    ab6e:	f015 faee 	bl	2014e <net_buf_simple_add_mem>
	data->err = 0U;
    ab72:	2300      	movs	r3, #0
    ab74:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    ab76:	2501      	movs	r5, #1
    ab78:	e7e7      	b.n	ab4a <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    ab7a:	2500      	movs	r5, #0
    ab7c:	e7e5      	b.n	ab4a <prep_write_cb+0x42>
    ab7e:	bf00      	nop
    ab80:	20006320 	.word	0x20006320

0000ab84 <bt_att_create_pdu>:
{
    ab84:	b570      	push	{r4, r5, r6, lr}
    ab86:	460e      	mov	r6, r1
    ab88:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    ab8a:	f7ff ff69 	bl	aa60 <att_chan_get>
	if (!att) {
    ab8e:	4604      	mov	r4, r0
    ab90:	b178      	cbz	r0, abb2 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    ab92:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    ab96:	1c6a      	adds	r2, r5, #1
    ab98:	428a      	cmp	r2, r1
    ab9a:	d90c      	bls.n	abb6 <bt_att_create_pdu+0x32>
    ab9c:	4818      	ldr	r0, [pc, #96]	; (ac00 <bt_att_create_pdu+0x7c>)
    ab9e:	4b19      	ldr	r3, [pc, #100]	; (ac04 <bt_att_create_pdu+0x80>)
    aba0:	1a1b      	subs	r3, r3, r0
    aba2:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    aba4:	019b      	lsls	r3, r3, #6
    aba6:	4818      	ldr	r0, [pc, #96]	; (ac08 <bt_att_create_pdu+0x84>)
    aba8:	f043 0302 	orr.w	r3, r3, #2
    abac:	f012 fd9d 	bl	1d6ea <log_2>
		return NULL;
    abb0:	2400      	movs	r4, #0
}
    abb2:	4620      	mov	r0, r4
    abb4:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    abb6:	4630      	mov	r0, r6
    abb8:	f014 f906 	bl	1edc8 <att_op_get_type>
    abbc:	2802      	cmp	r0, #2
    abbe:	d001      	beq.n	abc4 <bt_att_create_pdu+0x40>
    abc0:	2804      	cmp	r0, #4
    abc2:	d113      	bne.n	abec <bt_att_create_pdu+0x68>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    abc4:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    abc8:	2100      	movs	r1, #0
    abca:	4608      	mov	r0, r1
    abcc:	f014 f8c0 	bl	1ed50 <bt_l2cap_create_pdu_timeout>
    abd0:	4604      	mov	r4, r0
	if (!buf) {
    abd2:	b970      	cbnz	r0, abf2 <bt_att_create_pdu+0x6e>
    abd4:	4b0a      	ldr	r3, [pc, #40]	; (ac00 <bt_att_create_pdu+0x7c>)
    abd6:	4a0b      	ldr	r2, [pc, #44]	; (ac04 <bt_att_create_pdu+0x80>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    abd8:	480c      	ldr	r0, [pc, #48]	; (ac0c <bt_att_create_pdu+0x88>)
    abda:	1ad2      	subs	r2, r2, r3
    abdc:	08d2      	lsrs	r2, r2, #3
    abde:	0192      	lsls	r2, r2, #6
    abe0:	f042 0201 	orr.w	r2, r2, #1
    abe4:	4631      	mov	r1, r6
    abe6:	f012 fd6c 	bl	1d6c2 <log_1>
		return NULL;
    abea:	e7e2      	b.n	abb2 <bt_att_create_pdu+0x2e>
		buf = bt_l2cap_create_pdu(NULL, 0);
    abec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    abf0:	e7ea      	b.n	abc8 <bt_att_create_pdu+0x44>
	hdr = net_buf_add(buf, sizeof(*hdr));
    abf2:	2101      	movs	r1, #1
    abf4:	3008      	adds	r0, #8
    abf6:	f015 faa4 	bl	20142 <net_buf_simple_add>
	hdr->code = op;
    abfa:	7006      	strb	r6, [r0, #0]
	return buf;
    abfc:	e7d9      	b.n	abb2 <bt_att_create_pdu+0x2e>
    abfe:	bf00      	nop
    ac00:	00021114 	.word	0x00021114
    ac04:	0002111c 	.word	0x0002111c
    ac08:	00024596 	.word	0x00024596
    ac0c:	000243af 	.word	0x000243af

0000ac10 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    ac10:	688b      	ldr	r3, [r1, #8]
{
    ac12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    ac16:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    ac18:	2e16      	cmp	r6, #22
{
    ac1a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    ac1c:	d921      	bls.n	ac62 <att_mtu_req+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    ac1e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    ac22:	2202      	movs	r2, #2
    ac24:	2103      	movs	r1, #3
    ac26:	4640      	mov	r0, r8
    ac28:	f7ff ffac 	bl	ab84 <bt_att_create_pdu>
	if (!pdu) {
    ac2c:	4607      	mov	r7, r0
    ac2e:	b1d0      	cbz	r0, ac66 <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    ac30:	2102      	movs	r1, #2
    ac32:	3008      	adds	r0, #8
    ac34:	f015 fa85 	bl	20142 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    ac38:	2400      	movs	r4, #0
    ac3a:	2341      	movs	r3, #65	; 0x41
    ac3c:	7003      	strb	r3, [r0, #0]
    ac3e:	7044      	strb	r4, [r0, #1]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    ac40:	4b0a      	ldr	r3, [pc, #40]	; (ac6c <att_mtu_req+0x5c>)
    ac42:	9400      	str	r4, [sp, #0]
    ac44:	463a      	mov	r2, r7
    ac46:	2104      	movs	r1, #4
    ac48:	4640      	mov	r0, r8
    ac4a:	f014 f884 	bl	1ed56 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    ac4e:	2e41      	cmp	r6, #65	; 0x41
    ac50:	bf28      	it	cs
    ac52:	2641      	movcs	r6, #65	; 0x41
    ac54:	86ee      	strh	r6, [r5, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
    ac56:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
	return 0;
    ac5a:	4620      	mov	r0, r4
}
    ac5c:	b002      	add	sp, #8
    ac5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    ac62:	2004      	movs	r0, #4
    ac64:	e7fa      	b.n	ac5c <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
    ac66:	200e      	movs	r0, #14
    ac68:	e7f8      	b.n	ac5c <att_mtu_req+0x4c>
    ac6a:	bf00      	nop
    ac6c:	0001f119 	.word	0x0001f119

0000ac70 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    ac70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ac74:	4688      	mov	r8, r1
    ac76:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    ac78:	2101      	movs	r1, #1
    ac7a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    ac7c:	4605      	mov	r5, r0
    ac7e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    ac80:	f7ff ff80 	bl	ab84 <bt_att_create_pdu>
	if (!buf) {
    ac84:	4604      	mov	r4, r0
    ac86:	b180      	cbz	r0, acaa <send_err_rsp.part.0+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    ac88:	2104      	movs	r1, #4
    ac8a:	3008      	adds	r0, #8
    ac8c:	f015 fa59 	bl	20142 <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    ac90:	2300      	movs	r3, #0
	rsp->request = req;
    ac92:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    ac96:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    ac9a:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    ac9c:	4622      	mov	r2, r4
    ac9e:	9300      	str	r3, [sp, #0]
    aca0:	2104      	movs	r1, #4
    aca2:	4b03      	ldr	r3, [pc, #12]	; (acb0 <send_err_rsp.part.0+0x40>)
    aca4:	4628      	mov	r0, r5
    aca6:	f014 f856 	bl	1ed56 <bt_l2cap_send_cb>
}
    acaa:	b002      	add	sp, #8
    acac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acb0:	0001f119 	.word	0x0001f119

0000acb4 <bt_att_recv>:
{
    acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    acb6:	898b      	ldrh	r3, [r1, #12]
{
    acb8:	4604      	mov	r4, r0
    acba:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    acbc:	b95b      	cbnz	r3, acd6 <bt_att_recv+0x22>
    acbe:	494b      	ldr	r1, [pc, #300]	; (adec <bt_att_recv+0x138>)
    acc0:	4b4b      	ldr	r3, [pc, #300]	; (adf0 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    acc2:	484c      	ldr	r0, [pc, #304]	; (adf4 <bt_att_recv+0x140>)
    acc4:	1ac9      	subs	r1, r1, r3
    acc6:	08c9      	lsrs	r1, r1, #3
    acc8:	0189      	lsls	r1, r1, #6
    acca:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    acce:	f012 fceb 	bl	1d6a8 <log_0>
}
    acd2:	2000      	movs	r0, #0
    acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    acd6:	2101      	movs	r1, #1
    acd8:	f106 0008 	add.w	r0, r6, #8
    acdc:	f015 fa58 	bl	20190 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    ace0:	4a45      	ldr	r2, [pc, #276]	; (adf8 <bt_att_recv+0x144>)
    ace2:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ace4:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ace6:	2300      	movs	r3, #0
    ace8:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    acea:	f812 7033 	ldrb.w	r7, [r2, r3, lsl #3]
    acee:	428f      	cmp	r7, r1
    acf0:	d120      	bne.n	ad34 <bt_att_recv+0x80>
		if (handler->type == ATT_REQUEST &&
    acf2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    acf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    acfa:	789f      	ldrb	r7, [r3, #2]
    acfc:	2f01      	cmp	r7, #1
    acfe:	d134      	bne.n	ad6a <bt_att_recv+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ad00:	f3bf 8f5b 	dmb	ish
    ad04:	f104 0290 	add.w	r2, r4, #144	; 0x90
    ad08:	e852 3f00 	ldrex	r3, [r2]
    ad0c:	f043 0101 	orr.w	r1, r3, #1
    ad10:	e842 1e00 	strex	lr, r1, [r2]
    ad14:	f1be 0f00 	cmp.w	lr, #0
    ad18:	d1f6      	bne.n	ad08 <bt_att_recv+0x54>
    ad1a:	f3bf 8f5b 	dmb	ish
    ad1e:	07da      	lsls	r2, r3, #31
    ad20:	d53f      	bpl.n	ada2 <bt_att_recv+0xee>
    ad22:	4932      	ldr	r1, [pc, #200]	; (adec <bt_att_recv+0x138>)
    ad24:	4b32      	ldr	r3, [pc, #200]	; (adf0 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    ad26:	4835      	ldr	r0, [pc, #212]	; (adfc <bt_att_recv+0x148>)
    ad28:	1ac9      	subs	r1, r1, r3
    ad2a:	08c9      	lsrs	r1, r1, #3
    ad2c:	0189      	lsls	r1, r1, #6
    ad2e:	f041 0102 	orr.w	r1, r1, #2
    ad32:	e7cc      	b.n	acce <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ad34:	3301      	adds	r3, #1
    ad36:	2b0e      	cmp	r3, #14
    ad38:	d1d7      	bne.n	acea <bt_att_recv+0x36>
    ad3a:	4b2d      	ldr	r3, [pc, #180]	; (adf0 <bt_att_recv+0x13c>)
    ad3c:	4a2b      	ldr	r2, [pc, #172]	; (adec <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    ad3e:	4830      	ldr	r0, [pc, #192]	; (ae00 <bt_att_recv+0x14c>)
    ad40:	1ad2      	subs	r2, r2, r3
    ad42:	08d2      	lsrs	r2, r2, #3
    ad44:	0192      	lsls	r2, r2, #6
    ad46:	f042 0202 	orr.w	r2, r2, #2
    ad4a:	f012 fcba 	bl	1d6c2 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    ad4e:	7829      	ldrb	r1, [r5, #0]
    ad50:	4608      	mov	r0, r1
    ad52:	f014 f839 	bl	1edc8 <att_op_get_type>
    ad56:	2800      	cmp	r0, #0
    ad58:	d0bb      	beq.n	acd2 <bt_att_recv+0x1e>
	if (!req) {
    ad5a:	2900      	cmp	r1, #0
    ad5c:	d0b9      	beq.n	acd2 <bt_att_recv+0x1e>
    ad5e:	2306      	movs	r3, #6
    ad60:	6820      	ldr	r0, [r4, #0]
    ad62:	2200      	movs	r2, #0
    ad64:	f7ff ff84 	bl	ac70 <send_err_rsp.part.0>
    ad68:	e7b3      	b.n	acd2 <bt_att_recv+0x1e>
		} else if (handler->type == ATT_INDICATION &&
    ad6a:	2f05      	cmp	r7, #5
    ad6c:	d119      	bne.n	ada2 <bt_att_recv+0xee>
    ad6e:	f3bf 8f5b 	dmb	ish
    ad72:	f104 0290 	add.w	r2, r4, #144	; 0x90
    ad76:	e852 3f00 	ldrex	r3, [r2]
    ad7a:	f043 0102 	orr.w	r1, r3, #2
    ad7e:	e842 1e00 	strex	lr, r1, [r2]
    ad82:	f1be 0f00 	cmp.w	lr, #0
    ad86:	d1f6      	bne.n	ad76 <bt_att_recv+0xc2>
    ad88:	f3bf 8f5b 	dmb	ish
    ad8c:	079b      	lsls	r3, r3, #30
    ad8e:	d508      	bpl.n	ada2 <bt_att_recv+0xee>
    ad90:	4916      	ldr	r1, [pc, #88]	; (adec <bt_att_recv+0x138>)
    ad92:	4b17      	ldr	r3, [pc, #92]	; (adf0 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    ad94:	481b      	ldr	r0, [pc, #108]	; (ae04 <bt_att_recv+0x150>)
    ad96:	1ac9      	subs	r1, r1, r3
    ad98:	08c9      	lsrs	r1, r1, #3
    ad9a:	0189      	lsls	r1, r1, #6
    ad9c:	f041 0102 	orr.w	r1, r1, #2
    ada0:	e795      	b.n	acce <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    ada2:	eb00 030c 	add.w	r3, r0, ip
    ada6:	89b1      	ldrh	r1, [r6, #12]
    ada8:	785a      	ldrb	r2, [r3, #1]
    adaa:	428a      	cmp	r2, r1
    adac:	d90e      	bls.n	adcc <bt_att_recv+0x118>
    adae:	4a10      	ldr	r2, [pc, #64]	; (adf0 <bt_att_recv+0x13c>)
    adb0:	4b0e      	ldr	r3, [pc, #56]	; (adec <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    adb2:	4815      	ldr	r0, [pc, #84]	; (ae08 <bt_att_recv+0x154>)
    adb4:	1a9b      	subs	r3, r3, r2
    adb6:	08db      	lsrs	r3, r3, #3
    adb8:	019b      	lsls	r3, r3, #6
    adba:	782a      	ldrb	r2, [r5, #0]
    adbc:	f043 0301 	orr.w	r3, r3, #1
    adc0:	f012 fc93 	bl	1d6ea <log_2>
	if (handler->type == ATT_REQUEST && err) {
    adc4:	2f01      	cmp	r7, #1
    adc6:	d184      	bne.n	acd2 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    adc8:	2304      	movs	r3, #4
    adca:	e00a      	b.n	ade2 <bt_att_recv+0x12e>
		err = handler->func(att, buf);
    adcc:	685b      	ldr	r3, [r3, #4]
    adce:	4631      	mov	r1, r6
    add0:	4620      	mov	r0, r4
    add2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    add4:	2f01      	cmp	r7, #1
		err = handler->func(att, buf);
    add6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    add8:	f47f af7b 	bne.w	acd2 <bt_att_recv+0x1e>
    addc:	2800      	cmp	r0, #0
    adde:	f43f af78 	beq.w	acd2 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    ade2:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    ade4:	2900      	cmp	r1, #0
    ade6:	f43f af74 	beq.w	acd2 <bt_att_recv+0x1e>
    adea:	e7b9      	b.n	ad60 <bt_att_recv+0xac>
    adec:	0002111c 	.word	0x0002111c
    adf0:	00021114 	.word	0x00021114
    adf4:	000245bb 	.word	0x000245bb
    adf8:	00021a28 	.word	0x00021a28
    adfc:	000245d6 	.word	0x000245d6
    ae00:	00024630 	.word	0x00024630
    ae04:	000245f2 	.word	0x000245f2
    ae08:	00024611 	.word	0x00024611

0000ae0c <att_write_rsp>:
{
    ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ae10:	460d      	mov	r5, r1
    ae12:	3900      	subs	r1, #0
{
    ae14:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ae16:	bf18      	it	ne
    ae18:	2101      	movne	r1, #1
{
    ae1a:	4606      	mov	r6, r0
    ae1c:	4690      	mov	r8, r2
    ae1e:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ae20:	f014 fd83 	bl	1f92a <bt_gatt_change_aware>
    ae24:	2800      	cmp	r0, #0
    ae26:	d04e      	beq.n	aec6 <att_write_rsp+0xba>
	if (!handle) {
    ae28:	2f00      	cmp	r7, #0
    ae2a:	d04e      	beq.n	aeca <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    ae2c:	2218      	movs	r2, #24
    ae2e:	2100      	movs	r1, #0
    ae30:	a802      	add	r0, sp, #8
    ae32:	f013 fb84 	bl	1e53e <memset>
	if (rsp) {
    ae36:	f1b8 0f00 	cmp.w	r8, #0
    ae3a:	d124      	bne.n	ae86 <att_write_rsp+0x7a>
	data.offset = offset;
    ae3c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ae40:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    ae44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae46:	9305      	str	r3, [sp, #20]
	data.len = len;
    ae48:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    ae4c:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ae50:	2301      	movs	r3, #1
    ae52:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ae56:	4a1e      	ldr	r2, [pc, #120]	; (aed0 <att_write_rsp+0xc4>)
	data.conn = conn;
    ae58:	9602      	str	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ae5a:	ab02      	add	r3, sp, #8
    ae5c:	4639      	mov	r1, r7
    ae5e:	4638      	mov	r0, r7
	data.req = req;
    ae60:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ae64:	f013 ffdd 	bl	1ee22 <bt_gatt_foreach_attr>
	if (data.err) {
    ae68:	f89d 401c 	ldrb.w	r4, [sp, #28]
    ae6c:	b30c      	cbz	r4, aeb2 <att_write_rsp+0xa6>
		if (rsp) {
    ae6e:	f1b8 0f00 	cmp.w	r8, #0
    ae72:	d019      	beq.n	aea8 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    ae74:	9803      	ldr	r0, [sp, #12]
    ae76:	f00e febf 	bl	19bf8 <net_buf_unref>
	if (!req) {
    ae7a:	b975      	cbnz	r5, ae9a <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ae7c:	2400      	movs	r4, #0
}
    ae7e:	4620      	mov	r0, r4
    ae80:	b008      	add	sp, #32
    ae82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    ae86:	2200      	movs	r2, #0
    ae88:	4641      	mov	r1, r8
    ae8a:	4630      	mov	r0, r6
    ae8c:	f7ff fe7a 	bl	ab84 <bt_att_create_pdu>
    ae90:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    ae92:	2800      	cmp	r0, #0
    ae94:	d1d2      	bne.n	ae3c <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    ae96:	240e      	movs	r4, #14
    ae98:	e7f1      	b.n	ae7e <att_write_rsp+0x72>
    ae9a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    ae9e:	463a      	mov	r2, r7
    aea0:	4629      	mov	r1, r5
    aea2:	4630      	mov	r0, r6
    aea4:	f7ff fee4 	bl	ac70 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    aea8:	2d18      	cmp	r5, #24
    aeaa:	d1e7      	bne.n	ae7c <att_write_rsp+0x70>
    aeac:	f89d 401c 	ldrb.w	r4, [sp, #28]
    aeb0:	e7e5      	b.n	ae7e <att_write_rsp+0x72>
	if (data.buf) {
    aeb2:	9a03      	ldr	r2, [sp, #12]
    aeb4:	2a00      	cmp	r2, #0
    aeb6:	d0e1      	beq.n	ae7c <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    aeb8:	4b06      	ldr	r3, [pc, #24]	; (aed4 <att_write_rsp+0xc8>)
    aeba:	9400      	str	r4, [sp, #0]
    aebc:	2104      	movs	r1, #4
    aebe:	4630      	mov	r0, r6
    aec0:	f013 ff49 	bl	1ed56 <bt_l2cap_send_cb>
    aec4:	e7db      	b.n	ae7e <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    aec6:	2412      	movs	r4, #18
    aec8:	e7d9      	b.n	ae7e <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    aeca:	2401      	movs	r4, #1
    aecc:	e7d7      	b.n	ae7e <att_write_rsp+0x72>
    aece:	bf00      	nop
    aed0:	0001f181 	.word	0x0001f181
    aed4:	0001f119 	.word	0x0001f119

0000aed8 <att_signed_write_cmd>:
{
    aed8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    aedc:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    aede:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    aee0:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    aee4:	460c      	mov	r4, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    aee6:	4640      	mov	r0, r8
    aee8:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    aeea:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    aeec:	f015 f940 	bl	20170 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    aef0:	4621      	mov	r1, r4
    aef2:	4630      	mov	r0, r6
    aef4:	f003 f942 	bl	e17c <bt_smp_sign_verify>
	if (err) {
    aef8:	4605      	mov	r5, r0
    aefa:	b168      	cbz	r0, af18 <att_signed_write_cmd+0x40>
    aefc:	4b11      	ldr	r3, [pc, #68]	; (af44 <att_signed_write_cmd+0x6c>)
    aefe:	4912      	ldr	r1, [pc, #72]	; (af48 <att_signed_write_cmd+0x70>)
		BT_ERR("Error verifying data");
    af00:	4812      	ldr	r0, [pc, #72]	; (af4c <att_signed_write_cmd+0x74>)
    af02:	1ac9      	subs	r1, r1, r3
    af04:	08c9      	lsrs	r1, r1, #3
    af06:	0189      	lsls	r1, r1, #6
    af08:	f041 0101 	orr.w	r1, r1, #1
    af0c:	f012 fbcc 	bl	1d6a8 <log_0>
		return 0;
    af10:	2000      	movs	r0, #0
}
    af12:	b004      	add	sp, #16
    af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    af18:	2101      	movs	r1, #1
    af1a:	4640      	mov	r0, r8
    af1c:	f015 f930 	bl	20180 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    af20:	2102      	movs	r1, #2
    af22:	4640      	mov	r0, r8
    af24:	f015 f92c 	bl	20180 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    af28:	89a3      	ldrh	r3, [r4, #12]
    af2a:	3b0c      	subs	r3, #12
    af2c:	b29b      	uxth	r3, r3
    af2e:	9302      	str	r3, [sp, #8]
    af30:	68a3      	ldr	r3, [r4, #8]
    af32:	462a      	mov	r2, r5
    af34:	e9cd 5300 	strd	r5, r3, [sp]
    af38:	4629      	mov	r1, r5
    af3a:	463b      	mov	r3, r7
    af3c:	4630      	mov	r0, r6
    af3e:	f7ff ff65 	bl	ae0c <att_write_rsp>
    af42:	e7e6      	b.n	af12 <att_signed_write_cmd+0x3a>
    af44:	00021114 	.word	0x00021114
    af48:	0002111c 	.word	0x0002111c
    af4c:	0002464a 	.word	0x0002464a

0000af50 <att_exec_write_req>:
{
    af50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(att, req->flags);
    af54:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    af56:	4606      	mov	r6, r0
	return att_exec_write_rsp(att, req->flags);
    af58:	f893 8000 	ldrb.w	r8, [r3]
	struct bt_conn *conn = att->chan.chan.conn;
    af5c:	f856 7be8 	ldr.w	r7, [r6], #232
	u8_t err = 0U;
    af60:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    af62:	2100      	movs	r1, #0
    af64:	4630      	mov	r0, r6
    af66:	f015 f8be 	bl	200e6 <net_buf_get>
    af6a:	4605      	mov	r5, r0
    af6c:	b988      	cbnz	r0, af92 <att_exec_write_req+0x42>
	if (err) {
    af6e:	bb64      	cbnz	r4, afca <att_exec_write_req+0x7a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    af70:	4622      	mov	r2, r4
    af72:	2119      	movs	r1, #25
    af74:	4638      	mov	r0, r7
    af76:	f7ff fe05 	bl	ab84 <bt_att_create_pdu>
	if (!buf) {
    af7a:	4602      	mov	r2, r0
    af7c:	b338      	cbz	r0, afce <att_exec_write_req+0x7e>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    af7e:	4b15      	ldr	r3, [pc, #84]	; (afd4 <att_exec_write_req+0x84>)
    af80:	9400      	str	r4, [sp, #0]
    af82:	2104      	movs	r1, #4
    af84:	4638      	mov	r0, r7
    af86:	f013 fee6 	bl	1ed56 <bt_l2cap_send_cb>
}
    af8a:	4620      	mov	r0, r4
    af8c:	b004      	add	sp, #16
    af8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    af92:	b9b4      	cbnz	r4, afc2 <att_exec_write_req+0x72>
    af94:	f1b8 0f01 	cmp.w	r8, #1
    af98:	d113      	bne.n	afc2 <att_exec_write_req+0x72>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    af9a:	89aa      	ldrh	r2, [r5, #12]
    af9c:	8aab      	ldrh	r3, [r5, #20]
    af9e:	9202      	str	r2, [sp, #8]
    afa0:	68aa      	ldr	r2, [r5, #8]
    afa2:	9201      	str	r2, [sp, #4]
    afa4:	8aea      	ldrh	r2, [r5, #22]
    afa6:	9200      	str	r2, [sp, #0]
    afa8:	2118      	movs	r1, #24
    afaa:	4622      	mov	r2, r4
    afac:	4638      	mov	r0, r7
    afae:	f7ff ff2d 	bl	ae0c <att_write_rsp>
			if (err) {
    afb2:	4604      	mov	r4, r0
    afb4:	b128      	cbz	r0, afc2 <att_exec_write_req+0x72>
	if (!req) {
    afb6:	4603      	mov	r3, r0
    afb8:	8aaa      	ldrh	r2, [r5, #20]
    afba:	2118      	movs	r1, #24
    afbc:	4638      	mov	r0, r7
    afbe:	f7ff fe57 	bl	ac70 <send_err_rsp.part.0>
		net_buf_unref(buf);
    afc2:	4628      	mov	r0, r5
    afc4:	f00e fe18 	bl	19bf8 <net_buf_unref>
    afc8:	e7cb      	b.n	af62 <att_exec_write_req+0x12>
		return 0;
    afca:	4604      	mov	r4, r0
    afcc:	e7dd      	b.n	af8a <att_exec_write_req+0x3a>
		return BT_ATT_ERR_UNLIKELY;
    afce:	240e      	movs	r4, #14
    afd0:	e7db      	b.n	af8a <att_exec_write_req+0x3a>
    afd2:	bf00      	nop
    afd4:	0001f119 	.word	0x0001f119

0000afd8 <att_prepare_write_req>:
{
    afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afdc:	460c      	mov	r4, r1
    afde:	b089      	sub	sp, #36	; 0x24
    afe0:	4606      	mov	r6, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    afe2:	2104      	movs	r1, #4
    afe4:	f104 0008 	add.w	r0, r4, #8
    afe8:	f015 f8d2 	bl	20190 <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    afec:	6835      	ldr	r5, [r6, #0]
	handle = sys_le16_to_cpu(req->handle);
    afee:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    aff2:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    aff6:	f8d4 8008 	ldr.w	r8, [r4, #8]
    affa:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    affc:	2101      	movs	r1, #1
    affe:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
    b000:	fa1f fb8a 	uxth.w	fp, sl
	if (!bt_gatt_change_aware(conn, true)) {
    b004:	f014 fc91 	bl	1f92a <bt_gatt_change_aware>
    b008:	2800      	cmp	r0, #0
    b00a:	d04c      	beq.n	b0a6 <att_prepare_write_req+0xce>
	if (!handle) {
    b00c:	f1bb 0f00 	cmp.w	fp, #0
    b010:	d04b      	beq.n	b0aa <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    b012:	2214      	movs	r2, #20
    b014:	2100      	movs	r1, #0
    b016:	a803      	add	r0, sp, #12
    b018:	f013 fa91 	bl	1e53e <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b01c:	2301      	movs	r3, #1
    b01e:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    b022:	4a24      	ldr	r2, [pc, #144]	; (b0b4 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    b024:	9503      	str	r5, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    b026:	ab03      	add	r3, sp, #12
    b028:	4659      	mov	r1, fp
    b02a:	4658      	mov	r0, fp
	data.offset = offset;
    b02c:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    b030:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    b034:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    b038:	f013 fef3 	bl	1ee22 <bt_gatt_foreach_attr>
	if (data.err) {
    b03c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    b040:	b154      	cbz	r4, b058 <att_prepare_write_req+0x80>
	if (!req) {
    b042:	4623      	mov	r3, r4
    b044:	465a      	mov	r2, fp
    b046:	2116      	movs	r1, #22
    b048:	4628      	mov	r0, r5
    b04a:	f7ff fe11 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b04e:	2400      	movs	r4, #0
}
    b050:	4620      	mov	r0, r4
    b052:	b009      	add	sp, #36	; 0x24
    b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    b058:	9904      	ldr	r1, [sp, #16]
    b05a:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
    b05e:	f015 f85f 	bl	20120 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    b062:	4622      	mov	r2, r4
    b064:	2117      	movs	r1, #23
    b066:	4628      	mov	r0, r5
    b068:	f7ff fd8c 	bl	ab84 <bt_att_create_pdu>
    b06c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    b06e:	b1f0      	cbz	r0, b0ae <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    b070:	2104      	movs	r1, #4
    b072:	3008      	adds	r0, #8
    b074:	f015 f865 	bl	20142 <net_buf_simple_add>
    b078:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    b07a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    b07e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    b082:	9804      	ldr	r0, [sp, #16]
    b084:	4639      	mov	r1, r7
    b086:	3008      	adds	r0, #8
    b088:	f015 f85b 	bl	20142 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    b08c:	463a      	mov	r2, r7
    b08e:	4641      	mov	r1, r8
    b090:	1d30      	adds	r0, r6, #4
    b092:	f013 fa29 	bl	1e4e8 <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b096:	4b08      	ldr	r3, [pc, #32]	; (b0b8 <att_prepare_write_req+0xe0>)
    b098:	9a04      	ldr	r2, [sp, #16]
    b09a:	9400      	str	r4, [sp, #0]
    b09c:	2104      	movs	r1, #4
    b09e:	4628      	mov	r0, r5
    b0a0:	f013 fe59 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b0a4:	e7d4      	b.n	b050 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b0a6:	2412      	movs	r4, #18
    b0a8:	e7d2      	b.n	b050 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    b0aa:	2401      	movs	r4, #1
    b0ac:	e7d0      	b.n	b050 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    b0ae:	240e      	movs	r4, #14
    b0b0:	e7ce      	b.n	b050 <att_prepare_write_req+0x78>
    b0b2:	bf00      	nop
    b0b4:	0000ab09 	.word	0x0000ab09
    b0b8:	0001f119 	.word	0x0001f119

0000b0bc <att_read_group_req>:
{
    b0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    b0c0:	7b0c      	ldrb	r4, [r1, #12]
    b0c2:	3c04      	subs	r4, #4
    b0c4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b0c6:	2c02      	cmp	r4, #2
{
    b0c8:	4606      	mov	r6, r0
    b0ca:	b08f      	sub	sp, #60	; 0x3c
    b0cc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b0ce:	d001      	beq.n	b0d4 <att_read_group_req+0x18>
    b0d0:	2c10      	cmp	r4, #16
    b0d2:	d16f      	bne.n	b1b4 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b0d4:	2104      	movs	r1, #4
    b0d6:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    b0d8:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    b0dc:	f015 f858 	bl	20190 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b0e0:	f10d 0810 	add.w	r8, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    b0e4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b0e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b0e8:	1d01      	adds	r1, r0, #4
    b0ea:	4622      	mov	r2, r4
    b0ec:	4640      	mov	r0, r8
    b0ee:	f013 fb99 	bl	1e824 <bt_uuid_create>
    b0f2:	2800      	cmp	r0, #0
    b0f4:	d060      	beq.n	b1b8 <att_read_group_req+0xfc>
	if (!start || !end) {
    b0f6:	2d00      	cmp	r5, #0
    b0f8:	d036      	beq.n	b168 <att_read_group_req+0xac>
    b0fa:	2400      	movs	r4, #0
    b0fc:	b39f      	cbz	r7, b166 <att_read_group_req+0xaa>
	if (start > end) {
    b0fe:	42bd      	cmp	r5, r7
    b100:	d832      	bhi.n	b168 <att_read_group_req+0xac>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b102:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b106:	a903      	add	r1, sp, #12
    b108:	4640      	mov	r0, r8
    b10a:	f88d 400c 	strb.w	r4, [sp, #12]
    b10e:	f8ad 300e 	strh.w	r3, [sp, #14]
    b112:	f013 fb5d 	bl	1e7d0 <bt_uuid_cmp>
    b116:	bb90      	cbnz	r0, b17e <att_read_group_req+0xc2>
	struct bt_conn *conn = att->chan.chan.conn;
    b118:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    b11c:	2214      	movs	r2, #20
    b11e:	2100      	movs	r1, #0
    b120:	a809      	add	r0, sp, #36	; 0x24
    b122:	f013 fa0c 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b126:	2201      	movs	r2, #1
    b128:	2111      	movs	r1, #17
    b12a:	4648      	mov	r0, r9
    b12c:	f7ff fd2a 	bl	ab84 <bt_att_create_pdu>
    b130:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    b132:	2800      	cmp	r0, #0
    b134:	d040      	beq.n	b1b8 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b136:	2101      	movs	r1, #1
    b138:	3008      	adds	r0, #8
	data.uuid = uuid;
    b13a:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b13e:	f015 f800 	bl	20142 <net_buf_simple_add>
	data.rsp->len = 0U;
    b142:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b144:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b146:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    b148:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b14a:	4a1c      	ldr	r2, [pc, #112]	; (b1bc <att_read_group_req+0x100>)
	data.group = NULL;
    b14c:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b14e:	4639      	mov	r1, r7
    b150:	4628      	mov	r0, r5
    b152:	f013 fe66 	bl	1ee22 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b158:	781c      	ldrb	r4, [r3, #0]
    b15a:	bb1c      	cbnz	r4, b1a4 <att_read_group_req+0xe8>
		net_buf_unref(data.buf);
    b15c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b15e:	f00e fd4b 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b162:	230a      	movs	r3, #10
    b164:	e018      	b.n	b198 <att_read_group_req+0xdc>
			*err = 0U;
    b166:	463d      	mov	r5, r7
	if (!req) {
    b168:	2301      	movs	r3, #1
    b16a:	462a      	mov	r2, r5
    b16c:	2110      	movs	r1, #16
    b16e:	4648      	mov	r0, r9
    b170:	f7ff fd7e 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b174:	2400      	movs	r4, #0
}
    b176:	4620      	mov	r0, r4
    b178:	b00f      	add	sp, #60	; 0x3c
    b17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b17e:	f642 0301 	movw	r3, #10241	; 0x2801
    b182:	a909      	add	r1, sp, #36	; 0x24
    b184:	4640      	mov	r0, r8
    b186:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    b18a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    b18e:	f013 fb1f 	bl	1e7d0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b192:	2800      	cmp	r0, #0
    b194:	d0c0      	beq.n	b118 <att_read_group_req+0x5c>
	if (!req) {
    b196:	2310      	movs	r3, #16
    b198:	462a      	mov	r2, r5
    b19a:	2110      	movs	r1, #16
    b19c:	4648      	mov	r0, r9
    b19e:	f7ff fd67 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b1a2:	e7e8      	b.n	b176 <att_read_group_req+0xba>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b1a4:	4b06      	ldr	r3, [pc, #24]	; (b1c0 <att_read_group_req+0x104>)
    b1a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b1a8:	9600      	str	r6, [sp, #0]
    b1aa:	2104      	movs	r1, #4
    b1ac:	4648      	mov	r0, r9
    b1ae:	f013 fdd2 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b1b2:	e7df      	b.n	b174 <att_read_group_req+0xb8>
		return BT_ATT_ERR_INVALID_PDU;
    b1b4:	2404      	movs	r4, #4
    b1b6:	e7de      	b.n	b176 <att_read_group_req+0xba>
		return BT_ATT_ERR_UNLIKELY;
    b1b8:	240e      	movs	r4, #14
    b1ba:	e7dc      	b.n	b176 <att_read_group_req+0xba>
    b1bc:	0001eed3 	.word	0x0001eed3
    b1c0:	0001f119 	.word	0x0001f119

0000b1c4 <att_read_mult_req>:
{
    b1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b1c8:	6806      	ldr	r6, [r0, #0]
{
    b1ca:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    b1cc:	2214      	movs	r2, #20
{
    b1ce:	4605      	mov	r5, r0
    b1d0:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    b1d2:	a803      	add	r0, sp, #12
    b1d4:	2100      	movs	r1, #0
    b1d6:	f013 f9b2 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b1da:	2200      	movs	r2, #0
    b1dc:	210f      	movs	r1, #15
    b1de:	4630      	mov	r0, r6
    b1e0:	f7ff fcd0 	bl	ab84 <bt_att_create_pdu>
    b1e4:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    b1e6:	b378      	cbz	r0, b248 <att_read_mult_req+0x84>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b1e8:	f8df 9064 	ldr.w	r9, [pc, #100]	; b250 <att_read_mult_req+0x8c>
	data.att = att;
    b1ec:	9503      	str	r5, [sp, #12]
		handle = net_buf_pull_le16(buf);
    b1ee:	f104 0708 	add.w	r7, r4, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b1f2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    b1f6:	89a3      	ldrh	r3, [r4, #12]
    b1f8:	2b01      	cmp	r3, #1
    b1fa:	d808      	bhi.n	b20e <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b1fc:	2400      	movs	r4, #0
    b1fe:	4b13      	ldr	r3, [pc, #76]	; (b24c <att_read_mult_req+0x88>)
    b200:	9a05      	ldr	r2, [sp, #20]
    b202:	9400      	str	r4, [sp, #0]
    b204:	2104      	movs	r1, #4
    b206:	4630      	mov	r0, r6
    b208:	f013 fda5 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b20c:	e018      	b.n	b240 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    b20e:	4638      	mov	r0, r7
    b210:	f014 ffc6 	bl	201a0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b214:	ab03      	add	r3, sp, #12
    b216:	464a      	mov	r2, r9
    b218:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    b21a:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b21c:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b220:	f013 fdff 	bl	1ee22 <bt_gatt_foreach_attr>
		if (data.err) {
    b224:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b228:	2b00      	cmp	r3, #0
    b22a:	d0e4      	beq.n	b1f6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b22c:	9805      	ldr	r0, [sp, #20]
    b22e:	f00e fce3 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b232:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b236:	462a      	mov	r2, r5
    b238:	210e      	movs	r1, #14
    b23a:	4630      	mov	r0, r6
    b23c:	f7ff fd18 	bl	ac70 <send_err_rsp.part.0>
			return 0;
    b240:	2000      	movs	r0, #0
}
    b242:	b009      	add	sp, #36	; 0x24
    b244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b248:	200e      	movs	r0, #14
    b24a:	e7fa      	b.n	b242 <att_read_mult_req+0x7e>
    b24c:	0001f119 	.word	0x0001f119
    b250:	0001f1dd 	.word	0x0001f1dd

0000b254 <att_read_rsp>:
{
    b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b258:	6806      	ldr	r6, [r0, #0]
{
    b25a:	b088      	sub	sp, #32
    b25c:	4604      	mov	r4, r0
    b25e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b260:	4630      	mov	r0, r6
    b262:	2101      	movs	r1, #1
{
    b264:	4690      	mov	r8, r2
    b266:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b268:	f014 fb5f 	bl	1f92a <bt_gatt_change_aware>
    b26c:	b3a0      	cbz	r0, b2d8 <att_read_rsp+0x84>
	if (!handle) {
    b26e:	b3ad      	cbz	r5, b2dc <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    b270:	2214      	movs	r2, #20
    b272:	2100      	movs	r1, #0
    b274:	a803      	add	r0, sp, #12
    b276:	f013 f962 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b27a:	2200      	movs	r2, #0
    b27c:	4641      	mov	r1, r8
    b27e:	4630      	mov	r0, r6
    b280:	f7ff fc80 	bl	ab84 <bt_att_create_pdu>
    b284:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    b286:	b358      	cbz	r0, b2e0 <att_read_rsp+0x8c>
	data.offset = offset;
    b288:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    b28c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b290:	2301      	movs	r3, #1
    b292:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b296:	4a13      	ldr	r2, [pc, #76]	; (b2e4 <att_read_rsp+0x90>)
	data.att = att;
    b298:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b29a:	ab03      	add	r3, sp, #12
    b29c:	4629      	mov	r1, r5
    b29e:	4628      	mov	r0, r5
    b2a0:	f013 fdbf 	bl	1ee22 <bt_gatt_foreach_attr>
	if (data.err) {
    b2a4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    b2a8:	b174      	cbz	r4, b2c8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    b2aa:	9805      	ldr	r0, [sp, #20]
    b2ac:	f00e fca4 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b2b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
    b2b4:	462a      	mov	r2, r5
    b2b6:	4639      	mov	r1, r7
    b2b8:	4630      	mov	r0, r6
    b2ba:	f7ff fcd9 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b2be:	2400      	movs	r4, #0
}
    b2c0:	4620      	mov	r0, r4
    b2c2:	b008      	add	sp, #32
    b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b2c8:	4b07      	ldr	r3, [pc, #28]	; (b2e8 <att_read_rsp+0x94>)
    b2ca:	9a05      	ldr	r2, [sp, #20]
    b2cc:	9400      	str	r4, [sp, #0]
    b2ce:	2104      	movs	r1, #4
    b2d0:	4630      	mov	r0, r6
    b2d2:	f013 fd40 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b2d6:	e7f3      	b.n	b2c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b2d8:	2412      	movs	r4, #18
    b2da:	e7f1      	b.n	b2c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    b2dc:	2401      	movs	r4, #1
    b2de:	e7ef      	b.n	b2c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    b2e0:	240e      	movs	r4, #14
    b2e2:	e7ed      	b.n	b2c0 <att_read_rsp+0x6c>
    b2e4:	0001f1dd 	.word	0x0001f1dd
    b2e8:	0001f119 	.word	0x0001f119

0000b2ec <att_read_type_req>:
{
    b2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    b2f0:	7b0c      	ldrb	r4, [r1, #12]
    b2f2:	3c04      	subs	r4, #4
    b2f4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b2f6:	2c02      	cmp	r4, #2
{
    b2f8:	4606      	mov	r6, r0
    b2fa:	b08f      	sub	sp, #60	; 0x3c
    b2fc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b2fe:	d001      	beq.n	b304 <att_read_type_req+0x18>
    b300:	2c10      	cmp	r4, #16
    b302:	d152      	bne.n	b3aa <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b304:	2104      	movs	r1, #4
    b306:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    b308:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    b30c:	f014 ff40 	bl	20190 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b310:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    b314:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b316:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b318:	1d01      	adds	r1, r0, #4
    b31a:	4622      	mov	r2, r4
    b31c:	4640      	mov	r0, r8
    b31e:	f013 fa81 	bl	1e824 <bt_uuid_create>
    b322:	b188      	cbz	r0, b348 <att_read_type_req+0x5c>
	if (!start || !end) {
    b324:	b19d      	cbz	r5, b34e <att_read_type_req+0x62>
    b326:	b18f      	cbz	r7, b34c <att_read_type_req+0x60>
	if (start > end) {
    b328:	42bd      	cmp	r5, r7
    b32a:	d810      	bhi.n	b34e <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    b32c:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    b330:	2218      	movs	r2, #24
    b332:	2100      	movs	r1, #0
    b334:	a808      	add	r0, sp, #32
    b336:	f013 f902 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    b33a:	2201      	movs	r2, #1
    b33c:	2109      	movs	r1, #9
    b33e:	4648      	mov	r0, r9
    b340:	f7ff fc20 	bl	ab84 <bt_att_create_pdu>
    b344:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    b346:	b968      	cbnz	r0, b364 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    b348:	240e      	movs	r4, #14
    b34a:	e007      	b.n	b35c <att_read_type_req+0x70>
			*err = 0U;
    b34c:	463d      	mov	r5, r7
	if (!req) {
    b34e:	2301      	movs	r3, #1
    b350:	462a      	mov	r2, r5
    b352:	2108      	movs	r1, #8
    b354:	4648      	mov	r0, r9
    b356:	f7ff fc8b 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b35a:	2400      	movs	r4, #0
}
    b35c:	4620      	mov	r0, r4
    b35e:	b00f      	add	sp, #60	; 0x3c
    b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b364:	2101      	movs	r1, #1
    b366:	3008      	adds	r0, #8
	data.uuid = uuid;
    b368:	e9cd 6808 	strd	r6, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b36c:	f014 fee9 	bl	20142 <net_buf_simple_add>
	data.rsp->len = 0U;
    b370:	2600      	movs	r6, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b372:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b374:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b376:	4a0e      	ldr	r2, [pc, #56]	; (b3b0 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
    b378:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b37a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b37c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b380:	4628      	mov	r0, r5
    b382:	ab08      	add	r3, sp, #32
    b384:	f013 fd4d 	bl	1ee22 <bt_gatt_foreach_attr>
	if (data.err) {
    b388:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    b38c:	b12c      	cbz	r4, b39a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    b38e:	980a      	ldr	r0, [sp, #40]	; 0x28
    b390:	f00e fc32 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b394:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    b398:	e7da      	b.n	b350 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b39a:	4b06      	ldr	r3, [pc, #24]	; (b3b4 <att_read_type_req+0xc8>)
    b39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b39e:	9400      	str	r4, [sp, #0]
    b3a0:	2104      	movs	r1, #4
    b3a2:	4648      	mov	r0, r9
    b3a4:	f013 fcd7 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b3a8:	e7d8      	b.n	b35c <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    b3aa:	2404      	movs	r4, #4
    b3ac:	e7d6      	b.n	b35c <att_read_type_req+0x70>
    b3ae:	bf00      	nop
    b3b0:	0001ef9f 	.word	0x0001ef9f
    b3b4:	0001f119 	.word	0x0001f119

0000b3b8 <att_find_type_req>:
{
    b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3bc:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    b3be:	f8d0 9000 	ldr.w	r9, [r0]
{
    b3c2:	b089      	sub	sp, #36	; 0x24
    b3c4:	4607      	mov	r7, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    b3c6:	2106      	movs	r1, #6
    b3c8:	f108 0008 	add.w	r0, r8, #8
    b3cc:	f014 fee0 	bl	20190 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    b3d0:	8806      	ldrh	r6, [r0, #0]
	if (!start || !end) {
    b3d2:	b316      	cbz	r6, b41a <att_find_type_req+0x62>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b3d4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (!start || !end) {
    b3d8:	f1ba 0f00 	cmp.w	sl, #0
    b3dc:	d01c      	beq.n	b418 <att_find_type_req+0x60>
	if (start > end) {
    b3de:	45b2      	cmp	sl, r6
    b3e0:	d31b      	bcc.n	b41a <att_find_type_req+0x62>
	type = sys_le16_to_cpu(req->type);
    b3e2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b3e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    b3e8:	2400      	movs	r4, #0
    b3ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b3ee:	a903      	add	r1, sp, #12
    b3f0:	a802      	add	r0, sp, #8
	value = buf->data;
    b3f2:	f8d8 b008 	ldr.w	fp, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b3f6:	f88d 4008 	strb.w	r4, [sp, #8]
    b3fa:	f88d 400c 	strb.w	r4, [sp, #12]
    b3fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    b402:	f013 f9e5 	bl	1e7d0 <bt_uuid_cmp>
    b406:	4605      	mov	r5, r0
    b408:	b190      	cbz	r0, b430 <att_find_type_req+0x78>
	if (!req) {
    b40a:	230a      	movs	r3, #10
    b40c:	4632      	mov	r2, r6
    b40e:	2106      	movs	r1, #6
    b410:	4648      	mov	r0, r9
    b412:	f7ff fc2d 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b416:	e007      	b.n	b428 <att_find_type_req+0x70>
			*err = 0U;
    b418:	4656      	mov	r6, sl
	if (!req) {
    b41a:	2301      	movs	r3, #1
    b41c:	4632      	mov	r2, r6
    b41e:	2106      	movs	r1, #6
    b420:	4648      	mov	r0, r9
    b422:	f7ff fc25 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b426:	2400      	movs	r4, #0
}
    b428:	4620      	mov	r0, r4
    b42a:	b009      	add	sp, #36	; 0x24
    b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    b430:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    b434:	f8d7 8000 	ldr.w	r8, [r7]
	(void)memset(&data, 0, sizeof(data));
    b438:	4601      	mov	r1, r0
    b43a:	2214      	movs	r2, #20
    b43c:	a803      	add	r0, sp, #12
    b43e:	f013 f87e 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    b442:	462a      	mov	r2, r5
    b444:	2107      	movs	r1, #7
    b446:	4640      	mov	r0, r8
    b448:	f7ff fb9c 	bl	ab84 <bt_att_create_pdu>
    b44c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    b44e:	b308      	cbz	r0, b494 <att_find_type_req+0xdc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b450:	230a      	movs	r3, #10
    b452:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b456:	4a10      	ldr	r2, [pc, #64]	; (b498 <att_find_type_req+0xe0>)
	data.value_len = value_len;
    b458:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b45c:	ab03      	add	r3, sp, #12
    b45e:	4651      	mov	r1, sl
    b460:	4630      	mov	r0, r6
	data.value = value;
    b462:	e9cd 5b05 	strd	r5, fp, [sp, #20]
	data.att = att;
    b466:	9703      	str	r7, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b468:	f013 fcdb 	bl	1ee22 <bt_gatt_foreach_attr>
	if (data.err) {
    b46c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    b470:	b144      	cbz	r4, b484 <att_find_type_req+0xcc>
		net_buf_unref(data.buf);
    b472:	9804      	ldr	r0, [sp, #16]
    b474:	f00e fbc0 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b478:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b47c:	4632      	mov	r2, r6
    b47e:	2106      	movs	r1, #6
    b480:	4640      	mov	r0, r8
    b482:	e7ce      	b.n	b422 <att_find_type_req+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b484:	4b05      	ldr	r3, [pc, #20]	; (b49c <att_find_type_req+0xe4>)
    b486:	9a04      	ldr	r2, [sp, #16]
    b488:	9400      	str	r4, [sp, #0]
    b48a:	2104      	movs	r1, #4
    b48c:	4640      	mov	r0, r8
    b48e:	f013 fc62 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b492:	e7c9      	b.n	b428 <att_find_type_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
    b494:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    b496:	e7c7      	b.n	b428 <att_find_type_req+0x70>
    b498:	0000a839 	.word	0x0000a839
    b49c:	0001f119 	.word	0x0001f119

0000b4a0 <att_find_info_req>:
{
    b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    b4a2:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    b4a4:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    b4a6:	881d      	ldrh	r5, [r3, #0]
{
    b4a8:	b087      	sub	sp, #28
    b4aa:	4607      	mov	r7, r0
	if (!start || !end) {
    b4ac:	b195      	cbz	r5, b4d4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b4ae:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    b4b0:	b17c      	cbz	r4, b4d2 <att_find_info_req+0x32>
	if (start > end) {
    b4b2:	42ac      	cmp	r4, r5
    b4b4:	d30e      	bcc.n	b4d4 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    b4b6:	2210      	movs	r2, #16
    b4b8:	2100      	movs	r1, #0
    b4ba:	a802      	add	r0, sp, #8
    b4bc:	f013 f83f 	bl	1e53e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    b4c0:	2200      	movs	r2, #0
    b4c2:	2105      	movs	r1, #5
    b4c4:	4630      	mov	r0, r6
    b4c6:	f7ff fb5d 	bl	ab84 <bt_att_create_pdu>
    b4ca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    b4cc:	b958      	cbnz	r0, b4e6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    b4ce:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    b4d0:	e007      	b.n	b4e2 <att_find_info_req+0x42>
			*err = 0U;
    b4d2:	4625      	mov	r5, r4
	if (!req) {
    b4d4:	2301      	movs	r3, #1
    b4d6:	462a      	mov	r2, r5
    b4d8:	2104      	movs	r1, #4
    b4da:	4630      	mov	r0, r6
    b4dc:	f7ff fbc8 	bl	ac70 <send_err_rsp.part.0>
		return 0;
    b4e0:	2000      	movs	r0, #0
}
    b4e2:	b007      	add	sp, #28
    b4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b4e6:	4621      	mov	r1, r4
    b4e8:	4a0a      	ldr	r2, [pc, #40]	; (b514 <att_find_info_req+0x74>)
	data.att = att;
    b4ea:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b4ec:	ab02      	add	r3, sp, #8
    b4ee:	4628      	mov	r0, r5
    b4f0:	f013 fc97 	bl	1ee22 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    b4f4:	9c04      	ldr	r4, [sp, #16]
    b4f6:	b924      	cbnz	r4, b502 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    b4f8:	9803      	ldr	r0, [sp, #12]
    b4fa:	f00e fb7d 	bl	19bf8 <net_buf_unref>
	if (!req) {
    b4fe:	230a      	movs	r3, #10
    b500:	e7e9      	b.n	b4d6 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    b502:	2400      	movs	r4, #0
    b504:	4b04      	ldr	r3, [pc, #16]	; (b518 <att_find_info_req+0x78>)
    b506:	9a03      	ldr	r2, [sp, #12]
    b508:	9400      	str	r4, [sp, #0]
    b50a:	2104      	movs	r1, #4
    b50c:	4630      	mov	r0, r6
    b50e:	f013 fc22 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
    b512:	e7e5      	b.n	b4e0 <att_find_info_req+0x40>
    b514:	0001ee39 	.word	0x0001ee39
    b518:	0001f119 	.word	0x0001f119

0000b51c <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(s32_t timeout)
{
    b51c:	b513      	push	{r0, r1, r4, lr}
    b51e:	4602      	mov	r2, r0
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b520:	a901      	add	r1, sp, #4
    b522:	4808      	ldr	r0, [pc, #32]	; (b544 <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    b524:	2400      	movs	r4, #0
    b526:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b528:	f00f fc0a 	bl	1ad40 <k_mem_slab_alloc>
    b52c:	4601      	mov	r1, r0
    b52e:	b930      	cbnz	r0, b53e <bt_att_req_alloc+0x22>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    b530:	9801      	ldr	r0, [sp, #4]
    b532:	221c      	movs	r2, #28
    b534:	f013 f803 	bl	1e53e <memset>

	return req;
    b538:	9801      	ldr	r0, [sp, #4]
}
    b53a:	b002      	add	sp, #8
    b53c:	bd10      	pop	{r4, pc}
		return NULL;
    b53e:	4620      	mov	r0, r4
    b540:	e7fb      	b.n	b53a <bt_att_req_alloc+0x1e>
    b542:	bf00      	nop
    b544:	20006168 	.word	0x20006168

0000b548 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    b548:	b507      	push	{r0, r1, r2, lr}
    b54a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    b54c:	a901      	add	r1, sp, #4
    b54e:	4803      	ldr	r0, [pc, #12]	; (b55c <bt_att_req_free+0x14>)
    b550:	f00f fc22 	bl	1ad98 <k_mem_slab_free>
}
    b554:	b003      	add	sp, #12
    b556:	f85d fb04 	ldr.w	pc, [sp], #4
    b55a:	bf00      	nop
    b55c:	20006168 	.word	0x20006168

0000b560 <att_handle_rsp>:
{
    b560:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b564:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    b566:	30a0      	adds	r0, #160	; 0xa0
{
    b568:	460e      	mov	r6, r1
    b56a:	4617      	mov	r7, r2
    b56c:	4698      	mov	r8, r3
	k_delayed_work_cancel(&att->timeout_work);
    b56e:	f015 fa8d 	bl	20a8c <k_delayed_work_cancel>
	if (!att->req) {
    b572:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
    b576:	bb25      	cbnz	r5, b5c2 <att_handle_rsp+0x62>
    b578:	4920      	ldr	r1, [pc, #128]	; (b5fc <att_handle_rsp+0x9c>)
    b57a:	4821      	ldr	r0, [pc, #132]	; (b600 <att_handle_rsp+0xa0>)
    b57c:	1a40      	subs	r0, r0, r1
    b57e:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    b580:	0180      	lsls	r0, r0, #6
    b582:	f040 0102 	orr.w	r1, r0, #2
    b586:	481f      	ldr	r0, [pc, #124]	; (b604 <att_handle_rsp+0xa4>)
    b588:	f012 f88e 	bl	1d6a8 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    b58c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    b590:	b159      	cbz	r1, b5aa <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b592:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    b596:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    b598:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b59c:	4291      	cmp	r1, r2
    b59e:	d101      	bne.n	b5a4 <att_handle_rsp+0x44>
	list->tail = node;
    b5a0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	att_send_req(att, ATT_REQ(node));
    b5a4:	4620      	mov	r0, r4
    b5a6:	f013 fd56 	bl	1f056 <att_send_req>
	if (func) {
    b5aa:	b135      	cbz	r5, b5ba <att_handle_rsp+0x5a>
		func(att->chan.chan.conn, err, pdu, len, params);
    b5ac:	6820      	ldr	r0, [r4, #0]
    b5ae:	f8cd 9000 	str.w	r9, [sp]
    b5b2:	463b      	mov	r3, r7
    b5b4:	4632      	mov	r2, r6
    b5b6:	4641      	mov	r1, r8
    b5b8:	47a8      	blx	r5
}
    b5ba:	2000      	movs	r0, #0
    b5bc:	b002      	add	sp, #8
    b5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    b5c2:	4b11      	ldr	r3, [pc, #68]	; (b608 <att_handle_rsp+0xa8>)
    b5c4:	429d      	cmp	r5, r3
    b5c6:	d103      	bne.n	b5d0 <att_handle_rsp+0x70>
		att->req = NULL;
    b5c8:	2500      	movs	r5, #0
    b5ca:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
    b5ce:	e7dd      	b.n	b58c <att_handle_rsp+0x2c>
	if (att->req->buf) {
    b5d0:	6928      	ldr	r0, [r5, #16]
    b5d2:	b128      	cbz	r0, b5e0 <att_handle_rsp+0x80>
		net_buf_unref(att->req->buf);
    b5d4:	f00e fb10 	bl	19bf8 <net_buf_unref>
		att->req->buf = NULL;
    b5d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    b5dc:	2200      	movs	r2, #0
    b5de:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    b5e0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	att->req->func = NULL;
    b5e4:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    b5e8:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    b5ea:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    b5ee:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(att->req);
    b5f2:	f013 fe73 	bl	1f2dc <att_req_destroy>
	att->req = NULL;
    b5f6:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    b5fa:	e7c7      	b.n	b58c <att_handle_rsp+0x2c>
    b5fc:	00021114 	.word	0x00021114
    b600:	0002111c 	.word	0x0002111c
    b604:	0002465f 	.word	0x0002465f
    b608:	200004c8 	.word	0x200004c8

0000b60c <bt_att_encrypt_change>:
{
    b60c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b60e:	4604      	mov	r4, r0
	if (hci_status) {
    b610:	b139      	cbz	r1, b622 <bt_att_encrypt_change+0x16>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    b612:	2200      	movs	r2, #0
    b614:	2305      	movs	r3, #5
    b616:	4611      	mov	r1, r2
}
    b618:	b002      	add	sp, #8
    b61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    b61e:	f7ff bf9f 	b.w	b560 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    b622:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
    b624:	4628      	mov	r0, r5
    b626:	f001 f9d5 	bl	c9d4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    b62a:	7a6b      	ldrb	r3, [r5, #9]
    b62c:	2b01      	cmp	r3, #1
    b62e:	d020      	beq.n	b672 <bt_att_encrypt_change+0x66>
	if (!att->req || !att->req->retrying) {
    b630:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    b634:	b1eb      	cbz	r3, b672 <bt_att_encrypt_change+0x66>
    b636:	7d1b      	ldrb	r3, [r3, #20]
    b638:	b1db      	cbz	r3, b672 <bt_att_encrypt_change+0x66>
	k_sem_take(&att->tx_sem, K_FOREVER);
    b63a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
	return z_impl_k_sem_take(sem, timeout);
    b63e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b642:	4630      	mov	r0, r6
    b644:	f010 f8da 	bl	1b7fc <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    b648:	6823      	ldr	r3, [r4, #0]
    b64a:	7b5b      	ldrb	r3, [r3, #13]
    b64c:	2b06      	cmp	r3, #6
    b64e:	d012      	beq.n	b676 <bt_att_encrypt_change+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    b650:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    b654:	6919      	ldr	r1, [r3, #16]
    b656:	6888      	ldr	r0, [r1, #8]
    b658:	f7ff f970 	bl	a93c <att_cb.isra.0>
    b65c:	2600      	movs	r6, #0
    b65e:	4603      	mov	r3, r0
    b660:	460a      	mov	r2, r1
    b662:	9600      	str	r6, [sp, #0]
    b664:	2104      	movs	r1, #4
    b666:	4628      	mov	r0, r5
    b668:	f013 fb75 	bl	1ed56 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    b66c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    b670:	611e      	str	r6, [r3, #16]
}
    b672:	b002      	add	sp, #8
    b674:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b676:	f3bf 8f5b 	dmb	ish
    b67a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    b67e:	f3bf 8f5b 	dmb	ish
	if (!att_is_connected(att)) {
    b682:	075b      	lsls	r3, r3, #29
    b684:	d5e4      	bpl.n	b650 <bt_att_encrypt_change+0x44>
    b686:	4b08      	ldr	r3, [pc, #32]	; (b6a8 <bt_att_encrypt_change+0x9c>)
    b688:	4908      	ldr	r1, [pc, #32]	; (b6ac <bt_att_encrypt_change+0xa0>)
		BT_WARN("Disconnected");
    b68a:	4809      	ldr	r0, [pc, #36]	; (b6b0 <bt_att_encrypt_change+0xa4>)
    b68c:	1ac9      	subs	r1, r1, r3
    b68e:	08c9      	lsrs	r1, r1, #3
    b690:	0189      	lsls	r1, r1, #6
    b692:	f041 0102 	orr.w	r1, r1, #2
    b696:	f012 f807 	bl	1d6a8 <log_0>
	z_impl_k_sem_give(sem);
    b69a:	4630      	mov	r0, r6
}
    b69c:	b002      	add	sp, #8
    b69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b6a2:	f010 b885 	b.w	1b7b0 <z_impl_k_sem_give>
    b6a6:	bf00      	nop
    b6a8:	00021114 	.word	0x00021114
    b6ac:	0002111c 	.word	0x0002111c
    b6b0:	00024676 	.word	0x00024676

0000b6b4 <att_timeout>:
    b6b4:	4b0b      	ldr	r3, [pc, #44]	; (b6e4 <att_timeout+0x30>)
    b6b6:	490c      	ldr	r1, [pc, #48]	; (b6e8 <att_timeout+0x34>)
    b6b8:	1ac9      	subs	r1, r1, r3
    b6ba:	08c9      	lsrs	r1, r1, #3
{
    b6bc:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
    b6be:	0189      	lsls	r1, r1, #6
{
    b6c0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    b6c2:	f041 0101 	orr.w	r1, r1, #1
    b6c6:	4809      	ldr	r0, [pc, #36]	; (b6ec <att_timeout+0x38>)
    b6c8:	f011 ffee 	bl	1d6a8 <log_0>
	att_reset(att);
    b6cc:	f1a4 00a0 	sub.w	r0, r4, #160	; 0xa0
    b6d0:	f013 fe18 	bl	1f304 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    b6d4:	f854 0ca0 	ldr.w	r0, [r4, #-160]
    b6d8:	f001 f9f8 	bl	cacc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    b6dc:	2300      	movs	r3, #0
    b6de:	f844 3ca0 	str.w	r3, [r4, #-160]
}
    b6e2:	bd10      	pop	{r4, pc}
    b6e4:	00021114 	.word	0x00021114
    b6e8:	0002111c 	.word	0x0002111c
    b6ec:	00024683 	.word	0x00024683

0000b6f0 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6f2:	490f      	ldr	r1, [pc, #60]	; (b730 <find_static_attr+0x40>)
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b6f4:	4f0f      	ldr	r7, [pc, #60]	; (b734 <find_static_attr+0x44>)
{
    b6f6:	4604      	mov	r4, r0
	u16_t handle = 1;
    b6f8:	2501      	movs	r5, #1
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    b6fa:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b6fe:	f1a1 0308 	sub.w	r3, r1, #8
    b702:	42bb      	cmp	r3, r7
    b704:	d211      	bcs.n	b72a <find_static_attr+0x3a>
    b706:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    b70a:	2200      	movs	r2, #0
    b70c:	e006      	b.n	b71c <find_static_attr+0x2c>
			if (attr == &static_svc->attrs[i]) {
    b70e:	f851 3c08 	ldr.w	r3, [r1, #-8]
    b712:	fb0c 3302 	mla	r3, ip, r2, r3
    b716:	429c      	cmp	r4, r3
    b718:	d008      	beq.n	b72c <find_static_attr+0x3c>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    b71a:	3201      	adds	r2, #1
    b71c:	18ab      	adds	r3, r5, r2
    b71e:	42b2      	cmp	r2, r6
    b720:	b298      	uxth	r0, r3
    b722:	d1f4      	bne.n	b70e <find_static_attr+0x1e>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b724:	3108      	adds	r1, #8
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    b726:	4605      	mov	r5, r0
    b728:	e7e9      	b.n	b6fe <find_static_attr+0xe>
				return handle;
			}
		}
	}

	return 0;
    b72a:	2000      	movs	r0, #0
}
    b72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b72e:	bf00      	nop
    b730:	00021080 	.word	0x00021080
    b734:	000210b0 	.word	0x000210b0

0000b738 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b738:	490a      	ldr	r1, [pc, #40]	; (b764 <db_hash_store+0x2c>)
    b73a:	480b      	ldr	r0, [pc, #44]	; (b768 <db_hash_store+0x30>)
{
    b73c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b73e:	2210      	movs	r2, #16
    b740:	f7f9 fd54 	bl	51ec <settings_save_one>
	if (err) {
    b744:	4601      	mov	r1, r0
    b746:	b158      	cbz	r0, b760 <db_hash_store+0x28>
    b748:	4b08      	ldr	r3, [pc, #32]	; (b76c <db_hash_store+0x34>)
    b74a:	4a09      	ldr	r2, [pc, #36]	; (b770 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b74c:	4809      	ldr	r0, [pc, #36]	; (b774 <db_hash_store+0x3c>)
    b74e:	1ad2      	subs	r2, r2, r3
    b750:	08d2      	lsrs	r2, r2, #3
    b752:	0192      	lsls	r2, r2, #6
}
    b754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b758:	f042 0201 	orr.w	r2, r2, #1
    b75c:	f011 bfb1 	b.w	1d6c2 <log_1>
}
    b760:	bd08      	pop	{r3, pc}
    b762:	bf00      	nop
    b764:	20002261 	.word	0x20002261
    b768:	00024696 	.word	0x00024696
    b76c:	00021114 	.word	0x00021114
    b770:	000211cc 	.word	0x000211cc
    b774:	0002469e 	.word	0x0002469e

0000b778 <db_hash_set>:

static u8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    b778:	b510      	push	{r4, lr}
	int len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b77a:	490b      	ldr	r1, [pc, #44]	; (b7a8 <db_hash_set+0x30>)
{
    b77c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b77e:	4618      	mov	r0, r3
    b780:	2210      	movs	r2, #16
    b782:	47a0      	blx	r4
	if (len < 0) {
    b784:	1e04      	subs	r4, r0, #0
    b786:	da0c      	bge.n	b7a2 <db_hash_set+0x2a>
    b788:	4a08      	ldr	r2, [pc, #32]	; (b7ac <db_hash_set+0x34>)
    b78a:	4b09      	ldr	r3, [pc, #36]	; (b7b0 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %d)", len);
    b78c:	4809      	ldr	r0, [pc, #36]	; (b7b4 <db_hash_set+0x3c>)
    b78e:	1ad2      	subs	r2, r2, r3
    b790:	08d2      	lsrs	r2, r2, #3
    b792:	0192      	lsls	r2, r2, #6
    b794:	f042 0201 	orr.w	r2, r2, #1
    b798:	4621      	mov	r1, r4
    b79a:	f011 ff92 	bl	1d6c2 <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    b79e:	4620      	mov	r0, r4
    b7a0:	bd10      	pop	{r4, pc}
	return 0;
    b7a2:	2400      	movs	r4, #0
    b7a4:	e7fb      	b.n	b79e <db_hash_set+0x26>
    b7a6:	bf00      	nop
    b7a8:	20002271 	.word	0x20002271
    b7ac:	000211cc 	.word	0x000211cc
    b7b0:	00021114 	.word	0x00021114
    b7b4:	000246c4 	.word	0x000246c4

0000b7b8 <sc_store>:
{
    b7b8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    b7ba:	4605      	mov	r5, r0
{
    b7bc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    b7be:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    b7c2:	4604      	mov	r4, r0
	if (cfg->id) {
    b7c4:	b1fa      	cbz	r2, b806 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    b7c6:	ae02      	add	r6, sp, #8
    b7c8:	2104      	movs	r1, #4
    b7ca:	4630      	mov	r0, r6
    b7cc:	f010 fbce 	bl	1bf6c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    b7d0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    b7d2:	4a0e      	ldr	r2, [pc, #56]	; (b80c <sc_store+0x54>)
    b7d4:	462b      	mov	r3, r5
    b7d6:	2124      	movs	r1, #36	; 0x24
    b7d8:	a803      	add	r0, sp, #12
    b7da:	f7fb fd87 	bl	72ec <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    b7de:	f104 0108 	add.w	r1, r4, #8
    b7e2:	2204      	movs	r2, #4
    b7e4:	a803      	add	r0, sp, #12
    b7e6:	f7f9 fd01 	bl	51ec <settings_save_one>
	if (err) {
    b7ea:	4601      	mov	r1, r0
    b7ec:	b148      	cbz	r0, b802 <sc_store+0x4a>
    b7ee:	4a08      	ldr	r2, [pc, #32]	; (b810 <sc_store+0x58>)
    b7f0:	4b08      	ldr	r3, [pc, #32]	; (b814 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    b7f2:	4809      	ldr	r0, [pc, #36]	; (b818 <sc_store+0x60>)
    b7f4:	1ad2      	subs	r2, r2, r3
    b7f6:	08d2      	lsrs	r2, r2, #3
    b7f8:	0192      	lsls	r2, r2, #6
    b7fa:	f042 0201 	orr.w	r2, r2, #1
    b7fe:	f011 ff60 	bl	1d6c2 <log_1>
}
    b802:	b00c      	add	sp, #48	; 0x30
    b804:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    b806:	9200      	str	r2, [sp, #0]
    b808:	e7e3      	b.n	b7d2 <sc_store+0x1a>
    b80a:	bf00      	nop
    b80c:	00024912 	.word	0x00024912
    b810:	000211cc 	.word	0x000211cc
    b814:	00021114 	.word	0x00021114
    b818:	000246e4 	.word	0x000246e4

0000b81c <sc_clear>:
{
    b81c:	b570      	push	{r4, r5, r6, lr}
		if (cfg->data.start || cfg->data.end) {
    b81e:	8903      	ldrh	r3, [r0, #8]
{
    b820:	b08c      	sub	sp, #48	; 0x30
    b822:	4604      	mov	r4, r0
		if (cfg->data.start || cfg->data.end) {
    b824:	b90b      	cbnz	r3, b82a <sc_clear+0xe>
    b826:	8943      	ldrh	r3, [r0, #10]
    b828:	b31b      	cbz	r3, b872 <sc_clear+0x56>
		if (modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    b82a:	4625      	mov	r5, r4
    b82c:	f815 0b01 	ldrb.w	r0, [r5], #1
    b830:	4629      	mov	r1, r5
    b832:	f013 f919 	bl	1ea68 <bt_addr_le_is_bonded>
    b836:	b1e0      	cbz	r0, b872 <sc_clear+0x56>
			if (cfg->id) {
    b838:	7822      	ldrb	r2, [r4, #0]
    b83a:	b30a      	cbz	r2, b880 <sc_clear+0x64>
				u8_to_dec(id_str, sizeof(id_str), cfg->id);
    b83c:	ae02      	add	r6, sp, #8
    b83e:	2104      	movs	r1, #4
    b840:	4630      	mov	r0, r6
    b842:	f010 fb93 	bl	1bf6c <u8_to_dec>
				bt_settings_encode_key(key, sizeof(key), "sc",
    b846:	9600      	str	r6, [sp, #0]
				bt_settings_encode_key(key, sizeof(key), "sc",
    b848:	2124      	movs	r1, #36	; 0x24
    b84a:	4a0e      	ldr	r2, [pc, #56]	; (b884 <sc_clear+0x68>)
    b84c:	462b      	mov	r3, r5
    b84e:	a803      	add	r0, sp, #12
    b850:	f7fb fd4c 	bl	72ec <bt_settings_encode_key>
			err = settings_delete(key);
    b854:	a803      	add	r0, sp, #12
    b856:	f012 fb68 	bl	1df2a <settings_delete>
			if (err) {
    b85a:	4601      	mov	r1, r0
    b85c:	b148      	cbz	r0, b872 <sc_clear+0x56>
    b85e:	4a0a      	ldr	r2, [pc, #40]	; (b888 <sc_clear+0x6c>)
    b860:	4b0a      	ldr	r3, [pc, #40]	; (b88c <sc_clear+0x70>)
				BT_ERR("failed to delete SC (err %d)", err);
    b862:	480b      	ldr	r0, [pc, #44]	; (b890 <sc_clear+0x74>)
    b864:	1ad2      	subs	r2, r2, r3
    b866:	08d2      	lsrs	r2, r2, #3
    b868:	0192      	lsls	r2, r2, #6
    b86a:	f042 0201 	orr.w	r2, r2, #1
    b86e:	f011 ff28 	bl	1d6c2 <log_1>
	memset(cfg, 0, sizeof(*cfg));
    b872:	220c      	movs	r2, #12
    b874:	2100      	movs	r1, #0
    b876:	4620      	mov	r0, r4
    b878:	f012 fe61 	bl	1e53e <memset>
}
    b87c:	b00c      	add	sp, #48	; 0x30
    b87e:	bd70      	pop	{r4, r5, r6, pc}
				bt_settings_encode_key(key, sizeof(key), "sc",
    b880:	9200      	str	r2, [sp, #0]
    b882:	e7e1      	b.n	b848 <sc_clear+0x2c>
    b884:	00024912 	.word	0x00024912
    b888:	000211cc 	.word	0x000211cc
    b88c:	00021114 	.word	0x00021114
    b890:	00024700 	.word	0x00024700

0000b894 <gatt_notify>:
{
    b894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b898:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    b89a:	8992      	ldrh	r2, [r2, #12]
{
    b89c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    b89e:	3202      	adds	r2, #2
    b8a0:	211b      	movs	r1, #27
{
    b8a2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    b8a4:	f7ff f96e 	bl	ab84 <bt_att_create_pdu>
	if (!buf) {
    b8a8:	4605      	mov	r5, r0
    b8aa:	b1c8      	cbz	r0, b8e0 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    b8ac:	f100 0908 	add.w	r9, r0, #8
    b8b0:	2102      	movs	r1, #2
    b8b2:	4648      	mov	r0, r9
    b8b4:	f014 fc45 	bl	20142 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    b8b8:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    b8ba:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    b8bc:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    b8c0:	4648      	mov	r0, r9
    b8c2:	f014 fc3e 	bl	20142 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    b8c6:	89a2      	ldrh	r2, [r4, #12]
    b8c8:	68a1      	ldr	r1, [r4, #8]
    b8ca:	4630      	mov	r0, r6
    b8cc:	f012 fe0c 	bl	1e4e8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    b8d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b8d4:	4629      	mov	r1, r5
    b8d6:	4638      	mov	r0, r7
}
    b8d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    b8dc:	f013 bd75 	b.w	1f3ca <bt_att_send>
    b8e0:	4b06      	ldr	r3, [pc, #24]	; (b8fc <gatt_notify+0x68>)
    b8e2:	4907      	ldr	r1, [pc, #28]	; (b900 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    b8e4:	4807      	ldr	r0, [pc, #28]	; (b904 <gatt_notify+0x70>)
    b8e6:	1ac9      	subs	r1, r1, r3
    b8e8:	08c9      	lsrs	r1, r1, #3
    b8ea:	0189      	lsls	r1, r1, #6
    b8ec:	f041 0102 	orr.w	r1, r1, #2
    b8f0:	f011 feda 	bl	1d6a8 <log_0>
}
    b8f4:	f06f 000b 	mvn.w	r0, #11
    b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8fc:	00021114 	.word	0x00021114
    b900:	000211cc 	.word	0x000211cc
    b904:	0002471d 	.word	0x0002471d

0000b908 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    b908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b90c:	4606      	mov	r6, r0
    b90e:	4688      	mov	r8, r1
    b910:	4617      	mov	r7, r2
	if (params) {
    b912:	461c      	mov	r4, r3
    b914:	b323      	cbz	r3, b960 <gatt_send.constprop.0+0x58>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    b916:	f247 5030 	movw	r0, #30000	; 0x7530
    b91a:	f7ff fdff 	bl	b51c <bt_att_req_alloc>
		if (!req) {
    b91e:	4605      	mov	r5, r0
    b920:	b328      	cbz	r0, b96e <gatt_send.constprop.0+0x66>
		req->destroy = destroy;
    b922:	2300      	movs	r3, #0
		req->user_data = params;
    b924:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    b926:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    b92a:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    b92c:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    b92e:	4601      	mov	r1, r0
    b930:	4630      	mov	r0, r6
    b932:	f013 fd7a 	bl	1f42a <bt_att_req_send>
		if (err) {
    b936:	4604      	mov	r4, r0
    b938:	b918      	cbnz	r0, b942 <gatt_send.constprop.0+0x3a>
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    b93a:	2400      	movs	r4, #0
}
    b93c:	4620      	mov	r0, r4
    b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_att_req_free(req);
    b942:	4628      	mov	r0, r5
    b944:	f7ff fe00 	bl	b548 <bt_att_req_free>
    b948:	4b0a      	ldr	r3, [pc, #40]	; (b974 <gatt_send.constprop.0+0x6c>)
    b94a:	4a0b      	ldr	r2, [pc, #44]	; (b978 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    b94c:	480b      	ldr	r0, [pc, #44]	; (b97c <gatt_send.constprop.0+0x74>)
    b94e:	1ad2      	subs	r2, r2, r3
    b950:	08d2      	lsrs	r2, r2, #3
    b952:	0192      	lsls	r2, r2, #6
    b954:	f042 0201 	orr.w	r2, r2, #1
    b958:	4621      	mov	r1, r4
    b95a:	f011 feb2 	bl	1d6c2 <log_1>
    b95e:	e7ed      	b.n	b93c <gatt_send.constprop.0+0x34>
		err = bt_att_send(conn, buf, NULL, NULL);
    b960:	461a      	mov	r2, r3
    b962:	f013 fd32 	bl	1f3ca <bt_att_send>
	if (err) {
    b966:	4604      	mov	r4, r0
    b968:	2800      	cmp	r0, #0
    b96a:	d0e6      	beq.n	b93a <gatt_send.constprop.0+0x32>
    b96c:	e7ec      	b.n	b948 <gatt_send.constprop.0+0x40>
			return -ENOMEM;
    b96e:	f06f 040b 	mvn.w	r4, #11
    b972:	e7e3      	b.n	b93c <gatt_send.constprop.0+0x34>
    b974:	00021114 	.word	0x00021114
    b978:	000211cc 	.word	0x000211cc
    b97c:	00024746 	.word	0x00024746

0000b980 <gatt_indicate>:
{
    b980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b984:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    b986:	8a12      	ldrh	r2, [r2, #16]
{
    b988:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b98a:	3202      	adds	r2, #2
    b98c:	211d      	movs	r1, #29
{
    b98e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b990:	f7ff f8f8 	bl	ab84 <bt_att_create_pdu>
	if (!buf) {
    b994:	4605      	mov	r5, r0
    b996:	b1e8      	cbz	r0, b9d4 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    b998:	f100 0808 	add.w	r8, r0, #8
    b99c:	2102      	movs	r1, #2
    b99e:	4640      	mov	r0, r8
    b9a0:	f014 fbcf 	bl	20142 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    b9a4:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    b9a6:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    b9a8:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    b9ac:	4640      	mov	r0, r8
    b9ae:	f014 fbc8 	bl	20142 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    b9b2:	8a22      	ldrh	r2, [r4, #16]
    b9b4:	68e1      	ldr	r1, [r4, #12]
    b9b6:	4630      	mov	r0, r6
    b9b8:	f012 fd96 	bl	1e4e8 <memcpy>
	if (!params->func) {
    b9bc:	68a3      	ldr	r3, [r4, #8]
    b9be:	b933      	cbnz	r3, b9ce <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    b9c0:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    b9c2:	4629      	mov	r1, r5
    b9c4:	4638      	mov	r0, r7
}
    b9c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    b9ca:	f7ff bf9d 	b.w	b908 <gatt_send.constprop.0>
    b9ce:	4a08      	ldr	r2, [pc, #32]	; (b9f0 <gatt_indicate+0x70>)
    b9d0:	4623      	mov	r3, r4
    b9d2:	e7f6      	b.n	b9c2 <gatt_indicate+0x42>
    b9d4:	4b07      	ldr	r3, [pc, #28]	; (b9f4 <gatt_indicate+0x74>)
    b9d6:	4908      	ldr	r1, [pc, #32]	; (b9f8 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    b9d8:	4808      	ldr	r0, [pc, #32]	; (b9fc <gatt_indicate+0x7c>)
    b9da:	1ac9      	subs	r1, r1, r3
    b9dc:	08c9      	lsrs	r1, r1, #3
    b9de:	0189      	lsls	r1, r1, #6
    b9e0:	f041 0102 	orr.w	r1, r1, #2
    b9e4:	f011 fe60 	bl	1d6a8 <log_0>
}
    b9e8:	f06f 000b 	mvn.w	r0, #11
    b9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9f0:	0001f483 	.word	0x0001f483
    b9f4:	00021114 	.word	0x00021114
    b9f8:	000211cc 	.word	0x000211cc
    b9fc:	00024760 	.word	0x00024760

0000ba00 <ccc_load>:
{
    ba00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba02:	4a22      	ldr	r2, [pc, #136]	; (ba8c <ccc_load+0x8c>)
{
    ba04:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba06:	6881      	ldr	r1, [r0, #8]
    ba08:	4291      	cmp	r1, r2
{
    ba0a:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba0c:	d002      	beq.n	ba14 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    ba0e:	2001      	movs	r0, #1
}
    ba10:	b002      	add	sp, #8
    ba12:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    ba14:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    ba16:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    ba18:	b94a      	cbnz	r2, ba2e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    ba1a:	7922      	ldrb	r2, [r4, #4]
    ba1c:	6821      	ldr	r1, [r4, #0]
    ba1e:	4630      	mov	r0, r6
    ba20:	f013 fde0 	bl	1f5e4 <ccc_find_cfg>
	if (!cfg) {
    ba24:	2800      	cmp	r0, #0
    ba26:	d0f2      	beq.n	ba0e <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    ba28:	f013 fd36 	bl	1f498 <clear_ccc_cfg>
    ba2c:	e7ef      	b.n	ba0e <ccc_load+0xe>
	} else if (!load->count) {
    ba2e:	68e0      	ldr	r0, [r4, #12]
    ba30:	2800      	cmp	r0, #0
    ba32:	d0ed      	beq.n	ba10 <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    ba34:	8812      	ldrh	r2, [r2, #0]
    ba36:	8a1b      	ldrh	r3, [r3, #16]
    ba38:	429a      	cmp	r2, r3
    ba3a:	d00a      	beq.n	ba52 <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    ba3c:	d2e7      	bcs.n	ba0e <ccc_load+0xe>
	load->count--;
    ba3e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    ba40:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    ba42:	3801      	subs	r0, #1
	load->entry++;
    ba44:	3304      	adds	r3, #4
	load->count--;
    ba46:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ba48:	3800      	subs	r0, #0
	load->entry++;
    ba4a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ba4c:	bf18      	it	ne
    ba4e:	2001      	movne	r0, #1
    ba50:	e7de      	b.n	ba10 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    ba52:	7922      	ldrb	r2, [r4, #4]
    ba54:	6821      	ldr	r1, [r4, #0]
    ba56:	4630      	mov	r0, r6
    ba58:	f013 fdc4 	bl	1f5e4 <ccc_find_cfg>
	if (!cfg) {
    ba5c:	4605      	mov	r5, r0
    ba5e:	b980      	cbnz	r0, ba82 <ccc_load+0x82>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    ba60:	9000      	str	r0, [sp, #0]
    ba62:	4602      	mov	r2, r0
    ba64:	f8cd 0003 	str.w	r0, [sp, #3]
    ba68:	4669      	mov	r1, sp
    ba6a:	4630      	mov	r0, r6
    ba6c:	f013 fdba 	bl	1f5e4 <ccc_find_cfg>
		if (!cfg) {
    ba70:	4605      	mov	r5, r0
    ba72:	2800      	cmp	r0, #0
    ba74:	d0e3      	beq.n	ba3e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    ba76:	6821      	ldr	r1, [r4, #0]
    ba78:	3001      	adds	r0, #1
    ba7a:	f013 fd0a 	bl	1f492 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    ba7e:	7923      	ldrb	r3, [r4, #4]
    ba80:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    ba82:	68a3      	ldr	r3, [r4, #8]
    ba84:	885b      	ldrh	r3, [r3, #2]
    ba86:	812b      	strh	r3, [r5, #8]
    ba88:	e7d9      	b.n	ba3e <ccc_load+0x3e>
    ba8a:	bf00      	nop
    ba8c:	0000baf1 	.word	0x0000baf1

0000ba90 <ccc_save>:
{
    ba90:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba92:	6882      	ldr	r2, [r0, #8]
    ba94:	4b0b      	ldr	r3, [pc, #44]	; (bac4 <ccc_save+0x34>)
    ba96:	429a      	cmp	r2, r3
{
    ba98:	4605      	mov	r5, r0
    ba9a:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba9c:	d110      	bne.n	bac0 <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    ba9e:	790a      	ldrb	r2, [r1, #4]
    baa0:	68c0      	ldr	r0, [r0, #12]
    baa2:	6809      	ldr	r1, [r1, #0]
    baa4:	f013 fd9e 	bl	1f5e4 <ccc_find_cfg>
	if (!cfg) {
    baa8:	b150      	cbz	r0, bac0 <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    baaa:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    baae:	8a29      	ldrh	r1, [r5, #16]
    bab0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    bab4:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    bab6:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    bab8:	8901      	ldrh	r1, [r0, #8]
    baba:	8151      	strh	r1, [r2, #10]
	save->count++;
    babc:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    bac0:	2001      	movs	r0, #1
    bac2:	bd38      	pop	{r3, r4, r5, pc}
    bac4:	0000baf1 	.word	0x0000baf1

0000bac8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static u8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				  void *user_data)
{
    bac8:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    baca:	6882      	ldr	r2, [r0, #8]
    bacc:	4b07      	ldr	r3, [pc, #28]	; (baec <remove_peer_from_attr+0x24>)
    bace:	429a      	cmp	r2, r3
    bad0:	d109      	bne.n	bae6 <remove_peer_from_attr+0x1e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    bad2:	790a      	ldrb	r2, [r1, #4]
    bad4:	68c0      	ldr	r0, [r0, #12]
    bad6:	6809      	ldr	r1, [r1, #0]
    bad8:	f013 fd84 	bl	1f5e4 <ccc_find_cfg>
	if (cfg) {
    badc:	b118      	cbz	r0, bae6 <remove_peer_from_attr+0x1e>
		memset(cfg, 0, sizeof(*cfg));
    bade:	220a      	movs	r2, #10
    bae0:	2100      	movs	r1, #0
    bae2:	f012 fd2c 	bl	1e53e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    bae6:	2001      	movs	r0, #1
    bae8:	bd08      	pop	{r3, pc}
    baea:	bf00      	nop
    baec:	0000baf1 	.word	0x0000baf1

0000baf0 <bt_gatt_attr_write_ccc>:
{
    baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    baf4:	461f      	mov	r7, r3
    baf6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    bafa:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    bafe:	4606      	mov	r6, r0
    bb00:	4688      	mov	r8, r1
	if (offset) {
    bb02:	2b00      	cmp	r3, #0
    bb04:	d14a      	bne.n	bb9c <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(u16_t)) {
    bb06:	1e7b      	subs	r3, r7, #1
    bb08:	2b01      	cmp	r3, #1
    bb0a:	d84a      	bhi.n	bba2 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(u16_t)) {
    bb0c:	2f01      	cmp	r7, #1
		value = *(u8_t *)buf;
    bb0e:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    bb10:	bf18      	it	ne
    bb12:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    bb14:	4649      	mov	r1, r9
		value = *(u8_t *)buf;
    bb16:	bf0c      	ite	eq
    bb18:	b2ad      	uxtheq	r5, r5
    bb1a:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    bb1e:	f013 fd70 	bl	1f602 <find_ccc_cfg>
	if (!cfg) {
    bb22:	4604      	mov	r4, r0
    bb24:	b9e0      	cbnz	r0, bb60 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    bb26:	b915      	cbnz	r5, bb2e <bt_gatt_attr_write_ccc+0x3e>
			return len;
    bb28:	4638      	mov	r0, r7
}
    bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    bb2e:	4649      	mov	r1, r9
    bb30:	f013 fd67 	bl	1f602 <find_ccc_cfg>
		if (!cfg) {
    bb34:	4604      	mov	r4, r0
    bb36:	b960      	cbnz	r0, bb52 <bt_gatt_attr_write_ccc+0x62>
    bb38:	4b1b      	ldr	r3, [pc, #108]	; (bba8 <bt_gatt_attr_write_ccc+0xb8>)
    bb3a:	491c      	ldr	r1, [pc, #112]	; (bbac <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    bb3c:	481c      	ldr	r0, [pc, #112]	; (bbb0 <bt_gatt_attr_write_ccc+0xc0>)
    bb3e:	1ac9      	subs	r1, r1, r3
    bb40:	08c9      	lsrs	r1, r1, #3
    bb42:	0189      	lsls	r1, r1, #6
    bb44:	f041 0102 	orr.w	r1, r1, #2
    bb48:	f011 fdae 	bl	1d6a8 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    bb4c:	f06f 0010 	mvn.w	r0, #16
    bb50:	e7eb      	b.n	bb2a <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bb52:	f106 0170 	add.w	r1, r6, #112	; 0x70
    bb56:	3001      	adds	r0, #1
    bb58:	f013 fc9b 	bl	1f492 <bt_addr_le_copy>
		cfg->id = conn->id;
    bb5c:	7a33      	ldrb	r3, [r6, #8]
    bb5e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    bb60:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bb64:	b973      	cbnz	r3, bb84 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    bb66:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    bb6a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    bb6c:	42ab      	cmp	r3, r5
    bb6e:	d003      	beq.n	bb78 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    bb70:	4649      	mov	r1, r9
    bb72:	4640      	mov	r0, r8
    bb74:	f013 fc7b 	bl	1f46e <gatt_ccc_changed>
	if (!value) {
    bb78:	2d00      	cmp	r5, #0
    bb7a:	d1d5      	bne.n	bb28 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    bb7c:	4620      	mov	r0, r4
    bb7e:	f013 fc8b 	bl	1f498 <clear_ccc_cfg>
    bb82:	e7d1      	b.n	bb28 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    bb84:	462a      	mov	r2, r5
    bb86:	4641      	mov	r1, r8
    bb88:	4630      	mov	r0, r6
    bb8a:	4798      	blx	r3
		if (write < 0) {
    bb8c:	2800      	cmp	r0, #0
    bb8e:	dbcc      	blt.n	bb2a <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    bb90:	1e42      	subs	r2, r0, #1
    bb92:	2a01      	cmp	r2, #1
    bb94:	d9e7      	bls.n	bb66 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    bb96:	f06f 000d 	mvn.w	r0, #13
    bb9a:	e7c6      	b.n	bb2a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bb9c:	f06f 0006 	mvn.w	r0, #6
    bba0:	e7c3      	b.n	bb2a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    bba2:	f06f 000c 	mvn.w	r0, #12
    bba6:	e7c0      	b.n	bb2a <bt_gatt_attr_write_ccc+0x3a>
    bba8:	00021114 	.word	0x00021114
    bbac:	000211cc 	.word	0x000211cc
    bbb0:	00024787 	.word	0x00024787

0000bbb4 <sc_commit>:
{
    bbb4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bbb6:	490e      	ldr	r1, [pc, #56]	; (bbf0 <sc_commit+0x3c>)
    bbb8:	f3bf 8f5b 	dmb	ish
    bbbc:	f101 0338 	add.w	r3, r1, #56	; 0x38
    bbc0:	e853 2f00 	ldrex	r2, [r3]
    bbc4:	f022 0202 	bic.w	r2, r2, #2
    bbc8:	e843 2000 	strex	r0, r2, [r3]
    bbcc:	2800      	cmp	r0, #0
    bbce:	d1f7      	bne.n	bbc0 <sc_commit+0xc>
    bbd0:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbd4:	f3bf 8f5b 	dmb	ish
    bbd8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    bbda:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    bbde:	07db      	lsls	r3, r3, #31
    bbe0:	d504      	bpl.n	bbec <sc_commit+0x38>
    bbe2:	4804      	ldr	r0, [pc, #16]	; (bbf4 <sc_commit+0x40>)
    bbe4:	220a      	movs	r2, #10
    bbe6:	3118      	adds	r1, #24
    bbe8:	f00f ff28 	bl	1ba3c <k_delayed_work_submit_to_queue>
}
    bbec:	2000      	movs	r0, #0
    bbee:	bd08      	pop	{r3, pc}
    bbf0:	20000524 	.word	0x20000524
    bbf4:	20001c48 	.word	0x20001c48

0000bbf8 <find_sc_cfg>:
{
    bbf8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    bbfa:	4c0e      	ldr	r4, [pc, #56]	; (bc34 <find_sc_cfg+0x3c>)
    bbfc:	7823      	ldrb	r3, [r4, #0]
    bbfe:	4283      	cmp	r3, r0
{
    bc00:	4605      	mov	r5, r0
    bc02:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    bc04:	d00a      	beq.n	bc1c <find_sc_cfg+0x24>
    bc06:	7b23      	ldrb	r3, [r4, #12]
    bc08:	42ab      	cmp	r3, r5
    bc0a:	d111      	bne.n	bc30 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
    bc0c:	480a      	ldr	r0, [pc, #40]	; (bc38 <find_sc_cfg+0x40>)
    bc0e:	2207      	movs	r2, #7
    bc10:	4631      	mov	r1, r6
    bc12:	f012 fc59 	bl	1e4c8 <memcmp>
    bc16:	b958      	cbnz	r0, bc30 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bc18:	2001      	movs	r0, #1
    bc1a:	e005      	b.n	bc28 <find_sc_cfg+0x30>
    bc1c:	2207      	movs	r2, #7
    bc1e:	1c60      	adds	r0, r4, #1
    bc20:	f012 fc52 	bl	1e4c8 <memcmp>
		if (id == sc_cfg[i].id &&
    bc24:	2800      	cmp	r0, #0
    bc26:	d1ee      	bne.n	bc06 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    bc28:	230c      	movs	r3, #12
    bc2a:	fb03 4000 	mla	r0, r3, r0, r4
    bc2e:	e000      	b.n	bc32 <find_sc_cfg+0x3a>
	return NULL;
    bc30:	2000      	movs	r0, #0
}
    bc32:	bd70      	pop	{r4, r5, r6, pc}
    bc34:	20001cca 	.word	0x20001cca
    bc38:	20001cd7 	.word	0x20001cd7

0000bc3c <sc_save>:
{
    bc3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bc40:	4680      	mov	r8, r0
    bc42:	460f      	mov	r7, r1
    bc44:	4616      	mov	r6, r2
    bc46:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    bc48:	f7ff ffd6 	bl	bbf8 <find_sc_cfg>
	if (!cfg) {
    bc4c:	4604      	mov	r4, r0
    bc4e:	b9c8      	cbnz	r0, bc84 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    bc50:	4669      	mov	r1, sp
    bc52:	9000      	str	r0, [sp, #0]
    bc54:	f8cd 0003 	str.w	r0, [sp, #3]
    bc58:	f7ff ffce 	bl	bbf8 <find_sc_cfg>
		if (!cfg) {
    bc5c:	4604      	mov	r4, r0
    bc5e:	b960      	cbnz	r0, bc7a <sc_save+0x3e>
    bc60:	4915      	ldr	r1, [pc, #84]	; (bcb8 <sc_save+0x7c>)
    bc62:	4b16      	ldr	r3, [pc, #88]	; (bcbc <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    bc64:	4816      	ldr	r0, [pc, #88]	; (bcc0 <sc_save+0x84>)
    bc66:	1ac9      	subs	r1, r1, r3
    bc68:	08c9      	lsrs	r1, r1, #3
    bc6a:	0189      	lsls	r1, r1, #6
    bc6c:	f041 0101 	orr.w	r1, r1, #1
    bc70:	f011 fd1a 	bl	1d6a8 <log_0>
}
    bc74:	b002      	add	sp, #8
    bc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    bc7a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    bc7e:	4639      	mov	r1, r7
    bc80:	f013 fc07 	bl	1f492 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    bc84:	8922      	ldrh	r2, [r4, #8]
    bc86:	8963      	ldrh	r3, [r4, #10]
    bc88:	b96a      	cbnz	r2, bca6 <sc_save+0x6a>
    bc8a:	b973      	cbnz	r3, bcaa <sc_save+0x6e>
		cfg->data.start = start;
    bc8c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    bc8e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    bc90:	4621      	mov	r1, r4
    bc92:	f811 0b01 	ldrb.w	r0, [r1], #1
    bc96:	f012 fee7 	bl	1ea68 <bt_addr_le_is_bonded>
    bc9a:	2800      	cmp	r0, #0
    bc9c:	d0ea      	beq.n	bc74 <sc_save+0x38>
		sc_store(cfg);
    bc9e:	4620      	mov	r0, r4
    bca0:	f7ff fd8a 	bl	b7b8 <sc_store>
    bca4:	e7e6      	b.n	bc74 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    bca6:	4296      	cmp	r6, r2
    bca8:	d302      	bcc.n	bcb0 <sc_save+0x74>
    bcaa:	429d      	cmp	r5, r3
    bcac:	d8ef      	bhi.n	bc8e <sc_save+0x52>
    bcae:	e7e1      	b.n	bc74 <sc_save+0x38>
	if (*end < new_end) {
    bcb0:	429d      	cmp	r5, r3
		*start = new_start;
    bcb2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    bcb4:	d9ec      	bls.n	bc90 <sc_save+0x54>
    bcb6:	e7ea      	b.n	bc8e <sc_save+0x52>
    bcb8:	000211cc 	.word	0x000211cc
    bcbc:	00021114 	.word	0x00021114
    bcc0:	000247a1 	.word	0x000247a1

0000bcc4 <notify_cb>:
{
    bcc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    bcc8:	4b31      	ldr	r3, [pc, #196]	; (bd90 <notify_cb+0xcc>)
    bcca:	6882      	ldr	r2, [r0, #8]
    bccc:	429a      	cmp	r2, r3
{
    bcce:	4606      	mov	r6, r0
    bcd0:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    bcd2:	d113      	bne.n	bcfc <notify_cb+0x38>
	ccc = attr->user_data;
    bcd4:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    bcd6:	4b2f      	ldr	r3, [pc, #188]	; (bd94 <notify_cb+0xd0>)
    bcd8:	429f      	cmp	r7, r3
    bcda:	d013      	beq.n	bd04 <notify_cb+0x40>
		if (cfg->value != data->type) {
    bcdc:	893a      	ldrh	r2, [r7, #8]
    bcde:	88ab      	ldrh	r3, [r5, #4]
    bce0:	429a      	cmp	r2, r3
    bce2:	d10b      	bne.n	bcfc <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bce4:	4639      	mov	r1, r7
    bce6:	f811 0b01 	ldrb.w	r0, [r1], #1
    bcea:	f7fe fa1f 	bl	a12c <bt_conn_lookup_addr_le>
		if (!conn) {
    bcee:	4604      	mov	r4, r0
    bcf0:	b120      	cbz	r0, bcfc <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    bcf2:	7b43      	ldrb	r3, [r0, #13]
    bcf4:	2b06      	cmp	r3, #6
    bcf6:	d02d      	beq.n	bd54 <notify_cb+0x90>
			bt_conn_unref(conn);
    bcf8:	f012 ff77 	bl	1ebea <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    bcfc:	2001      	movs	r0, #1
}
    bcfe:	b003      	add	sp, #12
    bd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bd04:	f04f 0800 	mov.w	r8, #0
    bd08:	4c23      	ldr	r4, [pc, #140]	; (bd98 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bd0a:	46c1      	mov	r9, r8
    bd0c:	2207      	movs	r2, #7
    bd0e:	4669      	mov	r1, sp
    bd10:	4620      	mov	r0, r4
    bd12:	f8cd 9000 	str.w	r9, [sp]
    bd16:	f8cd 9003 	str.w	r9, [sp, #3]
    bd1a:	f012 fbd5 	bl	1e4c8 <memcmp>
    bd1e:	b178      	cbz	r0, bd40 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    bd20:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    bd24:	2206      	movs	r2, #6
    bd26:	4621      	mov	r1, r4
    bd28:	f7fe fa1c 	bl	a164 <bt_conn_lookup_state_le>
			if (!conn) {
    bd2c:	b978      	cbnz	r0, bd4e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    bd2e:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    bd30:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    bd34:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    bd36:	4621      	mov	r1, r4
    bd38:	8853      	ldrh	r3, [r2, #2]
    bd3a:	8812      	ldrh	r2, [r2, #0]
    bd3c:	f7ff ff7e 	bl	bc3c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bd40:	340c      	adds	r4, #12
    bd42:	f1b8 0f00 	cmp.w	r8, #0
    bd46:	d1c9      	bne.n	bcdc <notify_cb+0x18>
    bd48:	f04f 0801 	mov.w	r8, #1
    bd4c:	e7de      	b.n	bd0c <notify_cb+0x48>
			bt_conn_unref(conn);
    bd4e:	f012 ff4c 	bl	1ebea <bt_conn_unref>
    bd52:	e7f5      	b.n	bd40 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    bd54:	697b      	ldr	r3, [r7, #20]
    bd56:	b123      	cbz	r3, bd62 <notify_cb+0x9e>
    bd58:	4631      	mov	r1, r6
    bd5a:	4798      	blx	r3
    bd5c:	b908      	cbnz	r0, bd62 <notify_cb+0x9e>
			bt_conn_unref(conn);
    bd5e:	4620      	mov	r0, r4
    bd60:	e7ca      	b.n	bcf8 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    bd62:	8a31      	ldrh	r1, [r6, #16]
    bd64:	88ab      	ldrh	r3, [r5, #4]
    bd66:	68aa      	ldr	r2, [r5, #8]
    bd68:	3901      	subs	r1, #1
    bd6a:	2b02      	cmp	r3, #2
    bd6c:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    bd6e:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    bd70:	d10b      	bne.n	bd8a <notify_cb+0xc6>
			err = gatt_indicate(conn, attr->handle - 1,
    bd72:	f7ff fe05 	bl	b980 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    bd76:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    bd78:	4620      	mov	r0, r4
    bd7a:	f012 ff36 	bl	1ebea <bt_conn_unref>
		if (err < 0) {
    bd7e:	2e00      	cmp	r6, #0
    bd80:	f04f 0000 	mov.w	r0, #0
    bd84:	dbbb      	blt.n	bcfe <notify_cb+0x3a>
		data->err = 0;
    bd86:	6028      	str	r0, [r5, #0]
    bd88:	e7b8      	b.n	bcfc <notify_cb+0x38>
			err = gatt_notify(conn, attr->handle - 1,
    bd8a:	f7ff fd83 	bl	b894 <gatt_notify>
    bd8e:	e7f2      	b.n	bd76 <notify_cb+0xb2>
    bd90:	0000baf1 	.word	0x0000baf1
    bd94:	20005b98 	.word	0x20005b98
    bd98:	20001ccb 	.word	0x20001ccb

0000bd9c <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd9c:	6882      	ldr	r2, [r0, #8]
    bd9e:	4b20      	ldr	r3, [pc, #128]	; (be20 <disconnected_cb+0x84>)
    bda0:	429a      	cmp	r2, r3
{
    bda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bda6:	4606      	mov	r6, r0
    bda8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    bdaa:	d102      	bne.n	bdb2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    bdac:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    bdae:	8963      	ldrh	r3, [r4, #10]
    bdb0:	b9c3      	cbnz	r3, bde4 <disconnected_cb+0x48>
}
    bdb2:	2001      	movs	r0, #1
    bdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bdb8:	f105 0870 	add.w	r8, r5, #112	; 0x70
    bdbc:	7a28      	ldrb	r0, [r5, #8]
    bdbe:	4641      	mov	r1, r8
    bdc0:	f012 fe52 	bl	1ea68 <bt_addr_le_is_bonded>
    bdc4:	b948      	cbnz	r0, bdda <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    bdc6:	4b17      	ldr	r3, [pc, #92]	; (be24 <disconnected_cb+0x88>)
    bdc8:	429c      	cmp	r4, r3
    bdca:	d102      	bne.n	bdd2 <disconnected_cb+0x36>
					sc_clear_by_conn(conn);
    bdcc:	4628      	mov	r0, r5
    bdce:	f013 fc40 	bl	1f652 <sc_clear_by_conn>
				clear_ccc_cfg(cfg);
    bdd2:	4620      	mov	r0, r4
    bdd4:	f013 fb60 	bl	1f498 <clear_ccc_cfg>
	if (!value_used) {
    bdd8:	e019      	b.n	be0e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bdda:	4641      	mov	r1, r8
    bddc:	4638      	mov	r0, r7
    bdde:	f013 fb58 	bl	1f492 <bt_addr_le_copy>
	if (!value_used) {
    bde2:	e014      	b.n	be0e <disconnected_cb+0x72>
		if (!cfg->value) {
    bde4:	8923      	ldrh	r3, [r4, #8]
    bde6:	b193      	cbz	r3, be0e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bde8:	4627      	mov	r7, r4
    bdea:	4628      	mov	r0, r5
    bdec:	f817 1b01 	ldrb.w	r1, [r7], #1
    bdf0:	463a      	mov	r2, r7
    bdf2:	f012 feda 	bl	1ebaa <bt_conn_is_peer_addr_le>
    bdf6:	2800      	cmp	r0, #0
    bdf8:	d1de      	bne.n	bdb8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bdfa:	7820      	ldrb	r0, [r4, #0]
    bdfc:	4639      	mov	r1, r7
    bdfe:	f7fe f995 	bl	a12c <bt_conn_lookup_addr_le>
			if (tmp) {
    be02:	b120      	cbz	r0, be0e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    be04:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    be06:	f012 fef0 	bl	1ebea <bt_conn_unref>
	if (!value_used) {
    be0a:	2d06      	cmp	r5, #6
    be0c:	d0d1      	beq.n	bdb2 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    be0e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    be10:	2100      	movs	r1, #0
    be12:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    be14:	2b00      	cmp	r3, #0
    be16:	d0cc      	beq.n	bdb2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    be18:	4630      	mov	r0, r6
    be1a:	4798      	blx	r3
    be1c:	e7c9      	b.n	bdb2 <disconnected_cb+0x16>
    be1e:	bf00      	nop
    be20:	0000baf1 	.word	0x0000baf1
    be24:	20005b98 	.word	0x20005b98

0000be28 <sc_set>:
{
    be28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    be2c:	460e      	mov	r6, r1
    be2e:	b087      	sub	sp, #28
    be30:	4690      	mov	r8, r2
    be32:	4699      	mov	r9, r3
	if (!name) {
    be34:	4607      	mov	r7, r0
    be36:	b978      	cbnz	r0, be58 <sc_set+0x30>
    be38:	4937      	ldr	r1, [pc, #220]	; (bf18 <sc_set+0xf0>)
    be3a:	4b38      	ldr	r3, [pc, #224]	; (bf1c <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    be3c:	4838      	ldr	r0, [pc, #224]	; (bf20 <sc_set+0xf8>)
    be3e:	1ac9      	subs	r1, r1, r3
    be40:	08c9      	lsrs	r1, r1, #3
    be42:	0189      	lsls	r1, r1, #6
    be44:	f041 0101 	orr.w	r1, r1, #1
    be48:	f011 fc2e 	bl	1d6a8 <log_0>
		return -EINVAL;
    be4c:	f06f 0515 	mvn.w	r5, #21
}
    be50:	4628      	mov	r0, r5
    be52:	b007      	add	sp, #28
    be54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    be58:	a902      	add	r1, sp, #8
    be5a:	f012 fc95 	bl	1e788 <bt_settings_decode_key>
	if (err) {
    be5e:	4605      	mov	r5, r0
    be60:	b178      	cbz	r0, be82 <sc_set+0x5a>
    be62:	4a2e      	ldr	r2, [pc, #184]	; (bf1c <sc_set+0xf4>)
    be64:	4c2c      	ldr	r4, [pc, #176]	; (bf18 <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    be66:	4638      	mov	r0, r7
    be68:	1aa4      	subs	r4, r4, r2
    be6a:	08e4      	lsrs	r4, r4, #3
    be6c:	f7f8 f848 	bl	3f00 <log_strdup>
    be70:	01a4      	lsls	r4, r4, #6
    be72:	f044 0401 	orr.w	r4, r4, #1
    be76:	4601      	mov	r1, r0
    be78:	4622      	mov	r2, r4
    be7a:	482a      	ldr	r0, [pc, #168]	; (bf24 <sc_set+0xfc>)
    be7c:	f011 fc21 	bl	1d6c2 <log_1>
    be80:	e7e4      	b.n	be4c <sc_set+0x24>
	settings_name_next(name, &next);
    be82:	a901      	add	r1, sp, #4
    be84:	4638      	mov	r0, r7
    be86:	f012 f877 	bl	1df78 <settings_name_next>
	if (!next) {
    be8a:	9801      	ldr	r0, [sp, #4]
    be8c:	b308      	cbz	r0, bed2 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    be8e:	220a      	movs	r2, #10
    be90:	4629      	mov	r1, r5
    be92:	f012 fa56 	bl	1e342 <strtol>
    be96:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    be98:	a902      	add	r1, sp, #8
    be9a:	4638      	mov	r0, r7
    be9c:	f7ff feac 	bl	bbf8 <find_sc_cfg>
	if (!cfg && len_rd) {
    bea0:	4604      	mov	r4, r0
    bea2:	bb88      	cbnz	r0, bf08 <sc_set+0xe0>
    bea4:	2e00      	cmp	r6, #0
    bea6:	d0d3      	beq.n	be50 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    bea8:	a904      	add	r1, sp, #16
    beaa:	9004      	str	r0, [sp, #16]
    beac:	f8cd 0013 	str.w	r0, [sp, #19]
    beb0:	f7ff fea2 	bl	bbf8 <find_sc_cfg>
		if (!cfg) {
    beb4:	4604      	mov	r4, r0
    beb6:	b970      	cbnz	r0, bed6 <sc_set+0xae>
    beb8:	4b18      	ldr	r3, [pc, #96]	; (bf1c <sc_set+0xf4>)
    beba:	4917      	ldr	r1, [pc, #92]	; (bf18 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    bebc:	481a      	ldr	r0, [pc, #104]	; (bf28 <sc_set+0x100>)
    bebe:	1ac9      	subs	r1, r1, r3
    bec0:	08c9      	lsrs	r1, r1, #3
    bec2:	0189      	lsls	r1, r1, #6
    bec4:	f041 0101 	orr.w	r1, r1, #1
    bec8:	f011 fbee 	bl	1d6a8 <log_0>
			return -ENOMEM;
    becc:	f06f 050b 	mvn.w	r5, #11
    bed0:	e7be      	b.n	be50 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    bed2:	462f      	mov	r7, r5
    bed4:	e7e0      	b.n	be98 <sc_set+0x70>
		cfg->id = id;
    bed6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    beda:	a902      	add	r1, sp, #8
    bedc:	f013 fad9 	bl	1f492 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    bee0:	f104 0108 	add.w	r1, r4, #8
    bee4:	2204      	movs	r2, #4
    bee6:	4648      	mov	r0, r9
    bee8:	47c0      	blx	r8
		if (len < 0) {
    beea:	1e04      	subs	r4, r0, #0
    beec:	dab0      	bge.n	be50 <sc_set+0x28>
    beee:	4b0b      	ldr	r3, [pc, #44]	; (bf1c <sc_set+0xf4>)
    bef0:	4a09      	ldr	r2, [pc, #36]	; (bf18 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %d)", len);
    bef2:	480e      	ldr	r0, [pc, #56]	; (bf2c <sc_set+0x104>)
    bef4:	1ad2      	subs	r2, r2, r3
    bef6:	08d2      	lsrs	r2, r2, #3
    bef8:	0192      	lsls	r2, r2, #6
    befa:	f042 0201 	orr.w	r2, r2, #1
    befe:	4621      	mov	r1, r4
    bf00:	f011 fbdf 	bl	1d6c2 <log_1>
			return len;
    bf04:	4625      	mov	r5, r4
    bf06:	e7a3      	b.n	be50 <sc_set+0x28>
	if (len_rd) {
    bf08:	2e00      	cmp	r6, #0
    bf0a:	d1e9      	bne.n	bee0 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    bf0c:	220c      	movs	r2, #12
    bf0e:	4631      	mov	r1, r6
    bf10:	f012 fb15 	bl	1e53e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    bf14:	e79c      	b.n	be50 <sc_set+0x28>
    bf16:	bf00      	nop
    bf18:	000211cc 	.word	0x000211cc
    bf1c:	00021114 	.word	0x00021114
    bf20:	00023622 	.word	0x00023622
    bf24:	000247c0 	.word	0x000247c0
    bf28:	000247dc 	.word	0x000247dc
    bf2c:	000246c4 	.word	0x000246c4

0000bf30 <find_cf_cfg_by_addr>:
{
    bf30:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    bf32:	4c0e      	ldr	r4, [pc, #56]	; (bf6c <find_cf_cfg_by_addr+0x3c>)
    bf34:	7823      	ldrb	r3, [r4, #0]
    bf36:	4283      	cmp	r3, r0
{
    bf38:	4606      	mov	r6, r0
    bf3a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    bf3c:	d00a      	beq.n	bf54 <find_cf_cfg_by_addr+0x24>
    bf3e:	7c23      	ldrb	r3, [r4, #16]
    bf40:	42b3      	cmp	r3, r6
    bf42:	d111      	bne.n	bf68 <find_cf_cfg_by_addr+0x38>
    bf44:	490a      	ldr	r1, [pc, #40]	; (bf70 <find_cf_cfg_by_addr+0x40>)
    bf46:	2207      	movs	r2, #7
    bf48:	4628      	mov	r0, r5
    bf4a:	f012 fabd 	bl	1e4c8 <memcmp>
    bf4e:	b958      	cbnz	r0, bf68 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    bf50:	2001      	movs	r0, #1
    bf52:	e006      	b.n	bf62 <find_cf_cfg_by_addr+0x32>
    bf54:	2207      	movs	r2, #7
    bf56:	1c61      	adds	r1, r4, #1
    bf58:	4628      	mov	r0, r5
    bf5a:	f012 fab5 	bl	1e4c8 <memcmp>
			if (id == cf_cfg[i].id &&
    bf5e:	2800      	cmp	r0, #0
    bf60:	d1ed      	bne.n	bf3e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    bf62:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    bf66:	e000      	b.n	bf6a <find_cf_cfg_by_addr+0x3a>
	return NULL;
    bf68:	2000      	movs	r0, #0
}
    bf6a:	bd70      	pop	{r4, r5, r6, pc}
    bf6c:	200004e4 	.word	0x200004e4
    bf70:	200004f5 	.word	0x200004f5

0000bf74 <find_cf_cfg>:
{
    bf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bf76:	4c16      	ldr	r4, [pc, #88]	; (bfd0 <find_cf_cfg+0x5c>)
		if (!conn) {
    bf78:	4605      	mov	r5, r0
    bf7a:	b140      	cbz	r0, bf8e <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bf7c:	4622      	mov	r2, r4
    bf7e:	f812 1b01 	ldrb.w	r1, [r2], #1
    bf82:	f012 fe12 	bl	1ebaa <bt_conn_is_peer_addr_le>
    bf86:	b1c0      	cbz	r0, bfba <find_cf_cfg+0x46>
}
    bf88:	4620      	mov	r0, r4
    bf8a:	b003      	add	sp, #12
    bf8c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bf8e:	9000      	str	r0, [sp, #0]
    bf90:	2207      	movs	r2, #7
    bf92:	f8cd 0003 	str.w	r0, [sp, #3]
    bf96:	4669      	mov	r1, sp
    bf98:	1c60      	adds	r0, r4, #1
    bf9a:	f012 fa95 	bl	1e4c8 <memcmp>
    bf9e:	2800      	cmp	r0, #0
    bfa0:	d0f2      	beq.n	bf88 <find_cf_cfg+0x14>
    bfa2:	2207      	movs	r2, #7
    bfa4:	4669      	mov	r1, sp
    bfa6:	f104 0011 	add.w	r0, r4, #17
    bfaa:	9500      	str	r5, [sp, #0]
    bfac:	f8cd 5003 	str.w	r5, [sp, #3]
    bfb0:	f012 fa8a 	bl	1e4c8 <memcmp>
    bfb4:	b948      	cbnz	r0, bfca <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    bfb6:	3410      	adds	r4, #16
    bfb8:	e7e6      	b.n	bf88 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bfba:	7c21      	ldrb	r1, [r4, #16]
    bfbc:	f104 0211 	add.w	r2, r4, #17
    bfc0:	4628      	mov	r0, r5
    bfc2:	f012 fdf2 	bl	1ebaa <bt_conn_is_peer_addr_le>
    bfc6:	2800      	cmp	r0, #0
    bfc8:	d1f5      	bne.n	bfb6 <find_cf_cfg+0x42>
	return NULL;
    bfca:	2400      	movs	r4, #0
    bfcc:	e7dc      	b.n	bf88 <find_cf_cfg+0x14>
    bfce:	bf00      	nop
    bfd0:	200004e4 	.word	0x200004e4

0000bfd4 <cf_write>:
{
    bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfd8:	461e      	mov	r6, r3
    bfda:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    bfde:	2b01      	cmp	r3, #1
{
    bfe0:	4607      	mov	r7, r0
    bfe2:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    bfe4:	d842      	bhi.n	c06c <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
    bfe6:	4433      	add	r3, r6
    bfe8:	2b01      	cmp	r3, #1
    bfea:	4635      	mov	r5, r6
    bfec:	dc41      	bgt.n	c072 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
    bfee:	f7ff ffc1 	bl	bf74 <find_cf_cfg>
	if (!cfg) {
    bff2:	4604      	mov	r4, r0
    bff4:	b990      	cbnz	r0, c01c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    bff6:	f7ff ffbd 	bl	bf74 <find_cf_cfg>
	if (!cfg) {
    bffa:	4604      	mov	r4, r0
    bffc:	b970      	cbnz	r0, c01c <cf_write+0x48>
    bffe:	4b1e      	ldr	r3, [pc, #120]	; (c078 <cf_write+0xa4>)
    c000:	491e      	ldr	r1, [pc, #120]	; (c07c <cf_write+0xa8>)
		BT_WARN("No space to store Client Supported Features");
    c002:	481f      	ldr	r0, [pc, #124]	; (c080 <cf_write+0xac>)
    c004:	1ac9      	subs	r1, r1, r3
    c006:	08c9      	lsrs	r1, r1, #3
    c008:	0189      	lsls	r1, r1, #6
    c00a:	f041 0102 	orr.w	r1, r1, #2
    c00e:	f011 fb4b 	bl	1d6a8 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c012:	f06f 0510 	mvn.w	r5, #16
}
    c016:	4628      	mov	r0, r5
    c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    c01c:	2300      	movs	r3, #0
    c01e:	429e      	cmp	r6, r3
    c020:	d915      	bls.n	c04e <cf_write+0x7a>
    c022:	b13b      	cbz	r3, c034 <cf_write+0x60>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    c024:	f898 3000 	ldrb.w	r3, [r8]
    c028:	7a22      	ldrb	r2, [r4, #8]
    c02a:	f003 0301 	and.w	r3, r3, #1
    c02e:	4313      	orrs	r3, r2
    c030:	7223      	strb	r3, [r4, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
    c032:	e00e      	b.n	c052 <cf_write+0x7e>
    c034:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    c036:	f898 2000 	ldrb.w	r2, [r8]
    c03a:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    c03c:	07d0      	lsls	r0, r2, #31
	for (i = 0U; i < len && i < last_byte; i++) {
    c03e:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
    c042:	d5ec      	bpl.n	c01e <cf_write+0x4a>
    c044:	07ca      	lsls	r2, r1, #31
    c046:	d5ea      	bpl.n	c01e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    c048:	f06f 0512 	mvn.w	r5, #18
    c04c:	e7e3      	b.n	c016 <cf_write+0x42>
	for (i = 0U; i < len && i < last_byte; i++) {
    c04e:	2e00      	cmp	r6, #0
    c050:	d1e8      	bne.n	c024 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c052:	f107 0170 	add.w	r1, r7, #112	; 0x70
    c056:	1c60      	adds	r0, r4, #1
    c058:	f013 fa1b 	bl	1f492 <bt_addr_le_copy>
	cfg->id = conn->id;
    c05c:	4620      	mov	r0, r4
    c05e:	7a3b      	ldrb	r3, [r7, #8]
    c060:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c064:	2100      	movs	r1, #0
    c066:	f013 fae6 	bl	1f636 <atomic_set_bit>
	return len;
    c06a:	e7d4      	b.n	c016 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c06c:	f06f 0506 	mvn.w	r5, #6
    c070:	e7d1      	b.n	c016 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c072:	f06f 050c 	mvn.w	r5, #12
    c076:	e7ce      	b.n	c016 <cf_write+0x42>
    c078:	00021114 	.word	0x00021114
    c07c:	000211cc 	.word	0x000211cc
    c080:	000247fe 	.word	0x000247fe

0000c084 <sc_indicate_rsp>:
{
    c084:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c086:	4915      	ldr	r1, [pc, #84]	; (c0dc <sc_indicate_rsp+0x58>)
    c088:	f3bf 8f5b 	dmb	ish
    c08c:	4604      	mov	r4, r0
    c08e:	f101 0338 	add.w	r3, r1, #56	; 0x38
    c092:	e853 2f00 	ldrex	r2, [r3]
    c096:	f022 0202 	bic.w	r2, r2, #2
    c09a:	e843 2000 	strex	r0, r2, [r3]
    c09e:	2800      	cmp	r0, #0
    c0a0:	d1f7      	bne.n	c092 <sc_indicate_rsp+0xe>
    c0a2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c0a6:	f3bf 8f5b 	dmb	ish
    c0aa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    c0ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c0b0:	07da      	lsls	r2, r3, #31
    c0b2:	d504      	bpl.n	c0be <sc_indicate_rsp+0x3a>
    c0b4:	480a      	ldr	r0, [pc, #40]	; (c0e0 <sc_indicate_rsp+0x5c>)
    c0b6:	2200      	movs	r2, #0
    c0b8:	3118      	adds	r1, #24
    c0ba:	f00f fcbf 	bl	1ba3c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    c0be:	4620      	mov	r0, r4
    c0c0:	f7ff ff58 	bl	bf74 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c0c4:	b140      	cbz	r0, c0d8 <sc_indicate_rsp+0x54>
    c0c6:	7a03      	ldrb	r3, [r0, #8]
    c0c8:	07db      	lsls	r3, r3, #31
    c0ca:	d505      	bpl.n	c0d8 <sc_indicate_rsp+0x54>
}
    c0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c0d0:	2100      	movs	r1, #0
    c0d2:	300c      	adds	r0, #12
    c0d4:	f013 baaf 	b.w	1f636 <atomic_set_bit>
}
    c0d8:	bd10      	pop	{r4, pc}
    c0da:	bf00      	nop
    c0dc:	20000524 	.word	0x20000524
    c0e0:	20001c48 	.word	0x20001c48

0000c0e4 <cf_set>:
{
    c0e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c0e8:	4688      	mov	r8, r1
    c0ea:	4616      	mov	r6, r2
    c0ec:	461f      	mov	r7, r3
	if (!name) {
    c0ee:	4605      	mov	r5, r0
    c0f0:	b978      	cbnz	r0, c112 <cf_set+0x2e>
    c0f2:	4930      	ldr	r1, [pc, #192]	; (c1b4 <cf_set+0xd0>)
    c0f4:	4b30      	ldr	r3, [pc, #192]	; (c1b8 <cf_set+0xd4>)
		BT_ERR("Insufficient number of arguments");
    c0f6:	4831      	ldr	r0, [pc, #196]	; (c1bc <cf_set+0xd8>)
    c0f8:	1ac9      	subs	r1, r1, r3
    c0fa:	08c9      	lsrs	r1, r1, #3
    c0fc:	0189      	lsls	r1, r1, #6
    c0fe:	f041 0101 	orr.w	r1, r1, #1
    c102:	f011 fad1 	bl	1d6a8 <log_0>
		return -EINVAL;
    c106:	f06f 0415 	mvn.w	r4, #21
}
    c10a:	4620      	mov	r0, r4
    c10c:	b004      	add	sp, #16
    c10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    c112:	a902      	add	r1, sp, #8
    c114:	f012 fb38 	bl	1e788 <bt_settings_decode_key>
	if (err) {
    c118:	4604      	mov	r4, r0
    c11a:	b178      	cbz	r0, c13c <cf_set+0x58>
    c11c:	4a26      	ldr	r2, [pc, #152]	; (c1b8 <cf_set+0xd4>)
    c11e:	4c25      	ldr	r4, [pc, #148]	; (c1b4 <cf_set+0xd0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    c120:	4628      	mov	r0, r5
    c122:	1aa4      	subs	r4, r4, r2
    c124:	08e4      	lsrs	r4, r4, #3
    c126:	f7f7 feeb 	bl	3f00 <log_strdup>
    c12a:	01a4      	lsls	r4, r4, #6
    c12c:	f044 0401 	orr.w	r4, r4, #1
    c130:	4601      	mov	r1, r0
    c132:	4622      	mov	r2, r4
    c134:	4822      	ldr	r0, [pc, #136]	; (c1c0 <cf_set+0xdc>)
    c136:	f011 fac4 	bl	1d6c2 <log_1>
    c13a:	e7e4      	b.n	c106 <cf_set+0x22>
	settings_name_next(name, &next);
    c13c:	a901      	add	r1, sp, #4
    c13e:	4628      	mov	r0, r5
    c140:	f011 ff1a 	bl	1df78 <settings_name_next>
	if (!next) {
    c144:	9801      	ldr	r0, [sp, #4]
    c146:	b1c0      	cbz	r0, c17a <cf_set+0x96>
		id = strtol(next, NULL, 10);
    c148:	220a      	movs	r2, #10
    c14a:	4621      	mov	r1, r4
    c14c:	f012 f8f9 	bl	1e342 <strtol>
    c150:	b2c0      	uxtb	r0, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    c152:	a902      	add	r1, sp, #8
    c154:	f7ff feec 	bl	bf30 <find_cf_cfg_by_addr>
	if (!cfg) {
    c158:	4601      	mov	r1, r0
    c15a:	b980      	cbnz	r0, c17e <cf_set+0x9a>
		cfg = find_cf_cfg(NULL);
    c15c:	f7ff ff0a 	bl	bf74 <find_cf_cfg>
		if (!cfg) {
    c160:	4601      	mov	r1, r0
    c162:	b960      	cbnz	r0, c17e <cf_set+0x9a>
    c164:	4b14      	ldr	r3, [pc, #80]	; (c1b8 <cf_set+0xd4>)
    c166:	4913      	ldr	r1, [pc, #76]	; (c1b4 <cf_set+0xd0>)
			BT_ERR("Unable to restore CF: no cfg left");
    c168:	4816      	ldr	r0, [pc, #88]	; (c1c4 <cf_set+0xe0>)
    c16a:	1ac9      	subs	r1, r1, r3
    c16c:	08c9      	lsrs	r1, r1, #3
    c16e:	0189      	lsls	r1, r1, #6
    c170:	f041 0101 	orr.w	r1, r1, #1
    c174:	f011 fa98 	bl	1d6a8 <log_0>
			return 0;
    c178:	e7c7      	b.n	c10a <cf_set+0x26>
		id = BT_ID_DEFAULT;
    c17a:	4620      	mov	r0, r4
    c17c:	e7e9      	b.n	c152 <cf_set+0x6e>
	if (len_rd) {
    c17e:	f1b8 0f00 	cmp.w	r8, #0
    c182:	d012      	beq.n	c1aa <cf_set+0xc6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    c184:	2201      	movs	r2, #1
    c186:	3108      	adds	r1, #8
    c188:	4638      	mov	r0, r7
    c18a:	47b0      	blx	r6
		if (len < 0) {
    c18c:	1e05      	subs	r5, r0, #0
    c18e:	dabc      	bge.n	c10a <cf_set+0x26>
    c190:	4b09      	ldr	r3, [pc, #36]	; (c1b8 <cf_set+0xd4>)
    c192:	4a08      	ldr	r2, [pc, #32]	; (c1b4 <cf_set+0xd0>)
			BT_ERR("Failed to decode value (err %d)", len);
    c194:	480c      	ldr	r0, [pc, #48]	; (c1c8 <cf_set+0xe4>)
    c196:	1ad2      	subs	r2, r2, r3
    c198:	08d2      	lsrs	r2, r2, #3
    c19a:	0192      	lsls	r2, r2, #6
    c19c:	f042 0201 	orr.w	r2, r2, #1
    c1a0:	4629      	mov	r1, r5
    c1a2:	f011 fa8e 	bl	1d6c2 <log_1>
			return len;
    c1a6:	462c      	mov	r4, r5
    c1a8:	e7af      	b.n	c10a <cf_set+0x26>
		clear_cf_cfg(cfg);
    c1aa:	4608      	mov	r0, r1
    c1ac:	f013 f9fa 	bl	1f5a4 <clear_cf_cfg>
    c1b0:	e7ab      	b.n	c10a <cf_set+0x26>
    c1b2:	bf00      	nop
    c1b4:	000211cc 	.word	0x000211cc
    c1b8:	00021114 	.word	0x00021114
    c1bc:	00023622 	.word	0x00023622
    c1c0:	000247c0 	.word	0x000247c0
    c1c4:	0002482a 	.word	0x0002482a
    c1c8:	000246c4 	.word	0x000246c4

0000c1cc <read_ppcp>:
{
    c1cc:	b513      	push	{r0, r1, r4, lr}
    c1ce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c1d2:	4c0b      	ldr	r4, [pc, #44]	; (c200 <read_ppcp+0x34>)
{
    c1d4:	4610      	mov	r0, r2
	if (offset > value_len) {
    c1d6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c1d8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    c1dc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    c1e0:	d80b      	bhi.n	c1fa <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    c1e2:	f1c1 0408 	rsb	r4, r1, #8
    c1e6:	429c      	cmp	r4, r3
    c1e8:	bfa8      	it	ge
    c1ea:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    c1ec:	4622      	mov	r2, r4
    c1ee:	4469      	add	r1, sp
    c1f0:	f012 f97a 	bl	1e4e8 <memcpy>
}
    c1f4:	4620      	mov	r0, r4
    c1f6:	b002      	add	sp, #8
    c1f8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c1fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    c1fe:	e7f9      	b.n	c1f4 <read_ppcp+0x28>
    c200:	00280018 	.word	0x00280018

0000c204 <bt_gatt_init>:
{
    c204:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c206:	4b1c      	ldr	r3, [pc, #112]	; (c278 <bt_gatt_init+0x74>)
    c208:	f3bf 8f5b 	dmb	ish
    c20c:	2201      	movs	r2, #1
    c20e:	e853 1f00 	ldrex	r1, [r3]
    c212:	2900      	cmp	r1, #0
    c214:	d103      	bne.n	c21e <bt_gatt_init+0x1a>
    c216:	e843 2000 	strex	r0, r2, [r3]
    c21a:	2800      	cmp	r0, #0
    c21c:	d1f7      	bne.n	c20e <bt_gatt_init+0xa>
    c21e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c222:	d122      	bne.n	c26a <bt_gatt_init+0x66>
    c224:	4a15      	ldr	r2, [pc, #84]	; (c27c <bt_gatt_init+0x78>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c226:	4916      	ldr	r1, [pc, #88]	; (c280 <bt_gatt_init+0x7c>)
    c228:	8813      	ldrh	r3, [r2, #0]
    c22a:	4c16      	ldr	r4, [pc, #88]	; (c284 <bt_gatt_init+0x80>)
	if (!atomic_cas(&init, 0, 1)) {
    c22c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c22e:	42a1      	cmp	r1, r4
    c230:	d31c      	bcc.n	c26c <bt_gatt_init+0x68>
    c232:	b100      	cbz	r0, c236 <bt_gatt_init+0x32>
    c234:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    c236:	4914      	ldr	r1, [pc, #80]	; (c288 <bt_gatt_init+0x84>)
    c238:	4814      	ldr	r0, [pc, #80]	; (c28c <bt_gatt_init+0x88>)
    c23a:	f014 fc1f 	bl	20a7c <k_delayed_work_init>
    c23e:	4913      	ldr	r1, [pc, #76]	; (c28c <bt_gatt_init+0x88>)
    c240:	4813      	ldr	r0, [pc, #76]	; (c290 <bt_gatt_init+0x8c>)
    c242:	220a      	movs	r2, #10
    c244:	f00f fbfa 	bl	1ba3c <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    c248:	4912      	ldr	r1, [pc, #72]	; (c294 <bt_gatt_init+0x90>)
    c24a:	4813      	ldr	r0, [pc, #76]	; (c298 <bt_gatt_init+0x94>)
    c24c:	f014 fc16 	bl	20a7c <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c250:	f3bf 8f5b 	dmb	ish
    c254:	4b11      	ldr	r3, [pc, #68]	; (c29c <bt_gatt_init+0x98>)
    c256:	e853 2f00 	ldrex	r2, [r3]
    c25a:	f042 0202 	orr.w	r2, r2, #2
    c25e:	e843 2100 	strex	r1, r2, [r3]
    c262:	2900      	cmp	r1, #0
    c264:	d1f7      	bne.n	c256 <bt_gatt_init+0x52>
    c266:	f3bf 8f5b 	dmb	ish
}
    c26a:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    c26c:	6848      	ldr	r0, [r1, #4]
    c26e:	4403      	add	r3, r0
    c270:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c272:	3108      	adds	r1, #8
    c274:	2001      	movs	r0, #1
    c276:	e7da      	b.n	c22e <bt_gatt_init+0x2a>
    c278:	20000560 	.word	0x20000560
    c27c:	20001cc8 	.word	0x20001cc8
    c280:	00021078 	.word	0x00021078
    c284:	000210b0 	.word	0x000210b0
    c288:	0001f899 	.word	0x0001f899
    c28c:	20000504 	.word	0x20000504
    c290:	20001c48 	.word	0x20001c48
    c294:	0000c7d1 	.word	0x0000c7d1
    c298:	2000053c 	.word	0x2000053c
    c29c:	2000055c 	.word	0x2000055c

0000c2a0 <bt_gatt_attr_value_handle>:
{
    c2a0:	b508      	push	{r3, lr}
	if ((attr != NULL)
    c2a2:	b180      	cbz	r0, c2c6 <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    c2a4:	6841      	ldr	r1, [r0, #4]
    c2a6:	4b09      	ldr	r3, [pc, #36]	; (c2cc <bt_gatt_attr_value_handle+0x2c>)
    c2a8:	4299      	cmp	r1, r3
    c2aa:	d10c      	bne.n	c2c6 <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    c2ac:	68c3      	ldr	r3, [r0, #12]
    c2ae:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    c2b0:	b91b      	cbnz	r3, c2ba <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c2b2:	8a03      	ldrh	r3, [r0, #16]
    c2b4:	b11b      	cbz	r3, c2be <bt_gatt_attr_value_handle+0x1e>
    c2b6:	3301      	adds	r3, #1
    c2b8:	b29b      	uxth	r3, r3
}
    c2ba:	4618      	mov	r0, r3
    c2bc:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c2be:	f7ff fa17 	bl	b6f0 <find_static_attr>
    c2c2:	1c43      	adds	r3, r0, #1
    c2c4:	e7f8      	b.n	c2b8 <bt_gatt_attr_value_handle+0x18>
	u16_t handle = 0;
    c2c6:	2300      	movs	r3, #0
    c2c8:	e7f7      	b.n	c2ba <bt_gatt_attr_value_handle+0x1a>
    c2ca:	bf00      	nop
    c2cc:	0001f821 	.word	0x0001f821

0000c2d0 <bt_gatt_foreach_attr_type>:
{
    c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2d4:	b089      	sub	sp, #36	; 0x24
    c2d6:	4698      	mov	r8, r3
    c2d8:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    c2dc:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    c2de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c2e2:	2d00      	cmp	r5, #0
    c2e4:	bf08      	it	eq
    c2e6:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    c2e8:	4b26      	ldr	r3, [pc, #152]	; (c384 <bt_gatt_foreach_attr_type+0xb4>)
    c2ea:	881b      	ldrh	r3, [r3, #0]
    c2ec:	4283      	cmp	r3, r0
{
    c2ee:	4606      	mov	r6, r0
    c2f0:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    c2f2:	d33c      	bcc.n	c36e <bt_gatt_foreach_attr_type+0x9e>
    c2f4:	f8df a094 	ldr.w	sl, [pc, #148]	; c38c <bt_gatt_foreach_attr_type+0xbc>
		u16_t handle = 1;
    c2f8:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    c2fa:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c2fe:	4b22      	ldr	r3, [pc, #136]	; (c388 <bt_gatt_foreach_attr_type+0xb8>)
    c300:	f1aa 0208 	sub.w	r2, sl, #8
    c304:	429a      	cmp	r2, r3
    c306:	d232      	bcs.n	c36e <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    c308:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c30c:	4422      	add	r2, r4
    c30e:	42b2      	cmp	r2, r6
    c310:	d234      	bcs.n	c37c <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    c312:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c314:	f10a 0a08 	add.w	sl, sl, #8
    c318:	e7f1      	b.n	c2fe <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c31a:	9903      	ldr	r1, [sp, #12]
    c31c:	4638      	mov	r0, r7
    c31e:	f012 fa57 	bl	1e7d0 <bt_uuid_cmp>
    c322:	b1c0      	cbz	r0, c356 <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c324:	3401      	adds	r4, #1
    c326:	f109 0901 	add.w	r9, r9, #1
    c32a:	b2a4      	uxth	r4, r4
    c32c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c330:	454a      	cmp	r2, r9
    c332:	d9ef      	bls.n	c314 <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    c334:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    c338:	2214      	movs	r2, #20
    c33a:	fb0b 1109 	mla	r1, fp, r9, r1
    c33e:	a803      	add	r0, sp, #12
    c340:	f012 f8d2 	bl	1e4e8 <memcpy>
	if (attr->handle > end_handle) {
    c344:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    c346:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    c34a:	429c      	cmp	r4, r3
    c34c:	d80f      	bhi.n	c36e <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    c34e:	42b4      	cmp	r4, r6
    c350:	d3e8      	bcc.n	c324 <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c352:	2f00      	cmp	r7, #0
    c354:	d1e1      	bne.n	c31a <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    c356:	f1b8 0f00 	cmp.w	r8, #0
    c35a:	d10b      	bne.n	c374 <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    c35c:	3d01      	subs	r5, #1
    c35e:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    c360:	9914      	ldr	r1, [sp, #80]	; 0x50
    c362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c364:	a803      	add	r0, sp, #12
    c366:	4798      	blx	r3
	if (!*num_matches) {
    c368:	b10d      	cbz	r5, c36e <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    c36a:	2800      	cmp	r0, #0
    c36c:	d1da      	bne.n	c324 <bt_gatt_foreach_attr_type+0x54>
}
    c36e:	b009      	add	sp, #36	; 0x24
    c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    c374:	9a06      	ldr	r2, [sp, #24]
    c376:	4590      	cmp	r8, r2
    c378:	d1d4      	bne.n	c324 <bt_gatt_foreach_attr_type+0x54>
    c37a:	e7ef      	b.n	c35c <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c37c:	f04f 0900 	mov.w	r9, #0
    c380:	e7d4      	b.n	c32c <bt_gatt_foreach_attr_type+0x5c>
    c382:	bf00      	nop
    c384:	20001cc8 	.word	0x20001cc8
    c388:	000210b0 	.word	0x000210b0
    c38c:	00021080 	.word	0x00021080

0000c390 <db_hash_gen>:
{
    c390:	b530      	push	{r4, r5, lr}
    c392:	b0c9      	sub	sp, #292	; 0x124
	u8_t key[16] = {};
    c394:	2300      	movs	r3, #0
{
    c396:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c398:	aa1c      	add	r2, sp, #112	; 0x70
    c39a:	4669      	mov	r1, sp
    c39c:	a804      	add	r0, sp, #16
	u8_t key[16] = {};
    c39e:	e9cd 3300 	strd	r3, r3, [sp]
    c3a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c3a6:	f011 f870 	bl	1d48a <tc_cmac_setup>
    c3aa:	b958      	cbnz	r0, c3c4 <db_hash_gen+0x34>
    c3ac:	4918      	ldr	r1, [pc, #96]	; (c410 <db_hash_gen+0x80>)
    c3ae:	4b19      	ldr	r3, [pc, #100]	; (c414 <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    c3b0:	4819      	ldr	r0, [pc, #100]	; (c418 <db_hash_gen+0x88>)
    c3b2:	1ac9      	subs	r1, r1, r3
    c3b4:	08c9      	lsrs	r1, r1, #3
    c3b6:	0189      	lsls	r1, r1, #6
    c3b8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    c3bc:	f011 f974 	bl	1d6a8 <log_0>
}
    c3c0:	b049      	add	sp, #292	; 0x124
    c3c2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    c3c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3c8:	2001      	movs	r0, #1
    c3ca:	4a14      	ldr	r2, [pc, #80]	; (c41c <db_hash_gen+0x8c>)
    c3cc:	ab04      	add	r3, sp, #16
    c3ce:	f013 fa58 	bl	1f882 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c3d2:	4813      	ldr	r0, [pc, #76]	; (c420 <db_hash_gen+0x90>)
    c3d4:	a904      	add	r1, sp, #16
    c3d6:	f011 f8ef 	bl	1d5b8 <tc_cmac_final>
    c3da:	b940      	cbnz	r0, c3ee <db_hash_gen+0x5e>
    c3dc:	490c      	ldr	r1, [pc, #48]	; (c410 <db_hash_gen+0x80>)
    c3de:	4b0d      	ldr	r3, [pc, #52]	; (c414 <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    c3e0:	4810      	ldr	r0, [pc, #64]	; (c424 <db_hash_gen+0x94>)
    c3e2:	1ac9      	subs	r1, r1, r3
    c3e4:	08c9      	lsrs	r1, r1, #3
    c3e6:	0189      	lsls	r1, r1, #6
    c3e8:	f041 0101 	orr.w	r1, r1, #1
    c3ec:	e7e6      	b.n	c3bc <db_hash_gen+0x2c>
    c3ee:	4b0c      	ldr	r3, [pc, #48]	; (c420 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c3f0:	2208      	movs	r2, #8
    c3f2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    c3f6:	7818      	ldrb	r0, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c3f8:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    c3fc:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    c400:	3a01      	subs	r2, #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    c402:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    c404:	d1f7      	bne.n	c3f6 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    c406:	2c00      	cmp	r4, #0
    c408:	d0da      	beq.n	c3c0 <db_hash_gen+0x30>
		db_hash_store();
    c40a:	f7ff f995 	bl	b738 <db_hash_store>
    c40e:	e7d7      	b.n	c3c0 <db_hash_gen+0x30>
    c410:	000211cc 	.word	0x000211cc
    c414:	00021114 	.word	0x00021114
    c418:	0002484c 	.word	0x0002484c
    c41c:	0001f4f5 	.word	0x0001f4f5
    c420:	20002261 	.word	0x20002261
    c424:	00024865 	.word	0x00024865

0000c428 <db_hash_commit>:
{
    c428:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    c42a:	4822      	ldr	r0, [pc, #136]	; (c4b4 <db_hash_commit+0x8c>)
    c42c:	f014 fb2e 	bl	20a8c <k_delayed_work_cancel>
	if (!err) {
    c430:	b908      	cbnz	r0, c436 <db_hash_commit+0xe>
		db_hash_gen(false);
    c432:	f7ff ffad 	bl	c390 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    c436:	4920      	ldr	r1, [pc, #128]	; (c4b8 <db_hash_commit+0x90>)
    c438:	4820      	ldr	r0, [pc, #128]	; (c4bc <db_hash_commit+0x94>)
    c43a:	2210      	movs	r2, #16
    c43c:	f012 f844 	bl	1e4c8 <memcmp>
    c440:	b920      	cbnz	r0, c44c <db_hash_commit+0x24>
		k_delayed_work_cancel(&gatt_sc.work);
    c442:	481f      	ldr	r0, [pc, #124]	; (c4c0 <db_hash_commit+0x98>)
    c444:	f014 fb22 	bl	20a8c <k_delayed_work_cancel>
}
    c448:	2000      	movs	r0, #0
    c44a:	bd08      	pop	{r3, pc}
    c44c:	4b1d      	ldr	r3, [pc, #116]	; (c4c4 <db_hash_commit+0x9c>)
    c44e:	f3bf 8f5b 	dmb	ish
    c452:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c456:	e852 1f00 	ldrex	r1, [r2]
    c45a:	f041 0001 	orr.w	r0, r1, #1
    c45e:	e842 0c00 	strex	ip, r0, [r2]
    c462:	f1bc 0f00 	cmp.w	ip, #0
    c466:	d1f6      	bne.n	c456 <db_hash_commit+0x2e>
    c468:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c46c:	07ca      	lsls	r2, r1, #31
    c46e:	d410      	bmi.n	c492 <db_hash_commit+0x6a>
		gatt_sc.start = start;
    c470:	4a15      	ldr	r2, [pc, #84]	; (c4c8 <db_hash_commit+0xa0>)
    c472:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c474:	f3bf 8f5b 	dmb	ish
    c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c47a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    c47e:	079b      	lsls	r3, r3, #30
    c480:	d404      	bmi.n	c48c <db_hash_commit+0x64>
    c482:	490f      	ldr	r1, [pc, #60]	; (c4c0 <db_hash_commit+0x98>)
    c484:	4811      	ldr	r0, [pc, #68]	; (c4cc <db_hash_commit+0xa4>)
    c486:	220a      	movs	r2, #10
    c488:	f00f fad8 	bl	1ba3c <k_delayed_work_submit_to_queue>
	db_hash_store();
    c48c:	f7ff f954 	bl	b738 <db_hash_store>
	return 0;
    c490:	e7da      	b.n	c448 <db_hash_commit+0x20>
	if (new_start >= *start && new_end <= *end) {
    c492:	8a9a      	ldrh	r2, [r3, #20]
    c494:	8ad9      	ldrh	r1, [r3, #22]
    c496:	2a01      	cmp	r2, #1
    c498:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c49c:	d805      	bhi.n	c4aa <db_hash_commit+0x82>
    c49e:	4291      	cmp	r1, r2
    c4a0:	d0f4      	beq.n	c48c <db_hash_commit+0x64>
		*end = new_end;
    c4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c4a6:	82da      	strh	r2, [r3, #22]
    c4a8:	e7e4      	b.n	c474 <db_hash_commit+0x4c>
		*start = new_start;
    c4aa:	2001      	movs	r0, #1
	if (*end < new_end) {
    c4ac:	4291      	cmp	r1, r2
		*start = new_start;
    c4ae:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    c4b0:	d0e0      	beq.n	c474 <db_hash_commit+0x4c>
    c4b2:	e7f6      	b.n	c4a2 <db_hash_commit+0x7a>
    c4b4:	20000504 	.word	0x20000504
    c4b8:	20002261 	.word	0x20002261
    c4bc:	20002271 	.word	0x20002271
    c4c0:	2000053c 	.word	0x2000053c
    c4c4:	20000524 	.word	0x20000524
    c4c8:	ffff0001 	.word	0xffff0001
    c4cc:	20001c48 	.word	0x20001c48

0000c4d0 <ccc_set_direct>:
{
    c4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c4d4:	b0b9      	sub	sp, #228	; 0xe4
    c4d6:	4688      	mov	r8, r1
    c4d8:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c4da:	4939      	ldr	r1, [pc, #228]	; (c5c0 <ccc_set_direct+0xf0>)
    c4dc:	9840      	ldr	r0, [sp, #256]	; 0x100
    c4de:	466a      	mov	r2, sp
{
    c4e0:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c4e2:	f011 fd26 	bl	1df32 <settings_name_steq>
    c4e6:	b978      	cbnz	r0, c508 <ccc_set_direct+0x38>
    c4e8:	4b36      	ldr	r3, [pc, #216]	; (c5c4 <ccc_set_direct+0xf4>)
    c4ea:	4937      	ldr	r1, [pc, #220]	; (c5c8 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    c4ec:	4837      	ldr	r0, [pc, #220]	; (c5cc <ccc_set_direct+0xfc>)
    c4ee:	1ac9      	subs	r1, r1, r3
    c4f0:	08c9      	lsrs	r1, r1, #3
    c4f2:	0189      	lsls	r1, r1, #6
    c4f4:	f041 0101 	orr.w	r1, r1, #1
    c4f8:	f011 f8d6 	bl	1d6a8 <log_0>
			return -EINVAL;
    c4fc:	f06f 0515 	mvn.w	r5, #21
}
    c500:	4628      	mov	r0, r5
    c502:	b039      	add	sp, #228	; 0xe4
    c504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    c508:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    c50a:	a901      	add	r1, sp, #4
    c50c:	4630      	mov	r0, r6
    c50e:	f011 fd33 	bl	1df78 <settings_name_next>
		if (!name) {
    c512:	b96e      	cbnz	r6, c530 <ccc_set_direct+0x60>
    c514:	492c      	ldr	r1, [pc, #176]	; (c5c8 <ccc_set_direct+0xf8>)
    c516:	4b2b      	ldr	r3, [pc, #172]	; (c5c4 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    c518:	482d      	ldr	r0, [pc, #180]	; (c5d0 <ccc_set_direct+0x100>)
    c51a:	1ac9      	subs	r1, r1, r3
    c51c:	08c9      	lsrs	r1, r1, #3
    c51e:	0189      	lsls	r1, r1, #6
    c520:	f041 0101 	orr.w	r1, r1, #1
    c524:	f011 f8c0 	bl	1d6a8 <log_0>
			return -EINVAL;
    c528:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    c52c:	4625      	mov	r5, r4
    c52e:	e7e7      	b.n	c500 <ccc_set_direct+0x30>
		} else if (!next) {
    c530:	9801      	ldr	r0, [sp, #4]
    c532:	b9c8      	cbnz	r0, c568 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    c534:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    c538:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    c53c:	4649      	mov	r1, r9
    c53e:	4630      	mov	r0, r6
    c540:	f012 f922 	bl	1e788 <bt_settings_decode_key>
		if (err) {
    c544:	4605      	mov	r5, r0
    c546:	b1a0      	cbz	r0, c572 <ccc_set_direct+0xa2>
    c548:	4a1e      	ldr	r2, [pc, #120]	; (c5c4 <ccc_set_direct+0xf4>)
    c54a:	4c1f      	ldr	r4, [pc, #124]	; (c5c8 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    c54c:	4630      	mov	r0, r6
    c54e:	1aa4      	subs	r4, r4, r2
    c550:	08e4      	lsrs	r4, r4, #3
    c552:	f7f7 fcd5 	bl	3f00 <log_strdup>
    c556:	01a4      	lsls	r4, r4, #6
    c558:	f044 0401 	orr.w	r4, r4, #1
    c55c:	4601      	mov	r1, r0
    c55e:	4622      	mov	r2, r4
    c560:	481c      	ldr	r0, [pc, #112]	; (c5d4 <ccc_set_direct+0x104>)
    c562:	f011 f8ae 	bl	1d6c2 <log_1>
    c566:	e7df      	b.n	c528 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    c568:	220a      	movs	r2, #10
    c56a:	2100      	movs	r1, #0
    c56c:	f011 fee9 	bl	1e342 <strtol>
    c570:	e7e0      	b.n	c534 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    c572:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    c576:	f1b8 0f00 	cmp.w	r8, #0
    c57a:	d01d      	beq.n	c5b8 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    c57c:	ae08      	add	r6, sp, #32
    c57e:	22c0      	movs	r2, #192	; 0xc0
    c580:	4631      	mov	r1, r6
    c582:	4638      	mov	r0, r7
    c584:	47a0      	blx	r4
			if (len < 0) {
    c586:	1e04      	subs	r4, r0, #0
    c588:	da0b      	bge.n	c5a2 <ccc_set_direct+0xd2>
    c58a:	4b0e      	ldr	r3, [pc, #56]	; (c5c4 <ccc_set_direct+0xf4>)
    c58c:	4a0e      	ldr	r2, [pc, #56]	; (c5c8 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %d)", len);
    c58e:	4812      	ldr	r0, [pc, #72]	; (c5d8 <ccc_set_direct+0x108>)
    c590:	1ad2      	subs	r2, r2, r3
    c592:	08d2      	lsrs	r2, r2, #3
    c594:	0192      	lsls	r2, r2, #6
    c596:	f042 0201 	orr.w	r2, r2, #1
    c59a:	4621      	mov	r1, r4
    c59c:	f011 f891 	bl	1d6c2 <log_1>
				return len;
    c5a0:	e7c4      	b.n	c52c <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    c5a2:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    c5a4:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    c5a6:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    c5a8:	4a0c      	ldr	r2, [pc, #48]	; (c5dc <ccc_set_direct+0x10c>)
    c5aa:	ab04      	add	r3, sp, #16
    c5ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c5b0:	2001      	movs	r0, #1
    c5b2:	f013 f966 	bl	1f882 <bt_gatt_foreach_attr>
	return 0;
    c5b6:	e7a3      	b.n	c500 <ccc_set_direct+0x30>
			load.count = 0;
    c5b8:	e9cd 0006 	strd	r0, r0, [sp, #24]
    c5bc:	e7f4      	b.n	c5a8 <ccc_set_direct+0xd8>
    c5be:	bf00      	nop
    c5c0:	0002487e 	.word	0x0002487e
    c5c4:	00021114 	.word	0x00021114
    c5c8:	000211cc 	.word	0x000211cc
    c5cc:	00024885 	.word	0x00024885
    c5d0:	00023622 	.word	0x00023622
    c5d4:	000247c0 	.word	0x000247c0
    c5d8:	000246c4 	.word	0x000246c4
    c5dc:	0000ba01 	.word	0x0000ba01

0000c5e0 <bt_gatt_notify_cb>:
{
    c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5e2:	4b3a      	ldr	r3, [pc, #232]	; (c6cc <bt_gatt_notify_cb+0xec>)
    c5e4:	f3bf 8f5b 	dmb	ish
    c5e8:	681b      	ldr	r3, [r3, #0]
    c5ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c5ee:	079a      	lsls	r2, r3, #30
{
    c5f0:	b08b      	sub	sp, #44	; 0x2c
    c5f2:	4605      	mov	r5, r0
    c5f4:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c5f6:	d562      	bpl.n	c6be <bt_gatt_notify_cb+0xde>
	attr = params->attr;
    c5f8:	6848      	ldr	r0, [r1, #4]
    c5fa:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c5fc:	b115      	cbz	r5, c604 <bt_gatt_notify_cb+0x24>
    c5fe:	7b6b      	ldrb	r3, [r5, #13]
    c600:	2b06      	cmp	r3, #6
    c602:	d15f      	bne.n	c6c4 <bt_gatt_notify_cb+0xe4>
	handle = attr->handle ? : find_static_attr(attr);
    c604:	8a04      	ldrh	r4, [r0, #16]
    c606:	b93c      	cbnz	r4, c618 <bt_gatt_notify_cb+0x38>
    c608:	f7ff f872 	bl	b6f0 <find_static_attr>
	if (!handle) {
    c60c:	4604      	mov	r4, r0
    c60e:	b918      	cbnz	r0, c618 <bt_gatt_notify_cb+0x38>
		return -ENOENT;
    c610:	f06f 0001 	mvn.w	r0, #1
}
    c614:	b00b      	add	sp, #44	; 0x2c
    c616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    c618:	6832      	ldr	r2, [r6, #0]
    c61a:	b1b2      	cbz	r2, c64a <bt_gatt_notify_cb+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c61c:	a905      	add	r1, sp, #20
    c61e:	9102      	str	r1, [sp, #8]
    c620:	492b      	ldr	r1, [pc, #172]	; (c6d0 <bt_gatt_notify_cb+0xf0>)
    c622:	9101      	str	r1, [sp, #4]
    c624:	2101      	movs	r1, #1
		attr = NULL;
    c626:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c628:	9100      	str	r1, [sp, #0]
    c62a:	4620      	mov	r0, r4
    c62c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    c630:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c632:	f7ff fe4d 	bl	c2d0 <bt_gatt_foreach_attr_type>
		if (!attr) {
    c636:	9805      	ldr	r0, [sp, #20]
    c638:	2800      	cmp	r0, #0
    c63a:	d0e9      	beq.n	c610 <bt_gatt_notify_cb+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    c63c:	8a04      	ldrh	r4, [r0, #16]
    c63e:	b924      	cbnz	r4, c64a <bt_gatt_notify_cb+0x6a>
    c640:	f7ff f856 	bl	b6f0 <find_static_attr>
		if (!handle) {
    c644:	4604      	mov	r4, r0
    c646:	2800      	cmp	r0, #0
    c648:	d0e2      	beq.n	c610 <bt_gatt_notify_cb+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    c64a:	9b05      	ldr	r3, [sp, #20]
    c64c:	af07      	add	r7, sp, #28
    c64e:	6818      	ldr	r0, [r3, #0]
    c650:	2300      	movs	r3, #0
    c652:	f88d 301c 	strb.w	r3, [sp, #28]
    c656:	4639      	mov	r1, r7
    c658:	f642 0303 	movw	r3, #10243	; 0x2803
    c65c:	f8ad 301e 	strh.w	r3, [sp, #30]
    c660:	f012 f8b6 	bl	1e7d0 <bt_uuid_cmp>
    c664:	b950      	cbnz	r0, c67c <bt_gatt_notify_cb+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    c666:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    c668:	68c3      	ldr	r3, [r0, #12]
    c66a:	799b      	ldrb	r3, [r3, #6]
    c66c:	06db      	lsls	r3, r3, #27
    c66e:	d402      	bmi.n	c676 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    c670:	f06f 0015 	mvn.w	r0, #21
    c674:	e7ce      	b.n	c614 <bt_gatt_notify_cb+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    c676:	f7ff fe13 	bl	c2a0 <bt_gatt_attr_value_handle>
    c67a:	4604      	mov	r4, r0
	if (conn) {
    c67c:	b12d      	cbz	r5, c68a <bt_gatt_notify_cb+0xaa>
		return gatt_notify(conn, handle, params);
    c67e:	4632      	mov	r2, r6
    c680:	4621      	mov	r1, r4
    c682:	4628      	mov	r0, r5
    c684:	f7ff f906 	bl	b894 <gatt_notify>
    c688:	e7c4      	b.n	c614 <bt_gatt_notify_cb+0x34>
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c68a:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    c68e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c692:	f8ad 201a 	strh.w	r2, [sp, #26]
    c696:	4a0f      	ldr	r2, [pc, #60]	; (c6d4 <bt_gatt_notify_cb+0xf4>)
	data.err = -ENOTCONN;
    c698:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    c69a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c69c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    c6a0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6a4:	4620      	mov	r0, r4
    c6a6:	9702      	str	r7, [sp, #8]
    c6a8:	462b      	mov	r3, r5
    c6aa:	aa06      	add	r2, sp, #24
    c6ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    c6b0:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6b2:	f88d 5018 	strb.w	r5, [sp, #24]
    c6b6:	f7ff fe0b 	bl	c2d0 <bt_gatt_foreach_attr_type>
	return data.err;
    c6ba:	9807      	ldr	r0, [sp, #28]
    c6bc:	e7aa      	b.n	c614 <bt_gatt_notify_cb+0x34>
		return -EAGAIN;
    c6be:	f06f 000a 	mvn.w	r0, #10
    c6c2:	e7a7      	b.n	c614 <bt_gatt_notify_cb+0x34>
		return -ENOTCONN;
    c6c4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c6c8:	e7a4      	b.n	c614 <bt_gatt_notify_cb+0x34>
    c6ca:	bf00      	nop
    c6cc:	200058f8 	.word	0x200058f8
    c6d0:	0001f5df 	.word	0x0001f5df
    c6d4:	0000bcc5 	.word	0x0000bcc5

0000c6d8 <bt_gatt_indicate>:
{
    c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6da:	4b3a      	ldr	r3, [pc, #232]	; (c7c4 <bt_gatt_indicate+0xec>)
    c6dc:	f3bf 8f5b 	dmb	ish
    c6e0:	681b      	ldr	r3, [r3, #0]
    c6e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c6e6:	079a      	lsls	r2, r3, #30
{
    c6e8:	b08b      	sub	sp, #44	; 0x2c
    c6ea:	4605      	mov	r5, r0
    c6ec:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c6ee:	d563      	bpl.n	c7b8 <bt_gatt_indicate+0xe0>
	attr = params->attr;
    c6f0:	6848      	ldr	r0, [r1, #4]
    c6f2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c6f4:	b115      	cbz	r5, c6fc <bt_gatt_indicate+0x24>
    c6f6:	7b6b      	ldrb	r3, [r5, #13]
    c6f8:	2b06      	cmp	r3, #6
    c6fa:	d160      	bne.n	c7be <bt_gatt_indicate+0xe6>
	handle = attr->handle ? : find_static_attr(attr);
    c6fc:	8a04      	ldrh	r4, [r0, #16]
    c6fe:	b93c      	cbnz	r4, c710 <bt_gatt_indicate+0x38>
    c700:	f7fe fff6 	bl	b6f0 <find_static_attr>
	if (!handle) {
    c704:	4604      	mov	r4, r0
    c706:	b918      	cbnz	r0, c710 <bt_gatt_indicate+0x38>
		return -ENOENT;
    c708:	f06f 0001 	mvn.w	r0, #1
}
    c70c:	b00b      	add	sp, #44	; 0x2c
    c70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    c710:	6832      	ldr	r2, [r6, #0]
    c712:	b1b2      	cbz	r2, c742 <bt_gatt_indicate+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c714:	a905      	add	r1, sp, #20
    c716:	9102      	str	r1, [sp, #8]
    c718:	492b      	ldr	r1, [pc, #172]	; (c7c8 <bt_gatt_indicate+0xf0>)
    c71a:	9101      	str	r1, [sp, #4]
    c71c:	2101      	movs	r1, #1
		attr = NULL;
    c71e:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c720:	9100      	str	r1, [sp, #0]
    c722:	4620      	mov	r0, r4
    c724:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    c728:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c72a:	f7ff fdd1 	bl	c2d0 <bt_gatt_foreach_attr_type>
		if (!attr) {
    c72e:	9805      	ldr	r0, [sp, #20]
    c730:	2800      	cmp	r0, #0
    c732:	d0e9      	beq.n	c708 <bt_gatt_indicate+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    c734:	8a04      	ldrh	r4, [r0, #16]
    c736:	b924      	cbnz	r4, c742 <bt_gatt_indicate+0x6a>
    c738:	f7fe ffda 	bl	b6f0 <find_static_attr>
		if (!handle) {
    c73c:	4604      	mov	r4, r0
    c73e:	2800      	cmp	r0, #0
    c740:	d0e2      	beq.n	c708 <bt_gatt_indicate+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    c742:	9b05      	ldr	r3, [sp, #20]
    c744:	af07      	add	r7, sp, #28
    c746:	6818      	ldr	r0, [r3, #0]
    c748:	2300      	movs	r3, #0
    c74a:	f88d 301c 	strb.w	r3, [sp, #28]
    c74e:	4639      	mov	r1, r7
    c750:	f642 0303 	movw	r3, #10243	; 0x2803
    c754:	f8ad 301e 	strh.w	r3, [sp, #30]
    c758:	f012 f83a 	bl	1e7d0 <bt_uuid_cmp>
    c75c:	b950      	cbnz	r0, c774 <bt_gatt_indicate+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    c75e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    c760:	68c3      	ldr	r3, [r0, #12]
    c762:	799b      	ldrb	r3, [r3, #6]
    c764:	069b      	lsls	r3, r3, #26
    c766:	d402      	bmi.n	c76e <bt_gatt_indicate+0x96>
			return -EINVAL;
    c768:	f06f 0015 	mvn.w	r0, #21
    c76c:	e7ce      	b.n	c70c <bt_gatt_indicate+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    c76e:	f7ff fd97 	bl	c2a0 <bt_gatt_attr_value_handle>
    c772:	4604      	mov	r4, r0
	if (conn) {
    c774:	b12d      	cbz	r5, c782 <bt_gatt_indicate+0xaa>
		return gatt_indicate(conn, handle, params);
    c776:	4632      	mov	r2, r6
    c778:	4621      	mov	r1, r4
    c77a:	4628      	mov	r0, r5
    c77c:	f7ff f900 	bl	b980 <gatt_indicate>
    c780:	e7c4      	b.n	c70c <bt_gatt_indicate+0x34>
	data.err = -ENOTCONN;
    c782:	f06f 0338 	mvn.w	r3, #56	; 0x38
    c786:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    c788:	2302      	movs	r3, #2
    c78a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c78e:	f642 1302 	movw	r3, #10498	; 0x2902
    c792:	f8ad 301a 	strh.w	r3, [sp, #26]
    c796:	4b0d      	ldr	r3, [pc, #52]	; (c7cc <bt_gatt_indicate+0xf4>)
    c798:	9301      	str	r3, [sp, #4]
    c79a:	2301      	movs	r3, #1
    c79c:	9300      	str	r3, [sp, #0]
    c79e:	4620      	mov	r0, r4
    c7a0:	9702      	str	r7, [sp, #8]
    c7a2:	462b      	mov	r3, r5
    c7a4:	aa06      	add	r2, sp, #24
    c7a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    c7aa:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c7ac:	f88d 5018 	strb.w	r5, [sp, #24]
    c7b0:	f7ff fd8e 	bl	c2d0 <bt_gatt_foreach_attr_type>
	return data.err;
    c7b4:	9807      	ldr	r0, [sp, #28]
    c7b6:	e7a9      	b.n	c70c <bt_gatt_indicate+0x34>
		return -EAGAIN;
    c7b8:	f06f 000a 	mvn.w	r0, #10
    c7bc:	e7a6      	b.n	c70c <bt_gatt_indicate+0x34>
		return -ENOTCONN;
    c7be:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c7c2:	e7a3      	b.n	c70c <bt_gatt_indicate+0x34>
    c7c4:	200058f8 	.word	0x200058f8
    c7c8:	0001f5df 	.word	0x0001f5df
    c7cc:	0000bcc5 	.word	0x0000bcc5

0000c7d0 <sc_process>:
{
    c7d0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    c7d2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    c7d6:	9201      	str	r2, [sp, #4]
{
    c7d8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    c7da:	f1a0 0118 	sub.w	r1, r0, #24
    c7de:	f100 0420 	add.w	r4, r0, #32
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c7e2:	f3bf 8f5b 	dmb	ish
    c7e6:	e854 2f00 	ldrex	r2, [r4]
    c7ea:	f022 0201 	bic.w	r2, r2, #1
    c7ee:	e844 2000 	strex	r0, r2, [r4]
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d1f7      	bne.n	c7e6 <sc_process+0x16>
    c7f6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    c7fa:	4a0d      	ldr	r2, [pc, #52]	; (c830 <sc_process+0x60>)
    c7fc:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    c800:	4a0c      	ldr	r2, [pc, #48]	; (c834 <sc_process+0x64>)
    c802:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    c806:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    c808:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    c80a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    c80e:	2204      	movs	r2, #4
	sc->start = 0U;
    c810:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    c814:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    c818:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    c81c:	f7ff ff5c 	bl	c6d8 <bt_gatt_indicate>
    c820:	b918      	cbnz	r0, c82a <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    c822:	2101      	movs	r1, #1
    c824:	4620      	mov	r0, r4
    c826:	f012 ff06 	bl	1f636 <atomic_set_bit>
}
    c82a:	b002      	add	sp, #8
    c82c:	bd10      	pop	{r4, pc}
    c82e:	bf00      	nop
    c830:	00021aec 	.word	0x00021aec
    c834:	0000c085 	.word	0x0000c085

0000c838 <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    c838:	6882      	ldr	r2, [r0, #8]
    c83a:	4b3f      	ldr	r3, [pc, #252]	; (c938 <update_ccc+0x100>)
    c83c:	429a      	cmp	r2, r3
{
    c83e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
    c842:	680d      	ldr	r5, [r1, #0]
{
    c844:	4604      	mov	r4, r0
    c846:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    c848:	d11c      	bne.n	c884 <update_ccc+0x4c>
	ccc = attr->user_data;
    c84a:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    c84c:	893b      	ldrh	r3, [r7, #8]
    c84e:	b1cb      	cbz	r3, c884 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c850:	463a      	mov	r2, r7
    c852:	4628      	mov	r0, r5
    c854:	f812 1b01 	ldrb.w	r1, [r2], #1
    c858:	f012 f9a7 	bl	1ebaa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    c85c:	b190      	cbz	r0, c884 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    c85e:	222a      	movs	r2, #42	; 0x2a
    c860:	4621      	mov	r1, r4
    c862:	4628      	mov	r0, r5
    c864:	f013 f836 	bl	1f8d4 <bt_gatt_check_perm>
		if (err) {
    c868:	b308      	cbz	r0, c8ae <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    c86a:	2803      	cmp	r0, #3
    c86c:	d10e      	bne.n	c88c <update_ccc+0x54>
    c86e:	4a33      	ldr	r2, [pc, #204]	; (c93c <update_ccc+0x104>)
    c870:	4b33      	ldr	r3, [pc, #204]	; (c940 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    c872:	4834      	ldr	r0, [pc, #208]	; (c944 <update_ccc+0x10c>)
    c874:	1ad2      	subs	r2, r2, r3
    c876:	08d2      	lsrs	r2, r2, #3
    c878:	0192      	lsls	r2, r2, #6
    c87a:	f042 0202 	orr.w	r2, r2, #2
    c87e:	4621      	mov	r1, r4
    c880:	f010 ff1f 	bl	1d6c2 <log_1>
}
    c884:	2001      	movs	r0, #1
    c886:	b002      	add	sp, #8
    c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    c88c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    c88e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    c890:	bf14      	ite	ne
    c892:	f04f 0802 	movne.w	r8, #2
    c896:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    c89a:	f012 f984 	bl	1eba6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    c89e:	4580      	cmp	r8, r0
    c8a0:	d905      	bls.n	c8ae <update_ccc+0x76>
				if (data->sec < sec) {
    c8a2:	7933      	ldrb	r3, [r6, #4]
    c8a4:	4543      	cmp	r3, r8
    c8a6:	d2ed      	bcs.n	c884 <update_ccc+0x4c>
					data->sec = sec;
    c8a8:	f886 8004 	strb.w	r8, [r6, #4]
    c8ac:	e7ea      	b.n	c884 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    c8ae:	4639      	mov	r1, r7
    c8b0:	4620      	mov	r0, r4
    c8b2:	f012 fddc 	bl	1f46e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    c8b6:	4b24      	ldr	r3, [pc, #144]	; (c948 <update_ccc+0x110>)
    c8b8:	429f      	cmp	r7, r3
    c8ba:	d1e3      	bne.n	c884 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c8bc:	7a28      	ldrb	r0, [r5, #8]
    c8be:	f105 0170 	add.w	r1, r5, #112	; 0x70
    c8c2:	f7ff f999 	bl	bbf8 <find_sc_cfg>
	if (!cfg) {
    c8c6:	4604      	mov	r4, r0
    c8c8:	2800      	cmp	r0, #0
    c8ca:	d0db      	beq.n	c884 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    c8cc:	8902      	ldrh	r2, [r0, #8]
    c8ce:	8943      	ldrh	r3, [r0, #10]
    c8d0:	ea52 0103 	orrs.w	r1, r2, r3
    c8d4:	d0d6      	beq.n	c884 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    c8d6:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    c8d8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    c8dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    c8e0:	f7fd fdd6 	bl	a490 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c8e4:	4919      	ldr	r1, [pc, #100]	; (c94c <update_ccc+0x114>)
    c8e6:	4a1a      	ldr	r2, [pc, #104]	; (c950 <update_ccc+0x118>)
    c8e8:	2314      	movs	r3, #20
    c8ea:	fb03 1300 	mla	r3, r3, r0, r1
    c8ee:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    c8f0:	4a18      	ldr	r2, [pc, #96]	; (c954 <update_ccc+0x11c>)
    c8f2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    c8f4:	aa01      	add	r2, sp, #4
    c8f6:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    c8f8:	2204      	movs	r2, #4
    c8fa:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c8fc:	b203      	sxth	r3, r0
    c8fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c902:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    c906:	4628      	mov	r0, r5
    c908:	f7ff fee6 	bl	c6d8 <bt_gatt_indicate>
    c90c:	b148      	cbz	r0, c922 <update_ccc+0xea>
    c90e:	490b      	ldr	r1, [pc, #44]	; (c93c <update_ccc+0x104>)
    c910:	4b0b      	ldr	r3, [pc, #44]	; (c940 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    c912:	4811      	ldr	r0, [pc, #68]	; (c958 <update_ccc+0x120>)
    c914:	1ac9      	subs	r1, r1, r3
    c916:	08c9      	lsrs	r1, r1, #3
    c918:	0189      	lsls	r1, r1, #6
    c91a:	f041 0101 	orr.w	r1, r1, #1
    c91e:	f010 fec3 	bl	1d6a8 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    c922:	2204      	movs	r2, #4
    c924:	2100      	movs	r1, #0
    c926:	f104 0008 	add.w	r0, r4, #8
    c92a:	f011 fe08 	bl	1e53e <memset>
		sc_store(cfg);
    c92e:	4620      	mov	r0, r4
    c930:	f7fe ff42 	bl	b7b8 <sc_store>
    c934:	e7a6      	b.n	c884 <update_ccc+0x4c>
    c936:	bf00      	nop
    c938:	0000baf1 	.word	0x0000baf1
    c93c:	000211cc 	.word	0x000211cc
    c940:	00021114 	.word	0x00021114
    c944:	00024891 	.word	0x00024891
    c948:	20005b98 	.word	0x20005b98
    c94c:	20000564 	.word	0x20000564
    c950:	00021aec 	.word	0x00021aec
    c954:	0001f689 	.word	0x0001f689
    c958:	000248a5 	.word	0x000248a5

0000c95c <bt_gatt_connected>:
{
    c95c:	b570      	push	{r4, r5, r6, lr}
    c95e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c960:	f100 0570 	add.w	r5, r0, #112	; 0x70
{
    c964:	4604      	mov	r4, r0
	data.conn = conn;
    c966:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    c968:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c96a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    c96c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c970:	4629      	mov	r1, r5
    c972:	f012 f879 	bl	1ea68 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    c976:	b190      	cbz	r0, c99e <bt_gatt_connected+0x42>
		if (conn->id) {
    c978:	7a22      	ldrb	r2, [r4, #8]
    c97a:	b31a      	cbz	r2, c9c4 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    c97c:	ae02      	add	r6, sp, #8
    c97e:	2104      	movs	r1, #4
    c980:	4630      	mov	r0, r6
    c982:	f00f faf3 	bl	1bf6c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c986:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c988:	4a0f      	ldr	r2, [pc, #60]	; (c9c8 <bt_gatt_connected+0x6c>)
    c98a:	2124      	movs	r1, #36	; 0x24
    c98c:	a805      	add	r0, sp, #20
    c98e:	462b      	mov	r3, r5
    c990:	f7fa fcac 	bl	72ec <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    c994:	aa05      	add	r2, sp, #20
    c996:	490d      	ldr	r1, [pc, #52]	; (c9cc <bt_gatt_connected+0x70>)
    c998:	4610      	mov	r0, r2
    c99a:	f7f8 fc87 	bl	52ac <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c99e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c9a2:	4a0b      	ldr	r2, [pc, #44]	; (c9d0 <bt_gatt_connected+0x74>)
    c9a4:	ab03      	add	r3, sp, #12
    c9a6:	2001      	movs	r0, #1
    c9a8:	f012 ff6b 	bl	1f882 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    c9ac:	4620      	mov	r0, r4
    c9ae:	f012 f8fa 	bl	1eba6 <bt_conn_get_security>
    c9b2:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c9b6:	4288      	cmp	r0, r1
    c9b8:	d202      	bcs.n	c9c0 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    c9ba:	4620      	mov	r0, r4
    c9bc:	f012 f8c0 	bl	1eb40 <bt_conn_set_security>
}
    c9c0:	b00e      	add	sp, #56	; 0x38
    c9c2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9c4:	9200      	str	r2, [sp, #0]
    c9c6:	e7df      	b.n	c988 <bt_gatt_connected+0x2c>
    c9c8:	00024881 	.word	0x00024881
    c9cc:	0000c4d1 	.word	0x0000c4d1
    c9d0:	0000c839 	.word	0x0000c839

0000c9d4 <bt_gatt_encrypt_change>:
{
    c9d4:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9d6:	4a06      	ldr	r2, [pc, #24]	; (c9f0 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    c9d8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9da:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    c9dc:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9de:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    c9e2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9e6:	f012 ff4c 	bl	1f882 <bt_gatt_foreach_attr>
}
    c9ea:	b003      	add	sp, #12
    c9ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c9f0:	0000c839 	.word	0x0000c839

0000c9f4 <db_hash_read>:
{
    c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9f6:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    c9f8:	4810      	ldr	r0, [pc, #64]	; (ca3c <db_hash_read+0x48>)
{
    c9fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    c9fe:	4615      	mov	r5, r2
    ca00:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    ca02:	f014 f843 	bl	20a8c <k_delayed_work_cancel>
	if (!err) {
    ca06:	b910      	cbnz	r0, ca0e <db_hash_read+0x1a>
		db_hash_gen(true);
    ca08:	2001      	movs	r0, #1
    ca0a:	f7ff fcc1 	bl	c390 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ca0e:	2101      	movs	r1, #1
    ca10:	4620      	mov	r0, r4
    ca12:	f012 ff8a 	bl	1f92a <bt_gatt_change_aware>
	if (offset > value_len) {
    ca16:	2e10      	cmp	r6, #16
    ca18:	d80c      	bhi.n	ca34 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    ca1a:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (u8_t *)value + offset, len);
    ca1e:	4908      	ldr	r1, [pc, #32]	; (ca40 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    ca20:	42bc      	cmp	r4, r7
    ca22:	bfa8      	it	ge
    ca24:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    ca26:	4622      	mov	r2, r4
    ca28:	4431      	add	r1, r6
    ca2a:	4628      	mov	r0, r5
    ca2c:	f011 fd5c 	bl	1e4e8 <memcpy>
}
    ca30:	4620      	mov	r0, r4
    ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ca34:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ca38:	e7fa      	b.n	ca30 <db_hash_read+0x3c>
    ca3a:	bf00      	nop
    ca3c:	20000504 	.word	0x20000504
    ca40:	20002261 	.word	0x20002261

0000ca44 <bt_gatt_store_ccc>:
{
    ca44:	b570      	push	{r4, r5, r6, lr}
    ca46:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    ca48:	2300      	movs	r3, #0
{
    ca4a:	4604      	mov	r4, r0
    ca4c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    ca4e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    ca50:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    ca54:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    ca56:	4a18      	ldr	r2, [pc, #96]	; (cab8 <bt_gatt_store_ccc+0x74>)
    ca58:	ab0d      	add	r3, sp, #52	; 0x34
    ca5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca5e:	2001      	movs	r0, #1
    ca60:	f012 ff0f 	bl	1f882 <bt_gatt_foreach_attr>
	if (id) {
    ca64:	b31c      	cbz	r4, caae <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    ca66:	ae03      	add	r6, sp, #12
    ca68:	4622      	mov	r2, r4
    ca6a:	2104      	movs	r1, #4
    ca6c:	4630      	mov	r0, r6
    ca6e:	f00f fa7d 	bl	1bf6c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    ca72:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    ca74:	4a11      	ldr	r2, [pc, #68]	; (cabc <bt_gatt_store_ccc+0x78>)
    ca76:	462b      	mov	r3, r5
    ca78:	2124      	movs	r1, #36	; 0x24
    ca7a:	a804      	add	r0, sp, #16
    ca7c:	f7fa fc36 	bl	72ec <bt_settings_encode_key>
	if (save.count) {
    ca80:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    ca82:	b1b2      	cbz	r2, cab2 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    ca84:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    ca86:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    ca88:	a804      	add	r0, sp, #16
    ca8a:	f7f8 fbaf 	bl	51ec <settings_save_one>
	if (err) {
    ca8e:	4604      	mov	r4, r0
    ca90:	b150      	cbz	r0, caa8 <bt_gatt_store_ccc+0x64>
    ca92:	4a0b      	ldr	r2, [pc, #44]	; (cac0 <bt_gatt_store_ccc+0x7c>)
    ca94:	4b0b      	ldr	r3, [pc, #44]	; (cac4 <bt_gatt_store_ccc+0x80>)
    ca96:	1ad2      	subs	r2, r2, r3
    ca98:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    ca9a:	0192      	lsls	r2, r2, #6
    ca9c:	4601      	mov	r1, r0
    ca9e:	f042 0201 	orr.w	r2, r2, #1
    caa2:	4809      	ldr	r0, [pc, #36]	; (cac8 <bt_gatt_store_ccc+0x84>)
    caa4:	f010 fe0d 	bl	1d6c2 <log_1>
}
    caa8:	4620      	mov	r0, r4
    caaa:	b040      	add	sp, #256	; 0x100
    caac:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    caae:	9400      	str	r4, [sp, #0]
    cab0:	e7e0      	b.n	ca74 <bt_gatt_store_ccc+0x30>
		str = NULL;
    cab2:	4611      	mov	r1, r2
    cab4:	e7e8      	b.n	ca88 <bt_gatt_store_ccc+0x44>
    cab6:	bf00      	nop
    cab8:	0000ba91 	.word	0x0000ba91
    cabc:	00024881 	.word	0x00024881
    cac0:	000211cc 	.word	0x000211cc
    cac4:	00021114 	.word	0x00021114
    cac8:	000248c2 	.word	0x000248c2

0000cacc <bt_gatt_disconnected>:
{
    cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cace:	4604      	mov	r4, r0
    cad0:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cad2:	4603      	mov	r3, r0
    cad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cad8:	2001      	movs	r0, #1
    cada:	4a33      	ldr	r2, [pc, #204]	; (cba8 <bt_gatt_disconnected+0xdc>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cadc:	f104 0670 	add.w	r6, r4, #112	; 0x70
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cae0:	f012 fecf 	bl	1f882 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cae4:	7a20      	ldrb	r0, [r4, #8]
    cae6:	4631      	mov	r1, r6
    cae8:	f011 ffbe 	bl	1ea68 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    caec:	2800      	cmp	r0, #0
    caee:	d035      	beq.n	cb5c <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    caf0:	4631      	mov	r1, r6
    caf2:	7a20      	ldrb	r0, [r4, #8]
    caf4:	f7ff ffa6 	bl	ca44 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    caf8:	4620      	mov	r0, r4
    cafa:	f7ff fa3b 	bl	bf74 <find_cf_cfg>
	if (!cfg) {
    cafe:	4605      	mov	r5, r0
    cb00:	2800      	cmp	r0, #0
    cb02:	d03a      	beq.n	cb7a <bt_gatt_disconnected+0xae>
		if (conn->id) {
    cb04:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    cb06:	3508      	adds	r5, #8
		if (conn->id) {
    cb08:	2a00      	cmp	r2, #0
    cb0a:	d038      	beq.n	cb7e <bt_gatt_disconnected+0xb2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    cb0c:	af02      	add	r7, sp, #8
    cb0e:	2104      	movs	r1, #4
    cb10:	4638      	mov	r0, r7
    cb12:	f00f fa2b 	bl	1bf6c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cb16:	9700      	str	r7, [sp, #0]
    cb18:	4633      	mov	r3, r6
    cb1a:	4a24      	ldr	r2, [pc, #144]	; (cbac <bt_gatt_disconnected+0xe0>)
    cb1c:	2124      	movs	r1, #36	; 0x24
    cb1e:	a803      	add	r0, sp, #12
    cb20:	f7fa fbe4 	bl	72ec <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    cb24:	7a23      	ldrb	r3, [r4, #8]
    cb26:	2701      	movs	r7, #1
    cb28:	b93b      	cbnz	r3, cb3a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    cb2a:	2300      	movs	r3, #0
    cb2c:	9300      	str	r3, [sp, #0]
    cb2e:	4a1f      	ldr	r2, [pc, #124]	; (cbac <bt_gatt_disconnected+0xe0>)
    cb30:	4633      	mov	r3, r6
    cb32:	2124      	movs	r1, #36	; 0x24
    cb34:	a803      	add	r0, sp, #12
    cb36:	f7fa fbd9 	bl	72ec <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    cb3a:	4629      	mov	r1, r5
    cb3c:	463a      	mov	r2, r7
    cb3e:	a803      	add	r0, sp, #12
    cb40:	f7f8 fb54 	bl	51ec <settings_save_one>
	if (err) {
    cb44:	4601      	mov	r1, r0
    cb46:	b148      	cbz	r0, cb5c <bt_gatt_disconnected+0x90>
    cb48:	4a19      	ldr	r2, [pc, #100]	; (cbb0 <bt_gatt_disconnected+0xe4>)
    cb4a:	4b1a      	ldr	r3, [pc, #104]	; (cbb4 <bt_gatt_disconnected+0xe8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    cb4c:	481a      	ldr	r0, [pc, #104]	; (cbb8 <bt_gatt_disconnected+0xec>)
    cb4e:	1ad2      	subs	r2, r2, r3
    cb50:	08d2      	lsrs	r2, r2, #3
    cb52:	0192      	lsls	r2, r2, #6
    cb54:	f042 0201 	orr.w	r2, r2, #1
    cb58:	f010 fdb3 	bl	1d6c2 <log_1>
	cfg = find_cf_cfg(conn);
    cb5c:	4620      	mov	r0, r4
    cb5e:	f7ff fa09 	bl	bf74 <find_cf_cfg>
	if (!cfg) {
    cb62:	4605      	mov	r5, r0
    cb64:	b138      	cbz	r0, cb76 <bt_gatt_disconnected+0xaa>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cb66:	7a20      	ldrb	r0, [r4, #8]
    cb68:	4631      	mov	r1, r6
    cb6a:	f011 ff7d 	bl	1ea68 <bt_addr_le_is_bonded>
    cb6e:	b940      	cbnz	r0, cb82 <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
    cb70:	4628      	mov	r0, r5
    cb72:	f012 fd17 	bl	1f5a4 <clear_cf_cfg>
}
    cb76:	b00d      	add	sp, #52	; 0x34
    cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    cb7a:	4607      	mov	r7, r0
    cb7c:	e7d5      	b.n	cb2a <bt_gatt_disconnected+0x5e>
    cb7e:	2701      	movs	r7, #1
    cb80:	e7d3      	b.n	cb2a <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cb82:	1c68      	adds	r0, r5, #1
    cb84:	4631      	mov	r1, r6
    cb86:	350c      	adds	r5, #12
    cb88:	f012 fc83 	bl	1f492 <bt_addr_le_copy>
    cb8c:	f3bf 8f5b 	dmb	ish
    cb90:	e855 3f00 	ldrex	r3, [r5]
    cb94:	f023 0302 	bic.w	r3, r3, #2
    cb98:	e845 3200 	strex	r2, r3, [r5]
    cb9c:	2a00      	cmp	r2, #0
    cb9e:	d1f7      	bne.n	cb90 <bt_gatt_disconnected+0xc4>
    cba0:	f3bf 8f5b 	dmb	ish
}
    cba4:	e7e7      	b.n	cb76 <bt_gatt_disconnected+0xaa>
    cba6:	bf00      	nop
    cba8:	0000bd9d 	.word	0x0000bd9d
    cbac:	0002490c 	.word	0x0002490c
    cbb0:	000211cc 	.word	0x000211cc
    cbb4:	00021114 	.word	0x00021114
    cbb8:	000248e0 	.word	0x000248e0

0000cbbc <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(u8_t id, const bt_addr_le_t *addr)
{
    cbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbbe:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cbc0:	ae03      	add	r6, sp, #12
{
    cbc2:	4604      	mov	r4, r0
    cbc4:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    cbc6:	9103      	str	r1, [sp, #12]
    cbc8:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cbcc:	4a1f      	ldr	r2, [pc, #124]	; (cc4c <bt_gatt_clear+0x90>)
    cbce:	4633      	mov	r3, r6
    cbd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cbd4:	2001      	movs	r0, #1
    cbd6:	f012 fe54 	bl	1f882 <bt_gatt_foreach_attr>
		if (id) {
    cbda:	b39c      	cbz	r4, cc44 <bt_gatt_clear+0x88>
			u8_to_dec(id_str, sizeof(id_str), id);
    cbdc:	af02      	add	r7, sp, #8
    cbde:	4622      	mov	r2, r4
    cbe0:	2104      	movs	r1, #4
    cbe2:	4638      	mov	r0, r7
    cbe4:	f00f f9c2 	bl	1bf6c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cbe8:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cbea:	4a19      	ldr	r2, [pc, #100]	; (cc50 <bt_gatt_clear+0x94>)
    cbec:	462b      	mov	r3, r5
    cbee:	2124      	movs	r1, #36	; 0x24
    cbf0:	a805      	add	r0, sp, #20
    cbf2:	f7fa fb7b 	bl	72ec <bt_settings_encode_key>
		return settings_delete(key);
    cbf6:	a805      	add	r0, sp, #20
    cbf8:	f011 f997 	bl	1df2a <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    cbfc:	2800      	cmp	r0, #0
    cbfe:	db1f      	blt.n	cc40 <bt_gatt_clear+0x84>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    cc00:	4629      	mov	r1, r5
    cc02:	4620      	mov	r0, r4
    cc04:	f7fe fff8 	bl	bbf8 <find_sc_cfg>
	if (cfg) {
    cc08:	b108      	cbz	r0, cc0e <bt_gatt_clear+0x52>
		sc_clear(cfg);
    cc0a:	f7fe fe07 	bl	b81c <sc_clear>
	cfg = find_cf_cfg_by_addr(id, addr);
    cc0e:	4629      	mov	r1, r5
    cc10:	4620      	mov	r0, r4
    cc12:	f7ff f98d 	bl	bf30 <find_cf_cfg_by_addr>
	if (cfg) {
    cc16:	b108      	cbz	r0, cc1c <bt_gatt_clear+0x60>
		clear_cf_cfg(cfg);
    cc18:	f012 fcc4 	bl	1f5a4 <clear_cf_cfg>
		if (id) {
    cc1c:	b1a4      	cbz	r4, cc48 <bt_gatt_clear+0x8c>
			u8_to_dec(id_str, sizeof(id_str), id);
    cc1e:	4622      	mov	r2, r4
    cc20:	2104      	movs	r1, #4
    cc22:	4630      	mov	r0, r6
    cc24:	f00f f9a2 	bl	1bf6c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc28:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc2a:	4a0a      	ldr	r2, [pc, #40]	; (cc54 <bt_gatt_clear+0x98>)
    cc2c:	462b      	mov	r3, r5
    cc2e:	2124      	movs	r1, #36	; 0x24
    cc30:	a805      	add	r0, sp, #20
    cc32:	f7fa fb5b 	bl	72ec <bt_settings_encode_key>
		return settings_delete(key);
    cc36:	a805      	add	r0, sp, #20
    cc38:	f011 f977 	bl	1df2a <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    cc3c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    cc40:	b00f      	add	sp, #60	; 0x3c
    cc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cc44:	9400      	str	r4, [sp, #0]
    cc46:	e7d0      	b.n	cbea <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc48:	9400      	str	r4, [sp, #0]
    cc4a:	e7ee      	b.n	cc2a <bt_gatt_clear+0x6e>
    cc4c:	0000bac9 	.word	0x0000bac9
    cc50:	00024881 	.word	0x00024881
    cc54:	0002490c 	.word	0x0002490c

0000cc58 <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    cc58:	4b10      	ldr	r3, [pc, #64]	; (cc9c <get_io_capa+0x44>)
    cc5a:	681b      	ldr	r3, [r3, #0]
    cc5c:	b1bb      	cbz	r3, cc8e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    cc5e:	681a      	ldr	r2, [r3, #0]
    cc60:	b142      	cbz	r2, cc74 <get_io_capa+0x1c>
    cc62:	6859      	ldr	r1, [r3, #4]
    cc64:	b131      	cbz	r1, cc74 <get_io_capa+0x1c>
    cc66:	6899      	ldr	r1, [r3, #8]
    cc68:	b911      	cbnz	r1, cc70 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    cc6a:	490d      	ldr	r1, [pc, #52]	; (cca0 <get_io_capa+0x48>)
    cc6c:	7809      	ldrb	r1, [r1, #0]
    cc6e:	b939      	cbnz	r1, cc80 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    cc70:	2004      	movs	r0, #4
    cc72:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    cc74:	490a      	ldr	r1, [pc, #40]	; (cca0 <get_io_capa+0x48>)
    cc76:	7809      	ldrb	r1, [r1, #0]
    cc78:	b111      	cbz	r1, cc80 <get_io_capa+0x28>
    cc7a:	b10a      	cbz	r2, cc80 <get_io_capa+0x28>
    cc7c:	6899      	ldr	r1, [r3, #8]
    cc7e:	b941      	cbnz	r1, cc92 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    cc80:	685b      	ldr	r3, [r3, #4]
    cc82:	b943      	cbnz	r3, cc96 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    cc84:	2a00      	cmp	r2, #0
    cc86:	bf0c      	ite	eq
    cc88:	2003      	moveq	r0, #3
    cc8a:	2000      	movne	r0, #0
    cc8c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    cc8e:	2003      	movs	r0, #3
    cc90:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    cc92:	2001      	movs	r0, #1
    cc94:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    cc96:	2002      	movs	r0, #2
	}
}
    cc98:	4770      	bx	lr
    cc9a:	bf00      	nop
    cc9c:	20000360 	.word	0x20000360
    cca0:	20002282 	.word	0x20002282

0000cca4 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    cca6:	1d14      	adds	r4, r2, #4
{
    cca8:	b08b      	sub	sp, #44	; 0x2c
    ccaa:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ccac:	588b      	ldr	r3, [r1, r2]
    ccae:	9301      	str	r3, [sp, #4]
{
    ccb0:	4606      	mov	r6, r0
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ccb2:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    ccb4:	4628      	mov	r0, r5
    ccb6:	4621      	mov	r1, r4
    ccb8:	f012 fe73 	bl	1f9a2 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    ccbc:	4631      	mov	r1, r6
    ccbe:	2210      	movs	r2, #16
    ccc0:	a802      	add	r0, sp, #8
    ccc2:	f012 fe64 	bl	1f98e <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    ccc6:	ab06      	add	r3, sp, #24
    ccc8:	4622      	mov	r2, r4
    ccca:	4629      	mov	r1, r5
    cccc:	a802      	add	r0, sp, #8
    ccce:	f012 fe85 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
    ccd2:	4606      	mov	r6, r0
    ccd4:	b160      	cbz	r0, ccf0 <smp_sign_buf+0x4c>
    ccd6:	4910      	ldr	r1, [pc, #64]	; (cd18 <smp_sign_buf+0x74>)
    ccd8:	4b10      	ldr	r3, [pc, #64]	; (cd1c <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    ccda:	4811      	ldr	r0, [pc, #68]	; (cd20 <smp_sign_buf+0x7c>)
    ccdc:	1ac9      	subs	r1, r1, r3
    ccde:	08c9      	lsrs	r1, r1, #3
    cce0:	0189      	lsls	r1, r1, #6
    cce2:	f041 0101 	orr.w	r1, r1, #1
    cce6:	f010 fcdf 	bl	1d6a8 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    ccea:	4630      	mov	r0, r6
    ccec:	b00b      	add	sp, #44	; 0x2c
    ccee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    ccf0:	a806      	add	r0, sp, #24
    ccf2:	2110      	movs	r1, #16
    ccf4:	f012 fe55 	bl	1f9a2 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    ccf8:	2204      	movs	r2, #4
    ccfa:	eb0d 0102 	add.w	r1, sp, r2
    ccfe:	a807      	add	r0, sp, #28
    cd00:	f011 fbf2 	bl	1e4e8 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    cd04:	4621      	mov	r1, r4
    cd06:	4628      	mov	r0, r5
    cd08:	f012 fe4b 	bl	1f9a2 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    cd0c:	220c      	movs	r2, #12
    cd0e:	a907      	add	r1, sp, #28
    cd10:	4638      	mov	r0, r7
    cd12:	f011 fbe9 	bl	1e4e8 <memcpy>
	return 0;
    cd16:	e7e8      	b.n	ccea <smp_sign_buf+0x46>
    cd18:	00021204 	.word	0x00021204
    cd1c:	00021114 	.word	0x00021114
    cd20:	0002491d 	.word	0x0002491d

0000cd24 <get_auth.isra.0>:
	if (sc_supported) {
    cd24:	4b0c      	ldr	r3, [pc, #48]	; (cd58 <get_auth.isra.0+0x34>)
    cd26:	781b      	ldrb	r3, [r3, #0]
static u8_t get_auth(struct bt_conn *conn, u8_t auth)
    cd28:	b510      	push	{r4, lr}
	if (sc_supported) {
    cd2a:	b17b      	cbz	r3, cd4c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    cd2c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cd30:	f7ff ff92 	bl	cc58 <get_io_capa>
	if (bondable) {
    cd34:	4b09      	ldr	r3, [pc, #36]	; (cd5c <get_auth.isra.0+0x38>)
    cd36:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cd38:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    cd3a:	bf0c      	ite	eq
    cd3c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    cd40:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    cd44:	b12b      	cbz	r3, cd52 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    cd46:	f044 0001 	orr.w	r0, r4, #1
}
    cd4a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    cd4c:	f000 0407 	and.w	r4, r0, #7
    cd50:	e7ee      	b.n	cd30 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    cd52:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    cd56:	e7f8      	b.n	cd4a <get_auth.isra.0+0x26>
    cd58:	20002282 	.word	0x20002282
    cd5c:	20006071 	.word	0x20006071

0000cd60 <smp_chan_get>:
{
    cd60:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    cd62:	2106      	movs	r1, #6
    cd64:	f012 f820 	bl	1eda8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    cd68:	4604      	mov	r4, r0
    cd6a:	b948      	cbnz	r0, cd80 <smp_chan_get+0x20>
    cd6c:	4905      	ldr	r1, [pc, #20]	; (cd84 <smp_chan_get+0x24>)
    cd6e:	4b06      	ldr	r3, [pc, #24]	; (cd88 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    cd70:	4806      	ldr	r0, [pc, #24]	; (cd8c <smp_chan_get+0x2c>)
    cd72:	1ac9      	subs	r1, r1, r3
    cd74:	08c9      	lsrs	r1, r1, #3
    cd76:	0189      	lsls	r1, r1, #6
    cd78:	f041 0101 	orr.w	r1, r1, #1
    cd7c:	f010 fc94 	bl	1d6a8 <log_0>
}
    cd80:	4620      	mov	r0, r4
    cd82:	bd10      	pop	{r4, pc}
    cd84:	00021204 	.word	0x00021204
    cd88:	00021114 	.word	0x00021114
    cd8c:	00024931 	.word	0x00024931

0000cd90 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    cd90:	4a0b      	ldr	r2, [pc, #44]	; (cdc0 <bt_smp_accept+0x30>)
{
    cd92:	b508      	push	{r3, lr}
    cd94:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    cd96:	6810      	ldr	r0, [r2, #0]
    cd98:	b918      	cbnz	r0, cda2 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    cd9a:	4b0a      	ldr	r3, [pc, #40]	; (cdc4 <bt_smp_accept+0x34>)
    cd9c:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    cd9e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    cda0:	bd08      	pop	{r3, pc}
    cda2:	4909      	ldr	r1, [pc, #36]	; (cdc8 <bt_smp_accept+0x38>)
    cda4:	4a09      	ldr	r2, [pc, #36]	; (cdcc <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    cda6:	480a      	ldr	r0, [pc, #40]	; (cdd0 <bt_smp_accept+0x40>)
    cda8:	1a52      	subs	r2, r2, r1
    cdaa:	08d2      	lsrs	r2, r2, #3
    cdac:	0192      	lsls	r2, r2, #6
    cdae:	f042 0201 	orr.w	r2, r2, #1
    cdb2:	4619      	mov	r1, r3
    cdb4:	f010 fc85 	bl	1d6c2 <log_1>
	return -ENOMEM;
    cdb8:	f06f 000b 	mvn.w	r0, #11
    cdbc:	e7f0      	b.n	cda0 <bt_smp_accept+0x10>
    cdbe:	bf00      	nop
    cdc0:	20000578 	.word	0x20000578
    cdc4:	00021c60 	.word	0x00021c60
    cdc8:	00021114 	.word	0x00021114
    cdcc:	00021204 	.word	0x00021204
    cdd0:	0002494c 	.word	0x0002494c

0000cdd4 <smp_init>:
{
    cdd4:	b538      	push	{r3, r4, r5, lr}
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    cdd6:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
    cdda:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    cddc:	22ec      	movs	r2, #236	; 0xec
    cdde:	2100      	movs	r1, #0
    cde0:	4628      	mov	r0, r5
    cde2:	f011 fbac 	bl	1e53e <memset>
	if (bt_rand(smp->prnd, 16)) {
    cde6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    cdea:	2110      	movs	r1, #16
    cdec:	f004 fa7c 	bl	112e8 <bt_rand>
    cdf0:	4604      	mov	r4, r0
    cdf2:	b948      	cbnz	r0, ce08 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cdf4:	2105      	movs	r1, #5
    cdf6:	4628      	mov	r0, r5
    cdf8:	f012 fde2 	bl	1f9c0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    cdfc:	f7fc fd88 	bl	9910 <bt_pub_key_get>
    ce00:	4b02      	ldr	r3, [pc, #8]	; (ce0c <smp_init+0x38>)
    ce02:	6018      	str	r0, [r3, #0]
}
    ce04:	4620      	mov	r0, r4
    ce06:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ce08:	2408      	movs	r4, #8
    ce0a:	e7fb      	b.n	ce04 <smp_init+0x30>
    ce0c:	20000714 	.word	0x20000714

0000ce10 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ce10:	b513      	push	{r0, r1, r4, lr}
    ce12:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ce14:	2200      	movs	r2, #0
    ce16:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ce18:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ce1a:	460a      	mov	r2, r1
    ce1c:	6800      	ldr	r0, [r0, #0]
    ce1e:	2106      	movs	r1, #6
    ce20:	f011 ff99 	bl	1ed56 <bt_l2cap_send_cb>
    ce24:	4804      	ldr	r0, [pc, #16]	; (ce38 <smp_send.isra.0+0x28>)
    ce26:	f247 5230 	movw	r2, #30000	; 0x7530
    ce2a:	f504 71be 	add.w	r1, r4, #380	; 0x17c
}
    ce2e:	b002      	add	sp, #8
    ce30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ce34:	f00e be02 	b.w	1ba3c <k_delayed_work_submit_to_queue>
    ce38:	20001c48 	.word	0x20001c48

0000ce3c <smp_send_pairing_confirm>:
{
    ce3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    ce3e:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
    ce42:	2c02      	cmp	r4, #2
{
    ce44:	4605      	mov	r5, r0
	switch (smp->method) {
    ce46:	d824      	bhi.n	ce92 <smp_send_pairing_confirm+0x56>
    ce48:	b14c      	cbz	r4, ce5e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ce4a:	f890 316c 	ldrb.w	r3, [r0, #364]	; 0x16c
    ce4e:	f8d0 4168 	ldr.w	r4, [r0, #360]	; 0x168
    ce52:	40dc      	lsrs	r4, r3
    ce54:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    ce58:	f064 047f 	orn	r4, r4, #127	; 0x7f
    ce5c:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    ce5e:	2103      	movs	r1, #3
    ce60:	4628      	mov	r0, r5
    ce62:	f012 fe7e 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!buf) {
    ce66:	4606      	mov	r6, r0
    ce68:	b1a8      	cbz	r0, ce96 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    ce6a:	2110      	movs	r1, #16
    ce6c:	3008      	adds	r0, #8
    ce6e:	f013 f968 	bl	20142 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    ce72:	9000      	str	r0, [sp, #0]
    ce74:	4810      	ldr	r0, [pc, #64]	; (ceb8 <smp_send_pairing_confirm+0x7c>)
    ce76:	4623      	mov	r3, r4
    ce78:	6800      	ldr	r0, [r0, #0]
    ce7a:	f105 02b7 	add.w	r2, r5, #183	; 0xb7
    ce7e:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
    ce82:	f012 fdc7 	bl	1fa14 <smp_f4>
    ce86:	4604      	mov	r4, r0
    ce88:	b148      	cbz	r0, ce9e <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    ce8a:	4630      	mov	r0, r6
    ce8c:	f00c feb4 	bl	19bf8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    ce90:	e001      	b.n	ce96 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    ce92:	2c03      	cmp	r4, #3
    ce94:	d001      	beq.n	ce9a <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    ce96:	2008      	movs	r0, #8
    ce98:	e00c      	b.n	ceb4 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    ce9a:	2400      	movs	r4, #0
    ce9c:	e7df      	b.n	ce5e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    ce9e:	4602      	mov	r2, r0
    cea0:	4631      	mov	r1, r6
    cea2:	4628      	mov	r0, r5
    cea4:	f7ff ffb4 	bl	ce10 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    cea8:	f105 0094 	add.w	r0, r5, #148	; 0x94
    ceac:	4621      	mov	r1, r4
    ceae:	f012 fe24 	bl	1fafa <atomic_clear_bit>
	return 0;
    ceb2:	4620      	mov	r0, r4
}
    ceb4:	b002      	add	sp, #8
    ceb6:	bd70      	pop	{r4, r5, r6, pc}
    ceb8:	20000714 	.word	0x20000714

0000cebc <smp_public_key_slave.part.0>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    cebc:	b538      	push	{r3, r4, r5, lr}
    cebe:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    cec2:	4604      	mov	r4, r0
    cec4:	2b05      	cmp	r3, #5
    cec6:	d814      	bhi.n	cef2 <smp_public_key_slave.part.0+0x36>
    cec8:	e8df f003 	tbb	[pc, r3]
    cecc:	030d3603 	.word	0x030d3603
    ced0:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ced2:	3090      	adds	r0, #144	; 0x90
    ced4:	2104      	movs	r1, #4
    ced6:	f012 fd73 	bl	1f9c0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ceda:	4620      	mov	r0, r4
    cedc:	f7ff ffae 	bl	ce3c <smp_send_pairing_confirm>
		if (err) {
    cee0:	2800      	cmp	r0, #0
    cee2:	d037      	beq.n	cf54 <smp_public_key_slave.part.0+0x98>
}
    cee4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    cee6:	2104      	movs	r1, #4
    cee8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    ceec:	f004 f9fc 	bl	112e8 <bt_rand>
    cef0:	b108      	cbz	r0, cef6 <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    cef2:	2008      	movs	r0, #8
    cef4:	e7f6      	b.n	cee4 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    cef6:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    cefa:	4a1f      	ldr	r2, [pc, #124]	; (cf78 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    cefc:	4d1f      	ldr	r5, [pc, #124]	; (cf7c <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    cefe:	fbb1 f3f2 	udiv	r3, r1, r2
    cf02:	fb02 1313 	mls	r3, r2, r3, r1
    cf06:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	if (bt_auth && bt_auth->passkey_display) {
    cf0a:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    cf0c:	f884 016c 	strb.w	r0, [r4, #364]	; 0x16c
	if (bt_auth && bt_auth->passkey_display) {
    cf10:	b163      	cbz	r3, cf2c <smp_public_key_slave.part.0+0x70>
    cf12:	681b      	ldr	r3, [r3, #0]
    cf14:	b153      	cbz	r3, cf2c <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    cf16:	210a      	movs	r1, #10
    cf18:	f104 0094 	add.w	r0, r4, #148	; 0x94
    cf1c:	f012 fd50 	bl	1f9c0 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    cf20:	682b      	ldr	r3, [r5, #0]
    cf22:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    cf26:	681b      	ldr	r3, [r3, #0]
    cf28:	6820      	ldr	r0, [r4, #0]
    cf2a:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cf2c:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cf2e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    cf32:	f012 fd45 	bl	1f9c0 <atomic_set_bit>
		break;
    cf36:	e00d      	b.n	cf54 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cf38:	2103      	movs	r1, #3
    cf3a:	3090      	adds	r0, #144	; 0x90
    cf3c:	f012 fd40 	bl	1f9c0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    cf40:	f104 0094 	add.w	r0, r4, #148	; 0x94
    cf44:	2109      	movs	r1, #9
    cf46:	f012 fd3b 	bl	1f9c0 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    cf4a:	4b0c      	ldr	r3, [pc, #48]	; (cf7c <smp_public_key_slave.part.0+0xc0>)
    cf4c:	6820      	ldr	r0, [r4, #0]
    cf4e:	681b      	ldr	r3, [r3, #0]
    cf50:	685b      	ldr	r3, [r3, #4]
    cf52:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    cf54:	490a      	ldr	r1, [pc, #40]	; (cf80 <smp_public_key_slave.part.0+0xc4>)
    cf56:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    cf5a:	f7fc fce7 	bl	992c <bt_dh_key_gen>
    cf5e:	4605      	mov	r5, r0
    cf60:	2800      	cmp	r0, #0
    cf62:	d1c6      	bne.n	cef2 <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    cf64:	f104 0094 	add.w	r0, r4, #148	; 0x94
    cf68:	2107      	movs	r1, #7
    cf6a:	f012 fd29 	bl	1f9c0 <atomic_set_bit>
	return 0;
    cf6e:	4628      	mov	r0, r5
    cf70:	e7b8      	b.n	cee4 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cf72:	2104      	movs	r1, #4
    cf74:	e7db      	b.n	cf2e <smp_public_key_slave.part.0+0x72>
    cf76:	bf00      	nop
    cf78:	000f4240 	.word	0x000f4240
    cf7c:	20000360 	.word	0x20000360
    cf80:	0000d69d 	.word	0x0000d69d

0000cf84 <compute_and_check_and_send_slave_dhcheck>:
{
    cf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    cf88:	2210      	movs	r2, #16
{
    cf8a:	b0a3      	sub	sp, #140	; 0x8c
    cf8c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    cf8e:	2100      	movs	r1, #0
    cf90:	eb0d 0002 	add.w	r0, sp, r2
    cf94:	f011 fad3 	bl	1e53e <memset>
	switch (smp->method) {
    cf98:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    cf9c:	2b05      	cmp	r3, #5
    cf9e:	f200 8081 	bhi.w	d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
    cfa2:	e8df f003 	tbb	[pc, r3]
    cfa6:	0309      	.short	0x0309
    cfa8:	817f0903 	.word	0x817f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    cfac:	2204      	movs	r2, #4
    cfae:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    cfb2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    cfb4:	f011 fa98 	bl	1e4e8 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    cfb8:	4b64      	ldr	r3, [pc, #400]	; (d14c <compute_and_check_and_send_slave_dhcheck+0x1c8>)
		   &smp->chan.chan.conn->le.init_addr,
    cfba:	f8d4 9000 	ldr.w	r9, [r4]
	u8_t m[53] = { 0x00, /* counter */
    cfbe:	aa14      	add	r2, sp, #80	; 0x50
    cfc0:	f103 0630 	add.w	r6, r3, #48	; 0x30
    cfc4:	6818      	ldr	r0, [r3, #0]
    cfc6:	6859      	ldr	r1, [r3, #4]
    cfc8:	4615      	mov	r5, r2
    cfca:	c503      	stmia	r5!, {r0, r1}
    cfcc:	3308      	adds	r3, #8
    cfce:	42b3      	cmp	r3, r6
    cfd0:	462a      	mov	r2, r5
    cfd2:	d1f7      	bne.n	cfc4 <compute_and_check_and_send_slave_dhcheck+0x40>
    cfd4:	6818      	ldr	r0, [r3, #0]
    cfd6:	791b      	ldrb	r3, [r3, #4]
    cfd8:	6028      	str	r0, [r5, #0]
    cfda:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    cfdc:	ad0c      	add	r5, sp, #48	; 0x30
    cfde:	2220      	movs	r2, #32
    cfe0:	f204 1127 	addw	r1, r4, #295	; 0x127
    cfe4:	4628      	mov	r0, r5
    cfe6:	f012 fcd2 	bl	1f98e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    cfea:	4859      	ldr	r0, [pc, #356]	; (d150 <compute_and_check_and_send_slave_dhcheck+0x1cc>)
    cfec:	ab08      	add	r3, sp, #32
    cfee:	2220      	movs	r2, #32
    cff0:	4629      	mov	r1, r5
    cff2:	f012 fcf3 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
    cff6:	2800      	cmp	r0, #0
    cff8:	d154      	bne.n	d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    cffa:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	sys_memcpy_swap(m + 5, n1, 16);
    cffe:	2210      	movs	r2, #16
    d000:	4639      	mov	r1, r7
    d002:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d006:	f104 08b7 	add.w	r8, r4, #183	; 0xb7
	sys_memcpy_swap(m + 5, n1, 16);
    d00a:	f012 fcc0 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    d00e:	2210      	movs	r2, #16
    d010:	4641      	mov	r1, r8
    d012:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    d016:	f012 fcba 	bl	1f98e <sys_memcpy_swap>
	m[37] = a1->type;
    d01a:	f899 3077 	ldrb.w	r3, [r9, #119]	; 0x77
    d01e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    d022:	2206      	movs	r2, #6
    d024:	f109 0178 	add.w	r1, r9, #120	; 0x78
    d028:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    d02c:	f012 fcaf 	bl	1f98e <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    d030:	f204 1657 	addw	r6, r4, #343	; 0x157
	m[44] = a2->type;
    d034:	f899 307e 	ldrb.w	r3, [r9, #126]	; 0x7e
    d038:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    d03c:	2206      	movs	r2, #6
    d03e:	f109 017f 	add.w	r1, r9, #127	; 0x7f
    d042:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    d046:	f012 fca2 	bl	1f98e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    d04a:	4633      	mov	r3, r6
    d04c:	2235      	movs	r2, #53	; 0x35
    d04e:	a914      	add	r1, sp, #80	; 0x50
    d050:	a808      	add	r0, sp, #32
    d052:	f012 fcc3 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
    d056:	bb28      	cbnz	r0, d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(mackey, 16);
    d058:	2110      	movs	r1, #16
    d05a:	4630      	mov	r0, r6
    d05c:	f012 fca1 	bl	1f9a2 <sys_mem_swap>
		   smp->tk)) {
    d060:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
	m[0] = 0x01;
    d064:	2301      	movs	r3, #1
    d066:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d06a:	2235      	movs	r2, #53	; 0x35
    d06c:	464b      	mov	r3, r9
    d06e:	a914      	add	r1, sp, #80	; 0x50
    d070:	a808      	add	r0, sp, #32
    d072:	f012 fcb3 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
    d076:	b9a8      	cbnz	r0, d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(ltk, 16);
    d078:	2110      	movs	r1, #16
    d07a:	4648      	mov	r0, r9
    d07c:	f012 fc91 	bl	1f9a2 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    d080:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d082:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    d084:	f852 3ba1 	ldr.w	r3, [r2], #161
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d088:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    d08a:	f103 0177 	add.w	r1, r3, #119	; 0x77
		   &smp->chan.chan.conn->le.resp_addr,
    d08e:	337e      	adds	r3, #126	; 0x7e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d090:	e9cd 2300 	strd	r2, r3, [sp]
    d094:	9102      	str	r1, [sp, #8]
    d096:	ab04      	add	r3, sp, #16
    d098:	463a      	mov	r2, r7
    d09a:	4641      	mov	r1, r8
    d09c:	4630      	mov	r0, r6
    d09e:	f012 fcdf 	bl	1fa60 <smp_f6>
    d0a2:	b148      	cbz	r0, d0b8 <compute_and_check_and_send_slave_dhcheck+0x134>
		return BT_SMP_ERR_UNSPECIFIED;
    d0a4:	2008      	movs	r0, #8
    d0a6:	e048      	b.n	d13a <compute_and_check_and_send_slave_dhcheck+0x1b6>
		if (smp->oobd_remote) {
    d0a8:	f8d4 1174 	ldr.w	r1, [r4, #372]	; 0x174
    d0ac:	2900      	cmp	r1, #0
    d0ae:	d083      	beq.n	cfb8 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d0b0:	2210      	movs	r2, #16
    d0b2:	eb0d 0002 	add.w	r0, sp, r2
    d0b6:	e77d      	b.n	cfb4 <compute_and_check_and_send_slave_dhcheck+0x30>
	if (smp->method == LE_SC_OOB) {
    d0b8:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d0bc:	2b05      	cmp	r3, #5
    d0be:	d108      	bne.n	d0d2 <compute_and_check_and_send_slave_dhcheck+0x14e>
		if (smp->oobd_local) {
    d0c0:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d0c4:	2210      	movs	r2, #16
    d0c6:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    d0ca:	2900      	cmp	r1, #0
    d0cc:	d038      	beq.n	d140 <compute_and_check_and_send_slave_dhcheck+0x1bc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d0ce:	f011 fa0b 	bl	1e4e8 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    d0d2:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d0d4:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    d0d6:	f852 3b9a 	ldr.w	r3, [r2], #154
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d0da:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    d0dc:	f103 017e 	add.w	r1, r3, #126	; 0x7e
		   &smp->chan.chan.conn->le.init_addr,
    d0e0:	3377      	adds	r3, #119	; 0x77
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d0e2:	e9cd 2300 	strd	r2, r3, [sp]
    d0e6:	9102      	str	r1, [sp, #8]
    d0e8:	ab04      	add	r3, sp, #16
    d0ea:	4642      	mov	r2, r8
    d0ec:	4639      	mov	r1, r7
    d0ee:	f012 fcb7 	bl	1fa60 <smp_f6>
    d0f2:	2800      	cmp	r0, #0
    d0f4:	d1d6      	bne.n	d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (memcmp(smp->e, re, 16)) {
    d0f6:	4629      	mov	r1, r5
    d0f8:	2210      	movs	r2, #16
    d0fa:	f204 1047 	addw	r0, r4, #327	; 0x147
    d0fe:	f011 f9e3 	bl	1e4c8 <memcmp>
    d102:	4605      	mov	r5, r0
    d104:	b9f8      	cbnz	r0, d146 <compute_and_check_and_send_slave_dhcheck+0x1c2>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    d106:	210d      	movs	r1, #13
    d108:	4620      	mov	r0, r4
    d10a:	f012 fd2a 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!buf) {
    d10e:	4606      	mov	r6, r0
    d110:	2800      	cmp	r0, #0
    d112:	d0c7      	beq.n	d0a4 <compute_and_check_and_send_slave_dhcheck+0x120>
	req = net_buf_add(buf, sizeof(*req));
    d114:	2110      	movs	r1, #16
    d116:	3008      	adds	r0, #8
    d118:	f013 f813 	bl	20142 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    d11c:	2210      	movs	r2, #16
    d11e:	a914      	add	r1, sp, #80	; 0x50
    d120:	f011 f9e2 	bl	1e4e8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    d124:	462a      	mov	r2, r5
    d126:	4631      	mov	r1, r6
    d128:	4620      	mov	r0, r4
    d12a:	f7ff fe71 	bl	ce10 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d12e:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d132:	2101      	movs	r1, #1
    d134:	f012 fc44 	bl	1f9c0 <atomic_set_bit>
	return 0;
    d138:	4628      	mov	r0, r5
}
    d13a:	b023      	add	sp, #140	; 0x8c
    d13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    d140:	f011 f9fd 	bl	1e53e <memset>
    d144:	e7c5      	b.n	d0d2 <compute_and_check_and_send_slave_dhcheck+0x14e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d146:	200b      	movs	r0, #11
    d148:	e7f7      	b.n	d13a <compute_and_check_and_send_slave_dhcheck+0x1b6>
    d14a:	bf00      	nop
    d14c:	000212f8 	.word	0x000212f8
    d150:	00024c62 	.word	0x00024c62

0000d154 <sc_send_public_key>:
{
    d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d156:	210c      	movs	r1, #12
{
    d158:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d15a:	f012 fd02 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!req_buf) {
    d15e:	4604      	mov	r4, r0
    d160:	b1b0      	cbz	r0, d190 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    d162:	2140      	movs	r1, #64	; 0x40
    d164:	3008      	adds	r0, #8
    d166:	f012 ffec 	bl	20142 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d16a:	4f0a      	ldr	r7, [pc, #40]	; (d194 <sc_send_public_key+0x40>)
    d16c:	2220      	movs	r2, #32
    d16e:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    d170:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d172:	f011 f9b9 	bl	1e4e8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    d176:	6839      	ldr	r1, [r7, #0]
    d178:	2220      	movs	r2, #32
    d17a:	4411      	add	r1, r2
    d17c:	18b0      	adds	r0, r6, r2
    d17e:	f011 f9b3 	bl	1e4e8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    d182:	4628      	mov	r0, r5
    d184:	2200      	movs	r2, #0
    d186:	4621      	mov	r1, r4
    d188:	f7ff fe42 	bl	ce10 <smp_send.isra.0>
	return 0;
    d18c:	2000      	movs	r0, #0
}
    d18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    d190:	2008      	movs	r0, #8
    d192:	e7fc      	b.n	d18e <sc_send_public_key+0x3a>
    d194:	20000714 	.word	0x20000714

0000d198 <smp_ident_info>:
{
    d198:	b570      	push	{r4, r5, r6, lr}
    d19a:	460b      	mov	r3, r1
    d19c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d19e:	210c      	movs	r1, #12
    d1a0:	3094      	adds	r0, #148	; 0x94
    d1a2:	f012 fcd5 	bl	1fb50 <atomic_test_bit>
    d1a6:	b308      	cbz	r0, d1ec <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    d1a8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    d1aa:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    d1ac:	f103 0570 	add.w	r5, r3, #112	; 0x70
    d1b0:	7a19      	ldrb	r1, [r3, #8]
    d1b2:	462a      	mov	r2, r5
    d1b4:	2002      	movs	r0, #2
    d1b6:	f012 ff77 	bl	200a8 <bt_keys_get_type>
		if (!keys) {
    d1ba:	b990      	cbnz	r0, d1e2 <smp_ident_info+0x4a>
    d1bc:	4a0f      	ldr	r2, [pc, #60]	; (d1fc <smp_ident_info+0x64>)
    d1be:	4c10      	ldr	r4, [pc, #64]	; (d200 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    d1c0:	4628      	mov	r0, r5
    d1c2:	1aa4      	subs	r4, r4, r2
    d1c4:	f7f9 fdea 	bl	6d9c <bt_addr_le_str_real>
    d1c8:	f7f6 fe9a 	bl	3f00 <log_strdup>
    d1cc:	08e4      	lsrs	r4, r4, #3
    d1ce:	01a4      	lsls	r4, r4, #6
    d1d0:	f044 0401 	orr.w	r4, r4, #1
    d1d4:	4601      	mov	r1, r0
    d1d6:	4622      	mov	r2, r4
    d1d8:	480a      	ldr	r0, [pc, #40]	; (d204 <smp_ident_info+0x6c>)
    d1da:	f010 fa72 	bl	1d6c2 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d1de:	2008      	movs	r0, #8
}
    d1e0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    d1e2:	2210      	movs	r2, #16
    d1e4:	4631      	mov	r1, r6
    d1e6:	3026      	adds	r0, #38	; 0x26
    d1e8:	f011 f97e 	bl	1e4e8 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    d1ec:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d1f0:	2109      	movs	r1, #9
    d1f2:	f012 fbe5 	bl	1f9c0 <atomic_set_bit>
	return 0;
    d1f6:	2000      	movs	r0, #0
    d1f8:	e7f2      	b.n	d1e0 <smp_ident_info+0x48>
    d1fa:	bf00      	nop
    d1fc:	00021114 	.word	0x00021114
    d200:	00021204 	.word	0x00021204
    d204:	00024971 	.word	0x00024971

0000d208 <smp_encrypt_info>:
{
    d208:	b570      	push	{r4, r5, r6, lr}
    d20a:	460b      	mov	r3, r1
    d20c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d20e:	210c      	movs	r1, #12
    d210:	3094      	adds	r0, #148	; 0x94
    d212:	f012 fc9d 	bl	1fb50 <atomic_test_bit>
    d216:	b308      	cbz	r0, d25c <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    d218:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    d21a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    d21c:	f103 0570 	add.w	r5, r3, #112	; 0x70
    d220:	7a19      	ldrb	r1, [r3, #8]
    d222:	462a      	mov	r2, r5
    d224:	2004      	movs	r0, #4
    d226:	f012 ff3f 	bl	200a8 <bt_keys_get_type>
		if (!keys) {
    d22a:	b990      	cbnz	r0, d252 <smp_encrypt_info+0x4a>
    d22c:	4a0f      	ldr	r2, [pc, #60]	; (d26c <smp_encrypt_info+0x64>)
    d22e:	4c10      	ldr	r4, [pc, #64]	; (d270 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    d230:	4628      	mov	r0, r5
    d232:	1aa4      	subs	r4, r4, r2
    d234:	f7f9 fdb2 	bl	6d9c <bt_addr_le_str_real>
    d238:	f7f6 fe62 	bl	3f00 <log_strdup>
    d23c:	08e4      	lsrs	r4, r4, #3
    d23e:	01a4      	lsls	r4, r4, #6
    d240:	f044 0401 	orr.w	r4, r4, #1
    d244:	4601      	mov	r1, r0
    d246:	4622      	mov	r2, r4
    d248:	480a      	ldr	r0, [pc, #40]	; (d274 <smp_encrypt_info+0x6c>)
    d24a:	f010 fa3a 	bl	1d6c2 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d24e:	2008      	movs	r0, #8
}
    d250:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    d252:	2210      	movs	r2, #16
    d254:	4631      	mov	r1, r6
    d256:	3016      	adds	r0, #22
    d258:	f011 f946 	bl	1e4e8 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    d25c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d260:	2107      	movs	r1, #7
    d262:	f012 fbad 	bl	1f9c0 <atomic_set_bit>
	return 0;
    d266:	2000      	movs	r0, #0
    d268:	e7f2      	b.n	d250 <smp_encrypt_info+0x48>
    d26a:	bf00      	nop
    d26c:	00021114 	.word	0x00021114
    d270:	00021204 	.word	0x00021204
    d274:	00024971 	.word	0x00024971

0000d278 <smp_pairing_req>:
{
    d278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    d27c:	f8d1 8008 	ldr.w	r8, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d280:	f898 3003 	ldrb.w	r3, [r8, #3]
    d284:	3b07      	subs	r3, #7
    d286:	2b09      	cmp	r3, #9
{
    d288:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d28a:	d904      	bls.n	d296 <smp_pairing_req+0x1e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    d28c:	2506      	movs	r5, #6
}
    d28e:	4628      	mov	r0, r5
    d290:	b002      	add	sp, #8
    d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    d296:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    d298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    d29c:	b163      	cbz	r3, d2b8 <smp_pairing_req+0x40>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    d29e:	f104 0694 	add.w	r6, r4, #148	; 0x94
    d2a2:	210e      	movs	r1, #14
    d2a4:	4630      	mov	r0, r6
    d2a6:	f012 fc53 	bl	1fb50 <atomic_test_bit>
    d2aa:	b980      	cbnz	r0, d2ce <smp_pairing_req+0x56>
		int ret = smp_init(smp);
    d2ac:	4620      	mov	r0, r4
    d2ae:	f7ff fd91 	bl	cdd4 <smp_init>
		if (ret) {
    d2b2:	b160      	cbz	r0, d2ce <smp_pairing_req+0x56>
			return ret;
    d2b4:	b2c5      	uxtb	r5, r0
    d2b6:	e7ea      	b.n	d28e <smp_pairing_req+0x16>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d2b8:	7a38      	ldrb	r0, [r7, #8]
    d2ba:	f107 0170 	add.w	r1, r7, #112	; 0x70
    d2be:	f001 f999 	bl	e5f4 <bt_keys_get_addr>
    d2c2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (!conn->le.keys) {
    d2c6:	2800      	cmp	r0, #0
    d2c8:	d1e9      	bne.n	d29e <smp_pairing_req+0x26>
			return BT_SMP_ERR_UNSPECIFIED;
    d2ca:	2508      	movs	r5, #8
    d2cc:	e7df      	b.n	d28e <smp_pairing_req+0x16>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d2ce:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    d2d0:	2206      	movs	r2, #6
    d2d2:	4641      	mov	r1, r8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d2d4:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
	memcpy(smp->preq + 1, req, sizeof(*req));
    d2d8:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    d2dc:	f011 f904 	bl	1e4e8 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    d2e0:	2302      	movs	r3, #2
    d2e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
	rsp->auth_req = get_auth(conn, req->auth_req);
    d2e6:	f898 0002 	ldrb.w	r0, [r8, #2]
    d2ea:	f7ff fd1b 	bl	cd24 <get_auth.isra.0>
    d2ee:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    d2f2:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    d2f4:	f7ff fcb0 	bl	cc58 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d2f8:	4bb5      	ldr	r3, [pc, #724]	; (d5d0 <smp_pairing_req+0x358>)
	rsp->io_capability = get_io_capa();
    d2fa:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d304:	2310      	movs	r3, #16
    d306:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    d30a:	f898 3004 	ldrb.w	r3, [r8, #4]
    d30e:	f003 0307 	and.w	r3, r3, #7
    d312:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d316:	f898 3005 	ldrb.w	r3, [r8, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d31a:	072a      	lsls	r2, r5, #28
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d31c:	f003 0307 	and.w	r3, r3, #7
    d320:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d324:	d513      	bpl.n	d34e <smp_pairing_req+0xd6>
    d326:	f898 3002 	ldrb.w	r3, [r8, #2]
    d32a:	071b      	lsls	r3, r3, #28
    d32c:	d50f      	bpl.n	d34e <smp_pairing_req+0xd6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d32e:	2105      	movs	r1, #5
    d330:	4630      	mov	r0, r6
    d332:	f012 fb45 	bl	1f9c0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    d336:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    d33a:	f003 0306 	and.w	r3, r3, #6
    d33e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    d342:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
    d346:	f003 0306 	and.w	r3, r3, #6
    d34a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d34e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d352:	069d      	lsls	r5, r3, #26
    d354:	d507      	bpl.n	d366 <smp_pairing_req+0xee>
    d356:	f898 3002 	ldrb.w	r3, [r8, #2]
    d35a:	0698      	lsls	r0, r3, #26
    d35c:	d503      	bpl.n	d366 <smp_pairing_req+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d35e:	2113      	movs	r1, #19
    d360:	4630      	mov	r0, r6
    d362:	f012 fb2d 	bl	1f9c0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    d366:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
    d36a:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
	smp->remote_dist = rsp->init_key_dist;
    d36e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    d372:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d376:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d37a:	07d9      	lsls	r1, r3, #31
    d37c:	d507      	bpl.n	d38e <smp_pairing_req+0x116>
    d37e:	f898 3002 	ldrb.w	r3, [r8, #2]
    d382:	07da      	lsls	r2, r3, #31
    d384:	d503      	bpl.n	d38e <smp_pairing_req+0x116>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d386:	210c      	movs	r1, #12
    d388:	4630      	mov	r0, r6
    d38a:	f012 fb19 	bl	1f9c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d38e:	2103      	movs	r1, #3
    d390:	4630      	mov	r0, r6
    d392:	f012 fb15 	bl	1f9c0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d396:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    d398:	f898 5000 	ldrb.w	r5, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d39c:	f012 fbd8 	bl	1fb50 <atomic_test_bit>
    d3a0:	f8d4 8000 	ldr.w	r8, [r4]
    d3a4:	2800      	cmp	r0, #0
    d3a6:	d14b      	bne.n	d440 <smp_pairing_req+0x1c8>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d3a8:	2d04      	cmp	r5, #4
    d3aa:	d816      	bhi.n	d3da <smp_pairing_req+0x162>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d3ac:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    d3b0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d3b4:	4318      	orrs	r0, r3
    d3b6:	f010 0004 	ands.w	r0, r0, #4
    d3ba:	d00e      	beq.n	d3da <smp_pairing_req+0x162>
	method = gen_method_legacy[remote_io][get_io_capa()];
    d3bc:	f7ff fc4c 	bl	cc58 <get_io_capa>
    d3c0:	4b84      	ldr	r3, [pc, #528]	; (d5d4 <smp_pairing_req+0x35c>)
    d3c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d3c6:	441d      	add	r5, r3
    d3c8:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    d3ca:	2804      	cmp	r0, #4
    d3cc:	d105      	bne.n	d3da <smp_pairing_req+0x162>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d3ce:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	bf0c      	ite	eq
    d3d6:	2002      	moveq	r0, #2
    d3d8:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    d3da:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
	if (!conn->le.keys) {
    d3de:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    d3e2:	b93b      	cbnz	r3, d3f4 <smp_pairing_req+0x17c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d3e4:	f898 0008 	ldrb.w	r0, [r8, #8]
    d3e8:	f108 0170 	add.w	r1, r8, #112	; 0x70
    d3ec:	f001 f902 	bl	e5f4 <bt_keys_get_addr>
    d3f0:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
	if (!conn->le.keys ||
    d3f4:	f8d8 209c 	ldr.w	r2, [r8, #156]	; 0x9c
    d3f8:	2a00      	cmp	r2, #0
    d3fa:	d142      	bne.n	d482 <smp_pairing_req+0x20a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d3fc:	2105      	movs	r1, #5
    d3fe:	4630      	mov	r0, r6
    d400:	f012 fba6 	bl	1fb50 <atomic_test_bit>
    d404:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d408:	2800      	cmp	r0, #0
    d40a:	f040 80c5 	bne.w	d598 <smp_pairing_req+0x320>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d40e:	461d      	mov	r5, r3
    d410:	2b00      	cmp	r3, #0
    d412:	d154      	bne.n	d4be <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d414:	210e      	movs	r1, #14
    d416:	4630      	mov	r0, r6
    d418:	f012 fb9a 	bl	1fb50 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d41c:	2800      	cmp	r0, #0
    d41e:	d14e      	bne.n	d4be <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d420:	4f6d      	ldr	r7, [pc, #436]	; (d5d8 <smp_pairing_req+0x360>)
    d422:	683b      	ldr	r3, [r7, #0]
    d424:	2b00      	cmp	r3, #0
    d426:	d04a      	beq.n	d4be <smp_pairing_req+0x246>
	    bt_auth && bt_auth->pairing_confirm) {
    d428:	695b      	ldr	r3, [r3, #20]
    d42a:	2b00      	cmp	r3, #0
    d42c:	d047      	beq.n	d4be <smp_pairing_req+0x246>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d42e:	4630      	mov	r0, r6
    d430:	2109      	movs	r1, #9
    d432:	f012 fac5 	bl	1f9c0 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d436:	683b      	ldr	r3, [r7, #0]
    d438:	6820      	ldr	r0, [r4, #0]
    d43a:	695b      	ldr	r3, [r3, #20]
    d43c:	4798      	blx	r3
		return 0;
    d43e:	e726      	b.n	d28e <smp_pairing_req+0x16>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    d440:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    d444:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    d448:	ea00 0302 	and.w	r3, r0, r2
    d44c:	071b      	lsls	r3, r3, #28
    d44e:	d506      	bpl.n	d45e <smp_pairing_req+0x1e6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d450:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    d454:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    d458:	430b      	orrs	r3, r1
    d45a:	07d9      	lsls	r1, r3, #31
    d45c:	d40d      	bmi.n	d47a <smp_pairing_req+0x202>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d45e:	2d04      	cmp	r5, #4
    d460:	d80d      	bhi.n	d47e <smp_pairing_req+0x206>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d462:	4310      	orrs	r0, r2
    d464:	f010 0004 	ands.w	r0, r0, #4
    d468:	d0b7      	beq.n	d3da <smp_pairing_req+0x162>
	return gen_method_sc[remote_io][get_io_capa()];
    d46a:	f7ff fbf5 	bl	cc58 <get_io_capa>
    d46e:	4b5b      	ldr	r3, [pc, #364]	; (d5dc <smp_pairing_req+0x364>)
    d470:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d474:	441d      	add	r5, r3
    d476:	5c28      	ldrb	r0, [r5, r0]
    d478:	e7af      	b.n	d3da <smp_pairing_req+0x162>
			return LE_SC_OOB;
    d47a:	2005      	movs	r0, #5
    d47c:	e7ad      	b.n	d3da <smp_pairing_req+0x162>
		return JUST_WORKS;
    d47e:	2000      	movs	r0, #0
    d480:	e7ab      	b.n	d3da <smp_pairing_req+0x162>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    d482:	8951      	ldrh	r1, [r2, #10]
	if (!conn->le.keys ||
    d484:	f011 0f24 	tst.w	r1, #36	; 0x24
    d488:	d0b8      	beq.n	d3fc <smp_pairing_req+0x184>
	return MIN(req->max_key_size, rsp->max_key_size);
    d48a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d48e:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    d492:	7a12      	ldrb	r2, [r2, #8]
    d494:	4283      	cmp	r3, r0
    d496:	bf28      	it	cs
    d498:	4603      	movcs	r3, r0
    d49a:	429a      	cmp	r2, r3
    d49c:	d901      	bls.n	d4a2 <smp_pairing_req+0x22a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d49e:	2503      	movs	r5, #3
    d4a0:	e6f5      	b.n	d28e <smp_pairing_req+0x16>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d4a2:	068a      	lsls	r2, r1, #26
    d4a4:	d404      	bmi.n	d4b0 <smp_pairing_req+0x238>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    d4a6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d1a6      	bne.n	d3fc <smp_pairing_req+0x184>
    d4ae:	e7f6      	b.n	d49e <smp_pairing_req+0x226>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d4b0:	2105      	movs	r1, #5
    d4b2:	4630      	mov	r0, r6
    d4b4:	f012 fb4c 	bl	1fb50 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d4b8:	2800      	cmp	r0, #0
    d4ba:	d1f4      	bne.n	d4a6 <smp_pairing_req+0x22e>
    d4bc:	e7ef      	b.n	d49e <smp_pairing_req+0x226>
	ret = send_pairing_rsp(smp);
    d4be:	4620      	mov	r0, r4
    d4c0:	f012 fb87 	bl	1fbd2 <send_pairing_rsp>
	if (ret) {
    d4c4:	4605      	mov	r5, r0
    d4c6:	2800      	cmp	r0, #0
    d4c8:	f47f aee1 	bne.w	d28e <smp_pairing_req+0x16>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d4cc:	2103      	movs	r1, #3
    d4ce:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d4d2:	f012 fa75 	bl	1f9c0 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    d4d6:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    d4d8:	f105 0170 	add.w	r1, r5, #112	; 0x70
    d4dc:	7a28      	ldrb	r0, [r5, #8]
    d4de:	f001 f947 	bl	e770 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    d4e2:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    d4e6:	b178      	cbz	r0, d508 <smp_pairing_req+0x290>
    d4e8:	7a43      	ldrb	r3, [r0, #9]
    d4ea:	07db      	lsls	r3, r3, #31
    d4ec:	d50c      	bpl.n	d508 <smp_pairing_req+0x290>
    d4ee:	b959      	cbnz	r1, d508 <smp_pairing_req+0x290>
    d4f0:	493b      	ldr	r1, [pc, #236]	; (d5e0 <smp_pairing_req+0x368>)
    d4f2:	4b3c      	ldr	r3, [pc, #240]	; (d5e4 <smp_pairing_req+0x36c>)
		BT_ERR("JustWorks failed, authenticated keys present");
    d4f4:	483c      	ldr	r0, [pc, #240]	; (d5e8 <smp_pairing_req+0x370>)
    d4f6:	1ac9      	subs	r1, r1, r3
    d4f8:	08c9      	lsrs	r1, r1, #3
    d4fa:	0189      	lsls	r1, r1, #6
    d4fc:	f041 0101 	orr.w	r1, r1, #1
    d500:	f010 f8d2 	bl	1d6a8 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    d504:	2108      	movs	r1, #8
    d506:	e005      	b.n	d514 <smp_pairing_req+0x29c>
	switch (smp->method) {
    d508:	2901      	cmp	r1, #1
    d50a:	d030      	beq.n	d56e <smp_pairing_req+0x2f6>
    d50c:	2902      	cmp	r1, #2
    d50e:	d003      	beq.n	d518 <smp_pairing_req+0x2a0>
    d510:	2900      	cmp	r1, #0
    d512:	d136      	bne.n	d582 <smp_pairing_req+0x30a>
	return legacy_request_tk(smp);
    d514:	460d      	mov	r5, r1
    d516:	e6ba      	b.n	d28e <smp_pairing_req+0x16>
			if (bt_rand(&passkey, sizeof(passkey))) {
    d518:	2104      	movs	r1, #4
    d51a:	eb0d 0001 	add.w	r0, sp, r1
    d51e:	f003 fee3 	bl	112e8 <bt_rand>
    d522:	2800      	cmp	r0, #0
    d524:	d1ee      	bne.n	d504 <smp_pairing_req+0x28c>
			passkey %= 1000000;
    d526:	9901      	ldr	r1, [sp, #4]
    d528:	4a30      	ldr	r2, [pc, #192]	; (d5ec <smp_pairing_req+0x374>)
		if (bt_auth && bt_auth->passkey_display) {
    d52a:	4f2b      	ldr	r7, [pc, #172]	; (d5d8 <smp_pairing_req+0x360>)
			passkey %= 1000000;
    d52c:	fbb1 f3f2 	udiv	r3, r1, r2
    d530:	fb02 1313 	mls	r3, r2, r3, r1
    d534:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    d536:	683b      	ldr	r3, [r7, #0]
    d538:	b153      	cbz	r3, d550 <smp_pairing_req+0x2d8>
    d53a:	681b      	ldr	r3, [r3, #0]
    d53c:	b143      	cbz	r3, d550 <smp_pairing_req+0x2d8>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    d53e:	210a      	movs	r1, #10
    d540:	4630      	mov	r0, r6
    d542:	f012 fa3d 	bl	1f9c0 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    d546:	683b      	ldr	r3, [r7, #0]
    d548:	9901      	ldr	r1, [sp, #4]
    d54a:	681b      	ldr	r3, [r3, #0]
    d54c:	4628      	mov	r0, r5
    d54e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    d550:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    d552:	f884 30d7 	strb.w	r3, [r4, #215]	; 0xd7
	dst[1] = val >> 8;
    d556:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    d55a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d55c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
	dst[1] = val >> 8;
    d560:	0a1b      	lsrs	r3, r3, #8
    d562:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    d566:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	return 0;
    d56a:	2100      	movs	r1, #0
		break;
    d56c:	e7d2      	b.n	d514 <smp_pairing_req+0x29c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d56e:	4630      	mov	r0, r6
    d570:	2109      	movs	r1, #9
    d572:	f012 fa25 	bl	1f9c0 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    d576:	4b18      	ldr	r3, [pc, #96]	; (d5d8 <smp_pairing_req+0x360>)
    d578:	681b      	ldr	r3, [r3, #0]
    d57a:	4628      	mov	r0, r5
    d57c:	685b      	ldr	r3, [r3, #4]
    d57e:	4798      	blx	r3
    d580:	e7f3      	b.n	d56a <smp_pairing_req+0x2f2>
    d582:	4b18      	ldr	r3, [pc, #96]	; (d5e4 <smp_pairing_req+0x36c>)
    d584:	4a16      	ldr	r2, [pc, #88]	; (d5e0 <smp_pairing_req+0x368>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d586:	481a      	ldr	r0, [pc, #104]	; (d5f0 <smp_pairing_req+0x378>)
    d588:	1ad2      	subs	r2, r2, r3
    d58a:	08d2      	lsrs	r2, r2, #3
    d58c:	0192      	lsls	r2, r2, #6
    d58e:	f042 0201 	orr.w	r2, r2, #1
    d592:	f010 f896 	bl	1d6c2 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d596:	e7b5      	b.n	d504 <smp_pairing_req+0x28c>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    d598:	7aba      	ldrb	r2, [r7, #10]
    d59a:	2a04      	cmp	r2, #4
    d59c:	461d      	mov	r5, r3
    d59e:	d129      	bne.n	d5f4 <smp_pairing_req+0x37c>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f43f af7c 	beq.w	d49e <smp_pairing_req+0x226>
	return MIN(req->max_key_size, rsp->max_key_size);
    d5a6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
    d5aa:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d5ae:	4293      	cmp	r3, r2
    d5b0:	bf28      	it	cs
    d5b2:	4613      	movcs	r3, r2
    d5b4:	2b10      	cmp	r3, #16
    d5b6:	f47f ae69 	bne.w	d28c <smp_pairing_req+0x14>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d5ba:	210c      	movs	r1, #12
    d5bc:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d5c0:	f012 f9fe 	bl	1f9c0 <atomic_set_bit>
	return send_pairing_rsp(smp);
    d5c4:	4620      	mov	r0, r4
    d5c6:	f012 fb04 	bl	1fbd2 <send_pairing_rsp>
    d5ca:	4605      	mov	r5, r0
    d5cc:	e65f      	b.n	d28e <smp_pairing_req+0x16>
    d5ce:	bf00      	nop
    d5d0:	20002281 	.word	0x20002281
    d5d4:	00024c30 	.word	0x00024c30
    d5d8:	20000360 	.word	0x20000360
    d5dc:	00024c49 	.word	0x00024c49
    d5e0:	00021204 	.word	0x00021204
    d5e4:	00021114 	.word	0x00021114
    d5e8:	0002498b 	.word	0x0002498b
    d5ec:	000f4240 	.word	0x000f4240
    d5f0:	000249b8 	.word	0x000249b8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	d1e0      	bne.n	d5ba <smp_pairing_req+0x342>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d5f8:	210e      	movs	r1, #14
    d5fa:	4630      	mov	r0, r6
    d5fc:	f012 faa8 	bl	1fb50 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d600:	2800      	cmp	r0, #0
    d602:	d1da      	bne.n	d5ba <smp_pairing_req+0x342>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d604:	4f03      	ldr	r7, [pc, #12]	; (d614 <smp_pairing_req+0x39c>)
    d606:	683b      	ldr	r3, [r7, #0]
    d608:	2b00      	cmp	r3, #0
    d60a:	d0d6      	beq.n	d5ba <smp_pairing_req+0x342>
	    bt_auth && bt_auth->pairing_confirm) {
    d60c:	695b      	ldr	r3, [r3, #20]
    d60e:	2b00      	cmp	r3, #0
    d610:	d0d3      	beq.n	d5ba <smp_pairing_req+0x342>
    d612:	e70c      	b.n	d42e <smp_pairing_req+0x1b6>
    d614:	20000360 	.word	0x20000360

0000d618 <smp_pairing_complete>:
{
    d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d61a:	4e1e      	ldr	r6, [pc, #120]	; (d694 <smp_pairing_complete+0x7c>)
    d61c:	4604      	mov	r4, r0
    d61e:	f100 0794 	add.w	r7, r0, #148	; 0x94
	if (!status) {
    d622:	b9b1      	cbnz	r1, d652 <smp_pairing_complete+0x3a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    d624:	210c      	movs	r1, #12
    d626:	4638      	mov	r0, r7
    d628:	f012 fa92 	bl	1fb50 <atomic_test_bit>
		if (bond_flag) {
    d62c:	4605      	mov	r5, r0
    d62e:	b120      	cbz	r0, d63a <smp_pairing_complete+0x22>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    d630:	6823      	ldr	r3, [r4, #0]
    d632:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    d636:	f001 f981 	bl	e93c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    d63a:	6833      	ldr	r3, [r6, #0]
    d63c:	b123      	cbz	r3, d648 <smp_pairing_complete+0x30>
    d63e:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    d640:	b113      	cbz	r3, d648 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    d642:	6820      	ldr	r0, [r4, #0]
    d644:	4629      	mov	r1, r5
    d646:	4798      	blx	r3
	smp_reset(smp);
    d648:	4620      	mov	r0, r4
}
    d64a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    d64e:	f012 bb1a 	b.w	1fc86 <smp_reset>
	switch (smp_err) {
    d652:	3901      	subs	r1, #1
    d654:	b2c9      	uxtb	r1, r1
    d656:	290d      	cmp	r1, #13
    d658:	bf9c      	itt	ls
    d65a:	4b0f      	ldrls	r3, [pc, #60]	; (d698 <smp_pairing_complete+0x80>)
    d65c:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys) {
    d65e:	6803      	ldr	r3, [r0, #0]
    d660:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
	if (!status) {
    d664:	bf88      	it	hi
    d666:	2508      	movhi	r5, #8
		if (smp->chan.chan.conn->le.keys) {
    d668:	b128      	cbz	r0, d676 <smp_pairing_complete+0x5e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    d66a:	f001 f891 	bl	e790 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    d66e:	6823      	ldr	r3, [r4, #0]
    d670:	2200      	movs	r2, #0
    d672:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    d676:	2102      	movs	r1, #2
    d678:	4638      	mov	r0, r7
    d67a:	f012 fa69 	bl	1fb50 <atomic_test_bit>
    d67e:	b918      	cbnz	r0, d688 <smp_pairing_complete+0x70>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    d680:	6820      	ldr	r0, [r4, #0]
    d682:	4629      	mov	r1, r5
    d684:	f7fc fad4 	bl	9c30 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    d688:	6833      	ldr	r3, [r6, #0]
    d68a:	2b00      	cmp	r3, #0
    d68c:	d0dc      	beq.n	d648 <smp_pairing_complete+0x30>
    d68e:	69db      	ldr	r3, [r3, #28]
    d690:	e7d6      	b.n	d640 <smp_pairing_complete+0x28>
    d692:	bf00      	nop
    d694:	20000360 	.word	0x20000360
    d698:	00024c22 	.word	0x00024c22

0000d69c <bt_smp_dhkey_ready>:
{
    d69c:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d69e:	2107      	movs	r1, #7
{
    d6a0:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d6a2:	4816      	ldr	r0, [pc, #88]	; (d6fc <bt_smp_dhkey_ready+0x60>)
    d6a4:	f012 fad7 	bl	1fc56 <atomic_test_and_clear_bit>
    d6a8:	b338      	cbz	r0, d6fa <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    d6aa:	b92c      	cbnz	r4, d6b8 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    d6ac:	210b      	movs	r1, #11
}
    d6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    d6b2:	4813      	ldr	r0, [pc, #76]	; (d700 <bt_smp_dhkey_ready+0x64>)
    d6b4:	f012 bb12 	b.w	1fcdc <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    d6b8:	4621      	mov	r1, r4
    d6ba:	4812      	ldr	r0, [pc, #72]	; (d704 <bt_smp_dhkey_ready+0x68>)
    d6bc:	2220      	movs	r2, #32
    d6be:	f010 ff13 	bl	1e4e8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    d6c2:	480e      	ldr	r0, [pc, #56]	; (d6fc <bt_smp_dhkey_ready+0x60>)
    d6c4:	2109      	movs	r1, #9
    d6c6:	f012 fa43 	bl	1fb50 <atomic_test_bit>
    d6ca:	b128      	cbz	r0, d6d8 <bt_smp_dhkey_ready+0x3c>
}
    d6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    d6d0:	480a      	ldr	r0, [pc, #40]	; (d6fc <bt_smp_dhkey_ready+0x60>)
    d6d2:	2108      	movs	r1, #8
    d6d4:	f012 b974 	b.w	1f9c0 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    d6d8:	4808      	ldr	r0, [pc, #32]	; (d6fc <bt_smp_dhkey_ready+0x60>)
    d6da:	210f      	movs	r1, #15
    d6dc:	f012 fa38 	bl	1fb50 <atomic_test_bit>
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d1f3      	bne.n	d6cc <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    d6e4:	4805      	ldr	r0, [pc, #20]	; (d6fc <bt_smp_dhkey_ready+0x60>)
    d6e6:	2108      	movs	r1, #8
    d6e8:	f012 fa32 	bl	1fb50 <atomic_test_bit>
    d6ec:	b128      	cbz	r0, d6fa <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    d6ee:	4804      	ldr	r0, [pc, #16]	; (d700 <bt_smp_dhkey_ready+0x64>)
    d6f0:	f7ff fc48 	bl	cf84 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    d6f4:	4601      	mov	r1, r0
    d6f6:	2800      	cmp	r0, #0
    d6f8:	d1d9      	bne.n	d6ae <bt_smp_dhkey_ready+0x12>
}
    d6fa:	bd10      	pop	{r4, pc}
    d6fc:	2000060c 	.word	0x2000060c
    d700:	20000578 	.word	0x20000578
    d704:	2000069f 	.word	0x2000069f

0000d708 <bt_smp_recv>:
{
    d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    d70a:	898b      	ldrh	r3, [r1, #12]
{
    d70c:	4604      	mov	r4, r0
    d70e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    d710:	b95b      	cbnz	r3, d72a <bt_smp_recv+0x22>
    d712:	4935      	ldr	r1, [pc, #212]	; (d7e8 <bt_smp_recv+0xe0>)
    d714:	4b35      	ldr	r3, [pc, #212]	; (d7ec <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    d716:	4836      	ldr	r0, [pc, #216]	; (d7f0 <bt_smp_recv+0xe8>)
    d718:	1ac9      	subs	r1, r1, r3
    d71a:	08c9      	lsrs	r1, r1, #3
    d71c:	0189      	lsls	r1, r1, #6
    d71e:	f041 0101 	orr.w	r1, r1, #1
    d722:	f00f ffc1 	bl	1d6a8 <log_0>
}
    d726:	2000      	movs	r0, #0
    d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d72a:	2101      	movs	r1, #1
    d72c:	f105 0008 	add.w	r0, r5, #8
    d730:	f012 fd2e 	bl	20190 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d734:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d736:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d738:	f104 0094 	add.w	r0, r4, #148	; 0x94
    d73c:	f012 fa08 	bl	1fb50 <atomic_test_bit>
    d740:	7831      	ldrb	r1, [r6, #0]
    d742:	b150      	cbz	r0, d75a <bt_smp_recv+0x52>
    d744:	4b29      	ldr	r3, [pc, #164]	; (d7ec <bt_smp_recv+0xe4>)
    d746:	4a28      	ldr	r2, [pc, #160]	; (d7e8 <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    d748:	482a      	ldr	r0, [pc, #168]	; (d7f4 <bt_smp_recv+0xec>)
    d74a:	1ad2      	subs	r2, r2, r3
    d74c:	08d2      	lsrs	r2, r2, #3
    d74e:	0192      	lsls	r2, r2, #6
    d750:	f042 0202 	orr.w	r2, r2, #2
    d754:	f00f ffb5 	bl	1d6c2 <log_1>
		return 0;
    d758:	e7e5      	b.n	d726 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    d75a:	290d      	cmp	r1, #13
    d75c:	d803      	bhi.n	d766 <bt_smp_recv+0x5e>
    d75e:	4f26      	ldr	r7, [pc, #152]	; (d7f8 <bt_smp_recv+0xf0>)
    d760:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d764:	b973      	cbnz	r3, d784 <bt_smp_recv+0x7c>
    d766:	4b21      	ldr	r3, [pc, #132]	; (d7ec <bt_smp_recv+0xe4>)
    d768:	4a1f      	ldr	r2, [pc, #124]	; (d7e8 <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    d76a:	4824      	ldr	r0, [pc, #144]	; (d7fc <bt_smp_recv+0xf4>)
    d76c:	1ad2      	subs	r2, r2, r3
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	0192      	lsls	r2, r2, #6
    d772:	f042 0202 	orr.w	r2, r2, #2
    d776:	f00f ffa4 	bl	1d6c2 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    d77a:	2107      	movs	r1, #7
		smp_error(smp, err);
    d77c:	4620      	mov	r0, r4
    d77e:	f012 faad 	bl	1fcdc <smp_error>
    d782:	e7d0      	b.n	d726 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    d784:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d788:	f012 fa65 	bl	1fc56 <atomic_test_and_clear_bit>
    d78c:	7831      	ldrb	r1, [r6, #0]
    d78e:	b970      	cbnz	r0, d7ae <bt_smp_recv+0xa6>
    d790:	4b16      	ldr	r3, [pc, #88]	; (d7ec <bt_smp_recv+0xe4>)
    d792:	4a15      	ldr	r2, [pc, #84]	; (d7e8 <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    d794:	481a      	ldr	r0, [pc, #104]	; (d800 <bt_smp_recv+0xf8>)
    d796:	1ad2      	subs	r2, r2, r3
    d798:	08d2      	lsrs	r2, r2, #3
    d79a:	0192      	lsls	r2, r2, #6
    d79c:	f042 0202 	orr.w	r2, r2, #2
    d7a0:	f00f ff8f 	bl	1d6c2 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    d7a4:	7833      	ldrb	r3, [r6, #0]
    d7a6:	2b05      	cmp	r3, #5
    d7a8:	d0bd      	beq.n	d726 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    d7aa:	2108      	movs	r1, #8
    d7ac:	e7e6      	b.n	d77c <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    d7ae:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    d7b2:	89a8      	ldrh	r0, [r5, #12]
    d7b4:	791b      	ldrb	r3, [r3, #4]
    d7b6:	4283      	cmp	r3, r0
    d7b8:	d00d      	beq.n	d7d6 <bt_smp_recv+0xce>
    d7ba:	4a0c      	ldr	r2, [pc, #48]	; (d7ec <bt_smp_recv+0xe4>)
    d7bc:	4b0a      	ldr	r3, [pc, #40]	; (d7e8 <bt_smp_recv+0xe0>)
    d7be:	1a9b      	subs	r3, r3, r2
    d7c0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d7c2:	019b      	lsls	r3, r3, #6
    d7c4:	460a      	mov	r2, r1
    d7c6:	f043 0301 	orr.w	r3, r3, #1
    d7ca:	4601      	mov	r1, r0
    d7cc:	480d      	ldr	r0, [pc, #52]	; (d804 <bt_smp_recv+0xfc>)
    d7ce:	f00f ff8c 	bl	1d6ea <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    d7d2:	210a      	movs	r1, #10
    d7d4:	e7d2      	b.n	d77c <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    d7d6:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d7da:	4620      	mov	r0, r4
    d7dc:	4629      	mov	r1, r5
    d7de:	4798      	blx	r3
	if (err) {
    d7e0:	4601      	mov	r1, r0
    d7e2:	2800      	cmp	r0, #0
    d7e4:	d09f      	beq.n	d726 <bt_smp_recv+0x1e>
    d7e6:	e7c9      	b.n	d77c <bt_smp_recv+0x74>
    d7e8:	00021204 	.word	0x00021204
    d7ec:	00021114 	.word	0x00021114
    d7f0:	000249d4 	.word	0x000249d4
    d7f4:	000249ef 	.word	0x000249ef
    d7f8:	00021bf0 	.word	0x00021bf0
    d7fc:	00024a20 	.word	0x00024a20
    d800:	00024a3a 	.word	0x00024a3a
    d804:	00024611 	.word	0x00024611

0000d808 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    d808:	4b15      	ldr	r3, [pc, #84]	; (d860 <bt_smp_pkey_ready+0x58>)
{
    d80a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    d80c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    d80e:	b958      	cbnz	r0, d828 <bt_smp_pkey_ready+0x20>
    d810:	4914      	ldr	r1, [pc, #80]	; (d864 <bt_smp_pkey_ready+0x5c>)
    d812:	4b15      	ldr	r3, [pc, #84]	; (d868 <bt_smp_pkey_ready+0x60>)
		BT_WARN("Public key not available");
    d814:	4815      	ldr	r0, [pc, #84]	; (d86c <bt_smp_pkey_ready+0x64>)
    d816:	1ac9      	subs	r1, r1, r3
    d818:	08c9      	lsrs	r1, r1, #3
    d81a:	0189      	lsls	r1, r1, #6
}
    d81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    d820:	f041 0102 	orr.w	r1, r1, #2
    d824:	f00f bf40 	b.w	1d6a8 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d828:	4c11      	ldr	r4, [pc, #68]	; (d870 <bt_smp_pkey_ready+0x68>)
    d82a:	4812      	ldr	r0, [pc, #72]	; (d874 <bt_smp_pkey_ready+0x6c>)
    d82c:	f00d ffc0 	bl	1b7b0 <z_impl_k_sem_give>
    d830:	f3bf 8f5b 	dmb	ish
    d834:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    d838:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    d83c:	065b      	lsls	r3, r3, #25
    d83e:	d50e      	bpl.n	d85e <bt_smp_pkey_ready+0x56>
	err = sc_send_public_key(smp);
    d840:	4620      	mov	r0, r4
    d842:	f7ff fc87 	bl	d154 <sc_send_public_key>
	if (err) {
    d846:	4601      	mov	r1, r0
    d848:	b920      	cbnz	r0, d854 <bt_smp_pkey_ready+0x4c>
    d84a:	4620      	mov	r0, r4
    d84c:	f7ff fb36 	bl	cebc <smp_public_key_slave.part.0>
		if (err) {
    d850:	4601      	mov	r1, r0
    d852:	b120      	cbz	r0, d85e <bt_smp_pkey_ready+0x56>
}
    d854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    d858:	4805      	ldr	r0, [pc, #20]	; (d870 <bt_smp_pkey_ready+0x68>)
    d85a:	f012 ba3f 	b.w	1fcdc <smp_error>
}
    d85e:	bd10      	pop	{r4, pc}
    d860:	20000714 	.word	0x20000714
    d864:	00021204 	.word	0x00021204
    d868:	00021114 	.word	0x00021114
    d86c:	00024a55 	.word	0x00024a55
    d870:	20000578 	.word	0x20000578
    d874:	200061b4 	.word	0x200061b4

0000d878 <smp_pairing_failed>:
{
    d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d87a:	4a15      	ldr	r2, [pc, #84]	; (d8d0 <smp_pairing_failed+0x58>)
    d87c:	4b15      	ldr	r3, [pc, #84]	; (d8d4 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    d87e:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    d880:	4605      	mov	r5, r0
    d882:	1ad2      	subs	r2, r2, r3
    d884:	08d2      	lsrs	r2, r2, #3
    d886:	f855 7b94 	ldr.w	r7, [r5], #148
	BT_ERR("reason 0x%x", req->reason);
    d88a:	7831      	ldrb	r1, [r6, #0]
    d88c:	0192      	lsls	r2, r2, #6
{
    d88e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    d890:	f042 0201 	orr.w	r2, r2, #1
    d894:	4810      	ldr	r0, [pc, #64]	; (d8d8 <smp_pairing_failed+0x60>)
    d896:	f00f ff14 	bl	1d6c2 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d89a:	2109      	movs	r1, #9
    d89c:	4628      	mov	r0, r5
    d89e:	f012 f9da 	bl	1fc56 <atomic_test_and_clear_bit>
    d8a2:	b140      	cbz	r0, d8b6 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    d8a4:	4b0d      	ldr	r3, [pc, #52]	; (d8dc <smp_pairing_failed+0x64>)
    d8a6:	681b      	ldr	r3, [r3, #0]
    d8a8:	b963      	cbnz	r3, d8c4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    d8aa:	4620      	mov	r0, r4
    d8ac:	7831      	ldrb	r1, [r6, #0]
    d8ae:	f7ff feb3 	bl	d618 <smp_pairing_complete>
}
    d8b2:	2000      	movs	r0, #0
    d8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    d8b6:	210a      	movs	r1, #10
    d8b8:	4628      	mov	r0, r5
    d8ba:	f012 f9cc 	bl	1fc56 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d8be:	2800      	cmp	r0, #0
    d8c0:	d1f0      	bne.n	d8a4 <smp_pairing_failed+0x2c>
    d8c2:	e7f2      	b.n	d8aa <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    d8c4:	691b      	ldr	r3, [r3, #16]
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	d0ef      	beq.n	d8aa <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    d8ca:	4638      	mov	r0, r7
    d8cc:	4798      	blx	r3
    d8ce:	e7ec      	b.n	d8aa <smp_pairing_failed+0x32>
    d8d0:	00021204 	.word	0x00021204
    d8d4:	00021114 	.word	0x00021114
    d8d8:	00024a6e 	.word	0x00024a6e
    d8dc:	20000360 	.word	0x20000360

0000d8e0 <smp_timeout>:
    d8e0:	4b0b      	ldr	r3, [pc, #44]	; (d910 <smp_timeout+0x30>)
    d8e2:	490c      	ldr	r1, [pc, #48]	; (d914 <smp_timeout+0x34>)
{
    d8e4:	b510      	push	{r4, lr}
    d8e6:	1ac9      	subs	r1, r1, r3
    d8e8:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    d8ea:	0189      	lsls	r1, r1, #6
{
    d8ec:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    d8ee:	f041 0101 	orr.w	r1, r1, #1
    d8f2:	4809      	ldr	r0, [pc, #36]	; (d918 <smp_timeout+0x38>)
    d8f4:	f00f fed8 	bl	1d6a8 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    d8f8:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
    d8fc:	2108      	movs	r1, #8
    d8fe:	f7ff fe8b 	bl	d618 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    d902:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
    d906:	2104      	movs	r1, #4
}
    d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    d90c:	f012 b858 	b.w	1f9c0 <atomic_set_bit>
    d910:	00021114 	.word	0x00021114
    d914:	00021204 	.word	0x00021204
    d918:	00024a7a 	.word	0x00024a7a

0000d91c <smp_signing_info>:
{
    d91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d91e:	4605      	mov	r5, r0
    d920:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    d922:	f850 4b94 	ldr.w	r4, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d926:	210c      	movs	r1, #12
    d928:	f012 f912 	bl	1fb50 <atomic_test_bit>
    d92c:	b300      	cbz	r0, d970 <smp_signing_info+0x54>
					&conn->le.dst);
    d92e:	f104 0670 	add.w	r6, r4, #112	; 0x70
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    d932:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    d934:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    d936:	4632      	mov	r2, r6
    d938:	2010      	movs	r0, #16
    d93a:	f012 fbb5 	bl	200a8 <bt_keys_get_type>
		if (!keys) {
    d93e:	b990      	cbnz	r0, d966 <smp_signing_info+0x4a>
    d940:	4a13      	ldr	r2, [pc, #76]	; (d990 <smp_signing_info+0x74>)
    d942:	4c14      	ldr	r4, [pc, #80]	; (d994 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    d944:	4630      	mov	r0, r6
    d946:	1aa4      	subs	r4, r4, r2
    d948:	f7f9 fa28 	bl	6d9c <bt_addr_le_str_real>
    d94c:	f7f6 fad8 	bl	3f00 <log_strdup>
    d950:	08e4      	lsrs	r4, r4, #3
    d952:	01a4      	lsls	r4, r4, #6
    d954:	f044 0401 	orr.w	r4, r4, #1
    d958:	4601      	mov	r1, r0
    d95a:	4622      	mov	r2, r4
    d95c:	480e      	ldr	r0, [pc, #56]	; (d998 <smp_signing_info+0x7c>)
    d95e:	f00f feb0 	bl	1d6c2 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d962:	2008      	movs	r0, #8
}
    d964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    d966:	2210      	movs	r2, #16
    d968:	4639      	mov	r1, r7
    d96a:	3050      	adds	r0, #80	; 0x50
    d96c:	f010 fdbc 	bl	1e4e8 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    d970:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    d974:	f023 0304 	bic.w	r3, r3, #4
    d978:	f885 3179 	strb.w	r3, [r5, #377]	; 0x179
	if (!smp->local_dist && !smp->remote_dist) {
    d97c:	f8b5 4178 	ldrh.w	r4, [r5, #376]	; 0x178
    d980:	b91c      	cbnz	r4, d98a <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    d982:	4621      	mov	r1, r4
    d984:	4628      	mov	r0, r5
    d986:	f7ff fe47 	bl	d618 <smp_pairing_complete>
	return 0;
    d98a:	2000      	movs	r0, #0
    d98c:	e7ea      	b.n	d964 <smp_signing_info+0x48>
    d98e:	bf00      	nop
    d990:	00021114 	.word	0x00021114
    d994:	00021204 	.word	0x00021204
    d998:	00024971 	.word	0x00024971

0000d99c <smp_master_ident>:
{
    d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d99e:	4604      	mov	r4, r0
    d9a0:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    d9a2:	f850 5b94 	ldr.w	r5, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d9a6:	210c      	movs	r1, #12
    d9a8:	f012 f8d2 	bl	1fb50 <atomic_test_bit>
    d9ac:	b368      	cbz	r0, da0a <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    d9ae:	f105 0770 	add.w	r7, r5, #112	; 0x70
    d9b2:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    d9b4:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    d9b6:	463a      	mov	r2, r7
    d9b8:	2004      	movs	r0, #4
    d9ba:	f012 fb75 	bl	200a8 <bt_keys_get_type>
		if (!keys) {
    d9be:	4605      	mov	r5, r0
    d9c0:	b990      	cbnz	r0, d9e8 <smp_master_ident+0x4c>
    d9c2:	4a1d      	ldr	r2, [pc, #116]	; (da38 <smp_master_ident+0x9c>)
    d9c4:	4c1d      	ldr	r4, [pc, #116]	; (da3c <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    d9c6:	4638      	mov	r0, r7
    d9c8:	1aa4      	subs	r4, r4, r2
    d9ca:	f7f9 f9e7 	bl	6d9c <bt_addr_le_str_real>
    d9ce:	f7f6 fa97 	bl	3f00 <log_strdup>
    d9d2:	08e4      	lsrs	r4, r4, #3
    d9d4:	01a4      	lsls	r4, r4, #6
    d9d6:	f044 0401 	orr.w	r4, r4, #1
    d9da:	4601      	mov	r1, r0
    d9dc:	4622      	mov	r2, r4
    d9de:	4818      	ldr	r0, [pc, #96]	; (da40 <smp_master_ident+0xa4>)
    d9e0:	f00f fe6f 	bl	1d6c2 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d9e4:	2008      	movs	r0, #8
}
    d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    d9e8:	2202      	movs	r2, #2
    d9ea:	4631      	mov	r1, r6
    d9ec:	3014      	adds	r0, #20
    d9ee:	f010 fd7b 	bl	1e4e8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    d9f2:	2208      	movs	r2, #8
    d9f4:	1cb1      	adds	r1, r6, #2
    d9f6:	f105 000c 	add.w	r0, r5, #12
    d9fa:	f010 fd75 	bl	1e4e8 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    d9fe:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    da02:	f023 0301 	bic.w	r3, r3, #1
    da06:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    da0a:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    da0e:	079a      	lsls	r2, r3, #30
    da10:	d50d      	bpl.n	da2e <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    da12:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    da14:	f104 0090 	add.w	r0, r4, #144	; 0x90
    da18:	f011 ffd2 	bl	1f9c0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    da1c:	f8b4 5178 	ldrh.w	r5, [r4, #376]	; 0x178
    da20:	b91d      	cbnz	r5, da2a <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    da22:	4629      	mov	r1, r5
    da24:	4620      	mov	r0, r4
    da26:	f7ff fdf7 	bl	d618 <smp_pairing_complete>
	return 0;
    da2a:	2000      	movs	r0, #0
    da2c:	e7db      	b.n	d9e6 <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    da2e:	075b      	lsls	r3, r3, #29
    da30:	d5f4      	bpl.n	da1c <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    da32:	210a      	movs	r1, #10
    da34:	e7ee      	b.n	da14 <smp_master_ident+0x78>
    da36:	bf00      	nop
    da38:	00021114 	.word	0x00021114
    da3c:	00021204 	.word	0x00021204
    da40:	00024971 	.word	0x00024971

0000da44 <bt_smp_connected>:
{
    da44:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    da46:	4905      	ldr	r1, [pc, #20]	; (da5c <bt_smp_connected+0x18>)
{
    da48:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    da4a:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    da4e:	f013 f815 	bl	20a7c <k_delayed_work_init>
	smp_reset(smp);
    da52:	4620      	mov	r0, r4
}
    da54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    da58:	f012 b915 	b.w	1fc86 <smp_reset>
    da5c:	0000d8e1 	.word	0x0000d8e1

0000da60 <bt_smp_encrypt_change>:
{
    da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    da64:	4605      	mov	r5, r0
{
    da66:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    da68:	f855 7b94 	ldr.w	r7, [r5], #148
{
    da6c:	b089      	sub	sp, #36	; 0x24
    da6e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    da70:	2101      	movs	r1, #1
    da72:	4628      	mov	r0, r5
    da74:	f012 f841 	bl	1fafa <atomic_clear_bit>
	if (hci_status) {
    da78:	b946      	cbnz	r6, da8c <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    da7a:	7afb      	ldrb	r3, [r7, #11]
    da7c:	b133      	cbz	r3, da8c <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    da7e:	2103      	movs	r1, #3
    da80:	f012 f866 	bl	1fb50 <atomic_test_bit>
    da84:	b928      	cbnz	r0, da92 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    da86:	4620      	mov	r0, r4
    da88:	f012 f8fd 	bl	1fc86 <smp_reset>
}
    da8c:	b009      	add	sp, #36	; 0x24
    da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    da92:	2105      	movs	r1, #5
    da94:	4628      	mov	r0, r5
    da96:	f012 f85b 	bl	1fb50 <atomic_test_bit>
    da9a:	b198      	cbz	r0, dac4 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    da9c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    daa0:	071a      	lsls	r2, r3, #28
    daa2:	d507      	bpl.n	dab4 <bt_smp_encrypt_change+0x54>
    daa4:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    daa8:	071b      	lsls	r3, r3, #28
    daaa:	d503      	bpl.n	dab4 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    daac:	2110      	movs	r1, #16
    daae:	4628      	mov	r0, r5
    dab0:	f011 ff86 	bl	1f9c0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    dab4:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    dab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    dabc:	f023 0308 	bic.w	r3, r3, #8
    dac0:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    dac4:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    dac8:	07df      	lsls	r7, r3, #31
    daca:	d51f      	bpl.n	db0c <bt_smp_encrypt_change+0xac>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    dacc:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dace:	f104 0090 	add.w	r0, r4, #144	; 0x90
    dad2:	f011 ff75 	bl	1f9c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    dad6:	2102      	movs	r1, #2
    dad8:	4628      	mov	r0, r5
    dada:	f011 ff71 	bl	1f9c0 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    dade:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    dae0:	f8d6 709c 	ldr.w	r7, [r6, #156]	; 0x9c
	if (!keys) {
    dae4:	b9d7      	cbnz	r7, db1c <bt_smp_encrypt_change+0xbc>
    dae6:	4a8b      	ldr	r2, [pc, #556]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
    dae8:	4c8b      	ldr	r4, [pc, #556]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    daea:	f106 0070 	add.w	r0, r6, #112	; 0x70
    daee:	1aa4      	subs	r4, r4, r2
    daf0:	f7f9 f954 	bl	6d9c <bt_addr_le_str_real>
    daf4:	f7f6 fa04 	bl	3f00 <log_strdup>
    daf8:	08e4      	lsrs	r4, r4, #3
    dafa:	01a4      	lsls	r4, r4, #6
    dafc:	f044 0401 	orr.w	r4, r4, #1
    db00:	4601      	mov	r1, r0
    db02:	4622      	mov	r2, r4
    db04:	4885      	ldr	r0, [pc, #532]	; (dd1c <bt_smp_encrypt_change+0x2bc>)
    db06:	f00f fddc 	bl	1d6c2 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    db0a:	e7bf      	b.n	da8c <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    db0c:	079e      	lsls	r6, r3, #30
    db0e:	d501      	bpl.n	db14 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    db10:	2108      	movs	r1, #8
    db12:	e7dc      	b.n	dace <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    db14:	0758      	lsls	r0, r3, #29
    db16:	d5de      	bpl.n	dad6 <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    db18:	210a      	movs	r1, #10
    db1a:	e7d8      	b.n	dace <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    db1c:	2105      	movs	r1, #5
    db1e:	f012 f817 	bl	1fb50 <atomic_test_bit>
    db22:	4682      	mov	sl, r0
    db24:	b9d0      	cbnz	r0, db5c <bt_smp_encrypt_change+0xfc>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    db26:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    db2a:	07d9      	lsls	r1, r3, #31
    db2c:	d516      	bpl.n	db5c <bt_smp_encrypt_change+0xfc>
	struct bt_keys *keys = conn->le.keys;
    db2e:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    db30:	211a      	movs	r1, #26
    db32:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    db34:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
		bt_rand((void *)&rand, sizeof(rand));
    db38:	f003 fbd6 	bl	112e8 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    db3c:	2106      	movs	r1, #6
    db3e:	4620      	mov	r0, r4
    db40:	f012 f80f 	bl	1fb62 <smp_create_pdu.isra.0>
		if (!buf) {
    db44:	4681      	mov	r9, r0
    db46:	bb00      	cbnz	r0, db8a <bt_smp_encrypt_change+0x12a>
    db48:	4973      	ldr	r1, [pc, #460]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
    db4a:	4b72      	ldr	r3, [pc, #456]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    db4c:	4874      	ldr	r0, [pc, #464]	; (dd20 <bt_smp_encrypt_change+0x2c0>)
    db4e:	1ac9      	subs	r1, r1, r3
    db50:	08c9      	lsrs	r1, r1, #3
    db52:	0189      	lsls	r1, r1, #6
    db54:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    db58:	f00f fda6 	bl	1d6a8 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    db5c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    db60:	079a      	lsls	r2, r3, #30
    db62:	f140 809d 	bpl.w	dca0 <bt_smp_encrypt_change+0x240>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    db66:	2108      	movs	r1, #8
    db68:	4620      	mov	r0, r4
    db6a:	f011 fffa 	bl	1fb62 <smp_create_pdu.isra.0>
		if (!buf) {
    db6e:	4680      	mov	r8, r0
    db70:	2800      	cmp	r0, #0
    db72:	d163      	bne.n	dc3c <bt_smp_encrypt_change+0x1dc>
    db74:	4968      	ldr	r1, [pc, #416]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
    db76:	4b67      	ldr	r3, [pc, #412]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
			BT_ERR("Unable to allocate Ident Info buffer");
    db78:	486a      	ldr	r0, [pc, #424]	; (dd24 <bt_smp_encrypt_change+0x2c4>)
    db7a:	1ac9      	subs	r1, r1, r3
    db7c:	08c9      	lsrs	r1, r1, #3
    db7e:	0189      	lsls	r1, r1, #6
    db80:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    db84:	f00f fd90 	bl	1d6a8 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    db88:	e780      	b.n	da8c <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    db8a:	2110      	movs	r1, #16
    db8c:	3008      	adds	r0, #8
    db8e:	f012 fad8 	bl	20142 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    db92:	f898 2008 	ldrb.w	r2, [r8, #8]
    db96:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    db98:	4683      	mov	fp, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    db9a:	f010 fca5 	bl	1e4e8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    db9e:	f898 0008 	ldrb.w	r0, [r8, #8]
    dba2:	280f      	cmp	r0, #15
    dba4:	d805      	bhi.n	dbb2 <bt_smp_encrypt_change+0x152>
			(void)memset(info->ltk + keys->enc_size, 0,
    dba6:	f1c0 0210 	rsb	r2, r0, #16
    dbaa:	4651      	mov	r1, sl
    dbac:	4458      	add	r0, fp
    dbae:	f010 fcc6 	bl	1e53e <memset>
		smp_send(smp, buf, NULL, NULL);
    dbb2:	4649      	mov	r1, r9
    dbb4:	2200      	movs	r2, #0
    dbb6:	4620      	mov	r0, r4
    dbb8:	f7ff f92a 	bl	ce10 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    dbbc:	2107      	movs	r1, #7
    dbbe:	4620      	mov	r0, r4
    dbc0:	f011 ffcf 	bl	1fb62 <smp_create_pdu.isra.0>
		if (!buf) {
    dbc4:	4681      	mov	r9, r0
    dbc6:	b940      	cbnz	r0, dbda <bt_smp_encrypt_change+0x17a>
    dbc8:	4953      	ldr	r1, [pc, #332]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
    dbca:	4b52      	ldr	r3, [pc, #328]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
			BT_ERR("Unable to allocate Master Ident buffer");
    dbcc:	4856      	ldr	r0, [pc, #344]	; (dd28 <bt_smp_encrypt_change+0x2c8>)
    dbce:	1ac9      	subs	r1, r1, r3
    dbd0:	08c9      	lsrs	r1, r1, #3
    dbd2:	0189      	lsls	r1, r1, #6
    dbd4:	f041 0101 	orr.w	r1, r1, #1
    dbd8:	e7be      	b.n	db58 <bt_smp_encrypt_change+0xf8>
		ident = net_buf_add(buf, sizeof(*ident));
    dbda:	210a      	movs	r1, #10
    dbdc:	3008      	adds	r0, #8
    dbde:	f012 fab0 	bl	20142 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dbe2:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    dbe4:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dbe6:	a905      	add	r1, sp, #20
    dbe8:	3002      	adds	r0, #2
    dbea:	f010 fc7d 	bl	1e4e8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    dbee:	2202      	movs	r2, #2
    dbf0:	a907      	add	r1, sp, #28
    dbf2:	4650      	mov	r0, sl
    dbf4:	f010 fc78 	bl	1e4e8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    dbf8:	4649      	mov	r1, r9
    dbfa:	4620      	mov	r0, r4
    dbfc:	4a4b      	ldr	r2, [pc, #300]	; (dd2c <bt_smp_encrypt_change+0x2cc>)
    dbfe:	f7ff f907 	bl	ce10 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dc02:	210c      	movs	r1, #12
    dc04:	4628      	mov	r0, r5
    dc06:	f011 ffa3 	bl	1fb50 <atomic_test_bit>
    dc0a:	2800      	cmp	r0, #0
    dc0c:	d0a6      	beq.n	db5c <bt_smp_encrypt_change+0xfc>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    dc0e:	4640      	mov	r0, r8
    dc10:	2101      	movs	r1, #1
    dc12:	f012 fa59 	bl	200c8 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    dc16:	a901      	add	r1, sp, #4
    dc18:	2210      	movs	r2, #16
    dc1a:	f108 006e 	add.w	r0, r8, #110	; 0x6e
    dc1e:	f010 fc63 	bl	1e4e8 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    dc22:	a905      	add	r1, sp, #20
    dc24:	2208      	movs	r2, #8
    dc26:	f108 0064 	add.w	r0, r8, #100	; 0x64
    dc2a:	f010 fc5d 	bl	1e4e8 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    dc2e:	2202      	movs	r2, #2
    dc30:	a907      	add	r1, sp, #28
    dc32:	f108 006c 	add.w	r0, r8, #108	; 0x6c
    dc36:	f010 fc57 	bl	1e4e8 <memcpy>
    dc3a:	e78f      	b.n	db5c <bt_smp_encrypt_change+0xfc>
		id_info = net_buf_add(buf, sizeof(*id_info));
    dc3c:	2110      	movs	r1, #16
    dc3e:	3008      	adds	r0, #8
    dc40:	f012 fa7f 	bl	20142 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    dc44:	7a31      	ldrb	r1, [r6, #8]
    dc46:	f8df 90f8 	ldr.w	r9, [pc, #248]	; dd40 <bt_smp_encrypt_change+0x2e0>
    dc4a:	23d8      	movs	r3, #216	; 0xd8
    dc4c:	2210      	movs	r2, #16
    dc4e:	fb12 3101 	smlabb	r1, r2, r1, r3
    dc52:	4449      	add	r1, r9
    dc54:	f010 fc48 	bl	1e4e8 <memcpy>
		smp_send(smp, buf, NULL, NULL);
    dc58:	4641      	mov	r1, r8
    dc5a:	2200      	movs	r2, #0
    dc5c:	4620      	mov	r0, r4
    dc5e:	f7ff f8d7 	bl	ce10 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    dc62:	2109      	movs	r1, #9
    dc64:	4620      	mov	r0, r4
    dc66:	f011 ff7c 	bl	1fb62 <smp_create_pdu.isra.0>
		if (!buf) {
    dc6a:	4680      	mov	r8, r0
    dc6c:	b940      	cbnz	r0, dc80 <bt_smp_encrypt_change+0x220>
    dc6e:	492a      	ldr	r1, [pc, #168]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
    dc70:	4b28      	ldr	r3, [pc, #160]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    dc72:	482f      	ldr	r0, [pc, #188]	; (dd30 <bt_smp_encrypt_change+0x2d0>)
    dc74:	1ac9      	subs	r1, r1, r3
    dc76:	08c9      	lsrs	r1, r1, #3
    dc78:	0189      	lsls	r1, r1, #6
    dc7a:	f041 0101 	orr.w	r1, r1, #1
    dc7e:	e781      	b.n	db84 <bt_smp_encrypt_change+0x124>
		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    dc80:	2107      	movs	r1, #7
    dc82:	3008      	adds	r0, #8
    dc84:	f012 fa5d 	bl	20142 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    dc88:	7a31      	ldrb	r1, [r6, #8]
    dc8a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
    dc8e:	2207      	movs	r2, #7
    dc90:	4449      	add	r1, r9
    dc92:	f010 fc29 	bl	1e4e8 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    dc96:	4a27      	ldr	r2, [pc, #156]	; (dd34 <bt_smp_encrypt_change+0x2d4>)
    dc98:	4641      	mov	r1, r8
    dc9a:	4620      	mov	r0, r4
    dc9c:	f7ff f8b8 	bl	ce10 <smp_send.isra.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    dca0:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    dca4:	075b      	lsls	r3, r3, #29
    dca6:	d52c      	bpl.n	dd02 <bt_smp_encrypt_change+0x2a2>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    dca8:	210a      	movs	r1, #10
    dcaa:	4620      	mov	r0, r4
    dcac:	f011 ff59 	bl	1fb62 <smp_create_pdu.isra.0>
		if (!buf) {
    dcb0:	4606      	mov	r6, r0
    dcb2:	b940      	cbnz	r0, dcc6 <bt_smp_encrypt_change+0x266>
    dcb4:	4918      	ldr	r1, [pc, #96]	; (dd18 <bt_smp_encrypt_change+0x2b8>)
    dcb6:	4b17      	ldr	r3, [pc, #92]	; (dd14 <bt_smp_encrypt_change+0x2b4>)
			BT_ERR("Unable to allocate Signing Info buffer");
    dcb8:	481f      	ldr	r0, [pc, #124]	; (dd38 <bt_smp_encrypt_change+0x2d8>)
    dcba:	1ac9      	subs	r1, r1, r3
    dcbc:	08c9      	lsrs	r1, r1, #3
    dcbe:	0189      	lsls	r1, r1, #6
    dcc0:	f041 0101 	orr.w	r1, r1, #1
    dcc4:	e75e      	b.n	db84 <bt_smp_encrypt_change+0x124>
		info = net_buf_add(buf, sizeof(*info));
    dcc6:	2110      	movs	r1, #16
    dcc8:	3008      	adds	r0, #8
    dcca:	f012 fa3a 	bl	20142 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    dcce:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    dcd0:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    dcd2:	f003 fb09 	bl	112e8 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dcd6:	210c      	movs	r1, #12
    dcd8:	4628      	mov	r0, r5
    dcda:	f011 ff39 	bl	1fb50 <atomic_test_bit>
    dcde:	b158      	cbz	r0, dcf8 <bt_smp_encrypt_change+0x298>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    dce0:	2108      	movs	r1, #8
    dce2:	4638      	mov	r0, r7
    dce4:	f012 f9f0 	bl	200c8 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    dce8:	2210      	movs	r2, #16
    dcea:	4641      	mov	r1, r8
    dcec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
    dcf0:	f010 fbfa 	bl	1e4e8 <memcpy>
			keys->local_csrk.cnt = 0U;
    dcf4:	2300      	movs	r3, #0
    dcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    dcf8:	4a10      	ldr	r2, [pc, #64]	; (dd3c <bt_smp_encrypt_change+0x2dc>)
    dcfa:	4631      	mov	r1, r6
    dcfc:	4620      	mov	r0, r4
    dcfe:	f7ff f887 	bl	ce10 <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
    dd02:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
    dd06:	2900      	cmp	r1, #0
    dd08:	f47f aec0 	bne.w	da8c <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    dd0c:	4620      	mov	r0, r4
    dd0e:	f7ff fc83 	bl	d618 <smp_pairing_complete>
    dd12:	e6bb      	b.n	da8c <bt_smp_encrypt_change+0x2c>
    dd14:	00021114 	.word	0x00021114
    dd18:	00021204 	.word	0x00021204
    dd1c:	00024a86 	.word	0x00024a86
    dd20:	00024a9b 	.word	0x00024a9b
    dd24:	00024ae9 	.word	0x00024ae9
    dd28:	00024ac2 	.word	0x00024ac2
    dd2c:	0001fd3f 	.word	0x0001fd3f
    dd30:	00024b0e 	.word	0x00024b0e
    dd34:	0001fd4b 	.word	0x0001fd4b
    dd38:	00024b38 	.word	0x00024b38
    dd3c:	0001fd59 	.word	0x0001fd59
    dd40:	20005888 	.word	0x20005888

0000dd44 <smp_pairing_random>:
{
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    dd4a:	f100 07c7 	add.w	r7, r0, #199	; 0xc7
    dd4e:	6889      	ldr	r1, [r1, #8]
{
    dd50:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    dd52:	2210      	movs	r2, #16
    dd54:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dd56:	f104 0694 	add.w	r6, r4, #148	; 0x94
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    dd5a:	f010 fbc5 	bl	1e4e8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dd5e:	2105      	movs	r1, #5
    dd60:	4630      	mov	r0, r6
    dd62:	f011 fef5 	bl	1fb50 <atomic_test_bit>
    dd66:	2800      	cmp	r0, #0
    dd68:	d13d      	bne.n	dde6 <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    dd6a:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    dd6c:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    dd6e:	f858 3bd7 	ldr.w	r3, [r8], #215
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    dd72:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    dd74:	f103 027e 	add.w	r2, r3, #126	; 0x7e
    dd78:	3377      	adds	r3, #119	; 0x77
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    dd7a:	9201      	str	r2, [sp, #4]
    dd7c:	9300      	str	r3, [sp, #0]
    dd7e:	f104 0299 	add.w	r2, r4, #153	; 0x99
    dd82:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    dd86:	4639      	mov	r1, r7
    dd88:	4640      	mov	r0, r8
    dd8a:	f011 ffec 	bl	1fd66 <smp_c1>
	if (err) {
    dd8e:	b108      	cbz	r0, dd94 <smp_pairing_random+0x50>
	switch (smp->method) {
    dd90:	2508      	movs	r5, #8
    dd92:	e096      	b.n	dec2 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    dd94:	2210      	movs	r2, #16
    dd96:	4629      	mov	r1, r5
    dd98:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    dd9c:	f010 fb94 	bl	1e4c8 <memcmp>
    dda0:	2800      	cmp	r0, #0
    dda2:	f040 808d 	bne.w	dec0 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    dda6:	2208      	movs	r2, #8
    dda8:	4639      	mov	r1, r7
    ddaa:	4628      	mov	r0, r5
    ddac:	f010 fb9c 	bl	1e4e8 <memcpy>
	memcpy(out + 8, r1, 8);
    ddb0:	2208      	movs	r2, #8
    ddb2:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    ddb6:	a80c      	add	r0, sp, #48	; 0x30
    ddb8:	f010 fb96 	bl	1e4e8 <memcpy>
	return bt_encrypt_le(k, out, out);
    ddbc:	462a      	mov	r2, r5
    ddbe:	4629      	mov	r1, r5
    ddc0:	4640      	mov	r0, r8
    ddc2:	f003 fa93 	bl	112ec <bt_encrypt_le>
		if (err) {
    ddc6:	2800      	cmp	r0, #0
    ddc8:	d1e2      	bne.n	dd90 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    ddca:	4629      	mov	r1, r5
    ddcc:	2210      	movs	r2, #16
    ddce:	4640      	mov	r0, r8
    ddd0:	f010 fb8a 	bl	1e4e8 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ddd4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ddd6:	4630      	mov	r0, r6
    ddd8:	f011 fdf2 	bl	1f9c0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    dddc:	4620      	mov	r0, r4
    ddde:	f011 fedf 	bl	1fba0 <smp_send_pairing_random>
    dde2:	4605      	mov	r5, r0
    dde4:	e06d      	b.n	dec2 <smp_pairing_random+0x17e>
	switch (smp->method) {
    dde6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    ddea:	2b05      	cmp	r3, #5
    ddec:	d8d0      	bhi.n	dd90 <smp_pairing_random+0x4c>
    ddee:	a201      	add	r2, pc, #4	; (adr r2, ddf4 <smp_pairing_random+0xb0>)
    ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ddf4:	0000de7b 	.word	0x0000de7b
    ddf8:	0000de89 	.word	0x0000de89
    ddfc:	0000de89 	.word	0x0000de89
    de00:	0000de0d 	.word	0x0000de0d
    de04:	0000dd91 	.word	0x0000dd91
    de08:	0000df15 	.word	0x0000df15
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    de0c:	4b5a      	ldr	r3, [pc, #360]	; (df78 <smp_pairing_random+0x234>)
    de0e:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    de10:	2220      	movs	r2, #32
    de12:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    de16:	a80a      	add	r0, sp, #40	; 0x28
    de18:	f011 fdb9 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    de1c:	2220      	movs	r2, #32
    de1e:	4629      	mov	r1, r5
    de20:	a812      	add	r0, sp, #72	; 0x48
    de22:	f011 fdb4 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    de26:	2210      	movs	r2, #16
    de28:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    de2c:	a81a      	add	r0, sp, #104	; 0x68
    de2e:	f011 fdae 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    de32:	2210      	movs	r2, #16
    de34:	4639      	mov	r1, r7
    de36:	a806      	add	r0, sp, #24
    de38:	f011 fda9 	bl	1f98e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    de3c:	ab06      	add	r3, sp, #24
    de3e:	2250      	movs	r2, #80	; 0x50
    de40:	a90a      	add	r1, sp, #40	; 0x28
    de42:	4618      	mov	r0, r3
    de44:	f011 fdca 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
    de48:	2800      	cmp	r0, #0
    de4a:	d1a1      	bne.n	dd90 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    de4c:	2204      	movs	r2, #4
    de4e:	a909      	add	r1, sp, #36	; 0x24
    de50:	a805      	add	r0, sp, #20
    de52:	f010 fb49 	bl	1e4e8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    de56:	9b05      	ldr	r3, [sp, #20]
    de58:	4948      	ldr	r1, [pc, #288]	; (df7c <smp_pairing_random+0x238>)
    de5a:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    de5c:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    de5e:	fbb3 f2f1 	udiv	r2, r3, r1
    de62:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    de66:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    de68:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    de6a:	f011 fda9 	bl	1f9c0 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    de6e:	4b44      	ldr	r3, [pc, #272]	; (df80 <smp_pairing_random+0x23c>)
    de70:	9905      	ldr	r1, [sp, #20]
    de72:	681b      	ldr	r3, [r3, #0]
    de74:	6820      	ldr	r0, [r4, #0]
    de76:	689b      	ldr	r3, [r3, #8]
    de78:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    de7a:	210d      	movs	r1, #13
    de7c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    de80:	f011 fd9e 	bl	1f9c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    de84:	210f      	movs	r1, #15
    de86:	e7a6      	b.n	ddd6 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    de88:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
    de8c:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    de90:	4939      	ldr	r1, [pc, #228]	; (df78 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    de92:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    de94:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    de96:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    de9a:	9500      	str	r5, [sp, #0]
    de9c:	6809      	ldr	r1, [r1, #0]
    de9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dea2:	463a      	mov	r2, r7
    dea4:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    dea8:	f011 fdb4 	bl	1fa14 <smp_f4>
    deac:	2800      	cmp	r0, #0
    deae:	f47f af6f 	bne.w	dd90 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    deb2:	2210      	movs	r2, #16
    deb4:	4629      	mov	r1, r5
    deb6:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    deba:	f010 fb05 	bl	1e4c8 <memcmp>
    debe:	b120      	cbz	r0, deca <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    dec0:	2504      	movs	r5, #4
}
    dec2:	4628      	mov	r0, r5
    dec4:	b01e      	add	sp, #120	; 0x78
    dec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    deca:	f104 0790 	add.w	r7, r4, #144	; 0x90
    dece:	2103      	movs	r1, #3
    ded0:	4638      	mov	r0, r7
    ded2:	f011 fd75 	bl	1f9c0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    ded6:	4620      	mov	r0, r4
    ded8:	f011 fe62 	bl	1fba0 <smp_send_pairing_random>
		if (err) {
    dedc:	4605      	mov	r5, r0
    dede:	2800      	cmp	r0, #0
    dee0:	d1ef      	bne.n	dec2 <smp_pairing_random+0x17e>
		smp->passkey_round++;
    dee2:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
    dee6:	3301      	adds	r3, #1
    dee8:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    deea:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    deec:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
		if (smp->passkey_round == 20U) {
    def0:	d108      	bne.n	df04 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    def2:	4638      	mov	r0, r7
    def4:	210d      	movs	r1, #13
    def6:	f011 fd63 	bl	1f9c0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    defa:	210f      	movs	r1, #15
    defc:	4630      	mov	r0, r6
    defe:	f011 fd5f 	bl	1f9c0 <atomic_set_bit>
			return 0;
    df02:	e7de      	b.n	dec2 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    df04:	2110      	movs	r1, #16
    df06:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    df0a:	f003 f9ed 	bl	112e8 <bt_rand>
    df0e:	2800      	cmp	r0, #0
    df10:	d0d7      	beq.n	dec2 <smp_pairing_random+0x17e>
    df12:	e73d      	b.n	dd90 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    df14:	2110      	movs	r1, #16
    df16:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    df1a:	f003 f9e5 	bl	112e8 <bt_rand>
    df1e:	2800      	cmp	r0, #0
    df20:	f47f af36 	bne.w	dd90 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    df24:	4f16      	ldr	r7, [pc, #88]	; (df80 <smp_pairing_random+0x23c>)
    df26:	683b      	ldr	r3, [r7, #0]
    df28:	b193      	cbz	r3, df50 <smp_pairing_random+0x20c>
    df2a:	68db      	ldr	r3, [r3, #12]
    df2c:	b183      	cbz	r3, df50 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    df2e:	4b15      	ldr	r3, [pc, #84]	; (df84 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    df30:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
			struct bt_conn_oob_info info = {
    df34:	881b      	ldrh	r3, [r3, #0]
    df36:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    df3a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    df3e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    df40:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    df44:	d406      	bmi.n	df54 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    df46:	2b00      	cmp	r3, #0
    df48:	bf0c      	ite	eq
    df4a:	2003      	moveq	r0, #3
    df4c:	2001      	movne	r0, #1
    df4e:	e004      	b.n	df5a <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    df50:	2502      	movs	r5, #2
    df52:	e7b6      	b.n	dec2 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    df54:	2b00      	cmp	r3, #0
    df56:	bf18      	it	ne
    df58:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    df5a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    df5c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    df60:	e9c4 555c 	strd	r5, r5, [r4, #368]	; 0x170
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    df64:	4630      	mov	r0, r6
    df66:	210b      	movs	r1, #11
    df68:	f011 fd2a 	bl	1f9c0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    df6c:	683b      	ldr	r3, [r7, #0]
    df6e:	6820      	ldr	r0, [r4, #0]
    df70:	68db      	ldr	r3, [r3, #12]
    df72:	a90a      	add	r1, sp, #40	; 0x28
    df74:	4798      	blx	r3
			return 0;
    df76:	e7a4      	b.n	dec2 <smp_pairing_random+0x17e>
    df78:	20000714 	.word	0x20000714
    df7c:	000f4240 	.word	0x000f4240
    df80:	20000360 	.word	0x20000360
    df84:	0002132d 	.word	0x0002132d

0000df88 <smp_public_key>:
{
    df88:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    df8a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    df8c:	f100 04e7 	add.w	r4, r0, #231	; 0xe7
{
    df90:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    df92:	2220      	movs	r2, #32
    df94:	4631      	mov	r1, r6
    df96:	4620      	mov	r0, r4
    df98:	f010 faa6 	bl	1e4e8 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    df9c:	2220      	movs	r2, #32
    df9e:	18b1      	adds	r1, r6, r2
    dfa0:	f205 1007 	addw	r0, r5, #263	; 0x107
    dfa4:	f010 faa0 	bl	1e4e8 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    dfa8:	4920      	ldr	r1, [pc, #128]	; (e02c <smp_public_key+0xa4>)
    dfaa:	2240      	movs	r2, #64	; 0x40
    dfac:	4620      	mov	r0, r4
    dfae:	f010 fa8b 	bl	1e4c8 <memcmp>
    dfb2:	b148      	cbz	r0, dfc8 <smp_public_key+0x40>
	if (!sc_public_key) {
    dfb4:	4b1e      	ldr	r3, [pc, #120]	; (e030 <smp_public_key+0xa8>)
    dfb6:	681c      	ldr	r4, [r3, #0]
    dfb8:	bb74      	cbnz	r4, e018 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    dfba:	f105 0094 	add.w	r0, r5, #148	; 0x94
    dfbe:	2106      	movs	r1, #6
    dfc0:	f011 fcfe 	bl	1f9c0 <atomic_set_bit>
		return 0;
    dfc4:	4620      	mov	r0, r4
}
    dfc6:	bd70      	pop	{r4, r5, r6, pc}
    dfc8:	4b1a      	ldr	r3, [pc, #104]	; (e034 <smp_public_key+0xac>)
    dfca:	491b      	ldr	r1, [pc, #108]	; (e038 <smp_public_key+0xb0>)
		BT_INFO("Remote is using Debug Public key");
    dfcc:	481b      	ldr	r0, [pc, #108]	; (e03c <smp_public_key+0xb4>)
    dfce:	1ac9      	subs	r1, r1, r3
    dfd0:	08c9      	lsrs	r1, r1, #3
    dfd2:	0189      	lsls	r1, r1, #6
    dfd4:	f041 0103 	orr.w	r1, r1, #3
    dfd8:	f00f fb66 	bl	1d6a8 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    dfdc:	210d      	movs	r1, #13
    dfde:	f105 0094 	add.w	r0, r5, #148	; 0x94
    dfe2:	f011 fced 	bl	1f9c0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    dfe6:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    dfe8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    dfec:	b933      	cbnz	r3, dffc <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    dfee:	7a20      	ldrb	r0, [r4, #8]
    dff0:	f104 0170 	add.w	r1, r4, #112	; 0x70
    dff4:	f000 fafe 	bl	e5f4 <bt_keys_get_addr>
    dff8:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!conn->le.keys ||
    dffc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    e000:	2b00      	cmp	r3, #0
    e002:	d0d7      	beq.n	dfb4 <smp_public_key+0x2c>
    e004:	895a      	ldrh	r2, [r3, #10]
    e006:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e00a:	2a00      	cmp	r2, #0
    e00c:	d0d2      	beq.n	dfb4 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    e00e:	7a5b      	ldrb	r3, [r3, #9]
    e010:	079b      	lsls	r3, r3, #30
    e012:	d5cf      	bpl.n	dfb4 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e014:	2003      	movs	r0, #3
    e016:	e7d6      	b.n	dfc6 <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    e018:	4628      	mov	r0, r5
    e01a:	f7ff f89b 	bl	d154 <sc_send_public_key>
	if (err) {
    e01e:	2800      	cmp	r0, #0
    e020:	d1d1      	bne.n	dfc6 <smp_public_key+0x3e>
    e022:	4628      	mov	r0, r5
}
    e024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e028:	f7fe bf48 	b.w	cebc <smp_public_key_slave.part.0>
    e02c:	00024c72 	.word	0x00024c72
    e030:	20000714 	.word	0x20000714
    e034:	00021114 	.word	0x00021114
    e038:	00021204 	.word	0x00021204
    e03c:	00024b5f 	.word	0x00024b5f

0000e040 <smp_ident_addr_info>:
{
    e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    e044:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e046:	6805      	ldr	r5, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e048:	7833      	ldrb	r3, [r6, #0]
{
    e04a:	4604      	mov	r4, r0
    e04c:	b31b      	cbz	r3, e096 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    e04e:	79b3      	ldrb	r3, [r6, #6]
    e050:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e054:	2bc0      	cmp	r3, #192	; 0xc0
    e056:	d01e      	beq.n	e096 <smp_ident_addr_info+0x56>
    e058:	4b43      	ldr	r3, [pc, #268]	; (e168 <smp_ident_addr_info+0x128>)
    e05a:	4c44      	ldr	r4, [pc, #272]	; (e16c <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    e05c:	4630      	mov	r0, r6
    e05e:	1ae4      	subs	r4, r4, r3
    e060:	f7f8 fe9c 	bl	6d9c <bt_addr_le_str_real>
    e064:	f7f5 ff4c 	bl	3f00 <log_strdup>
    e068:	08e4      	lsrs	r4, r4, #3
    e06a:	01a4      	lsls	r4, r4, #6
    e06c:	f044 0401 	orr.w	r4, r4, #1
    e070:	4601      	mov	r1, r0
    e072:	4622      	mov	r2, r4
    e074:	483e      	ldr	r0, [pc, #248]	; (e170 <smp_ident_addr_info+0x130>)
    e076:	f00f fb24 	bl	1d6c2 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    e07a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    e07e:	f7f8 fe8d 	bl	6d9c <bt_addr_le_str_real>
    e082:	f7f5 ff3d 	bl	3f00 <log_strdup>
    e086:	4622      	mov	r2, r4
    e088:	4601      	mov	r1, r0
    e08a:	483a      	ldr	r0, [pc, #232]	; (e174 <smp_ident_addr_info+0x134>)
    e08c:	f00f fb19 	bl	1d6c2 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    e090:	200a      	movs	r0, #10
}
    e092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e096:	210c      	movs	r1, #12
    e098:	f104 0094 	add.w	r0, r4, #148	; 0x94
    e09c:	f011 fd58 	bl	1fb50 <atomic_test_bit>
    e0a0:	2800      	cmp	r0, #0
    e0a2:	d048      	beq.n	e136 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e0a4:	f105 0770 	add.w	r7, r5, #112	; 0x70
    e0a8:	7a29      	ldrb	r1, [r5, #8]
    e0aa:	463a      	mov	r2, r7
    e0ac:	2002      	movs	r0, #2
    e0ae:	f011 fffb 	bl	200a8 <bt_keys_get_type>
		if (!keys) {
    e0b2:	4680      	mov	r8, r0
    e0b4:	b990      	cbnz	r0, e0dc <smp_ident_addr_info+0x9c>
    e0b6:	4a2c      	ldr	r2, [pc, #176]	; (e168 <smp_ident_addr_info+0x128>)
    e0b8:	4c2c      	ldr	r4, [pc, #176]	; (e16c <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    e0ba:	4638      	mov	r0, r7
    e0bc:	1aa4      	subs	r4, r4, r2
    e0be:	f7f8 fe6d 	bl	6d9c <bt_addr_le_str_real>
    e0c2:	f7f5 ff1d 	bl	3f00 <log_strdup>
    e0c6:	08e4      	lsrs	r4, r4, #3
    e0c8:	01a4      	lsls	r4, r4, #6
    e0ca:	f044 0401 	orr.w	r4, r4, #1
    e0ce:	4601      	mov	r1, r0
    e0d0:	4622      	mov	r2, r4
    e0d2:	4829      	ldr	r0, [pc, #164]	; (e178 <smp_ident_addr_info+0x138>)
    e0d4:	f00f faf5 	bl	1d6c2 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e0d8:	2008      	movs	r0, #8
    e0da:	e7da      	b.n	e092 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    e0dc:	78eb      	ldrb	r3, [r5, #3]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d13f      	bne.n	e162 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    e0e2:	f105 017e 	add.w	r1, r5, #126	; 0x7e
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e0e6:	780b      	ldrb	r3, [r1, #0]
    e0e8:	2b01      	cmp	r3, #1
    e0ea:	d121      	bne.n	e130 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    e0ec:	798b      	ldrb	r3, [r1, #6]
    e0ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e0f2:	2b40      	cmp	r3, #64	; 0x40
    e0f4:	d11c      	bne.n	e130 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    e0f6:	2206      	movs	r2, #6
    e0f8:	3101      	adds	r1, #1
    e0fa:	f108 0036 	add.w	r0, r8, #54	; 0x36
    e0fe:	f010 f9f3 	bl	1e4e8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e102:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    e106:	b19b      	cbz	r3, e130 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    e108:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    e10c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e110:	2bc0      	cmp	r3, #192	; 0xc0
    e112:	d00d      	beq.n	e130 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    e114:	2207      	movs	r2, #7
    e116:	4631      	mov	r1, r6
    e118:	f108 0001 	add.w	r0, r8, #1
    e11c:	f010 f9e4 	bl	1e4e8 <memcpy>
    e120:	2207      	movs	r2, #7
    e122:	4631      	mov	r1, r6
    e124:	4638      	mov	r0, r7
    e126:	f010 f9df 	bl	1e4e8 <memcpy>
				bt_conn_identity_resolved(conn);
    e12a:	4628      	mov	r0, r5
    e12c:	f7fb fd66 	bl	9bfc <bt_conn_identity_resolved>
		bt_id_add(keys);
    e130:	4640      	mov	r0, r8
    e132:	f7fa fa93 	bl	865c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e136:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    e13a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e13e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e140:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e144:	d504      	bpl.n	e150 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e146:	210a      	movs	r1, #10
    e148:	f104 0090 	add.w	r0, r4, #144	; 0x90
    e14c:	f011 fc38 	bl	1f9c0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    e150:	f8b4 5178 	ldrh.w	r5, [r4, #376]	; 0x178
    e154:	b91d      	cbnz	r5, e15e <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    e156:	4629      	mov	r1, r5
    e158:	4620      	mov	r0, r4
    e15a:	f7ff fa5d 	bl	d618 <smp_pairing_complete>
	return 0;
    e15e:	2000      	movs	r0, #0
    e160:	e797      	b.n	e092 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    e162:	f105 0177 	add.w	r1, r5, #119	; 0x77
    e166:	e7be      	b.n	e0e6 <smp_ident_addr_info+0xa6>
    e168:	00021114 	.word	0x00021114
    e16c:	00021204 	.word	0x00021204
    e170:	00024b80 	.word	0x00024b80
    e174:	00024bae 	.word	0x00024bae
    e178:	00024971 	.word	0x00024971

0000e17c <bt_smp_sign_verify>:
{
    e17c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 *
 * @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
    e17e:	898b      	ldrh	r3, [r1, #12]
    e180:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e182:	6889      	ldr	r1, [r1, #8]
{
    e184:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e186:	3b0c      	subs	r3, #12
    e188:	4419      	add	r1, r3
    e18a:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e18c:	f106 0570 	add.w	r5, r6, #112	; 0x70
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e190:	a801      	add	r0, sp, #4
    e192:	f010 f9a9 	bl	1e4e8 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e196:	7a31      	ldrb	r1, [r6, #8]
    e198:	462a      	mov	r2, r5
    e19a:	2010      	movs	r0, #16
    e19c:	f000 fa98 	bl	e6d0 <bt_keys_find>
	if (!keys) {
    e1a0:	4606      	mov	r6, r0
    e1a2:	b9a0      	cbnz	r0, e1ce <bt_smp_sign_verify+0x52>
    e1a4:	4a2e      	ldr	r2, [pc, #184]	; (e260 <bt_smp_sign_verify+0xe4>)
    e1a6:	4c2f      	ldr	r4, [pc, #188]	; (e264 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    e1a8:	4628      	mov	r0, r5
    e1aa:	1aa4      	subs	r4, r4, r2
    e1ac:	f7f8 fdf6 	bl	6d9c <bt_addr_le_str_real>
    e1b0:	f7f5 fea6 	bl	3f00 <log_strdup>
    e1b4:	08e4      	lsrs	r4, r4, #3
    e1b6:	01a4      	lsls	r4, r4, #6
    e1b8:	f044 0401 	orr.w	r4, r4, #1
    e1bc:	4601      	mov	r1, r0
    e1be:	4622      	mov	r2, r4
    e1c0:	4829      	ldr	r0, [pc, #164]	; (e268 <bt_smp_sign_verify+0xec>)
    e1c2:	f00f fa7e 	bl	1d6c2 <log_1>
		return -ENOENT;
    e1c6:	f06f 0001 	mvn.w	r0, #1
}
    e1ca:	b004      	add	sp, #16
    e1cc:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    e1ce:	6e03      	ldr	r3, [r0, #96]	; 0x60
    e1d0:	9300      	str	r3, [sp, #0]
    e1d2:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    e1d4:	68a0      	ldr	r0, [r4, #8]
    e1d6:	3b0c      	subs	r3, #12
    e1d8:	2204      	movs	r2, #4
    e1da:	4669      	mov	r1, sp
    e1dc:	4418      	add	r0, r3
    e1de:	f010 f983 	bl	1e4e8 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    e1e2:	89a2      	ldrh	r2, [r4, #12]
    e1e4:	68a1      	ldr	r1, [r4, #8]
    e1e6:	3a0c      	subs	r2, #12
    e1e8:	b292      	uxth	r2, r2
    e1ea:	f106 0050 	add.w	r0, r6, #80	; 0x50
    e1ee:	f7fe fd59 	bl	cca4 <smp_sign_buf>
	if (err) {
    e1f2:	b198      	cbz	r0, e21c <bt_smp_sign_verify+0xa0>
    e1f4:	4a1a      	ldr	r2, [pc, #104]	; (e260 <bt_smp_sign_verify+0xe4>)
    e1f6:	4c1b      	ldr	r4, [pc, #108]	; (e264 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    e1f8:	4628      	mov	r0, r5
    e1fa:	1aa4      	subs	r4, r4, r2
    e1fc:	f7f8 fdce 	bl	6d9c <bt_addr_le_str_real>
    e200:	f7f5 fe7e 	bl	3f00 <log_strdup>
    e204:	08e4      	lsrs	r4, r4, #3
    e206:	01a4      	lsls	r4, r4, #6
    e208:	f044 0401 	orr.w	r4, r4, #1
    e20c:	4601      	mov	r1, r0
    e20e:	4622      	mov	r2, r4
    e210:	4816      	ldr	r0, [pc, #88]	; (e26c <bt_smp_sign_verify+0xf0>)
    e212:	f00f fa56 	bl	1d6c2 <log_1>
		return -EIO;
    e216:	f06f 0004 	mvn.w	r0, #4
    e21a:	e7d6      	b.n	e1ca <bt_smp_sign_verify+0x4e>
    e21c:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    e21e:	68a1      	ldr	r1, [r4, #8]
    e220:	3b0c      	subs	r3, #12
    e222:	220c      	movs	r2, #12
    e224:	4419      	add	r1, r3
    e226:	a801      	add	r0, sp, #4
    e228:	f010 f94e 	bl	1e4c8 <memcmp>
    e22c:	b198      	cbz	r0, e256 <bt_smp_sign_verify+0xda>
    e22e:	4a0c      	ldr	r2, [pc, #48]	; (e260 <bt_smp_sign_verify+0xe4>)
    e230:	4c0c      	ldr	r4, [pc, #48]	; (e264 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    e232:	4628      	mov	r0, r5
    e234:	1aa4      	subs	r4, r4, r2
    e236:	f7f8 fdb1 	bl	6d9c <bt_addr_le_str_real>
    e23a:	f7f5 fe61 	bl	3f00 <log_strdup>
    e23e:	08e4      	lsrs	r4, r4, #3
    e240:	01a4      	lsls	r4, r4, #6
    e242:	f044 0401 	orr.w	r4, r4, #1
    e246:	4601      	mov	r1, r0
    e248:	4622      	mov	r2, r4
    e24a:	4809      	ldr	r0, [pc, #36]	; (e270 <bt_smp_sign_verify+0xf4>)
    e24c:	f00f fa39 	bl	1d6c2 <log_1>
		return -EBADMSG;
    e250:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    e254:	e7b9      	b.n	e1ca <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    e256:	6e33      	ldr	r3, [r6, #96]	; 0x60
    e258:	3301      	adds	r3, #1
    e25a:	6633      	str	r3, [r6, #96]	; 0x60
	return 0;
    e25c:	e7b5      	b.n	e1ca <bt_smp_sign_verify+0x4e>
    e25e:	bf00      	nop
    e260:	00021114 	.word	0x00021114
    e264:	00021204 	.word	0x00021204
    e268:	00024b94 	.word	0x00024b94
    e26c:	00024bb6 	.word	0x00024bb6
    e270:	00024bd8 	.word	0x00024bd8

0000e274 <bt_smp_sign>:
{
    e274:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e276:	f100 0570 	add.w	r5, r0, #112	; 0x70
{
    e27a:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e27c:	462a      	mov	r2, r5
    e27e:	7a01      	ldrb	r1, [r0, #8]
    e280:	2008      	movs	r0, #8
    e282:	f000 fa25 	bl	e6d0 <bt_keys_find>
	if (!keys) {
    e286:	4604      	mov	r4, r0
    e288:	b9a0      	cbnz	r0, e2b4 <bt_smp_sign+0x40>
    e28a:	4a23      	ldr	r2, [pc, #140]	; (e318 <bt_smp_sign+0xa4>)
    e28c:	4c23      	ldr	r4, [pc, #140]	; (e31c <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    e28e:	4628      	mov	r0, r5
    e290:	1aa4      	subs	r4, r4, r2
    e292:	f7f8 fd83 	bl	6d9c <bt_addr_le_str_real>
    e296:	f7f5 fe33 	bl	3f00 <log_strdup>
    e29a:	08e4      	lsrs	r4, r4, #3
    e29c:	01a4      	lsls	r4, r4, #6
    e29e:	f044 0401 	orr.w	r4, r4, #1
    e2a2:	4601      	mov	r1, r0
    e2a4:	4622      	mov	r2, r4
    e2a6:	481e      	ldr	r0, [pc, #120]	; (e320 <bt_smp_sign+0xac>)
    e2a8:	f00f fa0b 	bl	1d6c2 <log_1>
		return -ENOENT;
    e2ac:	f06f 0001 	mvn.w	r0, #1
}
    e2b0:	b002      	add	sp, #8
    e2b2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_add(buf, 12);
    e2b4:	210c      	movs	r1, #12
    e2b6:	f106 0008 	add.w	r0, r6, #8
    e2ba:	f011 ff42 	bl	20142 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    e2be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e2c0:	9301      	str	r3, [sp, #4]
    e2c2:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    e2c4:	68b0      	ldr	r0, [r6, #8]
    e2c6:	2204      	movs	r2, #4
    e2c8:	3b0c      	subs	r3, #12
    e2ca:	eb0d 0102 	add.w	r1, sp, r2
    e2ce:	4418      	add	r0, r3
    e2d0:	f010 f90a 	bl	1e4e8 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    e2d4:	89b2      	ldrh	r2, [r6, #12]
    e2d6:	68b1      	ldr	r1, [r6, #8]
    e2d8:	3a0c      	subs	r2, #12
    e2da:	b292      	uxth	r2, r2
    e2dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    e2e0:	f7fe fce0 	bl	cca4 <smp_sign_buf>
	if (err) {
    e2e4:	b198      	cbz	r0, e30e <bt_smp_sign+0x9a>
    e2e6:	4a0c      	ldr	r2, [pc, #48]	; (e318 <bt_smp_sign+0xa4>)
    e2e8:	4c0c      	ldr	r4, [pc, #48]	; (e31c <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    e2ea:	4628      	mov	r0, r5
    e2ec:	1aa4      	subs	r4, r4, r2
    e2ee:	f7f8 fd55 	bl	6d9c <bt_addr_le_str_real>
    e2f2:	f7f5 fe05 	bl	3f00 <log_strdup>
    e2f6:	08e4      	lsrs	r4, r4, #3
    e2f8:	01a4      	lsls	r4, r4, #6
    e2fa:	f044 0401 	orr.w	r4, r4, #1
    e2fe:	4601      	mov	r1, r0
    e300:	4622      	mov	r2, r4
    e302:	4808      	ldr	r0, [pc, #32]	; (e324 <bt_smp_sign+0xb0>)
    e304:	f00f f9dd 	bl	1d6c2 <log_1>
		return -EIO;
    e308:	f06f 0004 	mvn.w	r0, #4
    e30c:	e7d0      	b.n	e2b0 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    e30e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e310:	3301      	adds	r3, #1
    e312:	64e3      	str	r3, [r4, #76]	; 0x4c
	return 0;
    e314:	e7cc      	b.n	e2b0 <bt_smp_sign+0x3c>
    e316:	bf00      	nop
    e318:	00021114 	.word	0x00021114
    e31c:	00021204 	.word	0x00021204
    e320:	00024bfa 	.word	0x00024bfa
    e324:	00024bb6 	.word	0x00024bb6

0000e328 <bt_smp_start_security>:
{
    e328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    e32c:	78c4      	ldrb	r4, [r0, #3]
    e32e:	2c01      	cmp	r4, #1
{
    e330:	4605      	mov	r5, r0
	switch (conn->role) {
    e332:	d005      	beq.n	e340 <bt_smp_start_security+0x18>
		return -EINVAL;
    e334:	f06f 0415 	mvn.w	r4, #21
}
    e338:	4620      	mov	r0, r4
    e33a:	b003      	add	sp, #12
    e33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    e340:	f7fe fd0e 	bl	cd60 <smp_chan_get>
	if (!smp) {
    e344:	4606      	mov	r6, r0
    e346:	2800      	cmp	r0, #0
    e348:	f000 80a4 	beq.w	e494 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e34c:	f100 0794 	add.w	r7, r0, #148	; 0x94
    e350:	2104      	movs	r1, #4
    e352:	4638      	mov	r0, r7
    e354:	f011 fbfc 	bl	1fb50 <atomic_test_bit>
    e358:	2800      	cmp	r0, #0
    e35a:	f040 809e 	bne.w	e49a <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e35e:	2103      	movs	r1, #3
    e360:	4638      	mov	r0, r7
    e362:	f011 fbf5 	bl	1fb50 <atomic_test_bit>
    e366:	b110      	cbz	r0, e36e <bt_smp_start_security+0x46>
		return -EBUSY;
    e368:	f06f 040f 	mvn.w	r4, #15
    e36c:	e7e4      	b.n	e338 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e36e:	4621      	mov	r1, r4
    e370:	4638      	mov	r0, r7
    e372:	f011 fbed 	bl	1fb50 <atomic_test_bit>
    e376:	2800      	cmp	r0, #0
    e378:	d1f6      	bne.n	e368 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e37a:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    e37c:	2b03      	cmp	r3, #3
    e37e:	d03d      	beq.n	e3fc <bt_smp_start_security+0xd4>
    e380:	d82c      	bhi.n	e3dc <bt_smp_start_security+0xb4>
    e382:	3b01      	subs	r3, #1
    e384:	2b01      	cmp	r3, #1
    e386:	d94a      	bls.n	e41e <bt_smp_start_security+0xf6>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    e388:	210b      	movs	r1, #11
    e38a:	1d28      	adds	r0, r5, #4
    e38c:	f011 fbe0 	bl	1fb50 <atomic_test_bit>
    e390:	2800      	cmp	r0, #0
    e392:	d1cf      	bne.n	e334 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    e394:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    e398:	b983      	cbnz	r3, e3bc <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    e39a:	f105 0470 	add.w	r4, r5, #112	; 0x70
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    e39e:	7a29      	ldrb	r1, [r5, #8]
    e3a0:	4622      	mov	r2, r4
    e3a2:	2020      	movs	r0, #32
    e3a4:	f000 f994 	bl	e6d0 <bt_keys_find>
    e3a8:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
		if (!conn->le.keys) {
    e3ac:	b930      	cbnz	r0, e3bc <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    e3ae:	7a29      	ldrb	r1, [r5, #8]
    e3b0:	4622      	mov	r2, r4
    e3b2:	2004      	movs	r0, #4
    e3b4:	f000 f98c 	bl	e6d0 <bt_keys_find>
    e3b8:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	if (!conn->le.keys ||
    e3bc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	d0b7      	beq.n	e334 <bt_smp_start_security+0xc>
    e3c4:	895a      	ldrh	r2, [r3, #10]
    e3c6:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e3ca:	2a00      	cmp	r2, #0
    e3cc:	d0b2      	beq.n	e334 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    e3ce:	7aaa      	ldrb	r2, [r5, #10]
    e3d0:	2a02      	cmp	r2, #2
    e3d2:	d924      	bls.n	e41e <bt_smp_start_security+0xf6>
    e3d4:	7a5b      	ldrb	r3, [r3, #9]
    e3d6:	07db      	lsls	r3, r3, #31
    e3d8:	d5ac      	bpl.n	e334 <bt_smp_start_security+0xc>
    e3da:	e020      	b.n	e41e <bt_smp_start_security+0xf6>
	switch (conn->required_sec_level) {
    e3dc:	2b04      	cmp	r3, #4
    e3de:	d1d3      	bne.n	e388 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e3e0:	f7fe fc3a 	bl	cc58 <get_io_capa>
			 oobd_present)) &&
    e3e4:	2803      	cmp	r0, #3
    e3e6:	d107      	bne.n	e3f8 <bt_smp_start_security+0xd0>
			(bt_auth && bt_auth->oob_data_request &&
    e3e8:	4b2d      	ldr	r3, [pc, #180]	; (e4a0 <bt_smp_start_security+0x178>)
    e3ea:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e3ec:	b313      	cbz	r3, e434 <bt_smp_start_security+0x10c>
			(bt_auth && bt_auth->oob_data_request &&
    e3ee:	68d9      	ldr	r1, [r3, #12]
    e3f0:	b189      	cbz	r1, e416 <bt_smp_start_security+0xee>
    e3f2:	4b2c      	ldr	r3, [pc, #176]	; (e4a4 <bt_smp_start_security+0x17c>)
    e3f4:	7819      	ldrb	r1, [r3, #0]
    e3f6:	b171      	cbz	r1, e416 <bt_smp_start_security+0xee>
			 oobd_present)) &&
    e3f8:	4b2b      	ldr	r3, [pc, #172]	; (e4a8 <bt_smp_start_security+0x180>)
    e3fa:	e009      	b.n	e410 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e3fc:	f7fe fc2c 	bl	cc58 <get_io_capa>
    e400:	2803      	cmp	r0, #3
    e402:	d107      	bne.n	e414 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request && oobd_present);
    e404:	4b26      	ldr	r3, [pc, #152]	; (e4a0 <bt_smp_start_security+0x178>)
    e406:	6819      	ldr	r1, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e408:	b129      	cbz	r1, e416 <bt_smp_start_security+0xee>
		       (bt_auth && bt_auth->oob_data_request && oobd_present);
    e40a:	68c9      	ldr	r1, [r1, #12]
    e40c:	b119      	cbz	r1, e416 <bt_smp_start_security+0xee>
    e40e:	4b25      	ldr	r3, [pc, #148]	; (e4a4 <bt_smp_start_security+0x17c>)
			 oobd_present)) &&
    e410:	7819      	ldrb	r1, [r3, #0]
    e412:	e000      	b.n	e416 <bt_smp_start_security+0xee>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e414:	4621      	mov	r1, r4
			 oobd_present)) &&
    e416:	f001 0101 	and.w	r1, r1, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e41a:	2900      	cmp	r1, #0
    e41c:	d0b4      	beq.n	e388 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    e41e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    e422:	b14b      	cbz	r3, e438 <bt_smp_start_security+0x110>
	if (smp_init(smp) != 0) {
    e424:	4630      	mov	r0, r6
    e426:	f7fe fcd5 	bl	cdd4 <smp_init>
    e42a:	4604      	mov	r4, r0
    e42c:	b180      	cbz	r0, e450 <bt_smp_start_security+0x128>
		return -ENOBUFS;
    e42e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e432:	e781      	b.n	e338 <bt_smp_start_security+0x10>
			 oobd_present)) &&
    e434:	2100      	movs	r1, #0
    e436:	e7ee      	b.n	e416 <bt_smp_start_security+0xee>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e438:	7a28      	ldrb	r0, [r5, #8]
    e43a:	f105 0170 	add.w	r1, r5, #112	; 0x70
    e43e:	f000 f8d9 	bl	e5f4 <bt_keys_get_addr>
    e442:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
		if (!conn->le.keys) {
    e446:	2800      	cmp	r0, #0
    e448:	d1ec      	bne.n	e424 <bt_smp_start_security+0xfc>
			return -ENOMEM;
    e44a:	f06f 040b 	mvn.w	r4, #11
    e44e:	e773      	b.n	e338 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    e450:	210b      	movs	r1, #11
    e452:	4630      	mov	r0, r6
    e454:	f011 fb85 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!req_buf) {
    e458:	4680      	mov	r8, r0
    e45a:	2800      	cmp	r0, #0
    e45c:	d0e7      	beq.n	e42e <bt_smp_start_security+0x106>
	req = net_buf_add(req_buf, sizeof(*req));
    e45e:	2101      	movs	r1, #1
    e460:	3008      	adds	r0, #8
    e462:	f011 fe6e 	bl	20142 <net_buf_simple_add>
    e466:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e468:	2009      	movs	r0, #9
    e46a:	f7fe fc5b 	bl	cd24 <get_auth.isra.0>
    e46e:	4623      	mov	r3, r4
    e470:	f889 0000 	strb.w	r0, [r9]
    e474:	4642      	mov	r2, r8
    e476:	9400      	str	r4, [sp, #0]
    e478:	2106      	movs	r1, #6
    e47a:	4628      	mov	r0, r5
    e47c:	f010 fc6b 	bl	1ed56 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e480:	4638      	mov	r0, r7
    e482:	210e      	movs	r1, #14
    e484:	f011 fa9c 	bl	1f9c0 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    e488:	2101      	movs	r1, #1
    e48a:	f106 0090 	add.w	r0, r6, #144	; 0x90
    e48e:	f011 fa97 	bl	1f9c0 <atomic_set_bit>
	return 0;
    e492:	e751      	b.n	e338 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    e494:	f06f 0438 	mvn.w	r4, #56	; 0x38
    e498:	e74e      	b.n	e338 <bt_smp_start_security+0x10>
		return -EIO;
    e49a:	f06f 0404 	mvn.w	r4, #4
    e49e:	e74b      	b.n	e338 <bt_smp_start_security+0x10>
    e4a0:	20000360 	.word	0x20000360
    e4a4:	20002281 	.word	0x20002281
    e4a8:	20002282 	.word	0x20002282

0000e4ac <bt_smp_update_keys>:
{
    e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4ae:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    e4b0:	f7fe fc56 	bl	cd60 <smp_chan_get>
	if (!smp) {
    e4b4:	4605      	mov	r5, r0
    e4b6:	2800      	cmp	r0, #0
    e4b8:	d07f      	beq.n	e5ba <bt_smp_update_keys+0x10e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e4ba:	f100 0694 	add.w	r6, r0, #148	; 0x94
    e4be:	2103      	movs	r1, #3
    e4c0:	4630      	mov	r0, r6
    e4c2:	f011 fb45 	bl	1fb50 <atomic_test_bit>
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d077      	beq.n	e5ba <bt_smp_update_keys+0x10e>
	if (conn->le.keys) {
    e4ca:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e4ce:	b108      	cbz	r0, e4d4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    e4d0:	f000 f95e 	bl	e790 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e4d4:	f104 0770 	add.w	r7, r4, #112	; 0x70
    e4d8:	7a20      	ldrb	r0, [r4, #8]
    e4da:	4639      	mov	r1, r7
    e4dc:	f000 f88a 	bl	e5f4 <bt_keys_get_addr>
    e4e0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	if (!conn->le.keys) {
    e4e4:	b9b0      	cbnz	r0, e514 <bt_smp_update_keys+0x68>
    e4e6:	4a35      	ldr	r2, [pc, #212]	; (e5bc <bt_smp_update_keys+0x110>)
    e4e8:	4c35      	ldr	r4, [pc, #212]	; (e5c0 <bt_smp_update_keys+0x114>)
		BT_ERR("Unable to get keys for %s",
    e4ea:	4638      	mov	r0, r7
    e4ec:	1aa4      	subs	r4, r4, r2
    e4ee:	f7f8 fc55 	bl	6d9c <bt_addr_le_str_real>
    e4f2:	f7f5 fd05 	bl	3f00 <log_strdup>
    e4f6:	08e4      	lsrs	r4, r4, #3
    e4f8:	01a4      	lsls	r4, r4, #6
    e4fa:	f044 0401 	orr.w	r4, r4, #1
    e4fe:	4601      	mov	r1, r0
    e500:	4622      	mov	r2, r4
    e502:	4830      	ldr	r0, [pc, #192]	; (e5c4 <bt_smp_update_keys+0x118>)
    e504:	f00f f8dd 	bl	1d6c2 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e508:	4628      	mov	r0, r5
    e50a:	2108      	movs	r1, #8
}
    e50c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e510:	f011 bbe4 	b.w	1fcdc <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    e514:	210d      	movs	r1, #13
    e516:	4630      	mov	r0, r6
    e518:	f011 fb1a 	bl	1fb50 <atomic_test_bit>
    e51c:	b128      	cbz	r0, e52a <bt_smp_update_keys+0x7e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    e51e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    e522:	7a53      	ldrb	r3, [r2, #9]
    e524:	f043 0302 	orr.w	r3, r3, #2
    e528:	7253      	strb	r3, [r2, #9]
	switch (smp->method) {
    e52a:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
    e52e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    e532:	2903      	cmp	r1, #3
    e534:	7a53      	ldrb	r3, [r2, #9]
    e536:	d838      	bhi.n	e5aa <bt_smp_update_keys+0xfe>
    e538:	b3c9      	cbz	r1, e5ae <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    e53a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e53e:	7253      	strb	r3, [r2, #9]
	return MIN(req->max_key_size, rsp->max_key_size);
    e540:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    e544:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
    e548:	428b      	cmp	r3, r1
    e54a:	bf28      	it	cs
    e54c:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    e54e:	7213      	strb	r3, [r2, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e550:	2105      	movs	r1, #5
    e552:	4630      	mov	r0, r6
    e554:	f011 fafc 	bl	1fb50 <atomic_test_bit>
    e558:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		conn->le.keys->flags |= BT_KEYS_SC;
    e55c:	7a5a      	ldrb	r2, [r3, #9]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e55e:	b348      	cbz	r0, e5b4 <bt_smp_update_keys+0x108>
		conn->le.keys->flags |= BT_KEYS_SC;
    e560:	f042 0210 	orr.w	r2, r2, #16
    e564:	725a      	strb	r2, [r3, #9]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e566:	210c      	movs	r1, #12
    e568:	4630      	mov	r0, r6
    e56a:	f011 faf1 	bl	1fb50 <atomic_test_bit>
    e56e:	b320      	cbz	r0, e5ba <bt_smp_update_keys+0x10e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    e570:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e574:	2120      	movs	r1, #32
    e576:	f011 fda7 	bl	200c8 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    e57a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e57e:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
    e582:	2210      	movs	r2, #16
    e584:	3016      	adds	r0, #22
    e586:	f00f ffaf 	bl	1e4e8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    e58a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e58e:	2208      	movs	r2, #8
    e590:	2100      	movs	r1, #0
    e592:	300c      	adds	r0, #12
    e594:	f00f ffd3 	bl	1e53e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e598:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e59c:	2202      	movs	r2, #2
}
    e59e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e5a2:	2100      	movs	r1, #0
    e5a4:	3014      	adds	r0, #20
    e5a6:	f00f bfca 	b.w	1e53e <memset>
	switch (smp->method) {
    e5aa:	2905      	cmp	r1, #5
    e5ac:	d0c5      	beq.n	e53a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e5ae:	f023 0301 	bic.w	r3, r3, #1
    e5b2:	e7c4      	b.n	e53e <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    e5b4:	f022 0210 	bic.w	r2, r2, #16
    e5b8:	725a      	strb	r2, [r3, #9]
}
    e5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e5bc:	00021114 	.word	0x00021114
    e5c0:	00021204 	.word	0x00021204
    e5c4:	00024971 	.word	0x00024971

0000e5c8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    e5c8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e5ca:	4b07      	ldr	r3, [pc, #28]	; (e5e8 <bt_smp_init+0x20>)
			"exposes a security vulnerability!");
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    e5cc:	4807      	ldr	r0, [pc, #28]	; (e5ec <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    e5d2:	f003 0306 	and.w	r3, r3, #6
    e5d6:	1f9a      	subs	r2, r3, #6
    e5d8:	4253      	negs	r3, r2
    e5da:	4153      	adcs	r3, r2
    e5dc:	4a04      	ldr	r2, [pc, #16]	; (e5f0 <bt_smp_init+0x28>)
    e5de:	7013      	strb	r3, [r2, #0]
	bt_pub_key_gen(&pub_key_cb);
    e5e0:	f7fb f944 	bl	986c <bt_pub_key_gen>

	return smp_self_test();
}
    e5e4:	2000      	movs	r0, #0
    e5e6:	bd08      	pop	{r3, pc}
    e5e8:	20005888 	.word	0x20005888
    e5ec:	20005bb0 	.word	0x20005bb0
    e5f0:	20002282 	.word	0x20002282

0000e5f4 <bt_keys_get_addr>:
static u32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e5f6:	4c1b      	ldr	r4, [pc, #108]	; (e664 <bt_keys_get_addr+0x70>)
    e5f8:	7823      	ldrb	r3, [r4, #0]
    e5fa:	4283      	cmp	r3, r0
{
    e5fc:	4605      	mov	r5, r0
    e5fe:	460f      	mov	r7, r1
    e600:	4626      	mov	r6, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e602:	d027      	beq.n	e654 <bt_keys_get_addr+0x60>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    e604:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    e606:	4818      	ldr	r0, [pc, #96]	; (e668 <bt_keys_get_addr+0x74>)
    e608:	9400      	str	r4, [sp, #0]
    e60a:	2207      	movs	r2, #7
    e60c:	4669      	mov	r1, sp
    e60e:	f8cd 4003 	str.w	r4, [sp, #3]
    e612:	f00f ff59 	bl	1e4c8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    e616:	b160      	cbz	r0, e632 <bt_keys_get_addr+0x3e>
			if (current->aging_counter < oldest->aging_counter) {
				oldest = current;
			}
		}

		bt_unpair(oldest->id, &oldest->addr);
    e618:	4913      	ldr	r1, [pc, #76]	; (e668 <bt_keys_get_addr+0x74>)
    e61a:	7830      	ldrb	r0, [r6, #0]
    e61c:	f7f9 fff8 	bl	8610 <bt_unpair>
    e620:	4811      	ldr	r0, [pc, #68]	; (e668 <bt_keys_get_addr+0x74>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
    e622:	9400      	str	r4, [sp, #0]
    e624:	2207      	movs	r2, #7
    e626:	4669      	mov	r1, sp
    e628:	f8cd 4003 	str.w	r4, [sp, #3]
    e62c:	f00f ff4c 	bl	1e4c8 <memcmp>
    e630:	b9b0      	cbnz	r0, e660 <bt_keys_get_addr+0x6c>
	memcpy(dst, src, sizeof(*dst));
    e632:	2207      	movs	r2, #7
    e634:	480c      	ldr	r0, [pc, #48]	; (e668 <bt_keys_get_addr+0x74>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
    e636:	7035      	strb	r5, [r6, #0]
    e638:	4639      	mov	r1, r7
    e63a:	f00f ff55 	bl	1e4e8 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
    e63e:	4a0b      	ldr	r2, [pc, #44]	; (e66c <bt_keys_get_addr+0x78>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
    e640:	4808      	ldr	r0, [pc, #32]	; (e664 <bt_keys_get_addr+0x70>)
		keys->aging_counter = ++aging_counter_val;
    e642:	6813      	ldr	r3, [r2, #0]
    e644:	3301      	adds	r3, #1
    e646:	6013      	str	r3, [r2, #0]
    e648:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
		last_keys_updated = keys;
    e64c:	4b08      	ldr	r3, [pc, #32]	; (e670 <bt_keys_get_addr+0x7c>)
    e64e:	601e      	str	r6, [r3, #0]
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    e650:	b003      	add	sp, #12
    e652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
    e654:	2207      	movs	r2, #7
    e656:	1c60      	adds	r0, r4, #1
    e658:	f00f ff36 	bl	1e4c8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e65c:	2800      	cmp	r0, #0
    e65e:	d1d1      	bne.n	e604 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
    e660:	4620      	mov	r0, r4
    e662:	e7f5      	b.n	e650 <bt_keys_get_addr+0x5c>
    e664:	2000071c 	.word	0x2000071c
    e668:	2000071d 	.word	0x2000071d
    e66c:	20000718 	.word	0x20000718
    e670:	200007a0 	.word	0x200007a0

0000e674 <bt_foreach_bond>:

void bt_foreach_bond(u8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
    e674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e676:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
    e678:	4908      	ldr	r1, [pc, #32]	; (e69c <bt_foreach_bond+0x28>)
    e67a:	894b      	ldrh	r3, [r1, #10]
{
    e67c:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
    e67e:	b153      	cbz	r3, e696 <bt_foreach_bond+0x22>
    e680:	780b      	ldrb	r3, [r1, #0]
    e682:	4283      	cmp	r3, r0
    e684:	d107      	bne.n	e696 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
    e686:	3101      	adds	r1, #1
    e688:	2207      	movs	r2, #7
    e68a:	4668      	mov	r0, sp
    e68c:	f00f ff2c 	bl	1e4e8 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
    e690:	4629      	mov	r1, r5
    e692:	4668      	mov	r0, sp
    e694:	47a0      	blx	r4
		}
	}
}
    e696:	b003      	add	sp, #12
    e698:	bd30      	pop	{r4, r5, pc}
    e69a:	bf00      	nop
    e69c:	2000071c 	.word	0x2000071c

0000e6a0 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    e6a0:	460b      	mov	r3, r1
    e6a2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    e6a4:	4a04      	ldr	r2, [pc, #16]	; (e6b8 <bt_keys_foreach+0x18>)
{
    e6a6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    e6a8:	8954      	ldrh	r4, [r2, #10]
    e6aa:	4204      	tst	r4, r0
    e6ac:	d002      	beq.n	e6b4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    e6ae:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    e6b0:	4610      	mov	r0, r2
    e6b2:	4718      	bx	r3
}
    e6b4:	bc10      	pop	{r4}
    e6b6:	4770      	bx	lr
    e6b8:	2000071c 	.word	0x2000071c

0000e6bc <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    e6bc:	b508      	push	{r3, lr}

	/* We do this in commit() rather than add() since add() may get
	 * called multiple times for the same address, especially if
	 * the keys were already removed.
	 */
	bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    e6be:	4903      	ldr	r1, [pc, #12]	; (e6cc <keys_commit+0x10>)
    e6c0:	2200      	movs	r2, #0
    e6c2:	2002      	movs	r0, #2
    e6c4:	f7ff ffec 	bl	e6a0 <bt_keys_foreach>

	return 0;
}
    e6c8:	2000      	movs	r0, #0
    e6ca:	bd08      	pop	{r3, pc}
    e6cc:	000200a5 	.word	0x000200a5

0000e6d0 <bt_keys_find>:
{
    e6d0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e6d2:	4c09      	ldr	r4, [pc, #36]	; (e6f8 <bt_keys_find+0x28>)
{
    e6d4:	460b      	mov	r3, r1
    e6d6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e6d8:	8962      	ldrh	r2, [r4, #10]
    e6da:	4202      	tst	r2, r0
    e6dc:	d007      	beq.n	e6ee <bt_keys_find+0x1e>
    e6de:	7822      	ldrb	r2, [r4, #0]
    e6e0:	429a      	cmp	r2, r3
    e6e2:	d104      	bne.n	e6ee <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    e6e4:	2207      	movs	r2, #7
    e6e6:	1c60      	adds	r0, r4, #1
    e6e8:	f00f feee 	bl	1e4c8 <memcmp>
    e6ec:	b108      	cbz	r0, e6f2 <bt_keys_find+0x22>
	return NULL;
    e6ee:	2000      	movs	r0, #0
}
    e6f0:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e6f2:	4620      	mov	r0, r4
    e6f4:	e7fc      	b.n	e6f0 <bt_keys_find+0x20>
    e6f6:	bf00      	nop
    e6f8:	2000071c 	.word	0x2000071c

0000e6fc <bt_keys_find_irk>:
{
    e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e6fe:	780b      	ldrb	r3, [r1, #0]
    e700:	2b01      	cmp	r3, #1
    e702:	4607      	mov	r7, r0
    e704:	460c      	mov	r4, r1
    e706:	d001      	beq.n	e70c <bt_keys_find_irk+0x10>
		return NULL;
    e708:	2000      	movs	r0, #0
}
    e70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    e70c:	798b      	ldrb	r3, [r1, #6]
    e70e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e712:	2b40      	cmp	r3, #64	; 0x40
    e714:	d1f8      	bne.n	e708 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e716:	4d13      	ldr	r5, [pc, #76]	; (e764 <bt_keys_find_irk+0x68>)
    e718:	896b      	ldrh	r3, [r5, #10]
    e71a:	f013 0f02 	tst.w	r3, #2
    e71e:	462e      	mov	r6, r5
    e720:	d0f2      	beq.n	e708 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    e722:	7833      	ldrb	r3, [r6, #0]
    e724:	42bb      	cmp	r3, r7
    e726:	d10b      	bne.n	e740 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    e728:	2206      	movs	r2, #6
    e72a:	f106 0136 	add.w	r1, r6, #54	; 0x36
    e72e:	1c60      	adds	r0, r4, #1
    e730:	f00f feca 	bl	1e4c8 <memcmp>
    e734:	b908      	cbnz	r0, e73a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    e736:	4628      	mov	r0, r5
    e738:	e7e7      	b.n	e70a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e73a:	8973      	ldrh	r3, [r6, #10]
    e73c:	079b      	lsls	r3, r3, #30
    e73e:	d5e3      	bpl.n	e708 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    e740:	7833      	ldrb	r3, [r6, #0]
    e742:	42bb      	cmp	r3, r7
    e744:	d1e0      	bne.n	e708 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    e746:	3401      	adds	r4, #1
    e748:	4807      	ldr	r0, [pc, #28]	; (e768 <bt_keys_find_irk+0x6c>)
    e74a:	4621      	mov	r1, r4
    e74c:	f00f ffbf 	bl	1e6ce <bt_rpa_irk_matches>
    e750:	2800      	cmp	r0, #0
    e752:	d0d9      	beq.n	e708 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    e754:	4805      	ldr	r0, [pc, #20]	; (e76c <bt_keys_find_irk+0x70>)
    e756:	2206      	movs	r2, #6
    e758:	4621      	mov	r1, r4
    e75a:	f00f fec5 	bl	1e4e8 <memcpy>
			return &key_pool[i];
    e75e:	4801      	ldr	r0, [pc, #4]	; (e764 <bt_keys_find_irk+0x68>)
}
    e760:	e7d3      	b.n	e70a <bt_keys_find_irk+0xe>
    e762:	bf00      	nop
    e764:	2000071c 	.word	0x2000071c
    e768:	20000742 	.word	0x20000742
    e76c:	20000752 	.word	0x20000752

0000e770 <bt_keys_find_addr>:
{
    e770:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    e772:	4c06      	ldr	r4, [pc, #24]	; (e78c <bt_keys_find_addr+0x1c>)
    e774:	7823      	ldrb	r3, [r4, #0]
    e776:	4283      	cmp	r3, r0
    e778:	d104      	bne.n	e784 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    e77a:	2207      	movs	r2, #7
    e77c:	1c60      	adds	r0, r4, #1
    e77e:	f00f fea3 	bl	1e4c8 <memcmp>
    e782:	b108      	cbz	r0, e788 <bt_keys_find_addr+0x18>
	return NULL;
    e784:	2000      	movs	r0, #0
}
    e786:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e788:	4620      	mov	r0, r4
    e78a:	e7fc      	b.n	e786 <bt_keys_find_addr+0x16>
    e78c:	2000071c 	.word	0x2000071c

0000e790 <bt_keys_clear>:
{
    e790:	b570      	push	{r4, r5, r6, lr}
	if (keys->keys & BT_KEYS_IRK) {
    e792:	8943      	ldrh	r3, [r0, #10]
    e794:	079b      	lsls	r3, r3, #30
{
    e796:	b08c      	sub	sp, #48	; 0x30
    e798:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    e79a:	d501      	bpl.n	e7a0 <bt_keys_clear+0x10>
		bt_id_del(keys);
    e79c:	f7fa f824 	bl	87e8 <bt_id_del>
		if (keys->id) {
    e7a0:	4625      	mov	r5, r4
    e7a2:	f815 2b01 	ldrb.w	r2, [r5], #1
    e7a6:	b1aa      	cbz	r2, e7d4 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    e7a8:	ae02      	add	r6, sp, #8
    e7aa:	2104      	movs	r1, #4
    e7ac:	4630      	mov	r0, r6
    e7ae:	f00d fbdd 	bl	1bf6c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    e7b2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    e7b4:	462b      	mov	r3, r5
    e7b6:	4a08      	ldr	r2, [pc, #32]	; (e7d8 <bt_keys_clear+0x48>)
    e7b8:	2124      	movs	r1, #36	; 0x24
    e7ba:	a803      	add	r0, sp, #12
    e7bc:	f7f8 fd96 	bl	72ec <bt_settings_encode_key>
		settings_delete(key);
    e7c0:	a803      	add	r0, sp, #12
    e7c2:	f00f fbb2 	bl	1df2a <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    e7c6:	2284      	movs	r2, #132	; 0x84
    e7c8:	2100      	movs	r1, #0
    e7ca:	4620      	mov	r0, r4
    e7cc:	f00f feb7 	bl	1e53e <memset>
}
    e7d0:	b00c      	add	sp, #48	; 0x30
    e7d2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    e7d4:	9200      	str	r2, [sp, #0]
    e7d6:	e7ed      	b.n	e7b4 <bt_keys_clear+0x24>
    e7d8:	00024d54 	.word	0x00024d54

0000e7dc <keys_set>:
{
    e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7de:	4614      	mov	r4, r2
    e7e0:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
    e7e2:	4605      	mov	r5, r0
    e7e4:	b970      	cbnz	r0, e804 <keys_set+0x28>
    e7e6:	494c      	ldr	r1, [pc, #304]	; (e918 <keys_set+0x13c>)
    e7e8:	4b4c      	ldr	r3, [pc, #304]	; (e91c <keys_set+0x140>)
		BT_ERR("Insufficient number of arguments");
    e7ea:	484d      	ldr	r0, [pc, #308]	; (e920 <keys_set+0x144>)
    e7ec:	1ac9      	subs	r1, r1, r3
    e7ee:	08c9      	lsrs	r1, r1, #3
    e7f0:	0189      	lsls	r1, r1, #6
    e7f2:	f041 0101 	orr.w	r1, r1, #1
    e7f6:	f00e ff57 	bl	1d6a8 <log_0>
		return -EINVAL;
    e7fa:	f06f 0415 	mvn.w	r4, #21
}
    e7fe:	4620      	mov	r0, r4
    e800:	b023      	add	sp, #140	; 0x8c
    e802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    e804:	227c      	movs	r2, #124	; 0x7c
    e806:	a903      	add	r1, sp, #12
    e808:	4618      	mov	r0, r3
    e80a:	47a0      	blx	r4
	err = bt_settings_decode_key(name, &addr);
    e80c:	a901      	add	r1, sp, #4
	len = read_cb(cb_arg, val, sizeof(val));
    e80e:	4606      	mov	r6, r0
	err = bt_settings_decode_key(name, &addr);
    e810:	4628      	mov	r0, r5
    e812:	f00f ffb9 	bl	1e788 <bt_settings_decode_key>
	if (err) {
    e816:	4604      	mov	r4, r0
    e818:	b158      	cbz	r0, e832 <keys_set+0x56>
    e81a:	4b40      	ldr	r3, [pc, #256]	; (e91c <keys_set+0x140>)
    e81c:	4a3e      	ldr	r2, [pc, #248]	; (e918 <keys_set+0x13c>)
		BT_ERR("Unable to decode address %s", name);
    e81e:	4841      	ldr	r0, [pc, #260]	; (e924 <keys_set+0x148>)
    e820:	1ad2      	subs	r2, r2, r3
    e822:	08d2      	lsrs	r2, r2, #3
    e824:	0192      	lsls	r2, r2, #6
    e826:	f042 0201 	orr.w	r2, r2, #1
    e82a:	4629      	mov	r1, r5
    e82c:	f00e ff49 	bl	1d6c2 <log_1>
    e830:	e7e3      	b.n	e7fa <keys_set+0x1e>
	settings_name_next(name, &next);
    e832:	4669      	mov	r1, sp
    e834:	4628      	mov	r0, r5
    e836:	f00f fb9f 	bl	1df78 <settings_name_next>
	if (!next) {
    e83a:	9800      	ldr	r0, [sp, #0]
    e83c:	b180      	cbz	r0, e860 <keys_set+0x84>
		id = strtol(next, NULL, 10);
    e83e:	220a      	movs	r2, #10
    e840:	4621      	mov	r1, r4
    e842:	f00f fd7e 	bl	1e342 <strtol>
    e846:	b2c0      	uxtb	r0, r0
	if (!len) {
    e848:	b9f6      	cbnz	r6, e888 <keys_set+0xac>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    e84a:	4601      	mov	r1, r0
    e84c:	aa01      	add	r2, sp, #4
    e84e:	203f      	movs	r0, #63	; 0x3f
    e850:	f7ff ff3e 	bl	e6d0 <bt_keys_find>
		if (keys) {
    e854:	b130      	cbz	r0, e864 <keys_set+0x88>
			(void)memset(keys, 0, sizeof(*keys));
    e856:	2284      	movs	r2, #132	; 0x84
    e858:	4631      	mov	r1, r6
    e85a:	f00f fe70 	bl	1e53e <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
    e85e:	e7ce      	b.n	e7fe <keys_set+0x22>
		id = BT_ID_DEFAULT;
    e860:	4620      	mov	r0, r4
    e862:	e7f1      	b.n	e848 <keys_set+0x6c>
    e864:	4a2d      	ldr	r2, [pc, #180]	; (e91c <keys_set+0x140>)
    e866:	4d2c      	ldr	r5, [pc, #176]	; (e918 <keys_set+0x13c>)
			BT_WARN("Unable to find deleted keys for %s",
    e868:	a801      	add	r0, sp, #4
    e86a:	1aad      	subs	r5, r5, r2
    e86c:	f7f8 fa96 	bl	6d9c <bt_addr_le_str_real>
    e870:	f7f5 fb46 	bl	3f00 <log_strdup>
    e874:	08ed      	lsrs	r5, r5, #3
    e876:	01ad      	lsls	r5, r5, #6
    e878:	f045 0502 	orr.w	r5, r5, #2
    e87c:	4601      	mov	r1, r0
    e87e:	462a      	mov	r2, r5
    e880:	4829      	ldr	r0, [pc, #164]	; (e928 <keys_set+0x14c>)
    e882:	f00e ff1e 	bl	1d6c2 <log_1>
    e886:	e7ba      	b.n	e7fe <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
    e888:	a901      	add	r1, sp, #4
    e88a:	f7ff feb3 	bl	e5f4 <bt_keys_get_addr>
	if (!keys) {
    e88e:	4607      	mov	r7, r0
    e890:	b998      	cbnz	r0, e8ba <keys_set+0xde>
    e892:	4a22      	ldr	r2, [pc, #136]	; (e91c <keys_set+0x140>)
    e894:	4c20      	ldr	r4, [pc, #128]	; (e918 <keys_set+0x13c>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    e896:	a801      	add	r0, sp, #4
    e898:	1aa4      	subs	r4, r4, r2
    e89a:	f7f8 fa7f 	bl	6d9c <bt_addr_le_str_real>
    e89e:	f7f5 fb2f 	bl	3f00 <log_strdup>
    e8a2:	08e4      	lsrs	r4, r4, #3
    e8a4:	01a4      	lsls	r4, r4, #6
    e8a6:	f044 0401 	orr.w	r4, r4, #1
    e8aa:	4601      	mov	r1, r0
    e8ac:	4622      	mov	r2, r4
    e8ae:	481f      	ldr	r0, [pc, #124]	; (e92c <keys_set+0x150>)
    e8b0:	f00e ff07 	bl	1d6c2 <log_1>
		return -ENOMEM;
    e8b4:	f06f 040b 	mvn.w	r4, #11
    e8b8:	e7a1      	b.n	e7fe <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
    e8ba:	2e7c      	cmp	r6, #124	; 0x7c
    e8bc:	d013      	beq.n	e8e6 <keys_set+0x10a>
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
    e8be:	4b16      	ldr	r3, [pc, #88]	; (e918 <keys_set+0x13c>)
    e8c0:	4a16      	ldr	r2, [pc, #88]	; (e91c <keys_set+0x140>)
    e8c2:	1a9b      	subs	r3, r3, r2
    e8c4:	08db      	lsrs	r3, r3, #3
    e8c6:	2e78      	cmp	r6, #120	; 0x78
    e8c8:	ea4f 1383 	mov.w	r3, r3, lsl #6
    e8cc:	d119      	bne.n	e902 <keys_set+0x126>
				BT_WARN("Keys for %s have no aging counter",
    e8ce:	a801      	add	r0, sp, #4
    e8d0:	f043 0502 	orr.w	r5, r3, #2
    e8d4:	f7f8 fa62 	bl	6d9c <bt_addr_le_str_real>
    e8d8:	f7f5 fb12 	bl	3f00 <log_strdup>
    e8dc:	462a      	mov	r2, r5
    e8de:	4601      	mov	r1, r0
    e8e0:	4813      	ldr	r0, [pc, #76]	; (e930 <keys_set+0x154>)
    e8e2:	f00e feee 	bl	1d6c2 <log_1>
		memcpy(keys->storage_start, val, len);
    e8e6:	4632      	mov	r2, r6
    e8e8:	a903      	add	r1, sp, #12
    e8ea:	f107 0008 	add.w	r0, r7, #8
    e8ee:	f00f fdfb 	bl	1e4e8 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
    e8f2:	4b10      	ldr	r3, [pc, #64]	; (e934 <keys_set+0x158>)
    e8f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    e8f8:	6819      	ldr	r1, [r3, #0]
    e8fa:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
    e8fc:	bf88      	it	hi
    e8fe:	601a      	strhi	r2, [r3, #0]
    e900:	e77d      	b.n	e7fe <keys_set+0x22>
			BT_ERR("Invalid key length %zu != %zu", len,
    e902:	480d      	ldr	r0, [pc, #52]	; (e938 <keys_set+0x15c>)
    e904:	f043 0301 	orr.w	r3, r3, #1
    e908:	227c      	movs	r2, #124	; 0x7c
    e90a:	4631      	mov	r1, r6
    e90c:	f00e feed 	bl	1d6ea <log_2>
			bt_keys_clear(keys);
    e910:	4638      	mov	r0, r7
    e912:	f7ff ff3d 	bl	e790 <bt_keys_clear>
			return -EINVAL;
    e916:	e770      	b.n	e7fa <keys_set+0x1e>
    e918:	000211e4 	.word	0x000211e4
    e91c:	00021114 	.word	0x00021114
    e920:	00023622 	.word	0x00023622
    e924:	000247c0 	.word	0x000247c0
    e928:	00024cb2 	.word	0x00024cb2
    e92c:	00024cd5 	.word	0x00024cd5
    e930:	00024cf4 	.word	0x00024cf4
    e934:	20000718 	.word	0x20000718
    e938:	00024d16 	.word	0x00024d16

0000e93c <bt_keys_store>:
{
    e93c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    e93e:	4605      	mov	r5, r0
{
    e940:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    e942:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    e946:	4604      	mov	r4, r0
	if (keys->id) {
    e948:	b30a      	cbz	r2, e98e <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
    e94a:	ae02      	add	r6, sp, #8
    e94c:	2104      	movs	r1, #4
    e94e:	4630      	mov	r0, r6
    e950:	f00d fb0c 	bl	1bf6c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    e954:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    e956:	4a0f      	ldr	r2, [pc, #60]	; (e994 <bt_keys_store+0x58>)
    e958:	462b      	mov	r3, r5
    e95a:	2124      	movs	r1, #36	; 0x24
    e95c:	a803      	add	r0, sp, #12
    e95e:	f7f8 fcc5 	bl	72ec <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    e962:	f104 0108 	add.w	r1, r4, #8
    e966:	227c      	movs	r2, #124	; 0x7c
    e968:	a803      	add	r0, sp, #12
    e96a:	f7f6 fc3f 	bl	51ec <settings_save_one>
	if (err) {
    e96e:	4604      	mov	r4, r0
    e970:	b150      	cbz	r0, e988 <bt_keys_store+0x4c>
    e972:	4a09      	ldr	r2, [pc, #36]	; (e998 <bt_keys_store+0x5c>)
    e974:	4b09      	ldr	r3, [pc, #36]	; (e99c <bt_keys_store+0x60>)
    e976:	1ad2      	subs	r2, r2, r3
    e978:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
    e97a:	0192      	lsls	r2, r2, #6
    e97c:	4601      	mov	r1, r0
    e97e:	f042 0201 	orr.w	r2, r2, #1
    e982:	4807      	ldr	r0, [pc, #28]	; (e9a0 <bt_keys_store+0x64>)
    e984:	f00e fe9d 	bl	1d6c2 <log_1>
}
    e988:	4620      	mov	r0, r4
    e98a:	b00c      	add	sp, #48	; 0x30
    e98c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    e98e:	9200      	str	r2, [sp, #0]
    e990:	e7e1      	b.n	e956 <bt_keys_store+0x1a>
    e992:	bf00      	nop
    e994:	00024d54 	.word	0x00024d54
    e998:	000211e4 	.word	0x000211e4
    e99c:	00021114 	.word	0x00021114
    e9a0:	00024d34 	.word	0x00024d34

0000e9a4 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(u8_t id, const bt_addr_le_t *addr)
{
    e9a4:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
    e9a6:	f7ff fee3 	bl	e770 <bt_keys_find_addr>

	if (!keys) {
    e9aa:	b150      	cbz	r0, e9c2 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
    e9ac:	4a05      	ldr	r2, [pc, #20]	; (e9c4 <bt_keys_update_usage+0x20>)
    e9ae:	6813      	ldr	r3, [r2, #0]
    e9b0:	4283      	cmp	r3, r0
    e9b2:	d006      	beq.n	e9c2 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
    e9b4:	4904      	ldr	r1, [pc, #16]	; (e9c8 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
    e9b6:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
    e9b8:	680b      	ldr	r3, [r1, #0]
    e9ba:	3301      	adds	r3, #1
    e9bc:	600b      	str	r3, [r1, #0]
    e9be:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
    e9c2:	bd08      	pop	{r3, pc}
    e9c4:	200007a0 	.word	0x200007a0
    e9c8:	20000718 	.word	0x20000718

0000e9cc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9d0:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e9d2:	1dc2      	adds	r2, r0, #7
    e9d4:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e9d8:	1e67      	subs	r7, r4, #1
    e9da:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    e9dc:	6018      	str	r0, [r3, #0]
{
    e9de:	b082      	sub	sp, #8
    e9e0:	4605      	mov	r5, r0
    e9e2:	460e      	mov	r6, r1
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e9e4:	fb01 0007 	mla	r0, r1, r7, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e9e8:	8014      	strh	r4, [r2, #0]
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e9ea:	2100      	movs	r1, #0
    e9ec:	2204      	movs	r2, #4
    e9ee:	f00f fda6 	bl	1e53e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    e9f2:	b1b7      	cbz	r7, ea22 <mem_init+0x56>
    e9f4:	3c02      	subs	r4, #2
    e9f6:	b2a4      	uxth	r4, r4
    e9f8:	fb04 6306 	mla	r3, r4, r6, r6
    e9fc:	fb04 f706 	mul.w	r7, r4, r6
    ea00:	441d      	add	r5, r3
    ea02:	1aff      	subs	r7, r7, r3
    ea04:	f64f 78ff 	movw	r8, #65535	; 0xffff
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    ea08:	2204      	movs	r2, #4
	while (mem_count--) {
    ea0a:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    ea0c:	19e8      	adds	r0, r5, r7
    ea0e:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    ea12:	b2a4      	uxth	r4, r4
		next = (u32_t)((u8_t *) mem_pool +
    ea14:	9501      	str	r5, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    ea16:	f00f fd67 	bl	1e4e8 <memcpy>
	while (mem_count--) {
    ea1a:	4544      	cmp	r4, r8
    ea1c:	eba5 0506 	sub.w	r5, r5, r6
    ea20:	d1f2      	bne.n	ea08 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    ea22:	b002      	add	sp, #8
    ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea28 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    ea28:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    ea2a:	6805      	ldr	r5, [r0, #0]
{
    ea2c:	b082      	sub	sp, #8
	if (*mem_head) {
    ea2e:	b195      	cbz	r5, ea56 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ea30:	1deb      	adds	r3, r5, #7
    ea32:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    ea36:	2204      	movs	r2, #4
    ea38:	4604      	mov	r4, r0
    ea3a:	4629      	mov	r1, r5
    ea3c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ea40:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    ea42:	f00f fd51 	bl	1e4e8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    ea46:	9b01      	ldr	r3, [sp, #4]
    ea48:	b123      	cbz	r3, ea54 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    ea4a:	1dda      	adds	r2, r3, #7
    ea4c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    ea50:	3e01      	subs	r6, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    ea52:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    ea54:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    ea56:	4628      	mov	r0, r5
    ea58:	b002      	add	sp, #8
    ea5a:	bd70      	pop	{r4, r5, r6, pc}

0000ea5c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    ea5c:	680b      	ldr	r3, [r1, #0]
{
    ea5e:	b570      	push	{r4, r5, r6, lr}
    ea60:	460c      	mov	r4, r1
    ea62:	4605      	mov	r5, r0
	if (*mem_head) {
    ea64:	b183      	cbz	r3, ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ea66:	3307      	adds	r3, #7
    ea68:	f023 0303 	bic.w	r3, r3, #3
    ea6c:	881e      	ldrh	r6, [r3, #0]
    ea6e:	3601      	adds	r6, #1
    ea70:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    ea72:	2204      	movs	r2, #4
    ea74:	4621      	mov	r1, r4
    ea76:	4628      	mov	r0, r5
    ea78:	f00f fd36 	bl	1e4e8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    ea7c:	1deb      	adds	r3, r5, #7
    ea7e:	f023 0303 	bic.w	r3, r3, #3
    ea82:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    ea84:	6025      	str	r5, [r4, #0]
}
    ea86:	bd70      	pop	{r4, r5, r6, pc}
    ea88:	2601      	movs	r6, #1
    ea8a:	e7f2      	b.n	ea72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12>

0000ea8c <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    ea8c:	fb02 0001 	mla	r0, r2, r1, r0
    ea90:	4770      	bx	lr
    ea92:	bf00      	nop

0000ea94 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    ea94:	1a40      	subs	r0, r0, r1
    ea96:	b280      	uxth	r0, r0
}
    ea98:	fbb0 f0f2 	udiv	r0, r0, r2
    ea9c:	4770      	bx	lr
    ea9e:	bf00      	nop

0000eaa0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
	while (len--) {
    eaa0:	1e53      	subs	r3, r2, #1
	src += len;
    eaa2:	4411      	add	r1, r2
	while (len--) {
    eaa4:	b29b      	uxth	r3, r3
    eaa6:	b142      	cbz	r2, eaba <mem_rcopy+0x1a>
    eaa8:	43db      	mvns	r3, r3
    eaaa:	18ca      	adds	r2, r1, r3
    eaac:	3801      	subs	r0, #1
		*dst++ = *--src;
    eaae:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    eab2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    eab6:	4291      	cmp	r1, r2
    eab8:	d1f9      	bne.n	eaae <mem_rcopy+0xe>
	}
}
    eaba:	4770      	bx	lr

0000eabc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    eabc:	4401      	add	r1, r0
    eabe:	e002      	b.n	eac6 <mem_nz+0xa>
		if (*src++) {
    eac0:	f810 3b01 	ldrb.w	r3, [r0], #1
    eac4:	b91b      	cbnz	r3, eace <mem_nz+0x12>
	while (len--) {
    eac6:	4288      	cmp	r0, r1
    eac8:	d1fa      	bne.n	eac0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    eaca:	2000      	movs	r0, #0
    eacc:	4770      	bx	lr
			return 1;
    eace:	2001      	movs	r0, #1
}
    ead0:	4770      	bx	lr
    ead2:	bf00      	nop

0000ead4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    ead4:	6010      	str	r0, [r2, #0]
    ead6:	6008      	str	r0, [r1, #0]

	return link;
}
    ead8:	4770      	bx	lr
    eada:	bf00      	nop

0000eadc <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    eadc:	680a      	ldr	r2, [r1, #0]
{
    eade:	4603      	mov	r3, r0
	if (*head != *tail) {
    eae0:	6800      	ldr	r0, [r0, #0]
    eae2:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    eae4:	bf05      	ittet	eq
    eae6:	2200      	moveq	r2, #0
    eae8:	600a      	streq	r2, [r1, #0]
		return NULL;
    eaea:	2000      	movne	r0, #0
	*head = *tail = NULL;
    eaec:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    eaee:	4770      	bx	lr

0000eaf0 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    eaf0:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    eaf2:	6814      	ldr	r4, [r2, #0]
    eaf4:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    eaf6:	6814      	ldr	r4, [r2, #0]
    eaf8:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    eafa:	bc10      	pop	{r4}
	*tail = link;
    eafc:	6010      	str	r0, [r2, #0]
}
    eafe:	4770      	bx	lr

0000eb00 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    eb00:	4288      	cmp	r0, r1
    eb02:	d003      	beq.n	eb0c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    eb04:	b11a      	cbz	r2, eb0e <memq_peek+0xe>
		*mem = head->mem;
    eb06:	6843      	ldr	r3, [r0, #4]
    eb08:	6013      	str	r3, [r2, #0]
    eb0a:	4770      	bx	lr
		return NULL;
    eb0c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    eb0e:	4770      	bx	lr

0000eb10 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    eb10:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    eb12:	4283      	cmp	r3, r0
    eb14:	d009      	beq.n	eb2a <memq_dequeue+0x1a>
	if (mem) {
    eb16:	b12a      	cbz	r2, eb24 <memq_dequeue+0x14>
		*mem = head->mem;
    eb18:	6858      	ldr	r0, [r3, #4]
    eb1a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    eb1c:	681a      	ldr	r2, [r3, #0]
    eb1e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    eb20:	4618      	mov	r0, r3
    eb22:	4770      	bx	lr
	if (old_head == NULL) {
    eb24:	2b00      	cmp	r3, #0
    eb26:	d1f9      	bne.n	eb1c <memq_dequeue+0xc>
    eb28:	e7fa      	b.n	eb20 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    eb2a:	2300      	movs	r3, #0
    eb2c:	e7f8      	b.n	eb20 <memq_dequeue+0x10>
    eb2e:	bf00      	nop

0000eb30 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb34:	f8df 8034 	ldr.w	r8, [pc, #52]	; eb6c <mayfly_init+0x3c>
    eb38:	4e0b      	ldr	r6, [pc, #44]	; (eb68 <mayfly_init+0x38>)
    eb3a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    eb3c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    eb40:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    eb42:	1d22      	adds	r2, r4, #4
    eb44:	4621      	mov	r1, r4
    eb46:	4628      	mov	r0, r5
    eb48:	3c0c      	subs	r4, #12
    eb4a:	f7ff ffc3 	bl	ead4 <memq_init>
		while (caller_id--) {
    eb4e:	42b4      	cmp	r4, r6
    eb50:	f1a5 0508 	sub.w	r5, r5, #8
    eb54:	d1f5      	bne.n	eb42 <mayfly_init+0x12>
	while (callee_id--) {
    eb56:	3f04      	subs	r7, #4
    eb58:	1d3b      	adds	r3, r7, #4
    eb5a:	f1a8 0820 	sub.w	r8, r8, #32
    eb5e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    eb62:	d1eb      	bne.n	eb3c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb68:	200008ac 	.word	0x200008ac
    eb6c:	2000081c 	.word	0x2000081c

0000eb70 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    eb70:	b430      	push	{r4, r5}
    eb72:	4603      	mov	r3, r0
    eb74:	460c      	mov	r4, r1
	if (enable) {
    eb76:	b19a      	cbz	r2, eba0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    eb78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    eb7c:	0108      	lsls	r0, r1, #4
    eb7e:	4d14      	ldr	r5, [pc, #80]	; (ebd0 <mayfly_enable+0x60>)
    eb80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    eb84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    eb88:	4429      	add	r1, r5
    eb8a:	7a48      	ldrb	r0, [r1, #9]
    eb8c:	7a0d      	ldrb	r5, [r1, #8]
    eb8e:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    eb90:	bf04      	itt	eq
    eb92:	3001      	addeq	r0, #1
    eb94:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    eb96:	4621      	mov	r1, r4
    eb98:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    eb9a:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    eb9c:	f00a be64 	b.w	19868 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    eba0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    eba4:	4d0a      	ldr	r5, [pc, #40]	; (ebd0 <mayfly_enable+0x60>)
    eba6:	0112      	lsls	r2, r2, #4
    eba8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ebac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ebb0:	442b      	add	r3, r5
    ebb2:	7a9d      	ldrb	r5, [r3, #10]
    ebb4:	7ada      	ldrb	r2, [r3, #11]
    ebb6:	42aa      	cmp	r2, r5
    ebb8:	d001      	beq.n	ebbe <mayfly_enable+0x4e>
}
    ebba:	bc30      	pop	{r4, r5}
    ebbc:	4770      	bx	lr
			mfp[callee_id] = 1U;
    ebbe:	4d05      	ldr	r5, [pc, #20]	; (ebd4 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    ebc0:	3201      	adds	r2, #1
    ebc2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    ebc4:	2301      	movs	r3, #1
    ebc6:	546b      	strb	r3, [r5, r1]
}
    ebc8:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    ebca:	f00a beab 	b.w	19924 <mayfly_pend>
    ebce:	bf00      	nop
    ebd0:	20000828 	.word	0x20000828
    ebd4:	20000824 	.word	0x20000824

0000ebd8 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    ebd8:	b570      	push	{r4, r5, r6, lr}
    ebda:	461c      	mov	r4, r3
    ebdc:	4606      	mov	r6, r0
    ebde:	460d      	mov	r5, r1
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ebe0:	b322      	cbz	r2, ec2c <mayfly_enqueue+0x54>
    ebe2:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ebe4:	7822      	ldrb	r2, [r4, #0]
    ebe6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ebe8:	f012 0203 	ands.w	r2, r2, #3
    ebec:	d005      	beq.n	ebfa <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    ebee:	2a01      	cmp	r2, #1
    ebf0:	d040      	beq.n	ec74 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ebf2:	3301      	adds	r3, #1
    ebf4:	b2db      	uxtb	r3, r3
    ebf6:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    ebf8:	e00f      	b.n	ec1a <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ebfa:	2230      	movs	r2, #48	; 0x30
    ebfc:	2104      	movs	r1, #4
    ebfe:	fb12 1105 	smlabb	r1, r2, r5, r1
    ec02:	220c      	movs	r2, #12
    ec04:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    ec08:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ec0a:	491b      	ldr	r1, [pc, #108]	; (ec78 <mayfly_enqueue+0xa0>)
    ec0c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    ec0e:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ec10:	440a      	add	r2, r1
	m->_req = ack + 1;
    ec12:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ec14:	4621      	mov	r1, r4
    ec16:	f7ff ff6b 	bl	eaf0 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    ec1a:	4b18      	ldr	r3, [pc, #96]	; (ec7c <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    ec1c:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    ec1e:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    ec20:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    ec22:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    ec24:	f00a fe7e 	bl	19924 <mayfly_pend>

	return 0;
    ec28:	2000      	movs	r0, #0
}
    ec2a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ec2c:	f00a fe5c 	bl	198e8 <mayfly_prio_is_equal>
    ec30:	2800      	cmp	r0, #0
    ec32:	d0d6      	beq.n	ebe2 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    ec34:	4629      	mov	r1, r5
    ec36:	4630      	mov	r0, r6
    ec38:	f00a fe36 	bl	198a8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ec3c:	2800      	cmp	r0, #0
    ec3e:	d0d0      	beq.n	ebe2 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    ec40:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    ec44:	0111      	lsls	r1, r2, #4
    ec46:	480c      	ldr	r0, [pc, #48]	; (ec78 <mayfly_enqueue+0xa0>)
    ec48:	7863      	ldrb	r3, [r4, #1]
    ec4a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ec4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ec52:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    ec54:	7a91      	ldrb	r1, [r2, #10]
    ec56:	7ad2      	ldrb	r2, [r2, #11]
    ec58:	4291      	cmp	r1, r2
    ec5a:	d1c3      	bne.n	ebe4 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    ec5c:	7822      	ldrb	r2, [r4, #0]
    ec5e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ec60:	0792      	lsls	r2, r2, #30
    ec62:	d002      	beq.n	ec6a <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    ec64:	3302      	adds	r3, #2
    ec66:	b2db      	uxtb	r3, r3
    ec68:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    ec6a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ec6e:	4798      	blx	r3
		return 0;
    ec70:	2000      	movs	r0, #0
}
    ec72:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    ec74:	4610      	mov	r0, r2
}
    ec76:	bd70      	pop	{r4, r5, r6, pc}
    ec78:	20000828 	.word	0x20000828
    ec7c:	20000824 	.word	0x20000824

0000ec80 <mayfly_run>:
{
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    ec80:	494e      	ldr	r1, [pc, #312]	; (edbc <mayfly_run+0x13c>)
    ec82:	5c0b      	ldrb	r3, [r1, r0]
    ec84:	2b00      	cmp	r3, #0
    ec86:	f000 8098 	beq.w	edba <mayfly_run+0x13a>
{
    ec8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ec8e:	4b4c      	ldr	r3, [pc, #304]	; (edc0 <mayfly_run+0x140>)
    ec90:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    ec94:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    ec96:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ec98:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    ec9c:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    ec9e:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    eca2:	f10b 0104 	add.w	r1, fp, #4
	u8_t enable = 0U;
    eca6:	9203      	str	r2, [sp, #12]
    eca8:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	u8_t disable = 0U;
    ecac:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    ecae:	f04f 0903 	mov.w	r9, #3
    ecb2:	4688      	mov	r8, r1
    ecb4:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    ecb6:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ecb8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    ecbc:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    ecbe:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    ecc0:	f7ff ff1e 	bl	eb00 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    ecc4:	f107 0624 	add.w	r6, r7, #36	; 0x24
    ecc8:	4683      	mov	fp, r0
    ecca:	2800      	cmp	r0, #0
    eccc:	d034      	beq.n	ed38 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    ecce:	9c05      	ldr	r4, [sp, #20]
    ecd0:	7825      	ldrb	r5, [r4, #0]
    ecd2:	7863      	ldrb	r3, [r4, #1]
    ecd4:	1aed      	subs	r5, r5, r3
    ecd6:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    ecda:	2d01      	cmp	r5, #1
    ecdc:	d106      	bne.n	ecec <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    ecde:	3b01      	subs	r3, #1
    ece0:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    ece2:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ece6:	4798      	blx	r3
    ece8:	9c05      	ldr	r4, [sp, #20]
    ecea:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    ecec:	f894 c000 	ldrb.w	ip, [r4]
    ecf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    ecf2:	ebac 0303 	sub.w	r3, ip, r3
    ecf6:	f003 0303 	and.w	r3, r3, #3
    ecfa:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    ecfc:	f04f 0200 	mov.w	r2, #0
    ed00:	4631      	mov	r1, r6
	req = m->_req;
    ed02:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    ed06:	d00d      	beq.n	ed24 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    ed08:	f7ff ff02 	bl	eb10 <memq_dequeue>
		ack = m->_ack;
    ed0c:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    ed0e:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    ed10:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    ed14:	1a9b      	subs	r3, r3, r2
    ed16:	f003 0303 	and.w	r3, r3, #3
    ed1a:	2b01      	cmp	r3, #1
		m->_ack = req;
    ed1c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    ed20:	d044      	beq.n	edac <mayfly_run+0x12c>
    ed22:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    ed24:	4601      	mov	r1, r0
    ed26:	aa05      	add	r2, sp, #20
    ed28:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ed2a:	f7ff fee9 	bl	eb00 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    ed2e:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    ed30:	4683      	mov	fp, r0
			if (state == 1U) {
    ed32:	d029      	beq.n	ed88 <mayfly_run+0x108>
		while (link) {
    ed34:	2800      	cmp	r0, #0
    ed36:	d1ca      	bne.n	ecce <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    ed38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    ed3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    ed40:	429a      	cmp	r2, r3
    ed42:	d003      	beq.n	ed4c <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    ed44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    ed48:	2301      	movs	r3, #1
    ed4a:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    ed4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    ed50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    ed54:	429a      	cmp	r2, r3
    ed56:	d003      	beq.n	ed60 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    ed58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    ed5c:	2301      	movs	r3, #1
    ed5e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    ed60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ed64:	fa5f f989 	uxtb.w	r9, r9
    ed68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ed6c:	f1a7 070c 	sub.w	r7, r7, #12
    ed70:	d1a1      	bne.n	ecb6 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ed72:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    ed76:	b1b3      	cbz	r3, eda6 <mayfly_run+0x126>
    ed78:	9b03      	ldr	r3, [sp, #12]
    ed7a:	b9a3      	cbnz	r3, eda6 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ed7c:	461a      	mov	r2, r3
    ed7e:	4651      	mov	r1, sl
    ed80:	4650      	mov	r0, sl
    ed82:	f00a fd71 	bl	19868 <mayfly_enable_cb>
    ed86:	e00e      	b.n	eda6 <mayfly_run+0x126>
				if (caller_id || link) {
    ed88:	f1b9 0f00 	cmp.w	r9, #0
    ed8c:	d101      	bne.n	ed92 <mayfly_run+0x112>
    ed8e:	2800      	cmp	r0, #0
    ed90:	d0d2      	beq.n	ed38 <mayfly_run+0xb8>
    ed92:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    ed96:	4a09      	ldr	r2, [pc, #36]	; (edbc <mayfly_run+0x13c>)
    ed98:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    ed9a:	4651      	mov	r1, sl
    ed9c:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    ed9e:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    eda2:	f00a fdbf 	bl	19924 <mayfly_pend>
	}
}
    eda6:	b007      	add	sp, #28
    eda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    edac:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    edae:	4621      	mov	r1, r4
    edb0:	4658      	mov	r0, fp
    edb2:	4642      	mov	r2, r8
    edb4:	f7ff fe9c 	bl	eaf0 <memq_enqueue>
    edb8:	e7b3      	b.n	ed22 <mayfly_run+0xa2>
    edba:	4770      	bx	lr
    edbc:	20000824 	.word	0x20000824
    edc0:	20000828 	.word	0x20000828

0000edc4 <util_ones_count_get>:
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
	u8_t one_count = 0U;

	while (octets_len--) {
    edc4:	b1a1      	cbz	r1, edf0 <util_ones_count_get+0x2c>
    edc6:	1e4b      	subs	r3, r1, #1
    edc8:	b2db      	uxtb	r3, r3
{
    edca:	b410      	push	{r4}
    edcc:	1e41      	subs	r1, r0, #1
    edce:	18c4      	adds	r4, r0, r3
	u8_t one_count = 0U;
    edd0:	2000      	movs	r0, #0
		u8_t bite;

		bite = *octets;
    edd2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    edd6:	b13b      	cbz	r3, ede8 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    edd8:	b25b      	sxtb	r3, r3
    edda:	1e5a      	subs	r2, r3, #1
    eddc:	4013      	ands	r3, r2
			one_count++;
    edde:	3001      	adds	r0, #1
		while (bite) {
    ede0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    ede4:	b2c0      	uxtb	r0, r0
		while (bite) {
    ede6:	d1f7      	bne.n	edd8 <util_ones_count_get+0x14>
	while (octets_len--) {
    ede8:	42a1      	cmp	r1, r4
    edea:	d1f2      	bne.n	edd2 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    edec:	bc10      	pop	{r4}
    edee:	4770      	bx	lr
	u8_t one_count = 0U;
    edf0:	4608      	mov	r0, r1
}
    edf2:	4770      	bx	lr

0000edf4 <util_rand>:

int util_rand(void *buf, size_t len)
{
    edf4:	b570      	push	{r4, r5, r6, lr}
	static struct device *dev;

	if (unlikely(!dev)) {
    edf6:	4e0a      	ldr	r6, [pc, #40]	; (ee20 <util_rand+0x2c>)
    edf8:	6833      	ldr	r3, [r6, #0]
{
    edfa:	4604      	mov	r4, r0
    edfc:	460d      	mov	r5, r1
	if (unlikely(!dev)) {
    edfe:	b143      	cbz	r3, ee12 <util_rand+0x1e>
	return api->get_entropy(dev, buffer, length);
    ee00:	6858      	ldr	r0, [r3, #4]
    ee02:	4621      	mov	r1, r4
    ee04:	6804      	ldr	r4, [r0, #0]
    ee06:	b2aa      	uxth	r2, r5
    ee08:	4618      	mov	r0, r3
    ee0a:	4623      	mov	r3, r4
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
	}

	return entropy_get_entropy(dev, (u8_t *)buf, len);
}
    ee0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee10:	4718      	bx	r3
    ee12:	4804      	ldr	r0, [pc, #16]	; (ee24 <util_rand+0x30>)
    ee14:	f00b fde6 	bl	1a9e4 <z_impl_device_get_binding>
    ee18:	4603      	mov	r3, r0
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    ee1a:	6030      	str	r0, [r6, #0]
    ee1c:	e7f0      	b.n	ee00 <util_rand+0xc>
    ee1e:	bf00      	nop
    ee20:	200008e8 	.word	0x200008e8
    ee24:	00021c7c 	.word	0x00021c7c

0000ee28 <ticker_dequeue.isra.0>:

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    ee28:	780b      	ldrb	r3, [r1, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    ee2a:	2bff      	cmp	r3, #255	; 0xff
    ee2c:	d031      	beq.n	ee92 <ticker_dequeue.isra.0+0x6a>
static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
    ee2e:	b4f0      	push	{r4, r5, r6, r7}
		ticker_current = &node[current];

		if (current == id) {
    ee30:	4293      	cmp	r3, r2
		ticker_current = &node[current];
    ee32:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    ee36:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
		if (current == id) {
    ee3a:	d025      	beq.n	ee88 <ticker_dequeue.isra.0+0x60>
	total = 0U;
    ee3c:	2500      	movs	r5, #0
    ee3e:	e001      	b.n	ee44 <ticker_dequeue.isra.0+0x1c>
		if (current == id) {
    ee40:	429a      	cmp	r2, r3
    ee42:	d00c      	beq.n	ee5e <ticker_dequeue.isra.0+0x36>
			break;
		}

		total += ticker_current->ticks_to_expire;
    ee44:	461f      	mov	r7, r3
		previous = current;
		current = ticker_current->next;
    ee46:	7823      	ldrb	r3, [r4, #0]
		total += ticker_current->ticks_to_expire;
    ee48:	68a6      	ldr	r6, [r4, #8]
	while (current != TICKER_NULL) {
    ee4a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    ee4c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
		total += ticker_current->ticks_to_expire;
    ee50:	4435      	add	r5, r6
		ticker_current = &node[current];
    ee52:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	while (current != TICKER_NULL) {
    ee56:	d1f3      	bne.n	ee40 <ticker_dequeue.isra.0+0x18>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    ee58:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    ee5a:	bcf0      	pop	{r4, r5, r6, r7}
    ee5c:	4770      	bx	lr
	if (previous == current) {
    ee5e:	42ba      	cmp	r2, r7
    ee60:	d014      	beq.n	ee8c <ticker_dequeue.isra.0+0x64>
	node[previous].next = ticker_current->next;
    ee62:	7823      	ldrb	r3, [r4, #0]
	timeout = ticker_current->ticks_to_expire;
    ee64:	68a2      	ldr	r2, [r4, #8]
	node[previous].next = ticker_current->next;
    ee66:	b23f      	sxth	r7, r7
    ee68:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	if (ticker_current->next != TICKER_NULL) {
    ee6c:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
    ee6e:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
    ee72:	d006      	beq.n	ee82 <ticker_dequeue.isra.0+0x5a>
		node[ticker_current->next].ticks_to_expire += timeout;
    ee74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ee78:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    ee7c:	6883      	ldr	r3, [r0, #8]
    ee7e:	4413      	add	r3, r2
    ee80:	6083      	str	r3, [r0, #8]
	return (total + timeout);
    ee82:	1950      	adds	r0, r2, r5
}
    ee84:	bcf0      	pop	{r4, r5, r6, r7}
    ee86:	4770      	bx	lr
		if (current == id) {
    ee88:	461f      	mov	r7, r3
	total = 0U;
    ee8a:	2500      	movs	r5, #0
		instance->ticker_id_head = ticker_current->next;
    ee8c:	7823      	ldrb	r3, [r4, #0]
    ee8e:	700b      	strb	r3, [r1, #0]
    ee90:	e7e7      	b.n	ee62 <ticker_dequeue.isra.0+0x3a>
		return 0;
    ee92:	2000      	movs	r0, #0
}
    ee94:	4770      	bx	lr
    ee96:	bf00      	nop

0000ee98 <ticker_job_list_insert>:
 *                    handle user operation inserts
 * @internal
 */
static inline void ticker_job_list_insert(struct ticker_instance *instance,
					  u8_t insert_head)
{
    ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee9c:	b08d      	sub	sp, #52	; 0x34
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->nodes[0];
	users = &instance->users[0];
	count_user = instance->count_user;
    ee9e:	7a42      	ldrb	r2, [r0, #9]
	node = &instance->nodes[0];
    eea0:	6803      	ldr	r3, [r0, #0]
    eea2:	9307      	str	r3, [sp, #28]
{
    eea4:	4680      	mov	r8, r0
	users = &instance->users[0];
    eea6:	6840      	ldr	r0, [r0, #4]
    eea8:	900b      	str	r0, [sp, #44]	; 0x2c

	/* Iterate through all user ids */
	while (count_user--) {
    eeaa:	2a00      	cmp	r2, #0
    eeac:	f000 81cf 	beq.w	f24e <ticker_job_list_insert+0x3b6>
    eeb0:	1e53      	subs	r3, r2, #1
    eeb2:	b2db      	uxtb	r3, r3
    eeb4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    eeb8:	468b      	mov	fp, r1
    eeba:	9308      	str	r3, [sp, #32]
		struct ticker_user_op *user_ops;
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops = (void *)&user->user_op[0];
    eebc:	9b08      	ldr	r3, [sp, #32]
		user_ops_first = user->first;
		/* Traverse user operation queue - first to middle (wrap) */
		while ((insert_head != TICKER_NULL) ||
    eebe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
		user_ops = (void *)&user->user_op[0];
    eec2:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    eec4:	785b      	ldrb	r3, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    eec6:	920a      	str	r2, [sp, #40]	; 0x28
		user_ops_first = user->first;
    eec8:	9309      	str	r3, [sp, #36]	; 0x24
		while ((insert_head != TICKER_NULL) ||
    eeca:	46c2      	mov	sl, r8
    eecc:	f000 80ec 	beq.w	f0a8 <ticker_job_list_insert+0x210>
			if (insert_head != TICKER_NULL) {
				/* Prepare insert of ticker node specified by
				 * insert_head
				 */
				id_insert = insert_head;
				ticker = &node[id_insert];
    eed0:	9d07      	ldr	r5, [sp, #28]
    eed2:	fa0f f38b 	sxth.w	r3, fp
    eed6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    eeda:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
				insert_head = ticker->next;
    eede:	f815 6033 	ldrb.w	r6, [r5, r3, lsl #3]
    eee2:	8be2      	ldrh	r2, [r4, #30]
    eee4:	8ba1      	ldrh	r1, [r4, #28]
    eee6:	9604      	str	r6, [sp, #16]
	ticker->next = TICKER_NULL;
    eee8:	20ff      	movs	r0, #255	; 0xff
	struct ticker_node *node = &instance->nodes[0];
    eeea:	f8da 6000 	ldr.w	r6, [sl]
	ticker->next = TICKER_NULL;
    eeee:	f805 0033 	strb.w	r0, [r5, r3, lsl #3]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    eef2:	428a      	cmp	r2, r1
				ticker = &node[id_insert];
    eef4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	struct ticker_node *node = &instance->nodes[0];
    eef8:	9603      	str	r6, [sp, #12]
				ticker = &node[id_insert];
    eefa:	9306      	str	r3, [sp, #24]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    eefc:	f240 813d 	bls.w	f17a <ticker_job_list_insert+0x2e2>
		skip = ticker->lazy_current -
    ef00:	1a52      	subs	r2, r2, r1
    ef02:	b293      	uxth	r3, r2
    ef04:	9305      	str	r3, [sp, #20]

				user_op = NULL;
    ef06:	f04f 0900 	mov.w	r9, #0
				continue;
    ef0a:	9b03      	ldr	r3, [sp, #12]
    ef0c:	9a06      	ldr	r2, [sp, #24]
    ef0e:	461f      	mov	r7, r3
    ef10:	eb03 0e02 	add.w	lr, r3, r2
    ef14:	46c8      	mov	r8, r9
	current = instance->ticker_id_head;
    ef16:	f89a 001d 	ldrb.w	r0, [sl, #29]
    ef1a:	f8de 3018 	ldr.w	r3, [lr, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
    ef1e:	f8de 2008 	ldr.w	r2, [lr, #8]
	ticks_slot_previous = instance->ticks_slot_previous;
    ef22:	f8da c018 	ldr.w	ip, [sl, #24]
	while ((current != TICKER_NULL) &&
    ef26:	9301      	str	r3, [sp, #4]
    ef28:	28ff      	cmp	r0, #255	; 0xff
    ef2a:	f000 8122 	beq.w	f172 <ticker_job_list_insert+0x2da>
    ef2e:	4603      	mov	r3, r0
	collide = ticker_id_slot_previous = TICKER_NULL;
    ef30:	26ff      	movs	r6, #255	; 0xff
    ef32:	e009      	b.n	ef48 <ticker_job_list_insert+0xb0>
			if (ticks_slot_previous > ticks_to_expire_current) {
    ef34:	45e1      	cmp	r9, ip
    ef36:	d201      	bcs.n	ef3c <ticker_job_list_insert+0xa4>
				ticks_slot_previous -= ticks_to_expire_current;
    ef38:	ebac 0109 	sub.w	r1, ip, r9
		current = ticker_current->next;
    ef3c:	782d      	ldrb	r5, [r5, #0]
	while ((current != TICKER_NULL) &&
    ef3e:	2dff      	cmp	r5, #255	; 0xff
    ef40:	4618      	mov	r0, r3
    ef42:	d014      	beq.n	ef6e <ticker_job_list_insert+0xd6>
    ef44:	462b      	mov	r3, r5
    ef46:	468c      	mov	ip, r1
		 (ticker_current = &node[current])->ticks_to_expire))) {
    ef48:	b219      	sxth	r1, r3
    ef4a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
    ef4e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
		(ticks_to_expire_current =
    ef52:	f8d5 9008 	ldr.w	r9, [r5, #8]
	while ((current != TICKER_NULL) &&
    ef56:	4591      	cmp	r9, r2
    ef58:	d216      	bcs.n	ef88 <ticker_job_list_insert+0xf0>
		if (ticker_current->ticks_slot != 0U) {
    ef5a:	69a9      	ldr	r1, [r5, #24]
		ticks_to_expire -= ticks_to_expire_current;
    ef5c:	eba2 0209 	sub.w	r2, r2, r9
		if (ticker_current->ticks_slot != 0U) {
    ef60:	2900      	cmp	r1, #0
    ef62:	d0e7      	beq.n	ef34 <ticker_job_list_insert+0x9c>
		current = ticker_current->next;
    ef64:	782d      	ldrb	r5, [r5, #0]
	while ((current != TICKER_NULL) &&
    ef66:	2dff      	cmp	r5, #255	; 0xff
    ef68:	461e      	mov	r6, r3
    ef6a:	4618      	mov	r0, r3
    ef6c:	d1ea      	bne.n	ef44 <ticker_job_list_insert+0xac>
	if ((ticker_new->ticks_slot == 0U) ||
    ef6e:	9801      	ldr	r0, [sp, #4]
    ef70:	b108      	cbz	r0, ef76 <ticker_job_list_insert+0xde>
    ef72:	428a      	cmp	r2, r1
    ef74:	d379      	bcc.n	f06a <ticker_job_list_insert+0x1d2>
		ticker_new->next = current;
    ef76:	21ff      	movs	r1, #255	; 0xff
    ef78:	4618      	mov	r0, r3
    ef7a:	46c1      	mov	r9, r8
		ticker_new->ticks_to_expire = ticks_to_expire;
    ef7c:	f8ce 2008 	str.w	r2, [lr, #8]
		ticker_new->next = current;
    ef80:	f88e 1000 	strb.w	r1, [lr]
    ef84:	460b      	mov	r3, r1
    ef86:	e0cf      	b.n	f128 <ticker_job_list_insert+0x290>
	collide = ticker_by_slot_get(&node[0], current,
    ef88:	9d01      	ldr	r5, [sp, #4]
    ef8a:	1955      	adds	r5, r2, r5
    ef8c:	9500      	str	r5, [sp, #0]
    ef8e:	461d      	mov	r5, r3
    ef90:	e00d      	b.n	efae <ticker_job_list_insert+0x116>
		if (ticker->ticks_slot) {
    ef92:	9902      	ldr	r1, [sp, #8]
    ef94:	6989      	ldr	r1, [r1, #24]
    ef96:	b9b1      	cbnz	r1, efc6 <ticker_job_list_insert+0x12e>
		ticker_id_head = ticker->next;
    ef98:	9902      	ldr	r1, [sp, #8]
    ef9a:	780d      	ldrb	r5, [r1, #0]
	while (ticker_id_head != TICKER_NULL) {
    ef9c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    efa0:	2dff      	cmp	r5, #255	; 0xff
    efa2:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    efa6:	d00e      	beq.n	efc6 <ticker_job_list_insert+0x12e>
    efa8:	f8d1 9008 	ldr.w	r9, [r1, #8]
    efac:	b229      	sxth	r1, r5
		ticker = &node[ticker_id_head];
    efae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    efb2:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    efb6:	9102      	str	r1, [sp, #8]
		if (ticks_slot <= ticks_to_expire) {
    efb8:	9900      	ldr	r1, [sp, #0]
    efba:	4549      	cmp	r1, r9
		ticks_slot -= ticks_to_expire;
    efbc:	eba1 0109 	sub.w	r1, r1, r9
    efc0:	9100      	str	r1, [sp, #0]
		if (ticks_slot <= ticks_to_expire) {
    efc2:	d8e6      	bhi.n	ef92 <ticker_job_list_insert+0xfa>
			return TICKER_NULL;
    efc4:	25ff      	movs	r5, #255	; 0xff
	if ((ticker_new->ticks_slot == 0U) ||
    efc6:	9901      	ldr	r1, [sp, #4]
    efc8:	2900      	cmp	r1, #0
    efca:	f000 80a6 	beq.w	f11a <ticker_job_list_insert+0x282>
    efce:	4562      	cmp	r2, ip
    efd0:	d34b      	bcc.n	f06a <ticker_job_list_insert+0x1d2>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    efd2:	2dff      	cmp	r5, #255	; 0xff
    efd4:	f000 80a1 	beq.w	f11a <ticker_job_list_insert+0x282>
	while (id_insert !=
    efd8:	455d      	cmp	r5, fp
    efda:	f000 813b 	beq.w	f254 <ticker_job_list_insert+0x3bc>
			struct ticker_node *ticker_collide = &node[id_collide];
    efde:	9b03      	ldr	r3, [sp, #12]
    efe0:	b22e      	sxth	r6, r5
    efe2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    efe6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
			if (ticker_collide->lazy_current >
    efea:	8bf3      	ldrh	r3, [r6, #30]
			    ticker_collide->lazy_periodic) {
    efec:	8bb1      	ldrh	r1, [r6, #28]
    efee:	6872      	ldr	r2, [r6, #4]
			if (ticker_collide->lazy_current >
    eff0:	428b      	cmp	r3, r1
    eff2:	d922      	bls.n	f03a <ticker_job_list_insert+0x1a2>
			if (ticker_collide->ticks_periodic &&
    eff4:	b122      	cbz	r2, f000 <ticker_job_list_insert+0x168>
    eff6:	9a05      	ldr	r2, [sp, #20]
				skip_collide = ticker_collide->lazy_current -
    eff8:	1a5b      	subs	r3, r3, r1
			if (ticker_collide->ticks_periodic &&
    effa:	b29b      	uxth	r3, r3
    effc:	4293      	cmp	r3, r2
    effe:	d91e      	bls.n	f03e <ticker_job_list_insert+0x1a6>
		if (ticker->ticks_periodic != 0U) {
    f000:	6860      	ldr	r0, [r4, #4]
    f002:	2800      	cmp	r0, #0
    f004:	d03a      	beq.n	f07c <ticker_job_list_insert+0x1e4>
	ticker->remainder_current += ticker->remainder_periodic;
    f006:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    f00a:	4b93      	ldr	r3, [pc, #588]	; (f258 <ticker_job_list_insert+0x3c0>)
	ticker->remainder_current += ticker->remainder_periodic;
    f00c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    f00e:	4993      	ldr	r1, [pc, #588]	; (f25c <ticker_job_list_insert+0x3c4>)
    f010:	18d3      	adds	r3, r2, r3
    f012:	428b      	cmp	r3, r1
    f014:	f240 809f 	bls.w	f156 <ticker_job_list_insert+0x2be>
	ticker->remainder_current += ticker->remainder_periodic;
    f018:	6262      	str	r2, [r4, #36]	; 0x24
    f01a:	2500      	movs	r5, #0
			ticker->ticks_to_expire += ticker->ticks_periodic +
    f01c:	68a3      	ldr	r3, [r4, #8]
			ticker->lazy_current++;
    f01e:	8be1      	ldrh	r1, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    f020:	6962      	ldr	r2, [r4, #20]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    f022:	4418      	add	r0, r3
    f024:	1943      	adds	r3, r0, r5
			ticker->lazy_current++;
    f026:	3101      	adds	r1, #1
			if (ticker->ticks_to_expire >
    f028:	4293      	cmp	r3, r2
			ticker->lazy_current++;
    f02a:	83e1      	strh	r1, [r4, #30]
			if (ticker->ticks_to_expire >
    f02c:	f240 809c 	bls.w	f168 <ticker_job_list_insert+0x2d0>
				ticker->ticks_to_expire -=
    f030:	1a9b      	subs	r3, r3, r2
				ticker->ticks_to_expire_minus = 0U;
    f032:	2200      	movs	r2, #0
				ticker->ticks_to_expire -=
    f034:	60a3      	str	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
    f036:	6162      	str	r2, [r4, #20]
    f038:	e76d      	b.n	ef16 <ticker_job_list_insert+0x7e>
			if (ticker_collide->ticks_periodic &&
    f03a:	2a00      	cmp	r2, #0
    f03c:	d0e0      	beq.n	f000 <ticker_job_list_insert+0x168>
			    skip_collide <= skip &&
    f03e:	78f2      	ldrb	r2, [r6, #3]
    f040:	78e3      	ldrb	r3, [r4, #3]
    f042:	429a      	cmp	r2, r3
    f044:	d2dc      	bcs.n	f000 <ticker_job_list_insert+0x168>
					ticker_dequeue(instance, id_collide);
    f046:	4651      	mov	r1, sl
    f048:	462a      	mov	r2, r5
    f04a:	f851 0b1d 	ldr.w	r0, [r1], #29
    f04e:	f7ff feeb 	bl	ee28 <ticker_dequeue.isra.0>
				ticker_collide->req = ticker_collide->ack;
    f052:	78b3      	ldrb	r3, [r6, #2]
				ticker_collide->next = *insert_head;
    f054:	9a04      	ldr	r2, [sp, #16]
				ticker_collide->req = ticker_collide->ack;
    f056:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
    f058:	7032      	strb	r2, [r6, #0]
    f05a:	f8da 7000 	ldr.w	r7, [sl]
    f05e:	9b06      	ldr	r3, [sp, #24]
				ticker_collide->ticks_to_expire =
    f060:	60b0      	str	r0, [r6, #8]
				continue;
    f062:	9504      	str	r5, [sp, #16]
    f064:	eb07 0e03 	add.w	lr, r7, r3
    f068:	e755      	b.n	ef16 <ticker_job_list_insert+0x7e>
	while (id_insert !=
    f06a:	455e      	cmp	r6, fp
    f06c:	4635      	mov	r5, r6
    f06e:	f000 80f1 	beq.w	f254 <ticker_job_list_insert+0x3bc>
		if (id_collide != TICKER_NULL) {
    f072:	2eff      	cmp	r6, #255	; 0xff
    f074:	d1b3      	bne.n	efde <ticker_job_list_insert+0x146>
		if (ticker->ticks_periodic != 0U) {
    f076:	6860      	ldr	r0, [r4, #4]
    f078:	2800      	cmp	r0, #0
    f07a:	d1c4      	bne.n	f006 <ticker_job_list_insert+0x16e>
    f07c:	46c1      	mov	r9, r8
			return TICKER_STATUS_FAILURE;
    f07e:	2001      	movs	r0, #1

			/* Insert ticker node */
			status = ticker_job_insert(instance, id_insert, ticker,
						   &insert_head);

			if (user_op) {
    f080:	f1b9 0f00 	cmp.w	r9, #0
    f084:	d00a      	beq.n	f09c <ticker_job_list_insert+0x204>
	if (user_op->fp_op_func) {
    f086:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
	user_op->status = status;
    f08a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f08e:	2200      	movs	r2, #0
    f090:	f889 2000 	strb.w	r2, [r9]
	if (user_op->fp_op_func) {
    f094:	b113      	cbz	r3, f09c <ticker_job_list_insert+0x204>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f096:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    f09a:	4798      	blx	r3
			return TICKER_STATUS_FAILURE;
    f09c:	f8dd b010 	ldr.w	fp, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    f0a0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    f0a4:	f47f af14 	bne.w	eed0 <ticker_job_list_insert+0x38>
    f0a8:	9b08      	ldr	r3, [sp, #32]
	user_op->status = status;
    f0aa:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
    f0ae:	789a      	ldrb	r2, [r3, #2]
    f0b0:	2701      	movs	r7, #1
				user_op = &user_ops[user_ops_first];
    f0b2:	eb04 0944 	add.w	r9, r4, r4, lsl #1
				first = user_ops_first + 1;
    f0b6:	1c61      	adds	r1, r4, #1
		while ((insert_head != TICKER_NULL) ||
    f0b8:	4294      	cmp	r4, r2
				user_op = &user_ops[user_ops_first];
    f0ba:	ea4f 1309 	mov.w	r3, r9, lsl #4
				first = user_ops_first + 1;
    f0be:	b2cc      	uxtb	r4, r1
				user_op = &user_ops[user_ops_first];
    f0c0:	eb05 1909 	add.w	r9, r5, r9, lsl #4
		while ((insert_head != TICKER_NULL) ||
    f0c4:	f000 809f 	beq.w	f206 <ticker_job_list_insert+0x36e>
				if (first == user->count_user_op) {
    f0c8:	9908      	ldr	r1, [sp, #32]
    f0ca:	7808      	ldrb	r0, [r1, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f0cc:	5ce9      	ldrb	r1, [r5, r3]
					first = 0U;
    f0ce:	42a0      	cmp	r0, r4
    f0d0:	bf08      	it	eq
    f0d2:	2400      	moveq	r4, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f0d4:	2904      	cmp	r1, #4
    f0d6:	d1ec      	bne.n	f0b2 <ticker_job_list_insert+0x21a>
				id_insert = user_op->id;
    f0d8:	f899 0001 	ldrb.w	r0, [r9, #1]
				ticker = &node[id_insert];
    f0dc:	9e07      	ldr	r6, [sp, #28]
    f0de:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    f0e2:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
    f0e6:	00c9      	lsls	r1, r1, #3
				if (((ticker->req -
    f0e8:	f89c 8001 	ldrb.w	r8, [ip, #1]
				      ticker->ack) & 0xff) != 0U) {
    f0ec:	f89c e002 	ldrb.w	lr, [ip, #2]
				if (((ticker->req -
    f0f0:	eba8 080e 	sub.w	r8, r8, lr
    f0f4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    f0f8:	d044      	beq.n	f184 <ticker_job_list_insert+0x2ec>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f0fa:	f04f 0100 	mov.w	r1, #0
    f0fe:	54e9      	strb	r1, [r5, r3]
	if (user_op->fp_op_func) {
    f100:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
	user_op->status = status;
    f104:	f8c9 7024 	str.w	r7, [r9, #36]	; 0x24
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f108:	2001      	movs	r0, #1
	if (user_op->fp_op_func) {
    f10a:	2b00      	cmp	r3, #0
    f10c:	d0d1      	beq.n	f0b2 <ticker_job_list_insert+0x21a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f10e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    f112:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    f114:	9908      	ldr	r1, [sp, #32]
    f116:	788a      	ldrb	r2, [r1, #2]
    f118:	e7cb      	b.n	f0b2 <ticker_job_list_insert+0x21a>
		if (previous == current) {
    f11a:	4298      	cmp	r0, r3
    f11c:	46c1      	mov	r9, r8
		ticker_new->ticks_to_expire = ticks_to_expire;
    f11e:	f8ce 2008 	str.w	r2, [lr, #8]
		ticker_new->next = current;
    f122:	f88e 3000 	strb.w	r3, [lr]
		if (previous == current) {
    f126:	d013      	beq.n	f150 <ticker_job_list_insert+0x2b8>
			node[previous].next = id;
    f128:	b200      	sxth	r0, r0
    f12a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f12e:	f807 b030 	strb.w	fp, [r7, r0, lsl #3]
		if (current != TICKER_NULL) {
    f132:	2bff      	cmp	r3, #255	; 0xff
    f134:	d007      	beq.n	f146 <ticker_job_list_insert+0x2ae>
			node[current].ticks_to_expire -= ticks_to_expire;
    f136:	b21b      	sxth	r3, r3
    f138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f13c:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    f140:	68bb      	ldr	r3, [r7, #8]
    f142:	1a9a      	subs	r2, r3, r2
    f144:	60ba      	str	r2, [r7, #8]
	ticker->req = ticker->ack + 1;
    f146:	78a3      	ldrb	r3, [r4, #2]
    f148:	3301      	adds	r3, #1
    f14a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    f14c:	2000      	movs	r0, #0
    f14e:	e797      	b.n	f080 <ticker_job_list_insert+0x1e8>
			instance->ticker_id_head = id;
    f150:	f88a b01d 	strb.w	fp, [sl, #29]
    f154:	e7ed      	b.n	f132 <ticker_job_list_insert+0x29a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f156:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
    f15a:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
    f15e:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
    f162:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    f164:	2501      	movs	r5, #1
    f166:	e759      	b.n	f01c <ticker_job_list_insert+0x184>
				ticker->ticks_to_expire_minus -=
    f168:	1ad3      	subs	r3, r2, r3
				ticker->ticks_to_expire = 0U;
    f16a:	2200      	movs	r2, #0
				ticker->ticks_to_expire_minus -=
    f16c:	6163      	str	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
    f16e:	60a2      	str	r2, [r4, #8]
    f170:	e6d1      	b.n	ef16 <ticker_job_list_insert+0x7e>
	collide = ticker_id_slot_previous = TICKER_NULL;
    f172:	4606      	mov	r6, r0
	while ((current != TICKER_NULL) &&
    f174:	4603      	mov	r3, r0
    f176:	4605      	mov	r5, r0
    f178:	e725      	b.n	efc6 <ticker_job_list_insert+0x12e>
				user_op = NULL;
    f17a:	f04f 0900 	mov.w	r9, #0
		skip = 0U;
    f17e:	f8cd 9014 	str.w	r9, [sp, #20]
    f182:	e6c2      	b.n	ef0a <ticker_job_list_insert+0x72>
	LL_ASSERT(start->lazy != TICKER_LAZY_MUST_EXPIRE);
    f184:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    f188:	9409      	str	r4, [sp, #36]	; 0x24
    f18a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    f18e:	42b3      	cmp	r3, r6
				ticker_job_op_start(ticker, user_op,
    f190:	f8da 7014 	ldr.w	r7, [sl, #20]
    f194:	9106      	str	r1, [sp, #24]
    f196:	4605      	mov	r5, r0
    f198:	4664      	mov	r4, ip
	LL_ASSERT(start->lazy != TICKER_LAZY_MUST_EXPIRE);
    f19a:	d03d      	beq.n	f218 <ticker_job_list_insert+0x380>
	ticker->remainder_periodic = start->remainder_periodic;
    f19c:	e9d9 1203 	ldrd	r1, r2, [r9, #12]
	ticker->ticks_periodic = start->ticks_periodic;
    f1a0:	f8cc 1004 	str.w	r1, [ip, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    f1a4:	f8cc 2020 	str.w	r2, [ip, #32]
	ticker->timeout_func = start->fp_timeout_func;
    f1a8:	e9d9 6006 	ldrd	r6, r0, [r9, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    f1ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f1b0:	83a3      	strh	r3, [r4, #28]
	ticker->context = start->context;
    f1b2:	f8d9 3020 	ldr.w	r3, [r9, #32]
	ticker->ticks_slot = start->ticks_slot;
    f1b6:	61a6      	str	r6, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f1b8:	1bd1      	subs	r1, r2, r7
	ticker->context = start->context;
    f1ba:	e9c4 0303 	strd	r0, r3, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f1be:	0208      	lsls	r0, r1, #8
	ticker->ticks_to_expire = start->ticks_first;
    f1c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f1c4:	d414      	bmi.n	f1f0 <ticker_job_list_insert+0x358>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f1c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f1ca:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    f1cc:	b1c3      	cbz	r3, f200 <ticker_job_list_insert+0x368>
	ticker->force = 1U;
    f1ce:	2201      	movs	r2, #1
    f1d0:	70e2      	strb	r2, [r4, #3]
	ticker->next = TICKER_NULL;
    f1d2:	21ff      	movs	r1, #255	; 0xff
	ticker->remainder_current = 0U;
    f1d4:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    f1d6:	60a3      	str	r3, [r4, #8]
	struct ticker_node *node = &instance->nodes[0];
    f1d8:	f8da 3000 	ldr.w	r3, [sl]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f1dc:	f8c4 8014 	str.w	r8, [r4, #20]
				id_insert = user_op->id;
    f1e0:	46ab      	mov	fp, r5
	struct ticker_node *node = &instance->nodes[0];
    f1e2:	9303      	str	r3, [sp, #12]
	ticker->remainder_current = 0U;
    f1e4:	6262      	str	r2, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    f1e6:	83e2      	strh	r2, [r4, #30]
		skip = 0U;
    f1e8:	9205      	str	r2, [sp, #20]
	ticker->next = TICKER_NULL;
    f1ea:	7021      	strb	r1, [r4, #0]
    f1ec:	9104      	str	r1, [sp, #16]
    f1ee:	e68c      	b.n	ef0a <ticker_job_list_insert+0x72>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f1f0:	1aba      	subs	r2, r7, r2
    f1f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f1f6:	4293      	cmp	r3, r2
    f1f8:	d925      	bls.n	f246 <ticker_job_list_insert+0x3ae>
			ticks_to_expire -= delta_current_start;
    f1fa:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    f1fc:	2b00      	cmp	r3, #0
    f1fe:	d1e6      	bne.n	f1ce <ticker_job_list_insert+0x336>
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f200:	4698      	mov	r8, r3
		ticks_to_expire = 0U;
    f202:	2300      	movs	r3, #0
    f204:	e7e3      	b.n	f1ce <ticker_job_list_insert+0x336>
    f206:	9a08      	ldr	r2, [sp, #32]
	while (count_user--) {
    f208:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f20a:	4291      	cmp	r1, r2
    f20c:	46d0      	mov	r8, sl
    f20e:	f1a2 0308 	sub.w	r3, r2, #8
    f212:	d01c      	beq.n	f24e <ticker_job_list_insert+0x3b6>
    f214:	9308      	str	r3, [sp, #32]
    f216:	e651      	b.n	eebc <ticker_job_list_insert+0x24>
	LL_ASSERT(start->lazy != TICKER_LAZY_MUST_EXPIRE);
    f218:	4a11      	ldr	r2, [pc, #68]	; (f260 <ticker_job_list_insert+0x3c8>)
    f21a:	4912      	ldr	r1, [pc, #72]	; (f264 <ticker_job_list_insert+0x3cc>)
    f21c:	4812      	ldr	r0, [pc, #72]	; (f268 <ticker_job_list_insert+0x3d0>)
    f21e:	f240 53b6 	movw	r3, #1462	; 0x5b6
    f222:	f00d f8f3 	bl	1c40c <printk>
    f226:	4040      	eors	r0, r0
    f228:	f380 8811 	msr	BASEPRI, r0
    f22c:	f04f 0003 	mov.w	r0, #3
    f230:	df02      	svc	2
	ticker->remainder_periodic = start->remainder_periodic;
    f232:	e9d9 1203 	ldrd	r1, r2, [r9, #12]
    f236:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    f23a:	6061      	str	r1, [r4, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f23c:	42b3      	cmp	r3, r6
    f23e:	bf08      	it	eq
    f240:	2300      	moveq	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
    f242:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f244:	e7b0      	b.n	f1a8 <ticker_job_list_insert+0x310>
			    (delta_current_start - ticks_to_expire);
    f246:	1ad3      	subs	r3, r2, r3
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f248:	4698      	mov	r8, r3
		ticks_to_expire = 0U;
    f24a:	2300      	movs	r3, #0
    f24c:	e7bf      	b.n	f1ce <ticker_job_list_insert+0x336>
}
    f24e:	b00d      	add	sp, #52	; 0x34
    f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f254:	46c1      	mov	r9, r8
    f256:	e776      	b.n	f146 <ticker_job_list_insert+0x2ae>
    f258:	ff172b5a 	.word	0xff172b5a
    f25c:	7f172b59 	.word	0x7f172b59
    f260:	00021c88 	.word	0x00021c88
    f264:	00021cc8 	.word	0x00021cc8
    f268:	00021ce0 	.word	0x00021ce0

0000f26c <ticker_worker>:
{
    f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    f270:	f890 a01e 	ldrb.w	sl, [r0, #30]
	instance->worker_trigger = 1U;
    f274:	2301      	movs	r3, #1
{
    f276:	b081      	sub	sp, #4
	instance->worker_trigger = 1U;
    f278:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    f27a:	f1ba 0f00 	cmp.w	sl, #0
    f27e:	d154      	bne.n	f32a <ticker_worker+0xbe>
	if (instance->ticker_id_head == TICKER_NULL) {
    f280:	7f43      	ldrb	r3, [r0, #29]
    f282:	2bff      	cmp	r3, #255	; 0xff
    f284:	4606      	mov	r6, r0
    f286:	d04e      	beq.n	f326 <ticker_worker+0xba>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    f288:	f009 fd88 	bl	18d9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f28c:	6975      	ldr	r5, [r6, #20]
	ticker_id_head = instance->ticker_id_head;
    f28e:	7f74      	ldrb	r4, [r6, #29]
	node = &instance->nodes[0];
    f290:	f8d6 8000 	ldr.w	r8, [r6]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f294:	1b45      	subs	r5, r0, r5
    f296:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
	ticks_expired = 0U;
    f29a:	46d3      	mov	fp, sl
	while (ticker_id_head != TICKER_NULL) {
    f29c:	2cff      	cmp	r4, #255	; 0xff
    f29e:	d025      	beq.n	f2ec <ticker_worker+0x80>
		ticker = &node[ticker_id_head];
    f2a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    f2a4:	eb08 01c4 	add.w	r1, r8, r4, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    f2a8:	6888      	ldr	r0, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    f2aa:	42a8      	cmp	r0, r5
		ticks_elapsed -= ticks_to_expire;
    f2ac:	eba5 0500 	sub.w	r5, r5, r0
		if (ticks_elapsed < ticks_to_expire) {
    f2b0:	d81c      	bhi.n	f2ec <ticker_worker+0x80>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f2b2:	788a      	ldrb	r2, [r1, #2]
    f2b4:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    f2b6:	f818 4034 	ldrb.w	r4, [r8, r4, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f2ba:	1a9b      	subs	r3, r3, r2
    f2bc:	b2db      	uxtb	r3, r3
    f2be:	2b01      	cmp	r3, #1
		ticks_expired += ticks_to_expire;
    f2c0:	4483      	add	fp, r0
		ticker->ack--;
    f2c2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f2c6:	d1e9      	bne.n	f29c <ticker_worker+0x30>
		if (ticker->timeout_func) {
    f2c8:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    f2cc:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    f2ce:	f1b9 0f00 	cmp.w	r9, #0
    f2d2:	d0e3      	beq.n	f29c <ticker_worker+0x30>
			ticker->timeout_func(ticks_at_expire,
    f2d4:	e9d1 3004 	ldrd	r3, r0, [r1, #16]
					   ticks_expired -
    f2d8:	6977      	ldr	r7, [r6, #20]
			ticker->timeout_func(ticks_at_expire,
    f2da:	8bca      	ldrh	r2, [r1, #30]
    f2dc:	6a49      	ldr	r1, [r1, #36]	; 0x24
					   ticks_expired -
    f2de:	1a38      	subs	r0, r7, r0
    f2e0:	4458      	add	r0, fp
			ticker->timeout_func(ticks_at_expire,
    f2e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f2e6:	47c8      	blx	r9
	while (ticker_id_head != TICKER_NULL) {
    f2e8:	2cff      	cmp	r4, #255	; 0xff
    f2ea:	d1d9      	bne.n	f2a0 <ticker_worker+0x34>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    f2ec:	7af3      	ldrb	r3, [r6, #11]
    f2ee:	7ab2      	ldrb	r2, [r6, #10]
    f2f0:	429a      	cmp	r2, r3
    f2f2:	d108      	bne.n	f306 <ticker_worker+0x9a>
	u8_t idx = *ticks_elapsed_index + 1;
    f2f4:	3201      	adds	r2, #1
    f2f6:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    f2f8:	2a02      	cmp	r2, #2
    f2fa:	bf1a      	itte	ne
    f2fc:	4692      	movne	sl, r2
    f2fe:	4653      	movne	r3, sl
    f300:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    f302:	f886 a00b 	strb.w	sl, [r6, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    f306:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f30a:	6a74      	ldr	r4, [r6, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    f30c:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->worker_trigger = 0U;
    f310:	2200      	movs	r2, #0
    f312:	77f2      	strb	r2, [r6, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f314:	4633      	mov	r3, r6
    f316:	2201      	movs	r2, #1
    f318:	2104      	movs	r1, #4
    f31a:	2003      	movs	r0, #3
    f31c:	46a4      	mov	ip, r4
}
    f31e:	b001      	add	sp, #4
    f320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f324:	4760      	bx	ip
		instance->worker_trigger = 0U;
    f326:	f880 a01f 	strb.w	sl, [r0, #31]
}
    f32a:	b001      	add	sp, #4
    f32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f330 <ticker_job>:
	if (instance->worker_trigger) {
    f330:	7fc2      	ldrb	r2, [r0, #31]
    f332:	2a00      	cmp	r2, #0
    f334:	f040 82a9 	bne.w	f88a <ticker_job+0x55a>
{
    f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f33c:	7a83      	ldrb	r3, [r0, #10]
    f33e:	7ac1      	ldrb	r1, [r0, #11]
{
    f340:	b08d      	sub	sp, #52	; 0x34
    f342:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    f344:	6940      	ldr	r0, [r0, #20]
    f346:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f348:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    f34a:	f04f 0001 	mov.w	r0, #1
    f34e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f352:	f000 8081 	beq.w	f458 <ticker_job+0x128>
	u8_t idx = *ticks_elapsed_index + 1;
    f356:	4403      	add	r3, r0
    f358:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    f35a:	2b02      	cmp	r3, #2
		idx = 0U;
    f35c:	bf08      	it	eq
    f35e:	4613      	moveq	r3, r2
		ticks_elapsed =
    f360:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    f364:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    f368:	f8d2 900c 	ldr.w	r9, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    f36c:	f89b 201d 	ldrb.w	r2, [fp, #29]
    f370:	9203      	str	r2, [sp, #12]
	node = &instance->nodes[0];
    f372:	f8db 2000 	ldr.w	r2, [fp]
    f376:	9202      	str	r2, [sp, #8]
	users = &instance->users[0];
    f378:	f8db 2004 	ldr.w	r2, [fp, #4]
    f37c:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
    f37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	count_user = instance->count_user;
    f380:	f89b 3009 	ldrb.w	r3, [fp, #9]
    f384:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
    f386:	444a      	add	r2, r9
	count_user = instance->count_user;
    f388:	4619      	mov	r1, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    f38a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	while (count_user--) {
    f38e:	3b01      	subs	r3, #1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    f390:	f8cb 2014 	str.w	r2, [fp, #20]
	while (count_user--) {
    f394:	b2db      	uxtb	r3, r3
    f396:	2900      	cmp	r1, #0
    f398:	f000 82fb 	beq.w	f992 <ticker_job+0x662>
		flag_elapsed = 1U;
    f39c:	2201      	movs	r2, #1
    f39e:	920b      	str	r2, [sp, #44]	; 0x2c
    f3a0:	9a05      	ldr	r2, [sp, #20]
    f3a2:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
	pending = 0U;
    f3a6:	2300      	movs	r3, #0
    f3a8:	9304      	str	r3, [sp, #16]
	insert_head = TICKER_NULL;
    f3aa:	23ff      	movs	r3, #255	; 0xff
    f3ac:	e9cd 3900 	strd	r3, r9, [sp]
    f3b0:	46da      	mov	sl, fp
		user_ops = &user->user_op[0];
    f3b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f3b6:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    f3b8:	f898 7003 	ldrb.w	r7, [r8, #3]
    f3bc:	f898 3002 	ldrb.w	r3, [r8, #2]
    f3c0:	9a06      	ldr	r2, [sp, #24]
		ticker->ticks_slot = 0U;
    f3c2:	461e      	mov	r6, r3
			user_op = &user_ops[user->middle];
    f3c4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
			middle = user->middle + 1;
    f3c8:	1c59      	adds	r1, r3, #1
		while (user->middle != user->last) {
    f3ca:	42bb      	cmp	r3, r7
			user_op = &user_ops[user->middle];
    f3cc:	ea4f 1005 	mov.w	r0, r5, lsl #4
			middle = user->middle + 1;
    f3d0:	b2cb      	uxtb	r3, r1
			user_op = &user_ops[user->middle];
    f3d2:	eb02 1505 	add.w	r5, r2, r5, lsl #4
		while (user->middle != user->last) {
    f3d6:	d074      	beq.n	f4c2 <ticker_job+0x192>
			if (middle == user->count_user_op) {
    f3d8:	f898 1000 	ldrb.w	r1, [r8]
				middle = 0U;
    f3dc:	4299      	cmp	r1, r3
    f3de:	bf08      	it	eq
    f3e0:	2300      	moveq	r3, #0
			user->middle = middle;
    f3e2:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    f3e6:	5c10      	ldrb	r0, [r2, r0]
    f3e8:	2804      	cmp	r0, #4
    f3ea:	d95d      	bls.n	f4a8 <ticker_job+0x178>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    f3ec:	2806      	cmp	r0, #6
    f3ee:	f200 8123 	bhi.w	f638 <ticker_job+0x308>
			ticker = &node[user_op->id];
    f3f2:	786a      	ldrb	r2, [r5, #1]
    f3f4:	9902      	ldr	r1, [sp, #8]
    f3f6:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    f3fa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    f3fe:	7861      	ldrb	r1, [r4, #1]
    f400:	f894 c002 	ldrb.w	ip, [r4, #2]
    f404:	eba1 010c 	sub.w	r1, r1, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    f408:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f40c:	f000 8114 	beq.w	f638 <ticker_job+0x308>
			    (state == 0U) ||
    f410:	2805      	cmp	r0, #5
    f412:	f000 80fc 	beq.w	f60e <ticker_job+0x2de>
			if (state == 1U) {
    f416:	2901      	cmp	r1, #1
    f418:	d148      	bne.n	f4ac <ticker_job+0x17c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f41a:	4651      	mov	r1, sl
    f41c:	f851 0b1d 	ldr.w	r0, [r1], #29
    f420:	f7ff fd02 	bl	ee28 <ticker_dequeue.isra.0>
    f424:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f426:	782b      	ldrb	r3, [r5, #0]
    f428:	2b05      	cmp	r3, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f42a:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f42c:	d051      	beq.n	f4d2 <ticker_job+0x1a2>
		ticker->req = ticker->ack;
    f42e:	78a3      	ldrb	r3, [r4, #2]
    f430:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    f432:	f89a 201c 	ldrb.w	r2, [sl, #28]
    f436:	786b      	ldrb	r3, [r5, #1]
    f438:	429a      	cmp	r2, r3
    f43a:	d022      	beq.n	f482 <ticker_job+0x152>
	if (user_op->fp_op_func) {
    f43c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f43e:	2000      	movs	r0, #0
    f440:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    f442:	6268      	str	r0, [r5, #36]	; 0x24
	if (user_op->fp_op_func) {
    f444:	b10b      	cbz	r3, f44a <ticker_job+0x11a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f446:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f448:	4798      	blx	r3
    f44a:	f898 3002 	ldrb.w	r3, [r8, #2]
    f44e:	f898 7003 	ldrb.w	r7, [r8, #3]
    f452:	9a06      	ldr	r2, [sp, #24]
		ticker->ticks_slot = 0U;
    f454:	461e      	mov	r6, r3
    f456:	e7b5      	b.n	f3c4 <ticker_job+0x94>
	ticker_id_old_head = instance->ticker_id_head;
    f458:	f89b 101d 	ldrb.w	r1, [fp, #29]
	count_user = instance->count_user;
    f45c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    f460:	9103      	str	r1, [sp, #12]
	node = &instance->nodes[0];
    f462:	f8db 1000 	ldr.w	r1, [fp]
    f466:	9102      	str	r1, [sp, #8]
	users = &instance->users[0];
    f468:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    f46c:	9301      	str	r3, [sp, #4]
	users = &instance->users[0];
    f46e:	9105      	str	r1, [sp, #20]
	while (count_user--) {
    f470:	4619      	mov	r1, r3
    f472:	3b01      	subs	r3, #1
    f474:	b2db      	uxtb	r3, r3
    f476:	2900      	cmp	r1, #0
    f478:	f000 81ae 	beq.w	f7d8 <ticker_job+0x4a8>
		flag_elapsed = 0U;
    f47c:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    f47e:	4691      	mov	r9, r2
    f480:	e78e      	b.n	f3a0 <ticker_job+0x70>
			u32_t ticks_now = cntr_cnt_get();
    f482:	f009 fc8b 	bl	18d9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f486:	f8da 2014 	ldr.w	r2, [sl, #20]
			instance->ticker_id_slot_previous = TICKER_NULL;
    f48a:	23ff      	movs	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f48c:	1a80      	subs	r0, r0, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
    f48e:	f88a 301c 	strb.w	r3, [sl, #28]
			ticks_used = ticks_elapsed +
    f492:	9a01      	ldr	r2, [sp, #4]
			instance->ticks_slot_previous =	MIN(ticker->ticks_slot,
    f494:	69a3      	ldr	r3, [r4, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f496:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_used = ticks_elapsed +
    f49a:	4410      	add	r0, r2
			instance->ticks_slot_previous =	MIN(ticker->ticks_slot,
    f49c:	4298      	cmp	r0, r3
    f49e:	bf28      	it	cs
    f4a0:	4618      	movcs	r0, r3
    f4a2:	f8ca 0018 	str.w	r0, [sl, #24]
    f4a6:	e7c9      	b.n	f43c <ticker_job+0x10c>
    f4a8:	461e      	mov	r6, r3
    f4aa:	e78b      	b.n	f3c4 <ticker_job+0x94>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    f4ac:	2104      	movs	r1, #4
    f4ae:	4653      	mov	r3, sl
    f4b0:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
    f4b4:	4608      	mov	r0, r1
    f4b6:	2201      	movs	r2, #1
    f4b8:	47a0      	blx	r4
				pending = 1U;
    f4ba:	2301      	movs	r3, #1
    f4bc:	9304      	str	r3, [sp, #16]
				user->middle = prev;
    f4be:	f888 6002 	strb.w	r6, [r8, #2]
	while (count_user--) {
    f4c2:	9a05      	ldr	r2, [sp, #20]
    f4c4:	4542      	cmp	r2, r8
    f4c6:	f1a8 0308 	sub.w	r3, r8, #8
    f4ca:	f000 80c4 	beq.w	f656 <ticker_job+0x326>
    f4ce:	4698      	mov	r8, r3
    f4d0:	e76f      	b.n	f3b2 <ticker_job+0x82>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f4d2:	f8da 7014 	ldr.w	r7, [sl, #20]
    f4d6:	9707      	str	r7, [sp, #28]
	ticks_now = cntr_cnt_get();
    f4d8:	f009 fc60 	bl	18d9c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f4dc:	9b01      	ldr	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    f4de:	9008      	str	r0, [sp, #32]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f4e0:	eba0 0c07 	sub.w	ip, r0, r7
    f4e4:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f4e8:	18f8      	adds	r0, r7, r3
	if (ticks_to_expire > ticks_elapsed) {
    f4ea:	4286      	cmp	r6, r0
    f4ec:	f240 8086 	bls.w	f5fc <ticker_job+0x2cc>
		ticks_to_expire -= ticks_elapsed;
    f4f0:	6963      	ldr	r3, [r4, #20]
    f4f2:	1a30      	subs	r0, r6, r0
	if ((ticker->ticks_periodic != 0U) &&
    f4f4:	6866      	ldr	r6, [r4, #4]
    f4f6:	2e00      	cmp	r6, #0
    f4f8:	d051      	beq.n	f59e <ticker_job+0x26e>
	    (user_op->params.update.lazy != 0U)) {
    f4fa:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    f4fc:	2900      	cmp	r1, #0
    f4fe:	d04e      	beq.n	f59e <ticker_job+0x26e>
		user_op->params.update.lazy--;
    f500:	3901      	subs	r1, #1
    f502:	b289      	uxth	r1, r1
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f504:	4286      	cmp	r6, r0
    f506:	8be2      	ldrh	r2, [r4, #30]
		user_op->params.update.lazy--;
    f508:	82a9      	strh	r1, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f50a:	d224      	bcs.n	f556 <ticker_job+0x226>
    f50c:	f106 0901 	add.w	r9, r6, #1
    f510:	9309      	str	r3, [sp, #36]	; 0x24
    f512:	e011      	b.n	f538 <ticker_job+0x208>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    f514:	f101 71e8 	add.w	r1, r1, #30408704	; 0x1d00000
    f518:	f501 31d4 	add.w	r1, r1, #108544	; 0x1a800
    f51c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    f520:	46ce      	mov	lr, r9
			ticker->lazy_current--;
    f522:	3a01      	subs	r2, #1
			ticks_to_expire -= ticker->ticks_periodic +
    f524:	eba0 000e 	sub.w	r0, r0, lr
			ticker->lazy_current--;
    f528:	b292      	uxth	r2, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    f52a:	eba1 010b 	sub.w	r1, r1, fp
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f52e:	4286      	cmp	r6, r0
			ticker->lazy_current--;
    f530:	83e2      	strh	r2, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    f532:	6261      	str	r1, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f534:	d20d      	bcs.n	f552 <ticker_job+0x222>
    f536:	8aa9      	ldrh	r1, [r5, #20]
    f538:	4291      	cmp	r1, r2
    f53a:	f080 813c 	bcs.w	f7b6 <ticker_job+0x486>
					   ticker_remainder_dec(ticker);
    f53e:	e9d4 b108 	ldrd	fp, r1, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    f542:	f8df e290 	ldr.w	lr, [pc, #656]	; f7d4 <ticker_job+0x4a4>
    f546:	4ba2      	ldr	r3, [pc, #648]	; (f7d0 <ticker_job+0x4a0>)
    f548:	448e      	add	lr, r1
    f54a:	459e      	cmp	lr, r3
    f54c:	d8e2      	bhi.n	f514 <ticker_job+0x1e4>
    f54e:	46b6      	mov	lr, r6
    f550:	e7e7      	b.n	f522 <ticker_job+0x1f2>
    f552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f554:	8aa9      	ldrh	r1, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f556:	4291      	cmp	r1, r2
    f558:	d920      	bls.n	f59c <ticker_job+0x26c>
					   ticker_remainder_inc(ticker);
    f55a:	f8d4 9020 	ldr.w	r9, [r4, #32]
    f55e:	9309      	str	r3, [sp, #36]	; 0x24
    f560:	f106 0e01 	add.w	lr, r6, #1
    f564:	e007      	b.n	f576 <ticker_job+0x246>
	ticker->remainder_current += ticker->remainder_periodic;
    f566:	6261      	str	r1, [r4, #36]	; 0x24
    f568:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f56a:	8aa9      	ldrh	r1, [r5, #20]
			ticker->lazy_current++;
    f56c:	3201      	adds	r2, #1
    f56e:	b292      	uxth	r2, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f570:	428a      	cmp	r2, r1
			ticks_to_expire += ticker->ticks_periodic +
    f572:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f574:	d210      	bcs.n	f598 <ticker_job+0x268>
	ticker->remainder_current += ticker->remainder_periodic;
    f576:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    f578:	f8df b258 	ldr.w	fp, [pc, #600]	; f7d4 <ticker_job+0x4a4>
    f57c:	4b94      	ldr	r3, [pc, #592]	; (f7d0 <ticker_job+0x4a0>)
	ticker->remainder_current += ticker->remainder_periodic;
    f57e:	4449      	add	r1, r9
	if ((ticker->remainder_current < BIT(31)) &&
    f580:	448b      	add	fp, r1
    f582:	459b      	cmp	fp, r3
    f584:	d8ef      	bhi.n	f566 <ticker_job+0x236>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f586:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
    f58a:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
    f58e:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
    f592:	6261      	str	r1, [r4, #36]	; 0x24
		return 1;
    f594:	46f3      	mov	fp, lr
    f596:	e7e8      	b.n	f56a <ticker_job+0x23a>
    f598:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f59a:	83e2      	strh	r2, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    f59c:	83a1      	strh	r1, [r4, #28]
	ticker->ticks_to_expire_minus +=
    f59e:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f5a2:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
	ticker->ticks_to_expire = ticks_to_expire +
    f5a6:	4408      	add	r0, r1
	ticker->ticks_to_expire_minus +=
    f5a8:	4413      	add	r3, r2
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f5aa:	d11e      	bne.n	f5ea <ticker_job+0x2ba>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f5ac:	4407      	add	r7, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    f5ae:	42bb      	cmp	r3, r7
    f5b0:	d218      	bcs.n	f5e4 <ticker_job+0x2b4>
		ticks_to_expire -= ticks_to_expire_minus;
    f5b2:	1aff      	subs	r7, r7, r3
		ticks_to_expire_minus = 0U;
    f5b4:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f5b6:	6163      	str	r3, [r4, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    f5b8:	60a7      	str	r7, [r4, #8]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f5ba:	68e9      	ldr	r1, [r5, #12]
    f5bc:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f5be:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f5c0:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f5c2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    f5c4:	bf88      	it	hi
    f5c6:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    f5c8:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    f5ca:	bf98      	it	ls
    f5cc:	2300      	movls	r3, #0
    f5ce:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    f5d0:	b102      	cbz	r2, f5d4 <ticker_job+0x2a4>
		ticker->force = user_op->params.update.force;
    f5d2:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
    f5d4:	9a00      	ldr	r2, [sp, #0]
		ticker->req++;
    f5d6:	7863      	ldrb	r3, [r4, #1]
	ticker->next = *insert_head;
    f5d8:	7022      	strb	r2, [r4, #0]
	*insert_head = user_op->id;
    f5da:	786a      	ldrb	r2, [r5, #1]
    f5dc:	9200      	str	r2, [sp, #0]
		ticker->req++;
    f5de:	3301      	adds	r3, #1
    f5e0:	7063      	strb	r3, [r4, #1]
    f5e2:	e72b      	b.n	f43c <ticker_job+0x10c>
    f5e4:	1bdb      	subs	r3, r3, r7
		ticks_to_expire = 0U;
    f5e6:	2700      	movs	r7, #0
    f5e8:	e7e5      	b.n	f5b6 <ticker_job+0x286>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f5ea:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    f5ee:	1a57      	subs	r7, r2, r1
    f5f0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f5f4:	42b8      	cmp	r0, r7
    f5f6:	d907      	bls.n	f608 <ticker_job+0x2d8>
			ticks_to_expire -= delta_current_start;
    f5f8:	1bc7      	subs	r7, r0, r7
    f5fa:	e7d8      	b.n	f5ae <ticker_job+0x27e>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    f5fc:	6962      	ldr	r2, [r4, #20]
    f5fe:	1b93      	subs	r3, r2, r6
    f600:	4403      	add	r3, r0
    f602:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
    f604:	2000      	movs	r0, #0
    f606:	e775      	b.n	f4f4 <ticker_job+0x1c4>
			ticks_to_expire_minus +=
    f608:	443b      	add	r3, r7
    f60a:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    f60c:	e7eb      	b.n	f5e6 <ticker_job+0x2b6>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    f60e:	6868      	ldr	r0, [r5, #4]
    f610:	2800      	cmp	r0, #0
    f612:	f47f af00 	bne.w	f416 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    f616:	68a8      	ldr	r0, [r5, #8]
    f618:	2800      	cmp	r0, #0
    f61a:	f47f aefc 	bne.w	f416 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    f61e:	68e8      	ldr	r0, [r5, #12]
    f620:	2800      	cmp	r0, #0
    f622:	f47f aef8 	bne.w	f416 <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    f626:	6928      	ldr	r0, [r5, #16]
    f628:	2800      	cmp	r0, #0
    f62a:	f47f aef4 	bne.w	f416 <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
    f62e:	6968      	ldr	r0, [r5, #20]
    f630:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    f634:	f47f aeef 	bne.w	f416 <ticker_job+0xe6>
	if (user_op->fp_op_func) {
    f638:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f63a:	2100      	movs	r1, #0
	user_op->status = status;
    f63c:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f63e:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    f640:	6268      	str	r0, [r5, #36]	; 0x24
	if (user_op->fp_op_func) {
    f642:	2a00      	cmp	r2, #0
    f644:	f43f aebc 	beq.w	f3c0 <ticker_job+0x90>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f648:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    f64a:	4790      	blx	r2
    f64c:	f898 7003 	ldrb.w	r7, [r8, #3]
    f650:	f898 3002 	ldrb.w	r3, [r8, #2]
    f654:	e6b4      	b.n	f3c0 <ticker_job+0x90>
    f656:	f89a 201d 	ldrb.w	r2, [sl, #29]
    f65a:	9b03      	ldr	r3, [sp, #12]
    f65c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f660:	1a9b      	subs	r3, r3, r2
    f662:	bf18      	it	ne
    f664:	2301      	movne	r3, #1
    f666:	9301      	str	r3, [sp, #4]
	if (flag_elapsed) {
    f668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f66a:	46d3      	mov	fp, sl
    f66c:	2b00      	cmp	r3, #0
    f66e:	f000 80b6 	beq.w	f7de <ticker_job+0x4ae>
    f672:	f8da 3000 	ldr.w	r3, [sl]
    f676:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    f678:	2aff      	cmp	r2, #255	; 0xff
    f67a:	d073      	beq.n	f764 <ticker_job+0x434>
	ticks_expired = 0U;
    f67c:	2600      	movs	r6, #0
				instance->ticks_slot_previous = 0U;
    f67e:	4637      	mov	r7, r6
    f680:	e013      	b.n	f6aa <ticker_job+0x37a>
				instance->ticks_slot_previous -=
    f682:	1a41      	subs	r1, r0, r1
    f684:	f8cb 1018 	str.w	r1, [fp, #24]
			    ticker->ticks_slot != 0U) {
    f688:	6999      	ldr	r1, [r3, #24]
			if (!TICKER_RESCHEDULE_PENDING(ticker) &&
    f68a:	b119      	cbz	r1, f694 <ticker_job+0x364>
				instance->ticker_id_slot_previous =
    f68c:	f88b 201c 	strb.w	r2, [fp, #28]
				instance->ticks_slot_previous =
    f690:	f8cb 1018 	str.w	r1, [fp, #24]
		instance->ticker_id_head = ticker->next;
    f694:	7819      	ldrb	r1, [r3, #0]
		ticker->ticks_to_expire = 0U;
    f696:	609f      	str	r7, [r3, #8]
		instance->ticker_id_head = ticker->next;
    f698:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    f69c:	685c      	ldr	r4, [r3, #4]
    f69e:	b9e4      	cbnz	r4, f6da <ticker_job+0x3aa>
			ticker->req = ticker->ack;
    f6a0:	789a      	ldrb	r2, [r3, #2]
    f6a2:	705a      	strb	r2, [r3, #1]
    f6a4:	460a      	mov	r2, r1
	while (instance->ticker_id_head != TICKER_NULL) {
    f6a6:	2aff      	cmp	r2, #255	; 0xff
    f6a8:	d05c      	beq.n	f764 <ticker_job+0x434>
		ticker = &node[id_expired];
    f6aa:	9902      	ldr	r1, [sp, #8]
    f6ac:	b213      	sxth	r3, r2
    f6ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f6b2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    f6b6:	6899      	ldr	r1, [r3, #8]
		if (ticks_elapsed < ticks_to_expire) {
    f6b8:	4549      	cmp	r1, r9
    f6ba:	f200 8154 	bhi.w	f966 <ticker_job+0x636>
			if (instance->ticks_slot_previous > ticks_to_expire) {
    f6be:	f8db 0018 	ldr.w	r0, [fp, #24]
    f6c2:	4281      	cmp	r1, r0
		ticks_elapsed -= ticks_to_expire;
    f6c4:	eba9 0901 	sub.w	r9, r9, r1
		ticks_expired += ticks_to_expire;
    f6c8:	440e      	add	r6, r1
			if (instance->ticks_slot_previous > ticks_to_expire) {
    f6ca:	d3da      	bcc.n	f682 <ticker_job+0x352>
				instance->ticker_id_slot_previous = TICKER_NULL;
    f6cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f6d0:	f88b 101c 	strb.w	r1, [fp, #28]
				instance->ticks_slot_previous = 0U;
    f6d4:	f8cb 7018 	str.w	r7, [fp, #24]
    f6d8:	e7d6      	b.n	f688 <ticker_job+0x358>
			count = 1 + ticker->lazy_periodic;
    f6da:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
			while (count--) {
    f6de:	9305      	str	r3, [sp, #20]
    f6e0:	e9d3 a008 	ldrd	sl, r0, [r3, #32]
    f6e4:	4675      	mov	r5, lr
			ticks_to_expire = 0U;
    f6e6:	2100      	movs	r1, #0
    f6e8:	f104 0801 	add.w	r8, r4, #1
    f6ec:	e004      	b.n	f6f8 <ticker_job+0x3c8>
			while (count--) {
    f6ee:	3d01      	subs	r5, #1
    f6f0:	46a4      	mov	ip, r4
    f6f2:	1c6b      	adds	r3, r5, #1
				ticks_to_expire += ticker_remainder_inc(ticker);
    f6f4:	4461      	add	r1, ip
			while (count--) {
    f6f6:	d011      	beq.n	f71c <ticker_job+0x3ec>
	if ((ticker->remainder_current < BIT(31)) &&
    f6f8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; f7d4 <ticker_job+0x4a4>
    f6fc:	4b34      	ldr	r3, [pc, #208]	; (f7d0 <ticker_job+0x4a0>)
	ticker->remainder_current += ticker->remainder_periodic;
    f6fe:	4450      	add	r0, sl
	if ((ticker->remainder_current < BIT(31)) &&
    f700:	4484      	add	ip, r0
    f702:	459c      	cmp	ip, r3
    f704:	d8f3      	bhi.n	f6ee <ticker_job+0x3be>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f706:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
			while (count--) {
    f70a:	3d01      	subs	r5, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f70c:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    f710:	46c4      	mov	ip, r8
			while (count--) {
    f712:	1c6b      	adds	r3, r5, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f714:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
				ticks_to_expire += ticker_remainder_inc(ticker);
    f718:	4461      	add	r1, ip
			while (count--) {
    f71a:	d1ed      	bne.n	f6f8 <ticker_job+0x3c8>
    f71c:	9b05      	ldr	r3, [sp, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    f71e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f720:	6258      	str	r0, [r3, #36]	; 0x24
    f722:	f8db 0014 	ldr.w	r0, [fp, #20]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    f726:	695c      	ldr	r4, [r3, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    f728:	eb05 0c06 	add.w	ip, r5, r6
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f72c:	ebac 0500 	sub.w	r5, ip, r0
    f730:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    f734:	d141      	bne.n	f7ba <ticker_job+0x48a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f736:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f73a:	4429      	add	r1, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
    f73c:	428c      	cmp	r4, r1
    f73e:	f080 80ac 	bcs.w	f89a <ticker_job+0x56a>
		ticks_to_expire -= ticks_to_expire_minus;
    f742:	1b09      	subs	r1, r1, r4
		ticks_to_expire_minus = 0U;
    f744:	2400      	movs	r4, #0
			ticker->req++;
    f746:	7858      	ldrb	r0, [r3, #1]
			ticker->next = *insert_head;
    f748:	9d00      	ldr	r5, [sp, #0]
    f74a:	701d      	strb	r5, [r3, #0]
			ticker->req++;
    f74c:	3001      	adds	r0, #1
	ticker->ticks_to_expire = ticks_to_expire;
    f74e:	6099      	str	r1, [r3, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f750:	615c      	str	r4, [r3, #20]
			ticker->lazy_current = ticker->lazy_periodic;
    f752:	f8a3 e01e 	strh.w	lr, [r3, #30]
			ticker->force = 0U;
    f756:	70df      	strb	r7, [r3, #3]
			ticker->req++;
    f758:	7058      	strb	r0, [r3, #1]
    f75a:	9200      	str	r2, [sp, #0]
    f75c:	f89b 201d 	ldrb.w	r2, [fp, #29]
	while (instance->ticker_id_head != TICKER_NULL) {
    f760:	2aff      	cmp	r2, #255	; 0xff
    f762:	d1a2      	bne.n	f6aa <ticker_job+0x37a>
			flag_compare_update = 1U;
    f764:	9b01      	ldr	r3, [sp, #4]
    f766:	9c03      	ldr	r4, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    f768:	9900      	ldr	r1, [sp, #0]
			flag_compare_update = 1U;
    f76a:	42a2      	cmp	r2, r4
    f76c:	bf18      	it	ne
    f76e:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    f770:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    f772:	9301      	str	r3, [sp, #4]
		ticker_job_list_insert(instance, insert_head);
    f774:	f7ff fb90 	bl	ee98 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f778:	f89b 301d 	ldrb.w	r3, [fp, #29]
    f77c:	9a03      	ldr	r2, [sp, #12]
    f77e:	4293      	cmp	r3, r2
    f780:	d136      	bne.n	f7f0 <ticker_job+0x4c0>
	if (!pending) {
    f782:	9b04      	ldr	r3, [sp, #16]
    f784:	2b00      	cmp	r3, #0
    f786:	f000 808a 	beq.w	f89e <ticker_job+0x56e>
	instance->job_guard = 0U;
    f78a:	2300      	movs	r3, #0
    f78c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    f790:	9b01      	ldr	r3, [sp, #4]
    f792:	2b00      	cmp	r3, #0
    f794:	f040 8110 	bne.w	f9b8 <ticker_job+0x688>
	if (instance->worker_trigger) {
    f798:	f89b 301f 	ldrb.w	r3, [fp, #31]
    f79c:	2b00      	cmp	r3, #0
    f79e:	d075      	beq.n	f88c <ticker_job+0x55c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    f7a0:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    f7a4:	465b      	mov	r3, fp
    f7a6:	2201      	movs	r2, #1
    f7a8:	2103      	movs	r1, #3
    f7aa:	2004      	movs	r0, #4
    f7ac:	46a4      	mov	ip, r4
}
    f7ae:	b00d      	add	sp, #52	; 0x34
    f7b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    f7b4:	4760      	bx	ip
    f7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f7b8:	e6cd      	b.n	f556 <ticker_job+0x226>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f7ba:	eba0 000c 	sub.w	r0, r0, ip
    f7be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f7c2:	4281      	cmp	r1, r0
    f7c4:	d865      	bhi.n	f892 <ticker_job+0x562>
			ticks_to_expire_minus +=
    f7c6:	4404      	add	r4, r0
    f7c8:	1a64      	subs	r4, r4, r1
		ticks_to_expire = 0U;
    f7ca:	2100      	movs	r1, #0
    f7cc:	e7bb      	b.n	f746 <ticker_job+0x416>
    f7ce:	bf00      	nop
    f7d0:	7f172b59 	.word	0x7f172b59
    f7d4:	ff172b5a 	.word	0xff172b5a
	insert_head = TICKER_NULL;
    f7d8:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
    f7da:	9104      	str	r1, [sp, #16]
	insert_head = TICKER_NULL;
    f7dc:	9300      	str	r3, [sp, #0]
		ticker_job_list_insert(instance, insert_head);
    f7de:	9900      	ldr	r1, [sp, #0]
    f7e0:	4658      	mov	r0, fp
    f7e2:	f7ff fb59 	bl	ee98 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f7e6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    f7ea:	9a03      	ldr	r2, [sp, #12]
    f7ec:	4293      	cmp	r3, r2
    f7ee:	d0c8      	beq.n	f782 <ticker_job+0x452>
	if (!pending) {
    f7f0:	9a04      	ldr	r2, [sp, #16]
    f7f2:	2a00      	cmp	r2, #0
    f7f4:	f000 80bb 	beq.w	f96e <ticker_job+0x63e>
	instance->job_guard = 0U;
    f7f8:	2200      	movs	r2, #0
    f7fa:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    f7fe:	2bff      	cmp	r3, #255	; 0xff
    f800:	f000 80bf 	beq.w	f982 <ticker_job+0x652>
	if (ticker_id_old_head == TICKER_NULL) {
    f804:	9a03      	ldr	r2, [sp, #12]
    f806:	2aff      	cmp	r2, #255	; 0xff
    f808:	f000 80c9 	beq.w	f99e <ticker_job+0x66e>
	ticks_to_expire = ticker->ticks_to_expire;
    f80c:	f8db 2000 	ldr.w	r2, [fp]
		LL_ASSERT(i);
    f810:	f8df 91b8 	ldr.w	r9, [pc, #440]	; f9cc <ticker_job+0x69c>
    f814:	f8df 81b8 	ldr.w	r8, [pc, #440]	; f9d0 <ticker_job+0x6a0>
    f818:	4f6b      	ldr	r7, [pc, #428]	; (f9c8 <ticker_job+0x698>)
	ticker = &instance->nodes[instance->ticker_id_head];
    f81a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    f81e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	i = 10U;
    f822:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    f824:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    f826:	f009 fab9 	bl	18d9c <cntr_cnt_get>
		cc = instance->ticks_current;
    f82a:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    f82e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f832:	1ac4      	subs	r4, r0, r3
    f834:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    f838:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    f83a:	42b4      	cmp	r4, r6
    f83c:	bf2c      	ite	cs
    f83e:	191b      	addcs	r3, r3, r4
    f840:	199b      	addcc	r3, r3, r6
		cc &= HAL_TICKER_CNTR_MASK;
    f842:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    f846:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    f848:	4620      	mov	r0, r4
    f84a:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    f84c:	f009 faa6 	bl	18d9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f850:	eba0 000a 	sub.w	r0, r0, sl
    f854:	eba4 040a 	sub.w	r4, r4, sl
    f858:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f85c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    f860:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    f862:	42a0      	cmp	r0, r4
		i--;
    f864:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    f868:	d996      	bls.n	f798 <ticker_job+0x468>
		LL_ASSERT(i);
    f86a:	2d00      	cmp	r5, #0
    f86c:	d1db      	bne.n	f826 <ticker_job+0x4f6>
    f86e:	f640 031f 	movw	r3, #2079	; 0x81f
    f872:	464a      	mov	r2, r9
    f874:	4641      	mov	r1, r8
    f876:	4638      	mov	r0, r7
    f878:	f00c fdc8 	bl	1c40c <printk>
    f87c:	4040      	eors	r0, r0
    f87e:	f380 8811 	msr	BASEPRI, r0
    f882:	f04f 0003 	mov.w	r0, #3
    f886:	df02      	svc	2
    f888:	e7cd      	b.n	f826 <ticker_job+0x4f6>
    f88a:	4770      	bx	lr
}
    f88c:	b00d      	add	sp, #52	; 0x34
    f88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_to_expire -= delta_current_start;
    f892:	1a09      	subs	r1, r1, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    f894:	428c      	cmp	r4, r1
    f896:	f4ff af54 	bcc.w	f742 <ticker_job+0x412>
    f89a:	1a64      	subs	r4, r4, r1
    f89c:	e795      	b.n	f7ca <ticker_job+0x49a>
	count_user = instance->count_user;
    f89e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    f8a2:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
    f8a6:	1e5c      	subs	r4, r3, #1
    f8a8:	b2e4      	uxtb	r4, r4
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	f43f af6d 	beq.w	f78a <ticker_job+0x45a>
    f8b0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
		while (user->first != user->last) {
    f8b4:	7863      	ldrb	r3, [r4, #1]
    f8b6:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
    f8b8:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
    f8ba:	429a      	cmp	r2, r3
    f8bc:	d045      	beq.n	f94a <ticker_job+0x61a>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    f8be:	b21b      	sxth	r3, r3
    f8c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f8c4:	0119      	lsls	r1, r3, #4
    f8c6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
	switch (uop->op) {
    f8ca:	5c79      	ldrb	r1, [r7, r1]
    f8cc:	2901      	cmp	r1, #1
    f8ce:	d02a      	beq.n	f926 <ticker_job+0x5f6>
    f8d0:	2902      	cmp	r1, #2
    f8d2:	d130      	bne.n	f936 <ticker_job+0x606>
		ticker_by_next_slot_get(instance,
    f8d4:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    f8d8:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
    f8dc:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	node = instance->nodes;
    f8e0:	f8db 0000 	ldr.w	r0, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    f8e4:	f8db 9014 	ldr.w	r9, [fp, #20]
    f8e8:	2aff      	cmp	r2, #255	; 0xff
    f8ea:	d002      	beq.n	f8f2 <ticker_job+0x5c2>
    f8ec:	680e      	ldr	r6, [r1, #0]
    f8ee:	454e      	cmp	r6, r9
    f8f0:	d032      	beq.n	f958 <ticker_job+0x628>
		_ticker_id_head = instance->ticker_id_head;
    f8f2:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    f8f6:	f8c1 9000 	str.w	r9, [r1]
		_ticks_to_expire = 0U;
    f8fa:	2100      	movs	r1, #0
    f8fc:	e00d      	b.n	f91a <ticker_job+0x5ea>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    f8fe:	eb02 0982 	add.w	r9, r2, r2, lsl #2
    f902:	eb00 08c9 	add.w	r8, r0, r9, lsl #3
    f906:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    f90a:	f8d8 8018 	ldr.w	r8, [r8, #24]
    f90e:	4451      	add	r1, sl
    f910:	f1b8 0f00 	cmp.w	r8, #0
    f914:	d103      	bne.n	f91e <ticker_job+0x5ee>
		_ticker_id_head = ticker->next;
    f916:	f810 2039 	ldrb.w	r2, [r0, r9, lsl #3]
	while ((_ticker_id_head != TICKER_NULL) &&
    f91a:	2aff      	cmp	r2, #255	; 0xff
    f91c:	d1ef      	bne.n	f8fe <ticker_job+0x5ce>
	*ticker_id_head = _ticker_id_head;
    f91e:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
    f922:	f8cc 1000 	str.w	r1, [ip]
		fp_op_func = uop->fp_op_func;
    f926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    f928:	2100      	movs	r1, #0
    f92a:	6259      	str	r1, [r3, #36]	; 0x24
	if (fp_op_func) {
    f92c:	b112      	cbz	r2, f934 <ticker_job+0x604>
		fp_op_func(uop->status, uop->op_context);
    f92e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    f930:	2000      	movs	r0, #0
    f932:	4790      	blx	r2
    f934:	78e2      	ldrb	r2, [r4, #3]
			first = user->first + 1;
    f936:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    f938:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
    f93a:	3301      	adds	r3, #1
    f93c:	b2db      	uxtb	r3, r3
				first = 0U;
    f93e:	4299      	cmp	r1, r3
    f940:	bf08      	it	eq
    f942:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    f944:	429a      	cmp	r2, r3
			user->first = first;
    f946:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    f948:	d1b9      	bne.n	f8be <ticker_job+0x58e>
	while (count_user--) {
    f94a:	42a5      	cmp	r5, r4
    f94c:	f1a4 0308 	sub.w	r3, r4, #8
    f950:	f43f af1b 	beq.w	f78a <ticker_job+0x45a>
    f954:	461c      	mov	r4, r3
    f956:	e7ad      	b.n	f8b4 <ticker_job+0x584>
		ticker = &node[_ticker_id_head];
    f958:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    f95c:	f8dc 1000 	ldr.w	r1, [ip]
		_ticker_id_head = ticker->next;
    f960:	f810 2032 	ldrb.w	r2, [r0, r2, lsl #3]
	while ((_ticker_id_head != TICKER_NULL) &&
    f964:	e7d9      	b.n	f91a <ticker_job+0x5ea>
			ticker->ticks_to_expire -= ticks_elapsed;
    f966:	eba1 0109 	sub.w	r1, r1, r9
    f96a:	6099      	str	r1, [r3, #8]
			break;
    f96c:	e6fa      	b.n	f764 <ticker_job+0x434>
	count_user = instance->count_user;
    f96e:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    f972:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
    f976:	1e54      	subs	r4, r2, #1
    f978:	b2e4      	uxtb	r4, r4
    f97a:	b302      	cbz	r2, f9be <ticker_job+0x68e>
		flag_compare_update = 1U;
    f97c:	2301      	movs	r3, #1
    f97e:	9301      	str	r3, [sp, #4]
    f980:	e796      	b.n	f8b0 <ticker_job+0x580>
		if (cntr_stop() == 0) {
    f982:	f009 f9e5 	bl	18d50 <cntr_stop>
    f986:	2800      	cmp	r0, #0
    f988:	f47f af06 	bne.w	f798 <ticker_job+0x468>
			instance->ticks_slot_previous = 0U;
    f98c:	f8cb 0018 	str.w	r0, [fp, #24]
    f990:	e702      	b.n	f798 <ticker_job+0x468>
	pending = 0U;
    f992:	9b01      	ldr	r3, [sp, #4]
    f994:	9304      	str	r3, [sp, #16]
	insert_head = TICKER_NULL;
    f996:	23ff      	movs	r3, #255	; 0xff
	ticker_id_old_head = instance->ticker_id_head;
    f998:	9a03      	ldr	r2, [sp, #12]
	insert_head = TICKER_NULL;
    f99a:	9300      	str	r3, [sp, #0]
    f99c:	e66c      	b.n	f678 <ticker_job+0x348>
		ticks_current = cntr_cnt_get();
    f99e:	f009 f9fd 	bl	18d9c <cntr_cnt_get>
    f9a2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    f9a4:	f009 f9c4 	bl	18d30 <cntr_start>
    f9a8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    f9ac:	2800      	cmp	r0, #0
    f9ae:	f47f af2d 	bne.w	f80c <ticker_job+0x4dc>
			instance->ticks_current = ticks_current;
    f9b2:	f8cb 4014 	str.w	r4, [fp, #20]
    f9b6:	e729      	b.n	f80c <ticker_job+0x4dc>
    f9b8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    f9bc:	e71f      	b.n	f7fe <ticker_job+0x4ce>
	instance->job_guard = 0U;
    f9be:	9a04      	ldr	r2, [sp, #16]
    f9c0:	f88b 201e 	strb.w	r2, [fp, #30]
	if (flag_compare_update) {
    f9c4:	e71b      	b.n	f7fe <ticker_job+0x4ce>
    f9c6:	bf00      	nop
    f9c8:	00021ce0 	.word	0x00021ce0
    f9cc:	00021c88 	.word	0x00021c88
    f9d0:	00021da0 	.word	0x00021da0

0000f9d4 <ticker_init>:
{
    f9d4:	b4f0      	push	{r4, r5, r6, r7}
    f9d6:	9e04      	ldr	r6, [sp, #16]
    f9d8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    f9dc:	9d06      	ldr	r5, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    f9de:	bb30      	cbnz	r0, fa2e <ticker_init+0x5a>
	instance->count_node = count_node;
    f9e0:	4f14      	ldr	r7, [pc, #80]	; (fa34 <ticker_init+0x60>)
	while (count_user--) {
    f9e2:	1e58      	subs	r0, r3, #1
	instance->nodes = node;
    f9e4:	603a      	str	r2, [r7, #0]
	instance->count_node = count_node;
    f9e6:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
    f9e8:	727b      	strb	r3, [r7, #9]
	instance->users = user;
    f9ea:	607e      	str	r6, [r7, #4]
	while (count_user--) {
    f9ec:	b2c2      	uxtb	r2, r0
    f9ee:	b173      	cbz	r3, fa0e <ticker_init+0x3a>
    f9f0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
    f9f4:	6055      	str	r5, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    f9f6:	4611      	mov	r1, r2
    f9f8:	f812 3908 	ldrb.w	r3, [r2], #-8
	while (count_user--) {
    f9fc:	428e      	cmp	r6, r1
		count_op -= users[count_user].count_user_op;
    f9fe:	eba4 0403 	sub.w	r4, r4, r3
		user_op_ += users[count_user].count_user_op;
    fa02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    fa06:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    fa08:	eb05 1503 	add.w	r5, r5, r3, lsl #4
	while (count_user--) {
    fa0c:	d1f2      	bne.n	f9f4 <ticker_init+0x20>
	if (count_op) {
    fa0e:	b974      	cbnz	r4, fa2e <ticker_init+0x5a>
	instance->caller_id_get_cb = caller_id_get_cb;
    fa10:	9a07      	ldr	r2, [sp, #28]
    fa12:	623a      	str	r2, [r7, #32]
	instance->sched_cb = sched_cb;
    fa14:	9a08      	ldr	r2, [sp, #32]
    fa16:	627a      	str	r2, [r7, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    fa18:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    fa1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fa1e:	62ba      	str	r2, [r7, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    fa20:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    fa22:	e9c7 4405 	strd	r4, r4, [r7, #20]
	instance->ticks_elapsed_first = 0U;
    fa26:	817c      	strh	r4, [r7, #10]
	instance->ticker_id_slot_previous = TICKER_NULL;
    fa28:	83bb      	strh	r3, [r7, #28]
}
    fa2a:	bcf0      	pop	{r4, r5, r6, r7}
    fa2c:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    fa2e:	2001      	movs	r0, #1
}
    fa30:	bcf0      	pop	{r4, r5, r6, r7}
    fa32:	4770      	bx	lr
    fa34:	200008ec 	.word	0x200008ec

0000fa38 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    fa38:	4b04      	ldr	r3, [pc, #16]	; (fa4c <ticker_is_initialized+0x14>)
    fa3a:	222c      	movs	r2, #44	; 0x2c
    fa3c:	fb02 3000 	mla	r0, r2, r0, r3
    fa40:	7a00      	ldrb	r0, [r0, #8]
}
    fa42:	3800      	subs	r0, #0
    fa44:	bf18      	it	ne
    fa46:	2001      	movne	r0, #1
    fa48:	4770      	bx	lr
    fa4a:	bf00      	nop
    fa4c:	200008ec 	.word	0x200008ec

0000fa50 <ticker_trigger>:
	if (instance->sched_cb) {
    fa50:	4b0a      	ldr	r3, [pc, #40]	; (fa7c <ticker_trigger+0x2c>)
    fa52:	222c      	movs	r2, #44	; 0x2c
    fa54:	fb02 3200 	mla	r2, r2, r0, r3
{
    fa58:	b410      	push	{r4}
	if (instance->sched_cb) {
    fa5a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    fa5c:	b15c      	cbz	r4, fa76 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    fa5e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    fa62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    fa66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fa6a:	46a4      	mov	ip, r4
    fa6c:	2201      	movs	r2, #1
}
    fa6e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    fa70:	2103      	movs	r1, #3
    fa72:	2002      	movs	r0, #2
    fa74:	4760      	bx	ip
}
    fa76:	bc10      	pop	{r4}
    fa78:	4770      	bx	lr
    fa7a:	bf00      	nop
    fa7c:	200008ec 	.word	0x200008ec

0000fa80 <ticker_start>:
{
    fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    fa84:	f8df 809c 	ldr.w	r8, [pc, #156]	; fb24 <ticker_start+0xa4>
{
    fa88:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    fa8c:	272c      	movs	r7, #44	; 0x2c
    fa8e:	fb07 8700 	mla	r7, r7, r0, r8
{
    fa92:	4605      	mov	r5, r0
	user = &instance->users[user_id];
    fa94:	687c      	ldr	r4, [r7, #4]
    fa96:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
	if (last >= user->count_user_op) {
    fa9a:	f814 9031 	ldrb.w	r9, [r4, r1, lsl #3]
	last = user->last + 1;
    fa9e:	f89c 4003 	ldrb.w	r4, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    faa2:	eb05 0685 	add.w	r6, r5, r5, lsl #2
    faa6:	eb05 0646 	add.w	r6, r5, r6, lsl #1
	last = user->last + 1;
    faaa:	1c65      	adds	r5, r4, #1
{
    faac:	4608      	mov	r0, r1
	last = user->last + 1;
    faae:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    fab0:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    fab4:	45a9      	cmp	r9, r5
    fab6:	bf98      	it	ls
    fab8:	2500      	movls	r5, #0
	if (last == user->first) {
    faba:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    fabc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
	if (last == user->first) {
    fac0:	d02d      	beq.n	fb1e <ticker_start+0x9e>
	user_op = &user->user_op[user->last];
    fac2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    fac6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    faca:	ea4f 1904 	mov.w	r9, r4, lsl #4
    face:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
    fad2:	f04f 0804 	mov.w	r8, #4
    fad6:	f801 8009 	strb.w	r8, [r1, r9]
	user_op->params.start.ticks_at_start = ticks_anchor;
    fada:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    fadc:	9b08      	ldr	r3, [sp, #32]
    fade:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    fae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fae2:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    fae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fae6:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    fae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    faea:	61a3      	str	r3, [r4, #24]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    faec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    faee:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    faf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    faf2:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    faf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    faf6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    faf8:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    fafa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    fafc:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    fafe:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    fb02:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    fb04:	6261      	str	r1, [r4, #36]	; 0x24
	user->last = last;
    fb06:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    fb0a:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    fb0e:	4798      	blx	r3
    fb10:	4633      	mov	r3, r6
    fb12:	4641      	mov	r1, r8
    fb14:	2200      	movs	r2, #0
    fb16:	47a8      	blx	r5
	return user_op->status;
    fb18:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    fb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    fb1e:	2001      	movs	r0, #1
}
    fb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb24:	200008ec 	.word	0x200008ec

0000fb28 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
    fb28:	f8df c09c 	ldr.w	ip, [pc, #156]	; fbc8 <ticker_update+0xa0>
{
    fb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
    fb30:	272c      	movs	r7, #44	; 0x2c
    fb32:	fb07 c700 	mla	r7, r7, r0, ip
{
    fb36:	4605      	mov	r5, r0
	user = &instance->users[user_id];
    fb38:	687c      	ldr	r4, [r7, #4]
{
    fb3a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    fb3e:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
    fb42:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    fb44:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (last >= user->count_user_op) {
    fb48:	f814 a030 	ldrb.w	sl, [r4, r0, lsl #3]
	last = user->last + 1;
    fb4c:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    fb4e:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    fb52:	eb05 0685 	add.w	r6, r5, r5, lsl #2
    fb56:	eb05 0646 	add.w	r6, r5, r6, lsl #1
	last = user->last + 1;
    fb5a:	1c65      	adds	r5, r4, #1
    fb5c:	b2ed      	uxtb	r5, r5
		last = 0U;
    fb5e:	45aa      	cmp	sl, r5
    fb60:	bf98      	it	ls
    fb62:	2500      	movls	r5, #0
	if (last == user->first) {
    fb64:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    fb66:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
	if (last == user->first) {
    fb6a:	d02a      	beq.n	fbc2 <ticker_update+0x9a>
	user_op = &user->user_op[user->last];
    fb6c:	f8d1 c004 	ldr.w	ip, [r1, #4]
    fb70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fb74:	ea4f 1904 	mov.w	r9, r4, lsl #4
    fb78:	eb0c 1404 	add.w	r4, ip, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    fb7c:	f04f 0a05 	mov.w	sl, #5
    fb80:	f80c a009 	strb.w	sl, [ip, r9]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    fb84:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    fb86:	9b08      	ldr	r3, [sp, #32]
    fb88:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    fb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb8c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    fb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fb90:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    fb92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fb94:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    fb96:	f04f 0c02 	mov.w	ip, #2
	user_op->op_context = op_context;
    fb9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    fb9c:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    fb9e:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    fba2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    fba4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
	user_op->params.update.lazy = lazy;
    fba8:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    fbac:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    fbae:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    fbb2:	4798      	blx	r3
    fbb4:	4633      	mov	r3, r6
    fbb6:	2200      	movs	r2, #0
    fbb8:	2104      	movs	r1, #4
    fbba:	47a8      	blx	r5
	return user_op->status;
    fbbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    fbc2:	2001      	movs	r0, #1
}
    fbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbc8:	200008ec 	.word	0x200008ec

0000fbcc <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    fbcc:	f8df c07c 	ldr.w	ip, [pc, #124]	; fc4c <ticker_stop+0x80>
{
    fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    fbd4:	272c      	movs	r7, #44	; 0x2c
    fbd6:	fb07 c700 	mla	r7, r7, r0, ip
{
    fbda:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    fbdc:	687d      	ldr	r5, [r7, #4]
{
    fbde:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    fbe0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    fbe4:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    fbe8:	78cd      	ldrb	r5, [r1, #3]
	if (last == user->first) {
    fbea:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    fbee:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    fbf2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
	last = user->last + 1;
    fbf6:	1c6e      	adds	r6, r5, #1
    fbf8:	b2f6      	uxtb	r6, r6
		last = 0U;
    fbfa:	45b0      	cmp	r8, r6
    fbfc:	bf98      	it	ls
    fbfe:	2600      	movls	r6, #0
	if (last == user->first) {
    fc00:	45b6      	cmp	lr, r6
	struct ticker_instance *instance = &_instance[instance_index];
    fc02:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    fc06:	d01e      	beq.n	fc46 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    fc08:	f8d1 c004 	ldr.w	ip, [r1, #4]
    fc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fc10:	ea4f 1e05 	mov.w	lr, r5, lsl #4
    fc14:	eb0c 1505 	add.w	r5, ip, r5, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    fc18:	f04f 0806 	mov.w	r8, #6
    fc1c:	f80c 800e 	strb.w	r8, [ip, lr]
	user_op->status = TICKER_STATUS_BUSY;
    fc20:	f04f 0c02 	mov.w	ip, #2
	user_op->fp_op_func = fp_op_func;
    fc24:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->op_context = op_context;
    fc26:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    fc28:	706a      	strb	r2, [r5, #1]
	user_op->op_context = op_context;
    fc2a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    fc2c:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
	user->last = last;
    fc30:	70ce      	strb	r6, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    fc32:	e9d7 3608 	ldrd	r3, r6, [r7, #32]
    fc36:	4798      	blx	r3
    fc38:	4623      	mov	r3, r4
    fc3a:	2200      	movs	r2, #0
    fc3c:	2104      	movs	r1, #4
    fc3e:	47b0      	blx	r6
	return user_op->status;
    fc40:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
    fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    fc46:	2001      	movs	r0, #1
}
    fc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc4c:	200008ec 	.word	0x200008ec

0000fc50 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    fc50:	f009 b8a4 	b.w	18d9c <cntr_cnt_get>

0000fc54 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc54:	1a40      	subs	r0, r0, r1
}
    fc56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fc5a:	4770      	bx	lr

0000fc5c <ll_addr_get>:
static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
    fc5c:	2801      	cmp	r0, #1
    fc5e:	d813      	bhi.n	fc88 <ll_addr_get+0x2c>
{
    fc60:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
    fc62:	b948      	cbnz	r0, fc78 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    fc64:	b131      	cbz	r1, fc74 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    fc66:	4608      	mov	r0, r1
    fc68:	2206      	movs	r2, #6
    fc6a:	4909      	ldr	r1, [pc, #36]	; (fc90 <ll_addr_get+0x34>)
    fc6c:	f00e fc3c 	bl	1e4e8 <memcpy>
	}

	return pub_addr;
    fc70:	4807      	ldr	r0, [pc, #28]	; (fc90 <ll_addr_get+0x34>)
}
    fc72:	bd08      	pop	{r3, pc}
	return pub_addr;
    fc74:	4806      	ldr	r0, [pc, #24]	; (fc90 <ll_addr_get+0x34>)
}
    fc76:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    fc78:	b141      	cbz	r1, fc8c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    fc7a:	4608      	mov	r0, r1
    fc7c:	2206      	movs	r2, #6
    fc7e:	4905      	ldr	r1, [pc, #20]	; (fc94 <ll_addr_get+0x38>)
    fc80:	f00e fc32 	bl	1e4e8 <memcpy>
		return rnd_addr;
    fc84:	4803      	ldr	r0, [pc, #12]	; (fc94 <ll_addr_get+0x38>)
}
    fc86:	bd08      	pop	{r3, pc}
		return NULL;
    fc88:	2000      	movs	r0, #0
}
    fc8a:	4770      	bx	lr
		return rnd_addr;
    fc8c:	4801      	ldr	r0, [pc, #4]	; (fc94 <ll_addr_get+0x38>)
}
    fc8e:	bd08      	pop	{r3, pc}
    fc90:	20000918 	.word	0x20000918
    fc94:	20000920 	.word	0x20000920

0000fc98 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    fc98:	b570      	push	{r4, r5, r6, lr}
    fc9a:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    fc9c:	2000      	movs	r0, #0
{
    fc9e:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    fca0:	f003 f9d2 	bl	13048 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    fca4:	b968      	cbnz	r0, fcc2 <ll_addr_set+0x2a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    fca6:	4604      	mov	r4, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    fca8:	4629      	mov	r1, r5
    fcaa:	2206      	movs	r2, #6
	if (addr_type) {
    fcac:	b926      	cbnz	r6, fcb8 <ll_addr_set+0x20>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    fcae:	4806      	ldr	r0, [pc, #24]	; (fcc8 <ll_addr_set+0x30>)
    fcb0:	f00e fc1a 	bl	1e4e8 <memcpy>
	}

	return 0;
}
    fcb4:	4620      	mov	r0, r4
    fcb6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    fcb8:	4804      	ldr	r0, [pc, #16]	; (fccc <ll_addr_set+0x34>)
    fcba:	f00e fc15 	bl	1e4e8 <memcpy>
}
    fcbe:	4620      	mov	r0, r4
    fcc0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fcc2:	240c      	movs	r4, #12
}
    fcc4:	4620      	mov	r0, r4
    fcc6:	bd70      	pop	{r4, r5, r6, pc}
    fcc8:	20000918 	.word	0x20000918
    fccc:	20000920 	.word	0x20000920

0000fcd0 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

u8_t ll_tx_pwr_lvl_get(u8_t handle_type,
		       u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    fcd0:	2802      	cmp	r0, #2
    fcd2:	d001      	beq.n	fcd8 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    fcd4:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    fcd6:	4770      	bx	lr
{
    fcd8:	b538      	push	{r3, r4, r5, lr}
    fcda:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    fcdc:	4608      	mov	r0, r1
    fcde:	461d      	mov	r5, r3
    fce0:	f003 fd90 	bl	13804 <ll_connected_get>
			if (!conn) {
    fce4:	b110      	cbz	r0, fcec <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    fce6:	2000      	movs	r0, #0
    fce8:	7028      	strb	r0, [r5, #0]
}
    fcea:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fcec:	4620      	mov	r0, r4
}
    fcee:	bd38      	pop	{r3, r4, r5, pc}

0000fcf0 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    fcf0:	2300      	movs	r3, #0
    fcf2:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    fcf4:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    fcf6:	4770      	bx	lr

0000fcf8 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    fcf8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    fcfa:	4802      	ldr	r0, [pc, #8]	; (fd04 <hci_driver_init+0xc>)
    fcfc:	f7f8 ff62 	bl	8bc4 <bt_hci_driver_register>

	return 0;
}
    fd00:	2000      	movs	r0, #0
    fd02:	bd08      	pop	{r3, pc}
    fd04:	00021dcc 	.word	0x00021dcc

0000fd08 <recv_thread>:
{
    fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    fd0a:	4d34      	ldr	r5, [pc, #208]	; (fddc <recv_thread+0xd4>)
		LL_ASSERT(0);
    fd0c:	4f34      	ldr	r7, [pc, #208]	; (fde0 <recv_thread+0xd8>)
    fd0e:	4e35      	ldr	r6, [pc, #212]	; (fde4 <recv_thread+0xdc>)
{
    fd10:	b083      	sub	sp, #12
    fd12:	e015      	b.n	fd40 <recv_thread+0x38>
	switch (class) {
    fd14:	2b00      	cmp	r3, #0
    fd16:	d138      	bne.n	fd8a <recv_thread+0x82>
		LL_ASSERT(0);
    fd18:	4833      	ldr	r0, [pc, #204]	; (fde8 <recv_thread+0xe0>)
    fd1a:	23c3      	movs	r3, #195	; 0xc3
    fd1c:	463a      	mov	r2, r7
    fd1e:	4631      	mov	r1, r6
    fd20:	f00c fb74 	bl	1c40c <printk>
    fd24:	4040      	eors	r0, r0
    fd26:	f380 8811 	msr	BASEPRI, r0
    fd2a:	f04f 0003 	mov.w	r0, #3
    fd2e:	df02      	svc	2
	node_rx->hdr.next = NULL;
    fd30:	9b01      	ldr	r3, [sp, #4]
    fd32:	2200      	movs	r2, #0
    fd34:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fd36:	a801      	add	r0, sp, #4
    fd38:	f002 f9d2 	bl	120e0 <ll_rx_mem_release>
	z_impl_k_yield();
    fd3c:	f00b fcbc 	bl	1b6b8 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    fd40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd44:	4628      	mov	r0, r5
    fd46:	f010 fca0 	bl	2068a <z_impl_k_queue_get>
		if (node_rx && !buf) {
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d0f6      	beq.n	fd3c <recv_thread+0x34>
	u8_t class = node_rx->hdr.user_meta;
    fd4e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    fd50:	9001      	str	r0, [sp, #4]
	switch (class) {
    fd52:	2b04      	cmp	r3, #4
    fd54:	d9de      	bls.n	fd14 <recv_thread+0xc>
    fd56:	2b05      	cmp	r3, #5
    fd58:	d1de      	bne.n	fd18 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    fd5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd5e:	2003      	movs	r0, #3
    fd60:	f7f9 fd26 	bl	97b0 <bt_buf_get_rx>
    fd64:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    fd66:	4601      	mov	r1, r0
    fd68:	9801      	ldr	r0, [sp, #4]
    fd6a:	f000 ff8f 	bl	10c8c <hci_acl_encode>
	node_rx->hdr.next = NULL;
    fd6e:	9b01      	ldr	r3, [sp, #4]
    fd70:	2200      	movs	r2, #0
    fd72:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fd74:	a801      	add	r0, sp, #4
    fd76:	f002 f9b3 	bl	120e0 <ll_rx_mem_release>
		if (buf) {
    fd7a:	2c00      	cmp	r4, #0
    fd7c:	d0de      	beq.n	fd3c <recv_thread+0x34>
			if (buf->len) {
    fd7e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    fd80:	4620      	mov	r0, r4
			if (buf->len) {
    fd82:	b1cb      	cbz	r3, fdb8 <recv_thread+0xb0>
				bt_recv(buf);
    fd84:	f7f8 fe1e 	bl	89c4 <bt_recv>
    fd88:	e7d8      	b.n	fd3c <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    fd8a:	2b02      	cmp	r3, #2
    fd8c:	d017      	beq.n	fdbe <recv_thread+0xb6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fd8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd92:	2001      	movs	r0, #1
    fd94:	f7f9 fd0c 	bl	97b0 <bt_buf_get_rx>
    fd98:	4604      	mov	r4, r0
		if (buf) {
    fd9a:	9801      	ldr	r0, [sp, #4]
    fd9c:	b1c4      	cbz	r4, fdd0 <recv_thread+0xc8>
			hci_evt_encode(node_rx, buf);
    fd9e:	4621      	mov	r1, r4
    fda0:	f000 ffb2 	bl	10d08 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    fda4:	9b01      	ldr	r3, [sp, #4]
    fda6:	2200      	movs	r2, #0
    fda8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fdaa:	a801      	add	r0, sp, #4
    fdac:	f002 f998 	bl	120e0 <ll_rx_mem_release>
			if (buf->len) {
    fdb0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    fdb2:	4620      	mov	r0, r4
			if (buf->len) {
    fdb4:	2b00      	cmp	r3, #0
    fdb6:	d1e5      	bne.n	fd84 <recv_thread+0x7c>
				net_buf_unref(buf);
    fdb8:	f009 ff1e 	bl	19bf8 <net_buf_unref>
    fdbc:	e7be      	b.n	fd3c <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    fdbe:	2200      	movs	r2, #0
    fdc0:	4610      	mov	r0, r2
    fdc2:	2101      	movs	r1, #1
    fdc4:	f7f9 fd2a 	bl	981c <bt_buf_get_evt>
    fdc8:	4604      	mov	r4, r0
		if (buf) {
    fdca:	9801      	ldr	r0, [sp, #4]
    fdcc:	2c00      	cmp	r4, #0
    fdce:	d1e6      	bne.n	fd9e <recv_thread+0x96>
	node_rx->hdr.next = NULL;
    fdd0:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    fdd2:	a801      	add	r0, sp, #4
    fdd4:	f002 f984 	bl	120e0 <ll_rx_mem_release>
		if (buf) {
    fdd8:	e7b0      	b.n	fd3c <recv_thread+0x34>
    fdda:	bf00      	nop
    fddc:	20006230 	.word	0x20006230
    fde0:	00021d10 	.word	0x00021d10
    fde4:	00021c84 	.word	0x00021c84
    fde8:	00021ce0 	.word	0x00021ce0

0000fdec <prio_recv_thread>:
{
    fdec:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
    fdee:	4e18      	ldr	r6, [pc, #96]	; (fe50 <prio_recv_thread+0x64>)
				k_fifo_put(&recv_fifo, node_rx);
    fdf0:	4d18      	ldr	r5, [pc, #96]	; (fe54 <prio_recv_thread+0x68>)
{
    fdf2:	b082      	sub	sp, #8
    fdf4:	e00c      	b.n	fe10 <prio_recv_thread+0x24>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fdf6:	f7f9 fd11 	bl	981c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    fdfa:	4622      	mov	r2, r4
    fdfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fe00:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    fe02:	f001 fa29 	bl	11258 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    fe06:	4620      	mov	r0, r4
    fe08:	f7f8 fe86 	bl	8b18 <bt_recv_prio>
	z_impl_k_yield();
    fe0c:	f00b fc54 	bl	1b6b8 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fe10:	f10d 0102 	add.w	r1, sp, #2
    fe14:	a801      	add	r0, sp, #4
    fe16:	f001 ffb9 	bl	11d8c <ll_rx_get>
    fe1a:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fe1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe20:	2100      	movs	r1, #0
    fe22:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fe24:	2c00      	cmp	r4, #0
    fe26:	d1e6      	bne.n	fdf6 <prio_recv_thread+0xa>
		if (node_rx) {
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	b15b      	cbz	r3, fe44 <prio_recv_thread+0x58>
			ll_rx_dequeue();
    fe2c:	f002 f888 	bl	11f40 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fe30:	9c01      	ldr	r4, [sp, #4]
    fe32:	4620      	mov	r0, r4
    fe34:	f001 fa28 	bl	11288 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
    fe38:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fe3a:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
    fe3c:	4628      	mov	r0, r5
    fe3e:	f010 fbf5 	bl	2062c <k_queue_append>
			continue;
    fe42:	e7e5      	b.n	fe10 <prio_recv_thread+0x24>
	return z_impl_k_sem_take(sem, timeout);
    fe44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fe48:	4630      	mov	r0, r6
    fe4a:	f00b fcd7 	bl	1b7fc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fe4e:	e7df      	b.n	fe10 <prio_recv_thread+0x24>
    fe50:	200061cc 	.word	0x200061cc
    fe54:	20006230 	.word	0x20006230

0000fe58 <hci_driver_send>:
{
    fe58:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    fe5a:	8983      	ldrh	r3, [r0, #12]
{
    fe5c:	b083      	sub	sp, #12
	if (!buf->len) {
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d03a      	beq.n	fed8 <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    fe62:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    fe64:	4604      	mov	r4, r0
    fe66:	b31b      	cbz	r3, feb0 <hci_driver_send+0x58>
    fe68:	2b02      	cmp	r3, #2
    fe6a:	d00f      	beq.n	fe8c <hci_driver_send+0x34>
    fe6c:	4921      	ldr	r1, [pc, #132]	; (fef4 <hci_driver_send+0x9c>)
    fe6e:	4a22      	ldr	r2, [pc, #136]	; (fef8 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    fe70:	4822      	ldr	r0, [pc, #136]	; (fefc <hci_driver_send+0xa4>)
    fe72:	1a52      	subs	r2, r2, r1
    fe74:	08d2      	lsrs	r2, r2, #3
    fe76:	0192      	lsls	r2, r2, #6
    fe78:	4619      	mov	r1, r3
    fe7a:	f042 0201 	orr.w	r2, r2, #1
    fe7e:	f00d fc20 	bl	1d6c2 <log_1>
		return -EINVAL;
    fe82:	f06f 0515 	mvn.w	r5, #21
}
    fe86:	4628      	mov	r0, r5
    fe88:	b003      	add	sp, #12
    fe8a:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    fe8c:	a901      	add	r1, sp, #4
    fe8e:	f000 fe67 	bl	10b60 <hci_acl_handle>
	if (evt) {
    fe92:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    fe94:	4605      	mov	r5, r0
	if (evt) {
    fe96:	b113      	cbz	r3, fe9e <hci_driver_send+0x46>
		bt_recv_prio(evt);
    fe98:	4618      	mov	r0, r3
    fe9a:	f7f8 fe3d 	bl	8b18 <bt_recv_prio>
	if (!err) {
    fe9e:	2d00      	cmp	r5, #0
    fea0:	d1f1      	bne.n	fe86 <hci_driver_send+0x2e>
		net_buf_unref(buf);
    fea2:	4620      	mov	r0, r4
    fea4:	f009 fea8 	bl	19bf8 <net_buf_unref>
    fea8:	2500      	movs	r5, #0
}
    feaa:	4628      	mov	r0, r5
    feac:	b003      	add	sp, #12
    feae:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    feb0:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    feb2:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    feb4:	f000 fa6e 	bl	10394 <hci_cmd_handle>
	if (evt) {
    feb8:	2800      	cmp	r0, #0
    feba:	d0f2      	beq.n	fea2 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    febc:	f7f8 fe2c 	bl	8b18 <bt_recv_prio>
		if (node_rx) {
    fec0:	9d01      	ldr	r5, [sp, #4]
    fec2:	2d00      	cmp	r5, #0
    fec4:	d0ed      	beq.n	fea2 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fec6:	4628      	mov	r0, r5
    fec8:	f001 f9de 	bl	11288 <hci_get_class>
    fecc:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    fece:	9901      	ldr	r1, [sp, #4]
    fed0:	480b      	ldr	r0, [pc, #44]	; (ff00 <hci_driver_send+0xa8>)
    fed2:	f010 fbab 	bl	2062c <k_queue_append>
	if (!err) {
    fed6:	e7e4      	b.n	fea2 <hci_driver_send+0x4a>
    fed8:	4b06      	ldr	r3, [pc, #24]	; (fef4 <hci_driver_send+0x9c>)
    feda:	4907      	ldr	r1, [pc, #28]	; (fef8 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    fedc:	4809      	ldr	r0, [pc, #36]	; (ff04 <hci_driver_send+0xac>)
    fede:	1ac9      	subs	r1, r1, r3
    fee0:	08c9      	lsrs	r1, r1, #3
    fee2:	0189      	lsls	r1, r1, #6
    fee4:	f041 0101 	orr.w	r1, r1, #1
    fee8:	f00d fbde 	bl	1d6a8 <log_0>
		return -EINVAL;
    feec:	f06f 0515 	mvn.w	r5, #21
    fef0:	e7c9      	b.n	fe86 <hci_driver_send+0x2e>
    fef2:	bf00      	nop
    fef4:	00021114 	.word	0x00021114
    fef8:	0002115c 	.word	0x0002115c
    fefc:	00021d64 	.word	0x00021d64
    ff00:	20006230 	.word	0x20006230
    ff04:	00021d50 	.word	0x00021d50

0000ff08 <hci_driver_open>:
{
    ff08:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    ff0a:	481f      	ldr	r0, [pc, #124]	; (ff88 <hci_driver_open+0x80>)
{
    ff0c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    ff0e:	f001 fc7b 	bl	11808 <ll_init>
	if (err) {
    ff12:	4604      	mov	r4, r0
    ff14:	bb50      	cbnz	r0, ff6c <hci_driver_open+0x64>
	hci_init(NULL);
    ff16:	f001 f9cd 	bl	112b4 <hci_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff1a:	f06f 0309 	mvn.w	r3, #9
    ff1e:	9303      	str	r3, [sp, #12]
    ff20:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ff24:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ff28:	4b18      	ldr	r3, [pc, #96]	; (ff8c <hci_driver_open+0x84>)
    ff2a:	4919      	ldr	r1, [pc, #100]	; (ff90 <hci_driver_open+0x88>)
    ff2c:	9400      	str	r4, [sp, #0]
    ff2e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ff32:	4818      	ldr	r0, [pc, #96]	; (ff94 <hci_driver_open+0x8c>)
    ff34:	f00b fcb4 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ff38:	4917      	ldr	r1, [pc, #92]	; (ff98 <hci_driver_open+0x90>)
    ff3a:	4816      	ldr	r0, [pc, #88]	; (ff94 <hci_driver_open+0x8c>)
    ff3c:	f010 fd24 	bl	20988 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff40:	f06f 0307 	mvn.w	r3, #7
    ff44:	9303      	str	r3, [sp, #12]
    ff46:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ff4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ff4e:	4b13      	ldr	r3, [pc, #76]	; (ff9c <hci_driver_open+0x94>)
    ff50:	4913      	ldr	r1, [pc, #76]	; (ffa0 <hci_driver_open+0x98>)
    ff52:	9400      	str	r4, [sp, #0]
    ff54:	f640 0298 	movw	r2, #2200	; 0x898
    ff58:	4812      	ldr	r0, [pc, #72]	; (ffa4 <hci_driver_open+0x9c>)
    ff5a:	f00b fca1 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ff5e:	4912      	ldr	r1, [pc, #72]	; (ffa8 <hci_driver_open+0xa0>)
    ff60:	4810      	ldr	r0, [pc, #64]	; (ffa4 <hci_driver_open+0x9c>)
    ff62:	f010 fd11 	bl	20988 <z_impl_k_thread_name_set>
}
    ff66:	4620      	mov	r0, r4
    ff68:	b006      	add	sp, #24
    ff6a:	bd10      	pop	{r4, pc}
    ff6c:	4b0f      	ldr	r3, [pc, #60]	; (ffac <hci_driver_open+0xa4>)
    ff6e:	4a10      	ldr	r2, [pc, #64]	; (ffb0 <hci_driver_open+0xa8>)
		BT_ERR("LL initialization failed: %u", err);
    ff70:	4810      	ldr	r0, [pc, #64]	; (ffb4 <hci_driver_open+0xac>)
    ff72:	1ad2      	subs	r2, r2, r3
    ff74:	08d2      	lsrs	r2, r2, #3
    ff76:	0192      	lsls	r2, r2, #6
    ff78:	f042 0201 	orr.w	r2, r2, #1
    ff7c:	4621      	mov	r1, r4
    ff7e:	f00d fba0 	bl	1d6c2 <log_1>
}
    ff82:	4620      	mov	r0, r4
    ff84:	b006      	add	sp, #24
    ff86:	bd10      	pop	{r4, pc}
    ff88:	200061cc 	.word	0x200061cc
    ff8c:	0000fded 	.word	0x0000fded
    ff90:	20002db8 	.word	0x20002db8
    ff94:	20000928 	.word	0x20000928
    ff98:	00021d98 	.word	0x00021d98
    ff9c:	0000fd09 	.word	0x0000fd09
    ffa0:	20002f78 	.word	0x20002f78
    ffa4:	20000994 	.word	0x20000994
    ffa8:	00021da4 	.word	0x00021da4
    ffac:	00021114 	.word	0x00021114
    ffb0:	0002115c 	.word	0x0002115c
    ffb4:	00021d78 	.word	0x00021d78

0000ffb8 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    ffb8:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    ffba:	f100 0408 	add.w	r4, r0, #8
{
    ffbe:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    ffc0:	4620      	mov	r0, r4
    ffc2:	2102      	movs	r1, #2
{
    ffc4:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    ffc6:	f010 f8bc 	bl	20142 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    ffca:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    ffcc:	223e      	movs	r2, #62	; 0x3e
    ffce:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    ffd0:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    ffd2:	2101      	movs	r1, #1
    ffd4:	4620      	mov	r0, r4
    ffd6:	f010 f8b4 	bl	20142 <net_buf_simple_add>
	me->subevent = subevt;
    ffda:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    ffdc:	4629      	mov	r1, r5
    ffde:	4620      	mov	r0, r4
}
    ffe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    ffe4:	f010 b8ad 	b.w	20142 <net_buf_simple_add>

0000ffe8 <cmd_status>:
{
    ffe8:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    ffea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    ffee:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    fff0:	2100      	movs	r1, #0
    fff2:	200f      	movs	r0, #15
    fff4:	f7f9 fc12 	bl	981c <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
    fff8:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
    fffc:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    fffe:	2102      	movs	r1, #2
   10000:	4630      	mov	r0, r6
   10002:	f010 f89e 	bl	20142 <net_buf_simple_add>
   10006:	4603      	mov	r3, r0
	hdr->evt = evt;
   10008:	220f      	movs	r2, #15
	hdr->len = len;
   1000a:	2104      	movs	r1, #4
	hdr->evt = evt;
   1000c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1000e:	7059      	strb	r1, [r3, #1]
	cs = net_buf_add(buf, sizeof(*cs));
   10010:	4630      	mov	r0, r6
   10012:	f010 f896 	bl	20142 <net_buf_simple_add>
	cs->opcode = sys_cpu_to_le16(_opcode);
   10016:	4a04      	ldr	r2, [pc, #16]	; (10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>)
	cs->status = status;
   10018:	7005      	strb	r5, [r0, #0]
	cs = net_buf_add(buf, sizeof(*cs));
   1001a:	4603      	mov	r3, r0
	cs->ncmd = 1U;
   1001c:	2101      	movs	r1, #1
	cs->opcode = sys_cpu_to_le16(_opcode);
   1001e:	8812      	ldrh	r2, [r2, #0]
	cs->ncmd = 1U;
   10020:	7059      	strb	r1, [r3, #1]
}
   10022:	4620      	mov	r0, r4
	cs->opcode = sys_cpu_to_le16(_opcode);
   10024:	805a      	strh	r2, [r3, #2]
}
   10026:	bd70      	pop	{r4, r5, r6, pc}
   10028:	20001ce2 	.word	0x20001ce2

0001002c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   1002c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10030:	4c17      	ldr	r4, [pc, #92]	; (10090 <le_remote_feat_complete+0x64>)
   10032:	6866      	ldr	r6, [r4, #4]
   10034:	f04f 0900 	mov.w	r9, #0
   10038:	464c      	mov	r4, r9
   1003a:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   1003e:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10040:	ea54 0205 	orrs.w	r2, r4, r5
   10044:	d009      	beq.n	1005a <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   10046:	4a13      	ldr	r2, [pc, #76]	; (10094 <le_remote_feat_complete+0x68>)
   10048:	6812      	ldr	r2, [r2, #0]
   1004a:	4606      	mov	r6, r0
   1004c:	4688      	mov	r8, r1
   1004e:	f002 0008 	and.w	r0, r2, #8
   10052:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10054:	ea50 0201 	orrs.w	r2, r0, r1
   10058:	d101      	bne.n	1005e <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1005a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   1005e:	4618      	mov	r0, r3
   10060:	220b      	movs	r2, #11
   10062:	2104      	movs	r1, #4
   10064:	f7ff ffa8 	bl	ffb8 <meta_evt>
	sep->status = status;
   10068:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1006a:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   1006e:	b93e      	cbnz	r6, 10080 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   10070:	f108 0104 	add.w	r1, r8, #4
   10074:	3003      	adds	r0, #3
}
   10076:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   1007a:	2208      	movs	r2, #8
   1007c:	f00e ba34 	b.w	1e4e8 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   10080:	4649      	mov	r1, r9
   10082:	3003      	adds	r0, #3
}
   10084:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   10088:	2208      	movs	r2, #8
   1008a:	f00e ba58 	b.w	1e53e <memset>
   1008e:	bf00      	nop
   10090:	200059d8 	.word	0x200059d8
   10094:	200059e0 	.word	0x200059e0

00010098 <encrypt_change.part.0>:
static void encrypt_change(u8_t err, u16_t handle,
   10098:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1009a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(u8_t err, u16_t handle,
   1009e:	4604      	mov	r4, r0
   100a0:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   100a2:	4628      	mov	r0, r5
   100a4:	2102      	movs	r1, #2
   100a6:	f010 f84c 	bl	20142 <net_buf_simple_add>
   100aa:	4603      	mov	r3, r0
	hdr->evt = evt;
   100ac:	2208      	movs	r2, #8
	hdr->len = len;
   100ae:	2104      	movs	r1, #4
	hdr->evt = evt;
   100b0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   100b2:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   100b4:	4628      	mov	r0, r5
   100b6:	f010 f844 	bl	20142 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   100ba:	fab4 f384 	clz	r3, r4
   100be:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   100c0:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   100c2:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   100c4:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   100c8:	bd70      	pop	{r4, r5, r6, pc}
   100ca:	bf00      	nop

000100cc <hci_cmd_complete>:
{
   100cc:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   100ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   100d2:	4604      	mov	r4, r0
   100d4:	460d      	mov	r5, r1
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   100d6:	200e      	movs	r0, #14
   100d8:	2100      	movs	r1, #0
   100da:	f7f9 fb9f 	bl	981c <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
   100de:	2102      	movs	r1, #2
	*buf = bt_buf_get_evt(BT_HCI_EVT_CMD_COMPLETE, false, K_FOREVER);
   100e0:	6020      	str	r0, [r4, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   100e2:	3008      	adds	r0, #8
   100e4:	f010 f82d 	bl	20142 <net_buf_simple_add>
	hci_evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   100e8:	1ceb      	adds	r3, r5, #3
	hdr->evt = evt;
   100ea:	220e      	movs	r2, #14
   100ec:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   100ee:	7043      	strb	r3, [r0, #1]
	cc = net_buf_add(*buf, sizeof(*cc));
   100f0:	6820      	ldr	r0, [r4, #0]
   100f2:	2103      	movs	r1, #3
   100f4:	3008      	adds	r0, #8
   100f6:	f010 f824 	bl	20142 <net_buf_simple_add>
	cc->ncmd = 1U;
   100fa:	2301      	movs	r3, #1
   100fc:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   100fe:	4a06      	ldr	r2, [pc, #24]	; (10118 <hci_cmd_complete+0x4c>)
	return net_buf_add(*buf, plen);
   10100:	6823      	ldr	r3, [r4, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   10102:	8812      	ldrh	r2, [r2, #0]
   10104:	f8a0 2001 	strh.w	r2, [r0, #1]
	return net_buf_add(*buf, plen);
   10108:	4629      	mov	r1, r5
   1010a:	f103 0008 	add.w	r0, r3, #8
}
   1010e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   10112:	f010 b816 	b.w	20142 <net_buf_simple_add>
   10116:	bf00      	nop
   10118:	20001ce2 	.word	0x20001ce2

0001011c <hci_vendor_cmd_handle_common>:
{
   1011c:	b570      	push	{r4, r5, r6, lr}
   1011e:	1e43      	subs	r3, r0, #1
   10120:	b086      	sub	sp, #24
   10122:	4614      	mov	r4, r2
   10124:	2b09      	cmp	r3, #9
   10126:	d806      	bhi.n	10136 <hci_vendor_cmd_handle_common+0x1a>
   10128:	e8df f003 	tbb	[pc, r3]
   1012c:	05361f09 	.word	0x05361f09
   10130:	51054405 	.word	0x51054405
   10134:	7b65      	.short	0x7b65
	return 0;
   10136:	f06f 0015 	mvn.w	r0, #21
}
   1013a:	b006      	add	sp, #24
   1013c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1013e:	4620      	mov	r0, r4
   10140:	210d      	movs	r1, #13
   10142:	f7ff ffc3 	bl	100cc <hci_cmd_complete>
   10146:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10148:	2202      	movs	r2, #2
	rp->status = 0x00;
   1014a:	2000      	movs	r0, #0
   1014c:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1014e:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10150:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   10152:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10154:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   10156:	7258      	strb	r0, [r3, #9]
   10158:	7298      	strb	r0, [r3, #10]
   1015a:	72d8      	strb	r0, [r3, #11]
   1015c:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1015e:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10160:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   10162:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10164:	71da      	strb	r2, [r3, #7]
}
   10166:	b006      	add	sp, #24
   10168:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1016a:	4620      	mov	r0, r4
   1016c:	2141      	movs	r1, #65	; 0x41
   1016e:	f7ff ffad 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10172:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10174:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10176:	4621      	mov	r1, r4
	rp->status = 0x00;
   10178:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1017c:	2240      	movs	r2, #64	; 0x40
   1017e:	f00e f9de 	bl	1e53e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   10182:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   10184:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   10186:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1018a:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   1018e:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   10190:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   10192:	70ab      	strb	r3, [r5, #2]
}
   10194:	b006      	add	sp, #24
   10196:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10198:	4620      	mov	r0, r4
   1019a:	2109      	movs	r1, #9
   1019c:	f7ff ff96 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   101a0:	2400      	movs	r4, #0
   101a2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   101a6:	4621      	mov	r1, r4
   101a8:	2208      	movs	r2, #8
   101aa:	f00e f9c8 	bl	1e53e <memset>
	return 0;
   101ae:	4620      	mov	r0, r4
}
   101b0:	b006      	add	sp, #24
   101b2:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   101b4:	6889      	ldr	r1, [r1, #8]
   101b6:	2000      	movs	r0, #0
   101b8:	f7ff fd6e 	bl	fc98 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   101bc:	4620      	mov	r0, r4
   101be:	2101      	movs	r1, #1
   101c0:	f7ff ff84 	bl	100cc <hci_cmd_complete>
   101c4:	4603      	mov	r3, r0
	ccst->status = 0x00;
   101c6:	2000      	movs	r0, #0
   101c8:	7018      	strb	r0, [r3, #0]
}
   101ca:	b006      	add	sp, #24
   101cc:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   101ce:	4e70      	ldr	r6, [pc, #448]	; (10390 <hci_vendor_cmd_handle_common+0x274>)
   101d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   101d2:	ad01      	add	r5, sp, #4
   101d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   101d6:	6833      	ldr	r3, [r6, #0]
   101d8:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   101da:	4620      	mov	r0, r4
   101dc:	2112      	movs	r1, #18
   101de:	f7ff ff75 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   101e2:	2400      	movs	r4, #0
   101e4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   101e8:	2211      	movs	r2, #17
   101ea:	a901      	add	r1, sp, #4
   101ec:	f00e f97c 	bl	1e4e8 <memcpy>
	return 0;
   101f0:	4620      	mov	r0, r4
}
   101f2:	b006      	add	sp, #24
   101f4:	bd70      	pop	{r4, r5, r6, pc}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   101f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   101fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   101fe:	3201      	adds	r2, #1
   10200:	d060      	beq.n	102c4 <hci_vendor_cmd_handle_common+0x1a8>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   10202:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10206:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1020a:	07db      	lsls	r3, r3, #31
   1020c:	d462      	bmi.n	102d4 <hci_vendor_cmd_handle_common+0x1b8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1020e:	4620      	mov	r0, r4
   10210:	2102      	movs	r1, #2
   10212:	f7ff ff5b 	bl	100cc <hci_cmd_complete>
   10216:	4603      	mov	r3, r0
	rp->status = 0x00;
   10218:	2000      	movs	r0, #0
   1021a:	7018      	strb	r0, [r3, #0]
	rp->num_addrs = 0U;
   1021c:	7058      	strb	r0, [r3, #1]
}
   1021e:	b006      	add	sp, #24
   10220:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10222:	4620      	mov	r0, r4
   10224:	2121      	movs	r1, #33	; 0x21
   10226:	f7ff ff51 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   1022a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1022c:	4605      	mov	r5, r0
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   1022e:	2210      	movs	r2, #16
	rp->status = 0x00;
   10230:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   10234:	4621      	mov	r1, r4
   10236:	f00e f982 	bl	1e53e <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1023a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1023e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10242:	3201      	adds	r2, #1
   10244:	d036      	beq.n	102b4 <hci_vendor_cmd_handle_common+0x198>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   10246:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1024a:	3201      	adds	r2, #1
   1024c:	d032      	beq.n	102b4 <hci_vendor_cmd_handle_common+0x198>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1024e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   10252:	3201      	adds	r2, #1
   10254:	d02e      	beq.n	102b4 <hci_vendor_cmd_handle_common+0x198>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   10256:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1025a:	3201      	adds	r2, #1
   1025c:	d02a      	beq.n	102b4 <hci_vendor_cmd_handle_common+0x198>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   1025e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   10262:	746a      	strb	r2, [r5, #17]
	sys_put_le16(val >> 16, &dst[2]);
   10264:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   10266:	0a08      	lsrs	r0, r1, #8
   10268:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1026c:	74e9      	strb	r1, [r5, #19]
	dst[1] = val >> 8;
   1026e:	7528      	strb	r0, [r5, #20]
   10270:	74aa      	strb	r2, [r5, #18]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   10272:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   10276:	756a      	strb	r2, [r5, #21]
	sys_put_le16(val >> 16, &dst[2]);
   10278:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1027a:	0a08      	lsrs	r0, r1, #8
   1027c:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   10280:	75e9      	strb	r1, [r5, #23]
	dst[1] = val >> 8;
   10282:	7628      	strb	r0, [r5, #24]
   10284:	75aa      	strb	r2, [r5, #22]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   10286:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1028a:	766a      	strb	r2, [r5, #25]
	sys_put_le16(val >> 16, &dst[2]);
   1028c:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1028e:	0a08      	lsrs	r0, r1, #8
   10290:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   10294:	76e9      	strb	r1, [r5, #27]
	dst[1] = val >> 8;
   10296:	7728      	strb	r0, [r5, #28]
   10298:	76aa      	strb	r2, [r5, #26]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1029a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1029e:	776b      	strb	r3, [r5, #29]
	sys_put_le16(val >> 16, &dst[2]);
   102a0:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   102a2:	0a11      	lsrs	r1, r2, #8
   102a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return 0;
   102a8:	4620      	mov	r0, r4
	dst[0] = val;
   102aa:	77ea      	strb	r2, [r5, #31]
	dst[1] = val >> 8;
   102ac:	f885 1020 	strb.w	r1, [r5, #32]
   102b0:	77ab      	strb	r3, [r5, #30]
}
   102b2:	e742      	b.n	1013a <hci_vendor_cmd_handle_common+0x1e>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   102b4:	f105 0011 	add.w	r0, r5, #17
   102b8:	2210      	movs	r2, #16
   102ba:	2100      	movs	r1, #0
   102bc:	f00e f93f 	bl	1e53e <memset>
	return 0;
   102c0:	2000      	movs	r0, #0
   102c2:	e73a      	b.n	1013a <hci_vendor_cmd_handle_common+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   102c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   102c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   102cc:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   102ce:	4293      	cmp	r3, r2
   102d0:	d197      	bne.n	10202 <hci_vendor_cmd_handle_common+0xe6>
   102d2:	e79c      	b.n	1020e <hci_vendor_cmd_handle_common+0xf2>
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   102d4:	4620      	mov	r0, r4
   102d6:	2118      	movs	r1, #24
   102d8:	f7ff fef8 	bl	100cc <hci_cmd_complete>
		rp->num_addrs = 1U;
   102dc:	2201      	movs	r2, #1
		rp->status = 0x00;
   102de:	2100      	movs	r1, #0
		rp->num_addrs = 1U;
   102e0:	7042      	strb	r2, [r0, #1]
		rp->status = 0x00;
   102e2:	7001      	strb	r1, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   102e4:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
	dst[0] = val;
   102e8:	7082      	strb	r2, [r0, #2]
		rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   102ea:	4603      	mov	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   102ec:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   102ee:	0a04      	lsrs	r4, r0, #8
   102f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
   102f4:	70da      	strb	r2, [r3, #3]
	dst[0] = val;
   102f6:	7118      	strb	r0, [r3, #4]
	dst[1] = val >> 8;
   102f8:	715c      	strb	r4, [r3, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   102fa:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
	dst[0] = val;
   102fe:	719a      	strb	r2, [r3, #6]
	dst[1] = val >> 8;
   10300:	f3c2 2207 	ubfx	r2, r2, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   10304:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10308:	71da      	strb	r2, [r3, #7]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1030a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   1030e:	3201      	adds	r2, #1
   10310:	d035      	beq.n	1037e <hci_vendor_cmd_handle_common+0x262>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   10312:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   10316:	3201      	adds	r2, #1
   10318:	d031      	beq.n	1037e <hci_vendor_cmd_handle_common+0x262>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1031a:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1031e:	3201      	adds	r2, #1
   10320:	d02d      	beq.n	1037e <hci_vendor_cmd_handle_common+0x262>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   10322:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   10326:	3201      	adds	r2, #1
   10328:	d029      	beq.n	1037e <hci_vendor_cmd_handle_common+0x262>
			sys_put_le32(NRF_FICR->IR[0], &addr->ir[0]);
   1032a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
	dst[0] = val;
   1032e:	721a      	strb	r2, [r3, #8]
	sys_put_le16(val >> 16, &dst[2]);
   10330:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   10332:	0a04      	lsrs	r4, r0, #8
   10334:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   10338:	7298      	strb	r0, [r3, #10]
	dst[1] = val >> 8;
   1033a:	72dc      	strb	r4, [r3, #11]
   1033c:	725a      	strb	r2, [r3, #9]
			sys_put_le32(NRF_FICR->IR[1], &addr->ir[4]);
   1033e:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
	dst[0] = val;
   10342:	731a      	strb	r2, [r3, #12]
	sys_put_le16(val >> 16, &dst[2]);
   10344:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   10346:	0a04      	lsrs	r4, r0, #8
   10348:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1034c:	7398      	strb	r0, [r3, #14]
	dst[1] = val >> 8;
   1034e:	73dc      	strb	r4, [r3, #15]
   10350:	735a      	strb	r2, [r3, #13]
			sys_put_le32(NRF_FICR->IR[2], &addr->ir[8]);
   10352:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
	dst[0] = val;
   10356:	741a      	strb	r2, [r3, #16]
	sys_put_le16(val >> 16, &dst[2]);
   10358:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   1035a:	0a04      	lsrs	r4, r0, #8
   1035c:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   10360:	7498      	strb	r0, [r3, #18]
	dst[1] = val >> 8;
   10362:	74dc      	strb	r4, [r3, #19]
   10364:	745a      	strb	r2, [r3, #17]
			sys_put_le32(NRF_FICR->IR[3], &addr->ir[12]);
   10366:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	dst[0] = val;
   1036a:	751a      	strb	r2, [r3, #20]
	sys_put_le16(val >> 16, &dst[2]);
   1036c:	0c14      	lsrs	r4, r2, #16
	dst[1] = val >> 8;
   1036e:	0a25      	lsrs	r5, r4, #8
   10370:	f3c2 2207 	ubfx	r2, r2, #8, #8
	return 0;
   10374:	4608      	mov	r0, r1
	dst[0] = val;
   10376:	759c      	strb	r4, [r3, #22]
	dst[1] = val >> 8;
   10378:	75dd      	strb	r5, [r3, #23]
   1037a:	755a      	strb	r2, [r3, #21]
}
   1037c:	e6dd      	b.n	1013a <hci_vendor_cmd_handle_common+0x1e>
			(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   1037e:	f103 0008 	add.w	r0, r3, #8
   10382:	2210      	movs	r2, #16
   10384:	2100      	movs	r1, #0
   10386:	f00e f8da 	bl	1e53e <memset>
	return 0;
   1038a:	2000      	movs	r0, #0
   1038c:	e6d5      	b.n	1013a <hci_vendor_cmd_handle_common+0x1e>
   1038e:	bf00      	nop
   10390:	00021de0 	.word	0x00021de0

00010394 <hci_cmd_handle>:
{
   10394:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   10396:	8983      	ldrh	r3, [r0, #12]
{
   10398:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   1039a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1039c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1039e:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   103a0:	f240 80bc 	bls.w	1051c <hci_cmd_handle+0x188>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   103a4:	4604      	mov	r4, r0
   103a6:	2103      	movs	r1, #3
   103a8:	3008      	adds	r0, #8
   103aa:	f00f fef1 	bl	20190 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   103ae:	89a2      	ldrh	r2, [r4, #12]
   103b0:	7883      	ldrb	r3, [r0, #2]
   103b2:	429a      	cmp	r2, r3
   103b4:	f0c0 80d9 	bcc.w	1056a <hci_cmd_handle+0x1d6>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   103b8:	8802      	ldrh	r2, [r0, #0]
   103ba:	4b7b      	ldr	r3, [pc, #492]	; (105a8 <hci_cmd_handle+0x214>)
	switch (BT_OGF(_opcode)) {
   103bc:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   103c0:	801a      	strh	r2, [r3, #0]
	ocf = BT_OCF(_opcode);
   103c2:	f3c2 0009 	ubfx	r0, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   103c6:	ea4f 2392 	mov.w	r3, r2, lsr #10
   103ca:	d275      	bcs.n	104b8 <hci_cmd_handle+0x124>
   103cc:	2b00      	cmp	r3, #0
   103ce:	d069      	beq.n	104a4 <hci_cmd_handle+0x110>
   103d0:	3b01      	subs	r3, #1
   103d2:	2b07      	cmp	r3, #7
   103d4:	d866      	bhi.n	104a4 <hci_cmd_handle+0x110>
   103d6:	e8df f003 	tbb	[pc, r3]
   103da:	6595      	.short	0x6595
   103dc:	65655779 	.word	0x65655779
   103e0:	0465      	.short	0x0465
	switch (ocf) {
   103e2:	1e43      	subs	r3, r0, #1
   103e4:	2b4d      	cmp	r3, #77	; 0x4d
   103e6:	d85d      	bhi.n	104a4 <hci_cmd_handle+0x110>
   103e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   103ec:	01bb01c8 	.word	0x01bb01c8
   103f0:	005c0365 	.word	0x005c0365
   103f4:	03520360 	.word	0x03520360
   103f8:	03400346 	.word	0x03400346
   103fc:	0335033a 	.word	0x0335033a
   10400:	005c005c 	.word	0x005c005c
   10404:	005c005c 	.word	0x005c005c
   10408:	031f0329 	.word	0x031f0329
   1040c:	0317031b 	.word	0x0317031b
   10410:	005c0307 	.word	0x005c0307
   10414:	02f002f7 	.word	0x02f002f7
   10418:	02d002dc 	.word	0x02d002dc
   1041c:	02ca005c 	.word	0x02ca005c
   10420:	02ac02c2 	.word	0x02ac02c2
   10424:	005c005c 	.word	0x005c005c
   10428:	029d005c 	.word	0x029d005c
   1042c:	02890291 	.word	0x02890291
   10430:	026d0273 	.word	0x026d0273
   10434:	005c005c 	.word	0x005c005c
   10438:	02620266 	.word	0x02620266
   1043c:	01790258 	.word	0x01790258
   10440:	02100168 	.word	0x02100168
   10444:	01f70203 	.word	0x01f70203
   10448:	023001d6 	.word	0x023001d6
   1044c:	01920221 	.word	0x01920221
   10450:	005c005c 	.word	0x005c005c
   10454:	005c005c 	.word	0x005c005c
   10458:	005c005c 	.word	0x005c005c
   1045c:	005c005c 	.word	0x005c005c
   10460:	005c005c 	.word	0x005c005c
   10464:	005c005c 	.word	0x005c005c
   10468:	005c005c 	.word	0x005c005c
   1046c:	005c005c 	.word	0x005c005c
   10470:	005c005c 	.word	0x005c005c
   10474:	005c005c 	.word	0x005c005c
   10478:	005c005c 	.word	0x005c005c
   1047c:	005c005c 	.word	0x005c005c
   10480:	005c0185 	.word	0x005c0185
   10484:	015c005c 	.word	0x015c005c
	switch (ocf) {
   10488:	3801      	subs	r0, #1
   1048a:	2808      	cmp	r0, #8
   1048c:	d80a      	bhi.n	104a4 <hci_cmd_handle+0x110>
   1048e:	e8df f010 	tbh	[pc, r0, lsl #1]
   10492:	00f2      	.short	0x00f2
   10494:	007c0097 	.word	0x007c0097
   10498:	00090009 	.word	0x00090009
   1049c:	00090009 	.word	0x00090009
   104a0:	00700009 	.word	0x00700009
   104a4:	ad07      	add	r5, sp, #28
		ccst = hci_cmd_complete(&evt, sizeof(*ccst));
   104a6:	4628      	mov	r0, r5
   104a8:	2101      	movs	r1, #1
   104aa:	f7ff fe0f 	bl	100cc <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   104ae:	2301      	movs	r3, #1
   104b0:	7003      	strb	r3, [r0, #0]
   104b2:	9807      	ldr	r0, [sp, #28]
}
   104b4:	b00d      	add	sp, #52	; 0x34
   104b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (BT_OGF(_opcode)) {
   104b8:	2b3f      	cmp	r3, #63	; 0x3f
   104ba:	ad07      	add	r5, sp, #28
   104bc:	d1f3      	bne.n	104a6 <hci_cmd_handle+0x112>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   104be:	4621      	mov	r1, r4
   104c0:	462a      	mov	r2, r5
   104c2:	f7ff fe2b 	bl	1011c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   104c6:	3016      	adds	r0, #22
   104c8:	d0ed      	beq.n	104a6 <hci_cmd_handle+0x112>
   104ca:	e7f2      	b.n	104b2 <hci_cmd_handle+0x11e>
	switch (ocf) {
   104cc:	2863      	cmp	r0, #99	; 0x63
   104ce:	f000 8321 	beq.w	10b14 <hci_cmd_handle+0x780>
   104d2:	d835      	bhi.n	10540 <hci_cmd_handle+0x1ac>
   104d4:	2803      	cmp	r0, #3
   104d6:	f000 8309 	beq.w	10aec <hci_cmd_handle+0x758>
   104da:	282d      	cmp	r0, #45	; 0x2d
   104dc:	d12b      	bne.n	10536 <hci_cmd_handle+0x1a2>
		read_tx_power_level(cmd, evt);
   104de:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   104e0:	2104      	movs	r1, #4
   104e2:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   104e4:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   104e6:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   104e8:	f7ff fdf0 	bl	100cc <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   104ec:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   104ee:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   104f0:	1cc3      	adds	r3, r0, #3
   104f2:	4632      	mov	r2, r6
   104f4:	2002      	movs	r0, #2
   104f6:	f7ff fbeb 	bl	fcd0 <ll_tx_pwr_lvl_get>
	rp->status = status;
   104fa:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   104fc:	9807      	ldr	r0, [sp, #28]
   104fe:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   10502:	e7d7      	b.n	104b4 <hci_cmd_handle+0x120>
	switch (ocf) {
   10504:	2806      	cmp	r0, #6
   10506:	f000 82e9 	beq.w	10adc <hci_cmd_handle+0x748>
   1050a:	281d      	cmp	r0, #29
   1050c:	d1ca      	bne.n	104a4 <hci_cmd_handle+0x110>
	handle = sys_le16_to_cpu(cmd->handle);
   1050e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   10510:	8818      	ldrh	r0, [r3, #0]
   10512:	f003 fadd 	bl	13ad0 <ll_version_ind_send>
	*evt = cmd_status(status);
   10516:	f7ff fd67 	bl	ffe8 <cmd_status>
}
   1051a:	e7cb      	b.n	104b4 <hci_cmd_handle+0x120>
   1051c:	4923      	ldr	r1, [pc, #140]	; (105ac <hci_cmd_handle+0x218>)
   1051e:	4b24      	ldr	r3, [pc, #144]	; (105b0 <hci_cmd_handle+0x21c>)
		BT_ERR("No HCI Command header");
   10520:	4824      	ldr	r0, [pc, #144]	; (105b4 <hci_cmd_handle+0x220>)
   10522:	1ac9      	subs	r1, r1, r3
   10524:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   10526:	0189      	lsls	r1, r1, #6
   10528:	f041 0101 	orr.w	r1, r1, #1
   1052c:	f00d f8bc 	bl	1d6a8 <log_0>
		return NULL;
   10530:	4628      	mov	r0, r5
}
   10532:	b00d      	add	sp, #52	; 0x34
   10534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   10536:	2801      	cmp	r0, #1
   10538:	d1b4      	bne.n	104a4 <hci_cmd_handle+0x110>
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1053a:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   1053c:	4b1e      	ldr	r3, [pc, #120]	; (105b8 <hci_cmd_handle+0x224>)
   1053e:	e11f      	b.n	10780 <hci_cmd_handle+0x3ec>
	switch (ocf) {
   10540:	287b      	cmp	r0, #123	; 0x7b
   10542:	f000 82ea 	beq.w	10b1a <hci_cmd_handle+0x786>
   10546:	287c      	cmp	r0, #124	; 0x7c
   10548:	d1ac      	bne.n	104a4 <hci_cmd_handle+0x110>
		write_auth_payload_timeout(cmd, evt);
   1054a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1054c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1054e:	8859      	ldrh	r1, [r3, #2]
   10550:	4628      	mov	r0, r5
   10552:	f003 fbbd 	bl	13cd0 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10556:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10558:	2103      	movs	r1, #3
   1055a:	a807      	add	r0, sp, #28
   1055c:	f7ff fdb6 	bl	100cc <hci_cmd_complete>
	rp->status = status;
   10560:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10562:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   10566:	9807      	ldr	r0, [sp, #28]
   10568:	e7a4      	b.n	104b4 <hci_cmd_handle+0x120>
   1056a:	4910      	ldr	r1, [pc, #64]	; (105ac <hci_cmd_handle+0x218>)
   1056c:	4b10      	ldr	r3, [pc, #64]	; (105b0 <hci_cmd_handle+0x21c>)
		BT_ERR("Invalid HCI CMD packet length");
   1056e:	4813      	ldr	r0, [pc, #76]	; (105bc <hci_cmd_handle+0x228>)
   10570:	e7d7      	b.n	10522 <hci_cmd_handle+0x18e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10572:	2107      	movs	r1, #7
   10574:	a807      	add	r0, sp, #28
   10576:	f7ff fda9 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   1057a:	4601      	mov	r1, r0
   1057c:	2000      	movs	r0, #0
   1057e:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   10582:	f7ff fb6b 	bl	fc5c <ll_addr_get>
	if (err == -EINVAL) {
   10586:	9807      	ldr	r0, [sp, #28]
   10588:	e794      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1058a:	2109      	movs	r1, #9
   1058c:	a807      	add	r0, sp, #28
   1058e:	f7ff fd9d 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10592:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10594:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10596:	2208      	movs	r2, #8
	rp->status = 0x00;
   10598:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1059c:	f00d ffcf 	bl	1e53e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   105a0:	2360      	movs	r3, #96	; 0x60
   105a2:	9807      	ldr	r0, [sp, #28]
   105a4:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   105a6:	e785      	b.n	104b4 <hci_cmd_handle+0x120>
   105a8:	20001ce2 	.word	0x20001ce2
   105ac:	00021154 	.word	0x00021154
   105b0:	00021114 	.word	0x00021114
   105b4:	00021df4 	.word	0x00021df4
   105b8:	200059d8 	.word	0x200059d8
   105bc:	00021e0c 	.word	0x00021e0c
	rp = hci_cmd_complete(evt, sizeof(*rp));
   105c0:	2141      	movs	r1, #65	; 0x41
   105c2:	a807      	add	r0, sp, #28
   105c4:	f7ff fd82 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   105c8:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   105ca:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   105cc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   105ce:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   105d2:	f00d ffb4 	bl	1e53e <memset>
	rp->commands[14] |= BIT(3) | BIT(5);
   105d6:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[0] |= BIT(5);
   105d8:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   105da:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   105dc:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   105de:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
   105e0:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   105e2:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
   105e4:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   105e8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   105ec:	73e3      	strb	r3, [r4, #15]
	rp->commands[27] |= BIT(0) | BIT(1);
   105ee:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
   105f0:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   105f4:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   105f8:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[15] |= BIT(1);
   105fc:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[22] |= BIT(2);
   10600:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10604:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   10608:	f063 0308 	orn	r3, r3, #8
	rp->commands[0] |= BIT(5);
   1060c:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   1060e:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   10610:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   10612:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   10616:	72e5      	strb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   10618:	7420      	strb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   1061a:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1061e:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[22] |= BIT(2);
   10622:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10624:	76a2      	strb	r2, [r4, #26]
	rp->commands[35] |= BIT(3);
   10626:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1062a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1062e:	7723      	strb	r3, [r4, #28]
	rp->commands[38] |= BIT(7);
   10630:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   10634:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(0) | BIT(1);
   10638:	f06c 0c3c 	orn	ip, ip, #60	; 0x3c
	rp->commands[28] |= BIT(1) | BIT(2);
   1063c:	f047 070e 	orr.w	r7, r7, #14
	rp->commands[32] |= BIT(4) | BIT(5);
   10640:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   10644:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10648:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   1064c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   10650:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(0) | BIT(1);
   10654:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
   10658:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   1065a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   1065e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   10662:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10666:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1066a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1066e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   10672:	9807      	ldr	r0, [sp, #28]
   10674:	e71e      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10676:	2109      	movs	r1, #9
   10678:	a807      	add	r0, sp, #28
   1067a:	f7ff fd27 	bl	100cc <hci_cmd_complete>
   1067e:	4603      	mov	r3, r0
	rp->status = 0x00;
   10680:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   10682:	200a      	movs	r0, #10
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   10684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10688:	f06f 050e 	mvn.w	r5, #14
   1068c:	2405      	movs	r4, #5
	rp->status = 0x00;
   1068e:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   10690:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   10692:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10694:	715d      	strb	r5, [r3, #5]
   10696:	9807      	ldr	r0, [sp, #28]
   10698:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   1069a:	709a      	strb	r2, [r3, #2]
   1069c:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1069e:	71d9      	strb	r1, [r3, #7]
   106a0:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   106a2:	e707      	b.n	104b4 <hci_cmd_handle+0x120>
		le_set_privacy_mode(cmd, evt);
   106a4:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   106a6:	79c1      	ldrb	r1, [r0, #7]
   106a8:	f006 fb8c 	bl	16dc4 <ll_priv_mode_set>
   106ac:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   106ae:	2101      	movs	r1, #1
   106b0:	a807      	add	r0, sp, #28
   106b2:	f7ff fd0b 	bl	100cc <hci_cmd_complete>
	ccst->status = status;
   106b6:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   106b8:	9807      	ldr	r0, [sp, #28]
   106ba:	e6fb      	b.n	104b4 <hci_cmd_handle+0x120>
	memcpy(dst, src, sizeof(*dst));
   106bc:	68a1      	ldr	r1, [r4, #8]
   106be:	2207      	movs	r2, #7
   106c0:	a808      	add	r0, sp, #32
   106c2:	f00d ff11 	bl	1e4e8 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   106c6:	2107      	movs	r1, #7
   106c8:	a807      	add	r0, sp, #28
   106ca:	f7ff fcff 	bl	100cc <hci_cmd_complete>
   106ce:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   106d0:	1c61      	adds	r1, r4, #1
   106d2:	a808      	add	r0, sp, #32
   106d4:	f006 fb38 	bl	16d48 <ll_rl_crpa_get>
   106d8:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   106da:	9807      	ldr	r0, [sp, #28]
   106dc:	e6ea      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   106de:	2102      	movs	r1, #2
   106e0:	a807      	add	r0, sp, #28
   106e2:	f7ff fcf3 	bl	100cc <hci_cmd_complete>
   106e6:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   106e8:	f006 f818 	bl	1671c <ll_rl_size_get>
	rp->status = 0x00;
   106ec:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   106ee:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   106f0:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   106f2:	9807      	ldr	r0, [sp, #28]
   106f4:	e6de      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   106f6:	2103      	movs	r1, #3
   106f8:	a807      	add	r0, sp, #28
   106fa:	f7ff fce7 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   106fe:	4601      	mov	r1, r0
   10700:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10702:	3001      	adds	r0, #1
	rp->status = 0x00;
   10704:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10708:	f7ff faf2 	bl	fcf0 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1070c:	9807      	ldr	r0, [sp, #28]
   1070e:	e6d1      	b.n	104b4 <hci_cmd_handle+0x120>
		le_set_phy(cmd, evt);
   10710:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10712:	7894      	ldrb	r4, [r2, #2]
   10714:	78d1      	ldrb	r1, [r2, #3]
   10716:	7913      	ldrb	r3, [r2, #4]
	handle = sys_le16_to_cpu(cmd->handle);
   10718:	8810      	ldrh	r0, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1071a:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1071e:	07e7      	lsls	r7, r4, #31
		cmd->tx_phys |= mask_phys;
   10720:	bf44      	itt	mi
   10722:	f041 0107 	orrmi.w	r1, r1, #7
   10726:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   10728:	07a6      	lsls	r6, r4, #30
		cmd->rx_phys |= mask_phys;
   1072a:	bf44      	itt	mi
   1072c:	f043 0307 	orrmi.w	r3, r3, #7
   10730:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   10732:	ea43 0201 	orr.w	r2, r3, r1
   10736:	f032 0207 	bics.w	r2, r2, #7
   1073a:	f040 8206 	bne.w	10b4a <hci_cmd_handle+0x7b6>
	if (!(cmd->tx_phys & 0x07) ||
   1073e:	074c      	lsls	r4, r1, #29
   10740:	f000 81ff 	beq.w	10b42 <hci_cmd_handle+0x7ae>
   10744:	075a      	lsls	r2, r3, #29
   10746:	f000 81fc 	beq.w	10b42 <hci_cmd_handle+0x7ae>
	if (phy_opts & 0x03) {
   1074a:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
   1074e:	bf1c      	itt	ne
   10750:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
   10754:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   10758:	f003 fa5c 	bl	13c14 <ll_phy_req_send>
	*evt = cmd_status(status);
   1075c:	f7ff fc44 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   10760:	e6a8      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10762:	2104      	movs	r1, #4
   10764:	a807      	add	r0, sp, #28
   10766:	f7ff fcb1 	bl	100cc <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1076a:	2203      	movs	r2, #3
	rp->status = 0x00;
   1076c:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1076e:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   10770:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   10772:	221b      	movs	r2, #27
   10774:	7042      	strb	r2, [r0, #1]
   10776:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   10778:	9807      	ldr	r0, [sp, #28]
   1077a:	e69b      	b.n	104b4 <hci_cmd_handle+0x120>
   1077c:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1077e:	4bc3      	ldr	r3, [pc, #780]	; (10a8c <hci_cmd_handle+0x6f8>)
   10780:	6811      	ldr	r1, [r2, #0]
   10782:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   10784:	605a      	str	r2, [r3, #4]
   10786:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10788:	a807      	add	r0, sp, #28
   1078a:	2101      	movs	r1, #1
   1078c:	f7ff fc9e 	bl	100cc <hci_cmd_complete>
	ccst->status = 0x00;
   10790:	2300      	movs	r3, #0
   10792:	7003      	strb	r3, [r0, #0]
   10794:	9807      	ldr	r0, [sp, #28]
}
   10796:	e68d      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10798:	2109      	movs	r1, #9
   1079a:	a807      	add	r0, sp, #28
   1079c:	f7ff fc96 	bl	100cc <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   107a0:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   107a2:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   107a4:	f10d 021a 	add.w	r2, sp, #26
   107a8:	f10d 0016 	add.w	r0, sp, #22
   107ac:	a906      	add	r1, sp, #24
   107ae:	f003 f9ff 	bl	13bb0 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   107b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   107b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   107ba:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   107be:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   107c2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   107c6:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   107ca:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   107cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   107d0:	7022      	strb	r2, [r4, #0]
   107d2:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   107d4:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   107d8:	e66c      	b.n	104b4 <hci_cmd_handle+0x120>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   107da:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   107dc:	8818      	ldrh	r0, [r3, #0]
   107de:	f005 fff5 	bl	167cc <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   107e2:	2101      	movs	r1, #1
   107e4:	a807      	add	r0, sp, #28
   107e6:	f7ff fc71 	bl	100cc <hci_cmd_complete>
	ccst->status = 0x00;
   107ea:	2300      	movs	r3, #0
   107ec:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   107ee:	9807      	ldr	r0, [sp, #28]
   107f0:	e660      	b.n	104b4 <hci_cmd_handle+0x120>
	u8_t enable = cmd->enable;
   107f2:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   107f4:	2101      	movs	r1, #1
   107f6:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
   107f8:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   107fa:	f7ff fc67 	bl	100cc <hci_cmd_complete>
   107fe:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   10800:	4628      	mov	r0, r5
   10802:	f005 ffcd 	bl	167a0 <ll_rl_enable>
   10806:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10808:	9807      	ldr	r0, [sp, #28]
   1080a:	e653      	b.n	104b4 <hci_cmd_handle+0x120>
   1080c:	68a1      	ldr	r1, [r4, #8]
   1080e:	2207      	movs	r2, #7
   10810:	a808      	add	r0, sp, #32
   10812:	f00d fe69 	bl	1e4e8 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10816:	2107      	movs	r1, #7
   10818:	a807      	add	r0, sp, #28
   1081a:	f7ff fc57 	bl	100cc <hci_cmd_complete>
   1081e:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   10820:	1c61      	adds	r1, r4, #1
   10822:	a808      	add	r0, sp, #32
   10824:	f006 fab2 	bl	16d8c <ll_rl_lrpa_get>
   10828:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1082a:	9807      	ldr	r0, [sp, #28]
   1082c:	e642      	b.n	104b4 <hci_cmd_handle+0x120>
		le_set_default_phy(cmd, evt);
   1082e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10830:	781a      	ldrb	r2, [r3, #0]
   10832:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   10834:	bf4a      	itet	mi
   10836:	2007      	movmi	r0, #7
   10838:	7858      	ldrbpl	r0, [r3, #1]
   1083a:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1083c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1083e:	bf4a      	itet	mi
   10840:	2107      	movmi	r1, #7
   10842:	7899      	ldrbpl	r1, [r3, #2]
   10844:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   10846:	f003 f9db 	bl	13c00 <ll_phy_default_set>
   1084a:	e72f      	b.n	106ac <hci_cmd_handle+0x318>
	handle = sys_le16_to_cpu(cmd->handle);
   1084c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1084e:	2105      	movs	r1, #5
   10850:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   10852:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10854:	f7ff fc3a 	bl	100cc <hci_cmd_complete>
   10858:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1085a:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1085c:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1085e:	1ce1      	adds	r1, r4, #3
   10860:	f003 f9b0 	bl	13bc4 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   10864:	78e2      	ldrb	r2, [r4, #3]
   10866:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   10868:	7020      	strb	r0, [r4, #0]
   1086a:	2a00      	cmp	r2, #0
   1086c:	fa92 f2a2 	rbit	r2, r2
   10870:	fab2 f282 	clz	r2, r2
   10874:	bf08      	it	eq
   10876:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1087a:	2b00      	cmp	r3, #0
   1087c:	fa93 f3a3 	rbit	r3, r3
   10880:	fab3 f383 	clz	r3, r3
   10884:	f102 0201 	add.w	r2, r2, #1
   10888:	bf08      	it	eq
   1088a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1088e:	70e2      	strb	r2, [r4, #3]
   10890:	3301      	adds	r3, #1
   10892:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   10894:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   10898:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   1089a:	e60b      	b.n	104b4 <hci_cmd_handle+0x120>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1089c:	2101      	movs	r1, #1
   1089e:	a807      	add	r0, sp, #28
   108a0:	f7ff fc14 	bl	100cc <hci_cmd_complete>
   108a4:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   108a6:	f005 ff3b 	bl	16720 <ll_rl_clear>
   108aa:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   108ac:	9807      	ldr	r0, [sp, #28]
   108ae:	e601      	b.n	104b4 <hci_cmd_handle+0x120>
	status = ll_rl_remove(&cmd->peer_id_addr);
   108b0:	68a0      	ldr	r0, [r4, #8]
   108b2:	f006 f9a5 	bl	16c00 <ll_rl_remove>
   108b6:	e6f9      	b.n	106ac <hci_cmd_handle+0x318>
		le_add_dev_to_rl(cmd, evt);
   108b8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   108ba:	f100 0217 	add.w	r2, r0, #23
   108be:	1dc1      	adds	r1, r0, #7
   108c0:	f006 f8de 	bl	16a80 <ll_rl_add>
   108c4:	e6f2      	b.n	106ac <hci_cmd_handle+0x318>
		le_write_default_data_len(cmd, evt);
   108c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   108c8:	8859      	ldrh	r1, [r3, #2]
   108ca:	8818      	ldrh	r0, [r3, #0]
   108cc:	f003 f966 	bl	13b9c <ll_length_default_set>
   108d0:	e6ec      	b.n	106ac <hci_cmd_handle+0x318>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   108d2:	2105      	movs	r1, #5
   108d4:	a807      	add	r0, sp, #28
   108d6:	f7ff fbf9 	bl	100cc <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   108da:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   108dc:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   108de:	f10d 001a 	add.w	r0, sp, #26
   108e2:	f003 f94f 	bl	13b84 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   108e6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   108ea:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   108ee:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   108f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   108f4:	7022      	strb	r2, [r4, #0]
   108f6:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   108f8:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   108fc:	e5da      	b.n	104b4 <hci_cmd_handle+0x120>
		le_set_data_len(cmd, evt);
   108fe:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10900:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   10902:	889a      	ldrh	r2, [r3, #4]
   10904:	8859      	ldrh	r1, [r3, #2]
   10906:	4628      	mov	r0, r5
   10908:	f003 f8fe 	bl	13b08 <ll_length_req_send>
   1090c:	e623      	b.n	10556 <hci_cmd_handle+0x1c2>
		le_conn_param_req_neg_reply(cmd, evt);
   1090e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10910:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   10912:	789a      	ldrb	r2, [r3, #2]
   10914:	2300      	movs	r3, #0
   10916:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1091a:	4628      	mov	r0, r5
   1091c:	9300      	str	r3, [sp, #0]
   1091e:	2102      	movs	r1, #2
   10920:	f002 fffc 	bl	1391c <ll_conn_update>
   10924:	e617      	b.n	10556 <hci_cmd_handle+0x1c2>
		le_conn_param_req_reply(cmd, evt);
   10926:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10928:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1092a:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1092c:	8853      	ldrh	r3, [r2, #2]
   1092e:	9102      	str	r1, [sp, #8]
   10930:	88d1      	ldrh	r1, [r2, #6]
   10932:	9101      	str	r1, [sp, #4]
   10934:	8892      	ldrh	r2, [r2, #4]
   10936:	9200      	str	r2, [sp, #0]
   10938:	4628      	mov	r0, r5
   1093a:	2200      	movs	r2, #0
   1093c:	2102      	movs	r1, #2
   1093e:	f002 ffed 	bl	1391c <ll_conn_update>
   10942:	e608      	b.n	10556 <hci_cmd_handle+0x1c2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10944:	2109      	movs	r1, #9
   10946:	a807      	add	r0, sp, #28
   10948:	f7ff fbc0 	bl	100cc <hci_cmd_complete>
	dst[0] = val;
   1094c:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1094e:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   10950:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   10952:	2230      	movs	r2, #48	; 0x30
   10954:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   10956:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   10958:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   1095a:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   1095c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1095e:	2201      	movs	r2, #1
   10960:	7003      	strb	r3, [r0, #0]
   10962:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   10964:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   10966:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   10968:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1096a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1096c:	9807      	ldr	r0, [sp, #28]
   1096e:	e5a1      	b.n	104b4 <hci_cmd_handle+0x120>
	handle = sys_le16_to_cpu(cmd->handle);
   10970:	68a3      	ldr	r3, [r4, #8]
   10972:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   10974:	2200      	movs	r2, #0
   10976:	4628      	mov	r0, r5
   10978:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1097a:	f005 fd23 	bl	163c4 <ll_start_enc_req_send>
   1097e:	e5ea      	b.n	10556 <hci_cmd_handle+0x1c2>
	handle = sys_le16_to_cpu(cmd->handle);
   10980:	68a2      	ldr	r2, [r4, #8]
   10982:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10986:	2100      	movs	r1, #0
   10988:	4628      	mov	r0, r5
   1098a:	e7f6      	b.n	1097a <hci_cmd_handle+0x5e6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1098c:	2109      	movs	r1, #9
   1098e:	a807      	add	r0, sp, #28
   10990:	f7ff fb9c 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10994:	2300      	movs	r3, #0
   10996:	f800 3b01 	strb.w	r3, [r0], #1
	util_rand(rp->rand, count);
   1099a:	2108      	movs	r1, #8
   1099c:	f7fe fa2a 	bl	edf4 <util_rand>
	if (err == -EINVAL) {
   109a0:	9807      	ldr	r0, [sp, #28]
   109a2:	e587      	b.n	104b4 <hci_cmd_handle+0x120>
		le_encrypt(cmd, evt);
   109a4:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   109a6:	aa08      	add	r2, sp, #32
   109a8:	f100 0110 	add.w	r1, r0, #16
   109ac:	2300      	movs	r3, #0
   109ae:	f008 fa2d 	bl	18e0c <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   109b2:	2111      	movs	r1, #17
   109b4:	a807      	add	r0, sp, #28
   109b6:	f7ff fb89 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   109ba:	2300      	movs	r3, #0
   109bc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   109c0:	a908      	add	r1, sp, #32
   109c2:	2210      	movs	r2, #16
   109c4:	f00d fd90 	bl	1e4e8 <memcpy>
	if (err == -EINVAL) {
   109c8:	9807      	ldr	r0, [sp, #28]
   109ca:	e573      	b.n	104b4 <hci_cmd_handle+0x120>
	handle = sys_le16_to_cpu(cmd->handle);
   109cc:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   109ce:	8818      	ldrh	r0, [r3, #0]
   109d0:	f003 f862 	bl	13a98 <ll_feature_req_send>
	*evt = cmd_status(status);
   109d4:	f7ff fb08 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   109d8:	e56c      	b.n	104b4 <hci_cmd_handle+0x120>
	handle = sys_le16_to_cpu(cmd->handle);
   109da:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   109dc:	2108      	movs	r1, #8
   109de:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   109e0:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   109e2:	f7ff fb73 	bl	100cc <hci_cmd_complete>
   109e6:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   109e8:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   109ea:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   109ec:	f003 f81a 	bl	13a24 <ll_chm_get>
	rp->status = status;
   109f0:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   109f2:	9807      	ldr	r0, [sp, #28]
   109f4:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   109f8:	e55c      	b.n	104b4 <hci_cmd_handle+0x120>
		le_conn_update(cmd, evt);
   109fa:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   109fc:	8911      	ldrh	r1, [r2, #8]
   109fe:	8853      	ldrh	r3, [r2, #2]
   10a00:	8810      	ldrh	r0, [r2, #0]
   10a02:	9102      	str	r1, [sp, #8]
   10a04:	88d1      	ldrh	r1, [r2, #6]
   10a06:	9101      	str	r1, [sp, #4]
   10a08:	8892      	ldrh	r2, [r2, #4]
   10a0a:	9200      	str	r2, [sp, #0]
   10a0c:	2200      	movs	r2, #0
   10a0e:	4611      	mov	r1, r2
   10a10:	f002 ff84 	bl	1391c <ll_conn_update>
	*evt = cmd_status(status);
   10a14:	f7ff fae8 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   10a18:	e54c      	b.n	104b4 <hci_cmd_handle+0x120>
	status = ll_wl_remove(&cmd->addr);
   10a1a:	68a0      	ldr	r0, [r4, #8]
   10a1c:	f005 fe04 	bl	16628 <ll_wl_remove>
   10a20:	e644      	b.n	106ac <hci_cmd_handle+0x318>
	status = ll_wl_add(&cmd->addr);
   10a22:	68a0      	ldr	r0, [r4, #8]
   10a24:	f005 ffcc 	bl	169c0 <ll_wl_add>
   10a28:	e640      	b.n	106ac <hci_cmd_handle+0x318>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10a2a:	2101      	movs	r1, #1
   10a2c:	a807      	add	r0, sp, #28
   10a2e:	f7ff fb4d 	bl	100cc <hci_cmd_complete>
   10a32:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   10a34:	f005 fdce 	bl	165d4 <ll_wl_clear>
   10a38:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10a3a:	9807      	ldr	r0, [sp, #28]
   10a3c:	e53a      	b.n	104b4 <hci_cmd_handle+0x120>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a3e:	2102      	movs	r1, #2
   10a40:	a807      	add	r0, sp, #28
   10a42:	f7ff fb43 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10a46:	2300      	movs	r3, #0
   10a48:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a4a:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   10a4c:	f005 fdc0 	bl	165d0 <ll_wl_size_get>
   10a50:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   10a52:	9807      	ldr	r0, [sp, #28]
   10a54:	e52e      	b.n	104b4 <hci_cmd_handle+0x120>
	status = ll_adv_enable(cmd->enable);
   10a56:	68a3      	ldr	r3, [r4, #8]
   10a58:	7818      	ldrb	r0, [r3, #0]
   10a5a:	f7ef ff75 	bl	948 <ll_adv_enable>
   10a5e:	e625      	b.n	106ac <hci_cmd_handle+0x318>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   10a60:	68a1      	ldr	r1, [r4, #8]
   10a62:	f811 0b01 	ldrb.w	r0, [r1], #1
   10a66:	f002 f9af 	bl	12dc8 <ll_adv_scan_rsp_set>
   10a6a:	e61f      	b.n	106ac <hci_cmd_handle+0x318>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   10a6c:	68a1      	ldr	r1, [r4, #8]
   10a6e:	f811 0b01 	ldrb.w	r0, [r1], #1
   10a72:	f002 f961 	bl	12d38 <ll_adv_data_set>
   10a76:	e619      	b.n	106ac <hci_cmd_handle+0x318>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a78:	2102      	movs	r1, #2
   10a7a:	a807      	add	r0, sp, #28
   10a7c:	f7ff fb26 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10a80:	2300      	movs	r3, #0
   10a82:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   10a84:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   10a86:	9807      	ldr	r0, [sp, #28]
   10a88:	e514      	b.n	104b4 <hci_cmd_handle+0x120>
   10a8a:	bf00      	nop
   10a8c:	200059e0 	.word	0x200059e0
		le_set_adv_param(cmd, evt);
   10a90:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   10a92:	7ba5      	ldrb	r5, [r4, #14]
   10a94:	79a3      	ldrb	r3, [r4, #6]
   10a96:	7962      	ldrb	r2, [r4, #5]
   10a98:	7921      	ldrb	r1, [r4, #4]
   10a9a:	8820      	ldrh	r0, [r4, #0]
   10a9c:	9502      	str	r5, [sp, #8]
   10a9e:	7b65      	ldrb	r5, [r4, #13]
   10aa0:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   10aa2:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   10aa4:	9400      	str	r4, [sp, #0]
   10aa6:	f002 f8a9 	bl	12bfc <ll_adv_params_set>
   10aaa:	e5ff      	b.n	106ac <hci_cmd_handle+0x318>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   10aac:	68a1      	ldr	r1, [r4, #8]
   10aae:	2001      	movs	r0, #1
   10ab0:	f7ff f8f2 	bl	fc98 <ll_addr_set>
   10ab4:	e5fa      	b.n	106ac <hci_cmd_handle+0x318>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ab6:	2109      	movs	r1, #9
   10ab8:	a807      	add	r0, sp, #28
   10aba:	f7ff fb07 	bl	100cc <hci_cmd_complete>
	rp->status = 0x00;
   10abe:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ac0:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10ac2:	2208      	movs	r2, #8
	rp->status = 0x00;
   10ac4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10ac8:	f00d fd39 	bl	1e53e <memset>
	dst[0] = val;
   10acc:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   10ace:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   10ad0:	2301      	movs	r3, #1
	dst[0] = val;
   10ad2:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   10ad4:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   10ad6:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   10ad8:	9807      	ldr	r0, [sp, #28]
   10ada:	e4eb      	b.n	104b4 <hci_cmd_handle+0x120>
		disconnect(cmd, evt);
   10adc:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   10ade:	7899      	ldrb	r1, [r3, #2]
   10ae0:	8818      	ldrh	r0, [r3, #0]
   10ae2:	f002 ffbf 	bl	13a64 <ll_terminate_ind_send>
	*evt = cmd_status(status);
   10ae6:	f7ff fa7f 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   10aea:	e4e3      	b.n	104b4 <hci_cmd_handle+0x120>
	event_mask = DEFAULT_EVENT_MASK;
   10aec:	4919      	ldr	r1, [pc, #100]	; (10b54 <hci_cmd_handle+0x7c0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10aee:	4a1a      	ldr	r2, [pc, #104]	; (10b58 <hci_cmd_handle+0x7c4>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10af0:	4b1a      	ldr	r3, [pc, #104]	; (10b5c <hci_cmd_handle+0x7c8>)
	event_mask = DEFAULT_EVENT_MASK;
   10af2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10af6:	f641 75ff 	movw	r5, #8191	; 0x1fff
   10afa:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10afe:	201f      	movs	r0, #31
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10b00:	2400      	movs	r4, #0
   10b02:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10b04:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10b06:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10b0a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   10b0e:	f000 ffdf 	bl	11ad0 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10b12:	e666      	b.n	107e2 <hci_cmd_handle+0x44e>
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10b14:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   10b16:	4b10      	ldr	r3, [pc, #64]	; (10b58 <hci_cmd_handle+0x7c4>)
   10b18:	e632      	b.n	10780 <hci_cmd_handle+0x3ec>
	handle = sys_le16_to_cpu(cmd->handle);
   10b1a:	68a3      	ldr	r3, [r4, #8]
   10b1c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   10b1e:	a908      	add	r1, sp, #32
   10b20:	4628      	mov	r0, r5
   10b22:	f003 f8b1 	bl	13c88 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10b26:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   10b28:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10b2a:	a807      	add	r0, sp, #28
   10b2c:	f7ff face 	bl	100cc <hci_cmd_complete>
	rp->status = status;
   10b30:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10b32:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   10b36:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10b3a:	f8a0 3003 	strh.w	r3, [r0, #3]
   10b3e:	9807      	ldr	r0, [sp, #28]
}
   10b40:	e4b8      	b.n	104b4 <hci_cmd_handle+0x120>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
   10b42:	2012      	movs	r0, #18
   10b44:	f7ff fa50 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   10b48:	e4b4      	b.n	104b4 <hci_cmd_handle+0x120>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
   10b4a:	2011      	movs	r0, #17
   10b4c:	f7ff fa4c 	bl	ffe8 <cmd_status>
	if (err == -EINVAL) {
   10b50:	e4b0      	b.n	104b4 <hci_cmd_handle+0x120>
   10b52:	bf00      	nop
   10b54:	200059d8 	.word	0x200059d8
   10b58:	20000000 	.word	0x20000000
   10b5c:	200059e0 	.word	0x200059e0

00010b60 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   10b60:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   10b62:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   10b64:	2b03      	cmp	r3, #3
{
   10b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   10b6a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   10b6c:	d942      	bls.n	10bf4 <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   10b6e:	4605      	mov	r5, r0
   10b70:	460e      	mov	r6, r1
   10b72:	3008      	adds	r0, #8
   10b74:	2104      	movs	r1, #4
   10b76:	f00f fb0b 	bl	20190 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   10b7a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   10b7c:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   10b7e:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   10b82:	42bb      	cmp	r3, r7
   10b84:	d343      	bcc.n	10c0e <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   10b86:	f002 fe4f 	bl	13828 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   10b8a:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   10b8e:	4604      	mov	r4, r0
   10b90:	2800      	cmp	r0, #0
   10b92:	d040      	beq.n	10c16 <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   10b94:	089a      	lsrs	r2, r3, #2
   10b96:	d102      	bne.n	10b9e <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   10b98:	b333      	cbz	r3, 10be8 <hci_acl_handle+0x88>
   10b9a:	2b01      	cmp	r3, #1
   10b9c:	d003      	beq.n	10ba6 <hci_acl_handle+0x46>
		return -EINVAL;
   10b9e:	f06f 0015 	mvn.w	r0, #21
}
   10ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10ba6:	7902      	ldrb	r2, [r0, #4]
   10ba8:	f363 0201 	bfi	r2, r3, #0, #2
   10bac:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   10bae:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   10bb0:	68a9      	ldr	r1, [r5, #8]
   10bb2:	463a      	mov	r2, r7
   10bb4:	1de0      	adds	r0, r4, #7
   10bb6:	f00d fc97 	bl	1e4e8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   10bba:	4621      	mov	r1, r4
   10bbc:	f3c8 000b 	ubfx	r0, r8, #0, #12
   10bc0:	f002 fe3e 	bl	13840 <ll_tx_mem_enqueue>
   10bc4:	2800      	cmp	r0, #0
   10bc6:	d0ec      	beq.n	10ba2 <hci_acl_handle+0x42>
   10bc8:	4b29      	ldr	r3, [pc, #164]	; (10c70 <hci_acl_handle+0x110>)
   10bca:	492a      	ldr	r1, [pc, #168]	; (10c74 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   10bcc:	482a      	ldr	r0, [pc, #168]	; (10c78 <hci_acl_handle+0x118>)
   10bce:	1ac9      	subs	r1, r1, r3
   10bd0:	08c9      	lsrs	r1, r1, #3
   10bd2:	0189      	lsls	r1, r1, #6
   10bd4:	f041 0101 	orr.w	r1, r1, #1
   10bd8:	f00c fd66 	bl	1d6a8 <log_0>
		ll_tx_mem_release(node_tx);
   10bdc:	4620      	mov	r0, r4
   10bde:	f002 fe29 	bl	13834 <ll_tx_mem_release>
		return -EINVAL;
   10be2:	f06f 0015 	mvn.w	r0, #21
   10be6:	e7dc      	b.n	10ba2 <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   10be8:	7903      	ldrb	r3, [r0, #4]
   10bea:	2202      	movs	r2, #2
   10bec:	f362 0301 	bfi	r3, r2, #0, #2
   10bf0:	7103      	strb	r3, [r0, #4]
		break;
   10bf2:	e7dc      	b.n	10bae <hci_acl_handle+0x4e>
   10bf4:	491f      	ldr	r1, [pc, #124]	; (10c74 <hci_acl_handle+0x114>)
   10bf6:	4b1e      	ldr	r3, [pc, #120]	; (10c70 <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   10bf8:	4820      	ldr	r0, [pc, #128]	; (10c7c <hci_acl_handle+0x11c>)
   10bfa:	1ac9      	subs	r1, r1, r3
   10bfc:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   10bfe:	0189      	lsls	r1, r1, #6
   10c00:	f041 0101 	orr.w	r1, r1, #1
   10c04:	f00c fd50 	bl	1d6a8 <log_0>
		return -EINVAL;
   10c08:	f06f 0015 	mvn.w	r0, #21
   10c0c:	e7c9      	b.n	10ba2 <hci_acl_handle+0x42>
   10c0e:	4919      	ldr	r1, [pc, #100]	; (10c74 <hci_acl_handle+0x114>)
   10c10:	4b17      	ldr	r3, [pc, #92]	; (10c70 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   10c12:	481b      	ldr	r0, [pc, #108]	; (10c80 <hci_acl_handle+0x120>)
   10c14:	e7f1      	b.n	10bfa <hci_acl_handle+0x9a>
   10c16:	4b16      	ldr	r3, [pc, #88]	; (10c70 <hci_acl_handle+0x110>)
   10c18:	4916      	ldr	r1, [pc, #88]	; (10c74 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   10c1a:	481a      	ldr	r0, [pc, #104]	; (10c84 <hci_acl_handle+0x124>)
   10c1c:	1ac9      	subs	r1, r1, r3
   10c1e:	08c9      	lsrs	r1, r1, #3
   10c20:	0189      	lsls	r1, r1, #6
   10c22:	f041 0101 	orr.w	r1, r1, #1
   10c26:	f00c fd3f 	bl	1d6a8 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   10c2a:	4b17      	ldr	r3, [pc, #92]	; (10c88 <hci_acl_handle+0x128>)
   10c2c:	6819      	ldr	r1, [r3, #0]
   10c2e:	4623      	mov	r3, r4
   10c30:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   10c34:	4313      	orrs	r3, r2
   10c36:	d017      	beq.n	10c68 <hci_acl_handle+0x108>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10c3c:	2001      	movs	r0, #1
   10c3e:	f7f8 fdb7 	bl	97b0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   10c42:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10c44:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   10c46:	3008      	adds	r0, #8
   10c48:	f00f fa7b 	bl	20142 <net_buf_simple_add>
	hdr->len = len;
   10c4c:	2401      	movs	r4, #1
	hdr->evt = evt;
   10c4e:	221a      	movs	r2, #26
   10c50:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   10c52:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   10c54:	6830      	ldr	r0, [r6, #0]
   10c56:	4621      	mov	r1, r4
   10c58:	3008      	adds	r0, #8
   10c5a:	f00f fa72 	bl	20142 <net_buf_simple_add>
   10c5e:	4603      	mov	r3, r0
		return -ENOBUFS;
   10c60:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   10c64:	701c      	strb	r4, [r3, #0]
   10c66:	e79c      	b.n	10ba2 <hci_acl_handle+0x42>
		return -ENOBUFS;
   10c68:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10c6c:	e799      	b.n	10ba2 <hci_acl_handle+0x42>
   10c6e:	bf00      	nop
   10c70:	00021114 	.word	0x00021114
   10c74:	00021154 	.word	0x00021154
   10c78:	00021e74 	.word	0x00021e74
   10c7c:	00021e2c 	.word	0x00021e2c
   10c80:	00021e40 	.word	0x00021e40
   10c84:	00021e60 	.word	0x00021e60
   10c88:	200059d8 	.word	0x200059d8

00010c8c <hci_acl_encode>:
	u16_t handle;
	u8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   10c8c:	f890 3020 	ldrb.w	r3, [r0, #32]
   10c90:	f003 0303 	and.w	r3, r3, #3
   10c94:	3b01      	subs	r3, #1
   10c96:	2b01      	cmp	r3, #1
{
   10c98:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   10c9a:	d90d      	bls.n	10cb8 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   10c9c:	4a17      	ldr	r2, [pc, #92]	; (10cfc <hci_acl_encode+0x70>)
   10c9e:	4918      	ldr	r1, [pc, #96]	; (10d00 <hci_acl_encode+0x74>)
   10ca0:	4818      	ldr	r0, [pc, #96]	; (10d04 <hci_acl_encode+0x78>)
   10ca2:	f640 539e 	movw	r3, #3486	; 0xd9e
   10ca6:	f00b fbb1 	bl	1c40c <printk>
   10caa:	4040      	eors	r0, r0
   10cac:	f380 8811 	msr	BASEPRI, r0
   10cb0:	f04f 0003 	mov.w	r0, #3
   10cb4:	df02      	svc	2
		break;
	}
}
   10cb6:	bd70      	pop	{r4, r5, r6, pc}
   10cb8:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   10cba:	f101 0508 	add.w	r5, r1, #8
   10cbe:	4628      	mov	r0, r5
   10cc0:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   10cc2:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   10cc4:	f00f fa3d 	bl	20142 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   10cc8:	f894 3020 	ldrb.w	r3, [r4, #32]
   10ccc:	f003 0303 	and.w	r3, r3, #3
   10cd0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   10cd2:	bf0c      	ite	eq
   10cd4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   10cd8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   10cdc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   10cde:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   10ce2:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   10ce4:	4628      	mov	r0, r5
   10ce6:	f00f fa2c 	bl	20142 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   10cea:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   10cee:	f104 0123 	add.w	r1, r4, #35	; 0x23
}
   10cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   10cf6:	f00d bbf7 	b.w	1e4e8 <memcpy>
   10cfa:	bf00      	nop
   10cfc:	00021e88 	.word	0x00021e88
   10d00:	00021c84 	.word	0x00021c84
   10d04:	00021ce0 	.word	0x00021ce0

00010d08 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   10d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10d0c:	7905      	ldrb	r5, [r0, #4]
   10d0e:	88c7      	ldrh	r7, [r0, #6]
   10d10:	2d02      	cmp	r5, #2
{
   10d12:	b088      	sub	sp, #32
   10d14:	4604      	mov	r4, r0
   10d16:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10d18:	d00c      	beq.n	10d34 <hci_evt_encode+0x2c>
	switch (node_rx->hdr.type) {
   10d1a:	3d08      	subs	r5, #8
   10d1c:	2d06      	cmp	r5, #6
   10d1e:	f200 8293 	bhi.w	11248 <hci_evt_encode+0x540>
   10d22:	e8df f015 	tbh	[pc, r5, lsl #1]
   10d26:	0060      	.short	0x0060
   10d28:	00c200e5 	.word	0x00c200e5
   10d2c:	01060138 	.word	0x01060138
   10d30:	0022011d 	.word	0x0022011d
	switch (pdu_data->llctrl.opcode) {
   10d34:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10d38:	3b03      	subs	r3, #3
   10d3a:	2b12      	cmp	r3, #18
   10d3c:	f200 8145 	bhi.w	10fca <hci_evt_encode+0x2c2>
   10d40:	e8df f013 	tbh	[pc, r3, lsl #1]
   10d44:	014301d0 	.word	0x014301d0
   10d48:	01940143 	.word	0x01940143
   10d4c:	014301a2 	.word	0x014301a2
   10d50:	014301c8 	.word	0x014301c8
   10d54:	01430143 	.word	0x01430143
   10d58:	014301f6 	.word	0x014301f6
   10d5c:	01430205 	.word	0x01430205
   10d60:	01430143 	.word	0x01430143
   10d64:	01510143 	.word	0x01510143
   10d68:	0151      	.short	0x0151
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d6a:	4bcf      	ldr	r3, [pc, #828]	; (110a8 <hci_evt_encode+0x3a0>)
   10d6c:	6858      	ldr	r0, [r3, #4]
   10d6e:	2100      	movs	r1, #0
   10d70:	460a      	mov	r2, r1
   10d72:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10d76:	4313      	orrs	r3, r2
   10d78:	d007      	beq.n	10d8a <hci_evt_encode+0x82>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   10d7a:	4bcc      	ldr	r3, [pc, #816]	; (110ac <hci_evt_encode+0x3a4>)
   10d7c:	6818      	ldr	r0, [r3, #0]
   10d7e:	460b      	mov	r3, r1
   10d80:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d84:	4313      	orrs	r3, r2
   10d86:	f040 814e 	bne.w	11026 <hci_evt_encode+0x31e>
   10d8a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   10d8e:	48c8      	ldr	r0, [pc, #800]	; (110b0 <hci_evt_encode+0x3a8>)
   10d90:	4bc8      	ldr	r3, [pc, #800]	; (110b4 <hci_evt_encode+0x3ac>)
   10d92:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   10d96:	f894 5020 	ldrb.w	r5, [r4, #32]
   10d9a:	9704      	str	r7, [sp, #16]
   10d9c:	2900      	cmp	r1, #0
   10d9e:	eba3 0300 	sub.w	r3, r3, r0
   10da2:	fa91 f1a1 	rbit	r1, r1
   10da6:	fab1 f181 	clz	r1, r1
   10daa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   10dae:	bf08      	it	eq
   10db0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   10db4:	2a00      	cmp	r2, #0
   10db6:	fa92 f2a2 	rbit	r2, r2
   10dba:	fab2 f282 	clz	r2, r2
   10dbe:	f101 0001 	add.w	r0, r1, #1
   10dc2:	bf08      	it	eq
   10dc4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   10dc8:	019b      	lsls	r3, r3, #6
   10dca:	1c54      	adds	r4, r2, #1
   10dcc:	9006      	str	r0, [sp, #24]
   10dce:	f043 0302 	orr.w	r3, r3, #2
   10dd2:	48b9      	ldr	r0, [pc, #740]	; (110b8 <hci_evt_encode+0x3b0>)
   10dd4:	9407      	str	r4, [sp, #28]
   10dd6:	2204      	movs	r2, #4
   10dd8:	a904      	add	r1, sp, #16
   10dda:	9505      	str	r5, [sp, #20]
   10ddc:	f00c fcba 	bl	1d754 <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   10de0:	b008      	add	sp, #32
   10de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u8_t status = node_rx->status;
   10de6:	f890 5020 	ldrb.w	r5, [r0, #32]
	if (!status) {
   10dea:	2d00      	cmp	r5, #0
   10dec:	f000 81cd 	beq.w	1118a <hci_evt_encode+0x482>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10df0:	4bad      	ldr	r3, [pc, #692]	; (110a8 <hci_evt_encode+0x3a0>)
   10df2:	6859      	ldr	r1, [r3, #4]
   10df4:	f04f 0800 	mov.w	r8, #0
   10df8:	4642      	mov	r2, r8
   10dfa:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   10dfe:	4313      	orrs	r3, r2
   10e00:	d0ee      	beq.n	10de0 <hci_evt_encode+0xd8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10e02:	4baa      	ldr	r3, [pc, #680]	; (110ac <hci_evt_encode+0x3a4>)
   10e04:	f8d3 c000 	ldr.w	ip, [r3]
   10e08:	f240 2101 	movw	r1, #513	; 0x201
   10e0c:	ea0c 0201 	and.w	r2, ip, r1
   10e10:	4643      	mov	r3, r8
   10e12:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   10e14:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   10e18:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10e1a:	d0e1      	beq.n	10de0 <hci_evt_encode+0xd8>
	if (!status) {
   10e1c:	2d00      	cmp	r5, #0
   10e1e:	f040 81c8 	bne.w	111b2 <hci_evt_encode+0x4aa>
		conn_count++;
   10e22:	4aa6      	ldr	r2, [pc, #664]	; (110bc <hci_evt_encode+0x3b4>)
   10e24:	6813      	ldr	r3, [r2, #0]
   10e26:	3301      	adds	r3, #1
   10e28:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   10e2a:	ea50 0301 	orrs.w	r3, r0, r1
   10e2e:	f104 0823 	add.w	r8, r4, #35	; 0x23
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   10e32:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   10e34:	f000 81cc 	beq.w	111d0 <hci_evt_encode+0x4c8>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   10e38:	221e      	movs	r2, #30
   10e3a:	210a      	movs	r1, #10
   10e3c:	f7ff f8bc 	bl	ffb8 <meta_evt>
		leecc->status = 0x00;
   10e40:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   10e42:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = node_rx->role;
   10e46:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10e4a:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   10e4c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10e50:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   10e52:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   10e54:	4641      	mov	r1, r8
   10e56:	3005      	adds	r0, #5
   10e58:	2206      	movs	r2, #6
   10e5a:	f00d fb45 	bl	1e4e8 <memcpy>
		if ((node_rx->own_addr_type) &&
   10e5e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10e62:	2b00      	cmp	r3, #0
   10e64:	f000 81e7 	beq.w	11236 <hci_evt_encode+0x52e>
   10e68:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   10e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10e70:	2b40      	cmp	r3, #64	; 0x40
   10e72:	f106 000b 	add.w	r0, r6, #11
   10e76:	f000 81e1 	beq.w	1123c <hci_evt_encode+0x534>
			(void)memset(&leecc->local_rpa.val[0], 0x0,
   10e7a:	2206      	movs	r2, #6
   10e7c:	2100      	movs	r1, #0
   10e7e:	f00d fb5e 	bl	1e53e <memset>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   10e82:	2206      	movs	r2, #6
   10e84:	f104 0129 	add.w	r1, r4, #41	; 0x29
   10e88:	f106 0011 	add.w	r0, r6, #17
   10e8c:	f00d fb2c 	bl	1e4e8 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   10e90:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   10e92:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   10e94:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   10e96:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   10e9a:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   10e9e:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   10ea2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   10ea6:	7773      	strb	r3, [r6, #29]
		return;
   10ea8:	e79a      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10eaa:	4b7f      	ldr	r3, [pc, #508]	; (110a8 <hci_evt_encode+0x3a0>)
   10eac:	6858      	ldr	r0, [r3, #4]
   10eae:	2100      	movs	r1, #0
   10eb0:	460a      	mov	r2, r1
   10eb2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10eb6:	4313      	orrs	r3, r2
   10eb8:	d092      	beq.n	10de0 <hci_evt_encode+0xd8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   10eba:	4b7c      	ldr	r3, [pc, #496]	; (110ac <hci_evt_encode+0x3a4>)
   10ebc:	6818      	ldr	r0, [r3, #0]
   10ebe:	460b      	mov	r3, r1
   10ec0:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10ec4:	4313      	orrs	r3, r2
   10ec6:	d08b      	beq.n	10de0 <hci_evt_encode+0xd8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   10ec8:	2209      	movs	r2, #9
   10eca:	2103      	movs	r1, #3
   10ecc:	4630      	mov	r0, r6
   10ece:	f7ff f873 	bl	ffb8 <meta_evt>
	sep->status = cu->status;
   10ed2:	f894 3020 	ldrb.w	r3, [r4, #32]
   10ed6:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   10ed8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	sep->latency = sys_cpu_to_le16(cu->latency);
   10eda:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   10edc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10ede:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   10ee2:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   10ee6:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   10eea:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   10eee:	e777      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   10ef0:	4b6d      	ldr	r3, [pc, #436]	; (110a8 <hci_evt_encode+0x3a0>)
   10ef2:	6819      	ldr	r1, [r3, #0]
   10ef4:	2500      	movs	r5, #0
   10ef6:	f001 0210 	and.w	r2, r1, #16
   10efa:	462b      	mov	r3, r5
   10efc:	4313      	orrs	r3, r2
   10efe:	f43f af6f 	beq.w	10de0 <hci_evt_encode+0xd8>
	hdr = net_buf_add(buf, sizeof(*hdr));
   10f02:	3608      	adds	r6, #8
   10f04:	2102      	movs	r1, #2
   10f06:	4630      	mov	r0, r6
   10f08:	f00f f91b 	bl	20142 <net_buf_simple_add>
   10f0c:	4603      	mov	r3, r0
	hdr->evt = evt;
   10f0e:	2205      	movs	r2, #5
	hdr->len = len;
   10f10:	2104      	movs	r1, #4
	hdr->evt = evt;
   10f12:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10f14:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   10f16:	4630      	mov	r0, r6
   10f18:	f00f f913 	bl	20142 <net_buf_simple_add>
	conn_count--;
   10f1c:	4a67      	ldr	r2, [pc, #412]	; (110bc <hci_evt_encode+0x3b4>)
	ep->status = 0x00;
   10f1e:	7005      	strb	r5, [r0, #0]
	conn_count--;
   10f20:	6813      	ldr	r3, [r2, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10f22:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   10f26:	f894 1020 	ldrb.w	r1, [r4, #32]
   10f2a:	70c1      	strb	r1, [r0, #3]
	conn_count--;
   10f2c:	3b01      	subs	r3, #1
   10f2e:	6013      	str	r3, [r2, #0]
   10f30:	e756      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   10f32:	4b63      	ldr	r3, [pc, #396]	; (110c0 <hci_evt_encode+0x3b8>)
   10f34:	6819      	ldr	r1, [r3, #0]
   10f36:	2300      	movs	r3, #0
   10f38:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   10f3c:	4313      	orrs	r3, r2
   10f3e:	f43f af4f 	beq.w	10de0 <hci_evt_encode+0xd8>
	hdr = net_buf_add(buf, sizeof(*hdr));
   10f42:	3608      	adds	r6, #8
   10f44:	2102      	movs	r1, #2
   10f46:	4630      	mov	r0, r6
   10f48:	f00f f8fb 	bl	20142 <net_buf_simple_add>
   10f4c:	4603      	mov	r3, r0
	hdr->evt = evt;
   10f4e:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   10f50:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   10f52:	4630      	mov	r0, r6
	hdr->evt = evt;
   10f54:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10f56:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   10f58:	f00f f8f3 	bl	20142 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   10f5c:	8007      	strh	r7, [r0, #0]
   10f5e:	e73f      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10f60:	4b51      	ldr	r3, [pc, #324]	; (110a8 <hci_evt_encode+0x3a0>)
   10f62:	6858      	ldr	r0, [r3, #4]
   10f64:	2100      	movs	r1, #0
   10f66:	460a      	mov	r2, r1
   10f68:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10f6c:	4313      	orrs	r3, r2
   10f6e:	f43f af37 	beq.w	10de0 <hci_evt_encode+0xd8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   10f72:	4b4e      	ldr	r3, [pc, #312]	; (110ac <hci_evt_encode+0x3a4>)
   10f74:	6818      	ldr	r0, [r3, #0]
   10f76:	460b      	mov	r3, r1
   10f78:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10f7c:	4313      	orrs	r3, r2
   10f7e:	f43f af2f 	beq.w	10de0 <hci_evt_encode+0xd8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   10f82:	4630      	mov	r0, r6
   10f84:	2203      	movs	r2, #3
   10f86:	2114      	movs	r1, #20
   10f88:	f7ff f816 	bl	ffb8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   10f8c:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   10f8e:	f894 3020 	ldrb.w	r3, [r4, #32]
   10f92:	7083      	strb	r3, [r0, #2]
   10f94:	e724      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   10f96:	4b44      	ldr	r3, [pc, #272]	; (110a8 <hci_evt_encode+0x3a0>)
   10f98:	6859      	ldr	r1, [r3, #4]
   10f9a:	2400      	movs	r4, #0
   10f9c:	4622      	mov	r2, r4
   10f9e:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   10fa2:	4313      	orrs	r3, r2
   10fa4:	f43f af1c 	beq.w	10de0 <hci_evt_encode+0xd8>
	hdr = net_buf_add(buf, sizeof(*hdr));
   10fa8:	3608      	adds	r6, #8
   10faa:	2102      	movs	r1, #2
   10fac:	4630      	mov	r0, r6
   10fae:	f00f f8c8 	bl	20142 <net_buf_simple_add>
   10fb2:	4603      	mov	r3, r0
	hdr->evt = evt;
   10fb4:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   10fb6:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   10fb8:	4630      	mov	r0, r6
	hdr->evt = evt;
   10fba:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10fbc:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   10fbe:	f00f f8c0 	bl	20142 <net_buf_simple_add>
	ep->status = 0x00;
   10fc2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10fc4:	f8a0 7001 	strh.w	r7, [r0, #1]
   10fc8:	e70a      	b.n	10de0 <hci_evt_encode+0xd8>
		LL_ASSERT(0);
   10fca:	f640 5372 	movw	r3, #3442	; 0xd72
   10fce:	4a3d      	ldr	r2, [pc, #244]	; (110c4 <hci_evt_encode+0x3bc>)
   10fd0:	493d      	ldr	r1, [pc, #244]	; (110c8 <hci_evt_encode+0x3c0>)
   10fd2:	483e      	ldr	r0, [pc, #248]	; (110cc <hci_evt_encode+0x3c4>)
   10fd4:	f00b fa1a 	bl	1c40c <printk>
   10fd8:	4040      	eors	r0, r0
   10fda:	f380 8811 	msr	BASEPRI, r0
   10fde:	f04f 0003 	mov.w	r0, #3
   10fe2:	df02      	svc	2
}
   10fe4:	e6fc      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10fe6:	4b30      	ldr	r3, [pc, #192]	; (110a8 <hci_evt_encode+0x3a0>)
   10fe8:	6858      	ldr	r0, [r3, #4]
   10fea:	2100      	movs	r1, #0
   10fec:	460a      	mov	r2, r1
   10fee:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   10ff2:	4313      	orrs	r3, r2
   10ff4:	f43f aef4 	beq.w	10de0 <hci_evt_encode+0xd8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   10ff8:	4b2c      	ldr	r3, [pc, #176]	; (110ac <hci_evt_encode+0x3a4>)
   10ffa:	6818      	ldr	r0, [r3, #0]
   10ffc:	460b      	mov	r3, r1
   10ffe:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11002:	4313      	orrs	r3, r2
   11004:	f43f aeec 	beq.w	10de0 <hci_evt_encode+0xd8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   11008:	4630      	mov	r0, r6
   1100a:	220a      	movs	r2, #10
   1100c:	2107      	movs	r1, #7
   1100e:	f7fe ffd3 	bl	ffb8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11012:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   11014:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11016:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   11018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1101a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1101c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1101e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   11020:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11022:	8103      	strh	r3, [r0, #8]
   11024:	e6dc      	b.n	10de0 <hci_evt_encode+0xd8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   11026:	2205      	movs	r2, #5
   11028:	4630      	mov	r0, r6
   1102a:	210c      	movs	r1, #12
   1102c:	f7fe ffc4 	bl	ffb8 <meta_evt>
	sep->status = pu->status;
   11030:	f894 3020 	ldrb.w	r3, [r4, #32]
   11034:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11036:	f8a0 7001 	strh.w	r7, [r0, #1]
   1103a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1103e:	2a00      	cmp	r2, #0
   11040:	fa92 f3a2 	rbit	r3, r2
   11044:	fab3 f383 	clz	r3, r3
   11048:	bf08      	it	eq
   1104a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1104e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   11050:	70c3      	strb	r3, [r0, #3]
   11052:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   11056:	fa92 f3a2 	rbit	r3, r2
   1105a:	2a00      	cmp	r2, #0
   1105c:	fab3 f383 	clz	r3, r3
   11060:	bf08      	it	eq
   11062:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   11066:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   11068:	7103      	strb	r3, [r0, #4]
   1106a:	e6b9      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1106c:	4b0e      	ldr	r3, [pc, #56]	; (110a8 <hci_evt_encode+0x3a0>)
   1106e:	6819      	ldr	r1, [r3, #0]
   11070:	2000      	movs	r0, #0
   11072:	f001 0280 	and.w	r2, r1, #128	; 0x80
   11076:	4603      	mov	r3, r0
   11078:	4313      	orrs	r3, r2
   1107a:	f43f aeb1 	beq.w	10de0 <hci_evt_encode+0xd8>
   1107e:	4632      	mov	r2, r6
   11080:	4639      	mov	r1, r7
   11082:	f7ff f809 	bl	10098 <encrypt_change.part.0>
   11086:	e6ab      	b.n	10de0 <hci_evt_encode+0xd8>
		le_unknown_rsp(pdu_data, handle, buf);
   11088:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1108c:	290e      	cmp	r1, #14
   1108e:	f000 80bf 	beq.w	11210 <hci_evt_encode+0x508>
   11092:	4b07      	ldr	r3, [pc, #28]	; (110b0 <hci_evt_encode+0x3a8>)
   11094:	4a07      	ldr	r2, [pc, #28]	; (110b4 <hci_evt_encode+0x3ac>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   11096:	480e      	ldr	r0, [pc, #56]	; (110d0 <hci_evt_encode+0x3c8>)
   11098:	1ad2      	subs	r2, r2, r3
   1109a:	08d2      	lsrs	r2, r2, #3
   1109c:	0192      	lsls	r2, r2, #6
   1109e:	f042 0202 	orr.w	r2, r2, #2
   110a2:	f00c fb0e 	bl	1d6c2 <log_1>
   110a6:	e69b      	b.n	10de0 <hci_evt_encode+0xd8>
   110a8:	200059d8 	.word	0x200059d8
   110ac:	200059e0 	.word	0x200059e0
   110b0:	00021114 	.word	0x00021114
   110b4:	00021154 	.word	0x00021154
   110b8:	00021ec4 	.word	0x00021ec4
   110bc:	20000a00 	.word	0x20000a00
   110c0:	20000000 	.word	0x20000000
   110c4:	00021e88 	.word	0x00021e88
   110c8:	00021c84 	.word	0x00021c84
   110cc:	00021ce0 	.word	0x00021ce0
   110d0:	00021ef0 	.word	0x00021ef0
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   110d4:	460b      	mov	r3, r1
   110d6:	463a      	mov	r2, r7
   110d8:	f100 0120 	add.w	r1, r0, #32
   110dc:	2000      	movs	r0, #0
   110de:	f7fe ffa5 	bl	1002c <le_remote_feat_complete>
		break;
   110e2:	e67d      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   110e4:	4b5a      	ldr	r3, [pc, #360]	; (11250 <hci_evt_encode+0x548>)
   110e6:	6858      	ldr	r0, [r3, #4]
   110e8:	2100      	movs	r1, #0
   110ea:	460a      	mov	r2, r1
   110ec:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   110f0:	4313      	orrs	r3, r2
   110f2:	f43f ae75 	beq.w	10de0 <hci_evt_encode+0xd8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   110f6:	4b57      	ldr	r3, [pc, #348]	; (11254 <hci_evt_encode+0x54c>)
   110f8:	6818      	ldr	r0, [r3, #0]
   110fa:	460b      	mov	r3, r1
   110fc:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11100:	4313      	orrs	r3, r2
   11102:	f43f ae6d 	beq.w	10de0 <hci_evt_encode+0xd8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   11106:	4630      	mov	r0, r6
   11108:	220c      	movs	r2, #12
   1110a:	2105      	movs	r1, #5
   1110c:	f7fe ff54 	bl	ffb8 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   11110:	f104 0124 	add.w	r1, r4, #36	; 0x24
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   11114:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   11116:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   11118:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1111c:	f00d f9e4 	bl	1e4e8 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   11120:	f105 000a 	add.w	r0, r5, #10
   11124:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   11128:	2202      	movs	r2, #2
   1112a:	f00d f9dd 	bl	1e4e8 <memcpy>
   1112e:	e657      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   11130:	4b47      	ldr	r3, [pc, #284]	; (11250 <hci_evt_encode+0x548>)
   11132:	6819      	ldr	r1, [r3, #0]
   11134:	2300      	movs	r3, #0
   11136:	f001 0280 	and.w	r2, r1, #128	; 0x80
   1113a:	4313      	orrs	r3, r2
   1113c:	f43f ae50 	beq.w	10de0 <hci_evt_encode+0xd8>
   11140:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   11144:	4632      	mov	r2, r6
   11146:	4639      	mov	r1, r7
   11148:	f7fe ffa6 	bl	10098 <encrypt_change.part.0>
   1114c:	e648      	b.n	10de0 <hci_evt_encode+0xd8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1114e:	4b40      	ldr	r3, [pc, #256]	; (11250 <hci_evt_encode+0x548>)
   11150:	6858      	ldr	r0, [r3, #4]
   11152:	2100      	movs	r1, #0
   11154:	460a      	mov	r2, r1
   11156:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1115a:	4313      	orrs	r3, r2
   1115c:	d01f      	beq.n	1119e <hci_evt_encode+0x496>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1115e:	4b3d      	ldr	r3, [pc, #244]	; (11254 <hci_evt_encode+0x54c>)
   11160:	6818      	ldr	r0, [r3, #0]
   11162:	460b      	mov	r3, r1
   11164:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11168:	4313      	orrs	r3, r2
   1116a:	d018      	beq.n	1119e <hci_evt_encode+0x496>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1116c:	4630      	mov	r0, r6
   1116e:	220a      	movs	r2, #10
   11170:	2106      	movs	r1, #6
   11172:	f7fe ff21 	bl	ffb8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11176:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   11178:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1117a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1117c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1117e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   11180:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11182:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   11184:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   11186:	8103      	strh	r3, [r0, #8]
   11188:	e62a      	b.n	10de0 <hci_evt_encode+0xd8>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   1118a:	f100 0329 	add.w	r3, r0, #41	; 0x29
   1118e:	f100 0123 	add.w	r1, r0, #35	; 0x23
   11192:	22ff      	movs	r2, #255	; 0xff
   11194:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   11198:	f005 fdb2 	bl	16d00 <ll_rl_crpa_set>
   1119c:	e628      	b.n	10df0 <hci_evt_encode+0xe8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1119e:	2300      	movs	r3, #0
   111a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   111a4:	4638      	mov	r0, r7
   111a6:	9300      	str	r3, [sp, #0]
   111a8:	221a      	movs	r2, #26
   111aa:	2102      	movs	r1, #2
   111ac:	f002 fbb6 	bl	1391c <ll_conn_update>
		return;
   111b0:	e616      	b.n	10de0 <hci_evt_encode+0xd8>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   111b2:	ea50 0301 	orrs.w	r3, r0, r1
   111b6:	d032      	beq.n	1121e <hci_evt_encode+0x516>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   111b8:	221e      	movs	r2, #30
   111ba:	210a      	movs	r1, #10
   111bc:	4630      	mov	r0, r6
   111be:	f7fe fefb 	bl	ffb8 <meta_evt>
   111c2:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   111c4:	4641      	mov	r1, r8
   111c6:	221e      	movs	r2, #30
   111c8:	f00d f9b9 	bl	1e53e <memset>
			leecc->status = status;
   111cc:	7025      	strb	r5, [r4, #0]
			return;
   111ce:	e607      	b.n	10de0 <hci_evt_encode+0xd8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   111d0:	2212      	movs	r2, #18
   111d2:	2101      	movs	r1, #1
   111d4:	f7fe fef0 	bl	ffb8 <meta_evt>
	lecc->status = 0x00;
   111d8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   111da:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   111de:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   111e2:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   111e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   111e8:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   111ea:	4606      	mov	r6, r0
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   111ec:	4641      	mov	r1, r8
   111ee:	2206      	movs	r2, #6
   111f0:	3005      	adds	r0, #5
   111f2:	f00d f979 	bl	1e4e8 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   111f6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   111f8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   111fa:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   111fc:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   11200:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   11204:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   11208:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1120c:	7473      	strb	r3, [r6, #17]
   1120e:	e5e7      	b.n	10de0 <hci_evt_encode+0xd8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11210:	4633      	mov	r3, r6
   11212:	463a      	mov	r2, r7
   11214:	2100      	movs	r1, #0
   11216:	201a      	movs	r0, #26
   11218:	f7fe ff08 	bl	1002c <le_remote_feat_complete>
		break;
   1121c:	e5e0      	b.n	10de0 <hci_evt_encode+0xd8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1121e:	2212      	movs	r2, #18
   11220:	2101      	movs	r1, #1
   11222:	4630      	mov	r0, r6
   11224:	f7fe fec8 	bl	ffb8 <meta_evt>
   11228:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1122a:	4641      	mov	r1, r8
   1122c:	2212      	movs	r2, #18
   1122e:	f00d f986 	bl	1e53e <memset>
		lecc->status = status;
   11232:	7025      	strb	r5, [r4, #0]
		return;
   11234:	e5d4      	b.n	10de0 <hci_evt_encode+0xd8>
   11236:	f106 000b 	add.w	r0, r6, #11
   1123a:	e61e      	b.n	10e7a <hci_evt_encode+0x172>
			memcpy(&leecc->local_rpa.val[0], &node_rx->own_addr[0],
   1123c:	2206      	movs	r2, #6
   1123e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   11242:	f00d f951 	bl	1e4e8 <memcpy>
   11246:	e61c      	b.n	10e82 <hci_evt_encode+0x17a>
		LL_ASSERT(0);
   11248:	f640 43a9 	movw	r3, #3241	; 0xca9
   1124c:	e6bf      	b.n	10fce <hci_evt_encode+0x2c6>
   1124e:	bf00      	nop
   11250:	200059d8 	.word	0x200059d8
   11254:	200059e0 	.word	0x200059e0

00011258 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
   11258:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1125a:	f100 0408 	add.w	r4, r0, #8
{
   1125e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11260:	4620      	mov	r0, r4
   11262:	2102      	movs	r1, #2
{
   11264:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   11266:	f00e ff6c 	bl	20142 <net_buf_simple_add>
   1126a:	4603      	mov	r3, r0
	hdr->evt = evt;
   1126c:	2213      	movs	r2, #19
	hdr->len = len;
   1126e:	2105      	movs	r1, #5
	hdr->evt = evt;
   11270:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11272:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   11274:	4620      	mov	r0, r4
   11276:	f00e ff64 	bl	20142 <net_buf_simple_add>
	ep->num_handles = num_handles;
   1127a:	2301      	movs	r3, #1
   1127c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1127e:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   11282:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   11286:	bd70      	pop	{r4, r5, r6, pc}

00011288 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11288:	7903      	ldrb	r3, [r0, #4]
   1128a:	2b02      	cmp	r3, #2
   1128c:	d009      	beq.n	112a2 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1128e:	2b08      	cmp	r3, #8
   11290:	d005      	beq.n	1129e <hci_get_class+0x16>
   11292:	3b09      	subs	r3, #9
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EXT */

		default:
			return HCI_CLASS_NONE;
   11294:	2b05      	cmp	r3, #5
   11296:	bf94      	ite	ls
   11298:	2003      	movls	r0, #3
   1129a:	2000      	movhi	r0, #0
   1129c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1129e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   112a0:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   112a2:	f890 3020 	ldrb.w	r3, [r0, #32]
   112a6:	f003 0303 	and.w	r3, r3, #3
   112aa:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   112ac:	bf0c      	ite	eq
   112ae:	2004      	moveq	r0, #4
   112b0:	2005      	movne	r0, #5
   112b2:	4770      	bx	lr

000112b4 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   112b4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   112b6:	4909      	ldr	r1, [pc, #36]	; (112dc <hci_init+0x28>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   112b8:	4a09      	ldr	r2, [pc, #36]	; (112e0 <hci_init+0x2c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   112ba:	4b0a      	ldr	r3, [pc, #40]	; (112e4 <hci_init+0x30>)
	event_mask = DEFAULT_EVENT_MASK;
   112bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   112c0:	f641 75ff 	movw	r5, #8191	; 0x1fff
   112c4:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   112c8:	201f      	movs	r0, #31
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   112ca:	2400      	movs	r4, #0
   112cc:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   112ce:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   112d0:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   112d4:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   112d8:	bc30      	pop	{r4, r5}
   112da:	4770      	bx	lr
   112dc:	200059d8 	.word	0x200059d8
   112e0:	20000000 	.word	0x20000000
   112e4:	200059e0 	.word	0x200059e0

000112e8 <bt_rand>:

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
	return util_rand(buf, len);
   112e8:	f7fd bd84 	b.w	edf4 <util_rand>

000112ec <bt_encrypt_le>:
}

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   112ec:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   112ee:	2300      	movs	r3, #0
   112f0:	f007 fd8c 	bl	18e0c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   112f4:	2000      	movs	r0, #0
   112f6:	bd08      	pop	{r3, pc}

000112f8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   112f8:	b510      	push	{r4, lr}
   112fa:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   112fc:	f006 f9f4 	bl	176e8 <lll_reset>
	LL_ASSERT(!err);
   11300:	b950      	cbnz	r0, 11318 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   11302:	f006 ff79 	bl	181f8 <lll_adv_reset>
	LL_ASSERT(!err);
   11306:	b9c0      	cbnz	r0, 1133a <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   11308:	f007 f8a0 	bl	1844c <lll_conn_reset>
	LL_ASSERT(!err);
   1130c:	bb30      	cbnz	r0, 1135c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1130e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   11310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11314:	f00a ba4c 	b.w	1b7b0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   11318:	4a19      	ldr	r2, [pc, #100]	; (11380 <perform_lll_reset+0x88>)
   1131a:	491a      	ldr	r1, [pc, #104]	; (11384 <perform_lll_reset+0x8c>)
   1131c:	481a      	ldr	r0, [pc, #104]	; (11388 <perform_lll_reset+0x90>)
   1131e:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
   11322:	f00b f873 	bl	1c40c <printk>
   11326:	4040      	eors	r0, r0
   11328:	f380 8811 	msr	BASEPRI, r0
   1132c:	f04f 0003 	mov.w	r0, #3
   11330:	df02      	svc	2
	err = lll_adv_reset();
   11332:	f006 ff61 	bl	181f8 <lll_adv_reset>
	LL_ASSERT(!err);
   11336:	2800      	cmp	r0, #0
   11338:	d0e6      	beq.n	11308 <perform_lll_reset+0x10>
   1133a:	4a11      	ldr	r2, [pc, #68]	; (11380 <perform_lll_reset+0x88>)
   1133c:	4911      	ldr	r1, [pc, #68]	; (11384 <perform_lll_reset+0x8c>)
   1133e:	4812      	ldr	r0, [pc, #72]	; (11388 <perform_lll_reset+0x90>)
   11340:	f240 43cd 	movw	r3, #1229	; 0x4cd
   11344:	f00b f862 	bl	1c40c <printk>
   11348:	4040      	eors	r0, r0
   1134a:	f380 8811 	msr	BASEPRI, r0
   1134e:	f04f 0003 	mov.w	r0, #3
   11352:	df02      	svc	2
	err = lll_conn_reset();
   11354:	f007 f87a 	bl	1844c <lll_conn_reset>
	LL_ASSERT(!err);
   11358:	2800      	cmp	r0, #0
   1135a:	d0d8      	beq.n	1130e <perform_lll_reset+0x16>
   1135c:	4a08      	ldr	r2, [pc, #32]	; (11380 <perform_lll_reset+0x88>)
   1135e:	4909      	ldr	r1, [pc, #36]	; (11384 <perform_lll_reset+0x8c>)
   11360:	4809      	ldr	r0, [pc, #36]	; (11388 <perform_lll_reset+0x90>)
   11362:	f240 43d9 	movw	r3, #1241	; 0x4d9
   11366:	f00b f851 	bl	1c40c <printk>
   1136a:	4040      	eors	r0, r0
   1136c:	f380 8811 	msr	BASEPRI, r0
   11370:	f04f 0003 	mov.w	r0, #3
   11374:	df02      	svc	2
   11376:	4620      	mov	r0, r4
}
   11378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1137c:	f00a ba18 	b.w	1b7b0 <z_impl_k_sem_give>
   11380:	00021f1c 	.word	0x00021f1c
   11384:	00021f58 	.word	0x00021f58
   11388:	00021ce0 	.word	0x00021ce0

0001138c <disabled_cb>:
   1138c:	f00a ba10 	b.w	1b7b0 <z_impl_k_sem_give>

00011390 <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   11390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11394:	4f2f      	ldr	r7, [pc, #188]	; (11454 <tx_cmplt_get+0xc4>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
   11396:	780b      	ldrb	r3, [r1, #0]
   11398:	783c      	ldrb	r4, [r7, #0]
{
   1139a:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1139c:	7879      	ldrb	r1, [r7, #1]
   1139e:	4299      	cmp	r1, r3
   113a0:	bf9c      	itt	ls
   113a2:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   113a4:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   113a6:	429a      	cmp	r2, r3
{
   113a8:	4683      	mov	fp, r0
   113aa:	4692      	mov	sl, r2
   113ac:	d045      	beq.n	1143a <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   113ae:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   113b0:	4e29      	ldr	r6, [pc, #164]	; (11458 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   113b2:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   113b4:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   113b8:	4291      	cmp	r1, r2
   113ba:	bf08      	it	eq
   113bc:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   113be:	18f1      	adds	r1, r6, r3

	*idx = i;
   113c0:	702a      	strb	r2, [r5, #0]
   113c2:	d03a      	beq.n	1143a <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   113c4:	5af3      	ldrh	r3, [r6, r3]
   113c6:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   113c8:	f04f 0800 	mov.w	r8, #0
   113cc:	f04f 0901 	mov.w	r9, #1
   113d0:	e022      	b.n	11418 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   113d2:	b37b      	cbz	r3, 11434 <tx_cmplt_get+0xa4>
		    (((u32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   113d4:	7903      	ldrb	r3, [r0, #4]
   113d6:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
   113da:	3b01      	subs	r3, #1
   113dc:	2b01      	cmp	r3, #1
   113de:	d931      	bls.n	11444 <tx_cmplt_get+0xb4>
   113e0:	2302      	movs	r3, #2
   113e2:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((u32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   113e4:	f002 fa26 	bl	13834 <ll_tx_mem_release>
	if (*idx >= count) {
   113e8:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   113ea:	7879      	ldrb	r1, [r7, #1]
   113ec:	7838      	ldrb	r0, [r7, #0]
   113ee:	4299      	cmp	r1, r3
   113f0:	bf9c      	itt	ls
   113f2:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   113f4:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   113f6:	459a      	cmp	sl, r3
   113f8:	d021      	beq.n	1143e <tx_cmplt_get+0xae>
	i = *idx + 1;
   113fa:	1c5c      	adds	r4, r3, #1
   113fc:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   113fe:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   11402:	42a1      	cmp	r1, r4
   11404:	bf08      	it	eq
   11406:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   11408:	18f1      	adds	r1, r6, r3
	*idx = i;
   1140a:	702c      	strb	r4, [r5, #0]
   1140c:	d017      	beq.n	1143e <tx_cmplt_get+0xae>
   1140e:	5af0      	ldrh	r0, [r6, r3]
   11410:	f8bb 3000 	ldrh.w	r3, [fp]
   11414:	4298      	cmp	r0, r3
   11416:	d112      	bne.n	1143e <tx_cmplt_get+0xae>
		node_tx = tx->node;
   11418:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1141a:	2801      	cmp	r0, #1
   1141c:	f020 0303 	bic.w	r3, r0, #3
   11420:	d8d7      	bhi.n	113d2 <tx_cmplt_get+0x42>
			cmplt++;
   11422:	f108 0801 	add.w	r8, r8, #1
   11426:	fa5f f888 	uxtb.w	r8, r8
   1142a:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((u32_t)node_tx & ~3)) {
   1142e:	2b00      	cmp	r3, #0
   11430:	d0da      	beq.n	113e8 <tx_cmplt_get+0x58>
   11432:	e7d7      	b.n	113e4 <tx_cmplt_get+0x54>
   11434:	2302      	movs	r3, #2
   11436:	604b      	str	r3, [r1, #4]
   11438:	e7d6      	b.n	113e8 <tx_cmplt_get+0x58>
		return 0;
   1143a:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   1143e:	4640      	mov	r0, r8
   11440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   11444:	f108 0801 	add.w	r8, r8, #1
   11448:	fa5f f888 	uxtb.w	r8, r8
   1144c:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((u32_t)node_tx & ~3)) {
   11450:	e7c8      	b.n	113e4 <tx_cmplt_get+0x54>
   11452:	bf00      	nop
   11454:	20005d1c 	.word	0x20005d1c
   11458:	20005d20 	.word	0x20005d20

0001145c <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   1145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11460:	4ca7      	ldr	r4, [pc, #668]	; (11700 <rx_demux+0x2a4>)
	k_sem_give(sem_recv);
   11462:	4ea8      	ldr	r6, [pc, #672]	; (11704 <rx_demux+0x2a8>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			u32_t ret;

			mfy.param = next;
   11464:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 11728 <rx_demux+0x2cc>
{
   11468:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1146a:	e9d4 0100 	ldrd	r0, r1, [r4]
   1146e:	aa03      	add	r2, sp, #12
   11470:	f7fd fb46 	bl	eb00 <memq_peek>
		if (link) {
   11474:	4607      	mov	r7, r0
   11476:	2800      	cmp	r0, #0
   11478:	d040      	beq.n	114fc <rx_demux+0xa0>
			LL_ASSERT(rx);
   1147a:	9b03      	ldr	r3, [sp, #12]
   1147c:	2b00      	cmp	r3, #0
   1147e:	f000 812f 	beq.w	116e0 <rx_demux+0x284>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   11482:	7818      	ldrb	r0, [r3, #0]
   11484:	aa04      	add	r2, sp, #16
   11486:	a902      	add	r1, sp, #8
   11488:	f004 fcc6 	bl	15e18 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1148c:	4605      	mov	r5, r0
   1148e:	2800      	cmp	r0, #0
   11490:	d06a      	beq.n	11568 <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   11492:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   11496:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1149a:	f891 9000 	ldrb.w	r9, [r1]
   1149e:	9205      	str	r2, [sp, #20]
   114a0:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(u8_t ack_last, u16_t handle,
   114a4:	f10d 0814 	add.w	r8, sp, #20
   114a8:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   114ac:	f004 fcca 	bl	15e44 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   114b0:	4629      	mov	r1, r5
   114b2:	9a05      	ldr	r2, [sp, #20]
   114b4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   114b8:	f004 fd0c 	bl	15ed4 <ull_conn_tx_ack>
   114bc:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   114be:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   114c0:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   114c2:	f004 fc83 	bl	15dcc <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   114c6:	2001      	movs	r0, #1
   114c8:	f004 f94a 	bl	15760 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   114cc:	2101      	movs	r1, #1
   114ce:	4628      	mov	r0, r5
		if (conn) {
   114d0:	b10d      	cbz	r5, 114d6 <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   114d2:	f004 fb85 	bl	15be0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   114d6:	4642      	mov	r2, r8
   114d8:	4639      	mov	r1, r7
   114da:	4648      	mov	r0, r9
   114dc:	f004 fc9c 	bl	15e18 <ull_conn_ack_by_last_peek>
	} while (link);
   114e0:	4605      	mov	r5, r0
   114e2:	2800      	cmp	r0, #0
   114e4:	d1e2      	bne.n	114ac <rx_demux+0x50>
	k_sem_give(sem_recv);
   114e6:	6830      	ldr	r0, [r6, #0]
   114e8:	f00a f962 	bl	1b7b0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   114ec:	e9d4 0100 	ldrd	r0, r1, [r4]
   114f0:	aa03      	add	r2, sp, #12
   114f2:	f7fd fb05 	bl	eb00 <memq_peek>
		if (link) {
   114f6:	4607      	mov	r7, r0
   114f8:	2800      	cmp	r0, #0
   114fa:	d1be      	bne.n	1147a <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   114fc:	aa04      	add	r2, sp, #16
   114fe:	a902      	add	r1, sp, #8
   11500:	f10d 0007 	add.w	r0, sp, #7
   11504:	f004 fc6e 	bl	15de4 <ull_conn_ack_peek>
			if (link) {
   11508:	4605      	mov	r5, r0
   1150a:	2800      	cmp	r0, #0
   1150c:	d069      	beq.n	115e2 <rx_demux+0x186>
				rx_demux_conn_tx_ack(ack_last, handle,
   1150e:	9a04      	ldr	r2, [sp, #16]
   11510:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   11514:	f89d 9007 	ldrb.w	r9, [sp, #7]
   11518:	9205      	str	r2, [sp, #20]
   1151a:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(u8_t ack_last, u16_t handle,
   1151e:	f10d 0814 	add.w	r8, sp, #20
   11522:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   11526:	f004 fc8d 	bl	15e44 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1152a:	4629      	mov	r1, r5
   1152c:	9a05      	ldr	r2, [sp, #20]
   1152e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   11532:	f004 fccf 	bl	15ed4 <ull_conn_tx_ack>
   11536:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   11538:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1153a:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   1153c:	f004 fc46 	bl	15dcc <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   11540:	2001      	movs	r0, #1
   11542:	f004 f90d 	bl	15760 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   11546:	2101      	movs	r1, #1
   11548:	4628      	mov	r0, r5
		if (conn) {
   1154a:	b10d      	cbz	r5, 11550 <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   1154c:	f004 fb48 	bl	15be0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   11550:	4642      	mov	r2, r8
   11552:	4639      	mov	r1, r7
   11554:	4648      	mov	r0, r9
   11556:	f004 fc5f 	bl	15e18 <ull_conn_ack_by_last_peek>
	} while (link);
   1155a:	4605      	mov	r5, r0
   1155c:	2800      	cmp	r0, #0
   1155e:	d1e2      	bne.n	11526 <rx_demux+0xca>
	k_sem_give(sem_recv);
   11560:	6830      	ldr	r0, [r6, #0]
   11562:	f00a f925 	bl	1b7b0 <z_impl_k_sem_give>
			if (nack) {
   11566:	e7c1      	b.n	114ec <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   11568:	9b03      	ldr	r3, [sp, #12]
   1156a:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1156c:	791b      	ldrb	r3, [r3, #4]
   1156e:	3b01      	subs	r3, #1
   11570:	2b08      	cmp	r3, #8
   11572:	d806      	bhi.n	11582 <rx_demux+0x126>
   11574:	e8df f003 	tbb	[pc, r3]
   11578:	05052e38 	.word	0x05052e38
   1157c:	24050505 	.word	0x24050505
   11580:	13          	.byte	0x13
   11581:	00          	.byte	0x00
		LL_ASSERT(0);
   11582:	4a61      	ldr	r2, [pc, #388]	; (11708 <rx_demux+0x2ac>)
   11584:	4961      	ldr	r1, [pc, #388]	; (1170c <rx_demux+0x2b0>)
   11586:	4862      	ldr	r0, [pc, #392]	; (11710 <rx_demux+0x2b4>)
   11588:	f240 635b 	movw	r3, #1627	; 0x65b
   1158c:	f00a ff3e 	bl	1c40c <printk>
   11590:	4040      	eors	r0, r0
   11592:	f380 8811 	msr	BASEPRI, r0
   11596:	f04f 0003 	mov.w	r0, #3
   1159a:	df02      	svc	2
			if (nack) {
   1159c:	e765      	b.n	1146a <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1159e:	4958      	ldr	r1, [pc, #352]	; (11700 <rx_demux+0x2a4>)
   115a0:	6860      	ldr	r0, [r4, #4]
   115a2:	2200      	movs	r2, #0
   115a4:	f7fd fab4 	bl	eb10 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115a8:	4b5a      	ldr	r3, [pc, #360]	; (11714 <rx_demux+0x2b8>)
		ll_rx_put(link, rx);
   115aa:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115ac:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115ae:	4a5a      	ldr	r2, [pc, #360]	; (11718 <rx_demux+0x2bc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115b0:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115b2:	4638      	mov	r0, r7
   115b4:	f7fd fa9c 	bl	eaf0 <memq_enqueue>
	k_sem_give(sem_recv);
   115b8:	6830      	ldr	r0, [r6, #0]
   115ba:	f00a f8f9 	bl	1b7b0 <z_impl_k_sem_give>
			if (nack) {
   115be:	e795      	b.n	114ec <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   115c0:	494f      	ldr	r1, [pc, #316]	; (11700 <rx_demux+0x2a4>)
   115c2:	6860      	ldr	r0, [r4, #4]
   115c4:	2200      	movs	r2, #0
   115c6:	f7fd faa3 	bl	eb10 <memq_dequeue>
		ull_conn_setup(link, rx);
   115ca:	9905      	ldr	r1, [sp, #20]
   115cc:	4638      	mov	r0, r7
   115ce:	f002 fc45 	bl	13e5c <ull_conn_setup>
			if (nack) {
   115d2:	e74a      	b.n	1146a <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   115d4:	a905      	add	r1, sp, #20
   115d6:	4638      	mov	r0, r7
   115d8:	f002 fc62 	bl	13ea0 <ull_conn_rx>
		if (nack) {
   115dc:	2800      	cmp	r0, #0
   115de:	f000 80c8 	beq.w	11772 <rx_demux+0x316>
}
   115e2:	b007      	add	sp, #28
   115e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   115e8:	4945      	ldr	r1, [pc, #276]	; (11700 <rx_demux+0x2a4>)
   115ea:	6860      	ldr	r0, [r4, #4]
   115ec:	2200      	movs	r2, #0
   115ee:	f7fd fa8f 	bl	eb10 <memq_dequeue>
		rx_demux_event_done(link, rx);
   115f2:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   115f4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	ull_hdr = done->param;
   115f8:	f8d5 a020 	ldr.w	sl, [r5, #32]
	switch (done->extra.type) {
   115fc:	b17b      	cbz	r3, 1161e <rx_demux+0x1c2>
   115fe:	2b01      	cmp	r3, #1
   11600:	f000 80b3 	beq.w	1176a <rx_demux+0x30e>
		LL_ASSERT(0);
   11604:	4a40      	ldr	r2, [pc, #256]	; (11708 <rx_demux+0x2ac>)
   11606:	4941      	ldr	r1, [pc, #260]	; (1170c <rx_demux+0x2b0>)
   11608:	4841      	ldr	r0, [pc, #260]	; (11710 <rx_demux+0x2b4>)
   1160a:	f240 6383 	movw	r3, #1667	; 0x683
   1160e:	f00a fefd 	bl	1c40c <printk>
   11612:	4040      	eors	r0, r0
   11614:	f380 8811 	msr	BASEPRI, r0
   11618:	f04f 0003 	mov.w	r0, #3
   1161c:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1161e:	4a3f      	ldr	r2, [pc, #252]	; (1171c <rx_demux+0x2c0>)
   11620:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   11622:	f892 c001 	ldrb.w	ip, [r2, #1]
   11626:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   11628:	1c4b      	adds	r3, r1, #1
   1162a:	b2db      	uxtb	r3, r3
		last = 0U;
   1162c:	459c      	cmp	ip, r3
   1162e:	bf08      	it	eq
   11630:	2300      	moveq	r3, #0
	if (last == first) {
   11632:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   11634:	f04f 0c00 	mov.w	ip, #0
   11638:	f885 c024 	strb.w	ip, [r5, #36]	; 0x24
   1163c:	f000 80ad 	beq.w	1179a <rx_demux+0x33e>
	done->hdr.link = link;
   11640:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11642:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11644:	fb00 2101 	mla	r1, r0, r1, r2
   11648:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1164a:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   1164c:	4d34      	ldr	r5, [pc, #208]	; (11720 <rx_demux+0x2c4>)
   1164e:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   11650:	78ea      	ldrb	r2, [r5, #3]
   11652:	f895 c000 	ldrb.w	ip, [r5]
   11656:	429a      	cmp	r2, r3
   11658:	d02a      	beq.n	116b0 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   1165a:	f105 0904 	add.w	r9, r5, #4
   1165e:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
   11662:	f1bc 0f00 	cmp.w	ip, #0
   11666:	d023      	beq.n	116b0 <rx_demux+0x254>
		u8_t is_aborted = next->is_aborted;
   11668:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   1166c:	079a      	lsls	r2, r3, #30
		u8_t is_aborted = next->is_aborted;
   1166e:	f3c3 0740 	ubfx	r7, r3, #1, #1
		u8_t is_resume = next->is_resume;
   11672:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   11676:	d559      	bpl.n	1172c <rx_demux+0x2d0>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   11678:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
   1167a:	78ab      	ldrb	r3, [r5, #2]
   1167c:	f895 c000 	ldrb.w	ip, [r5]
   11680:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   11682:	429a      	cmp	r2, r3
   11684:	d014      	beq.n	116b0 <rx_demux+0x254>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   11686:	3301      	adds	r3, #1
   11688:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1168a:	4299      	cmp	r1, r3
   1168c:	d066      	beq.n	1175c <rx_demux+0x300>
	if (first == last) {
   1168e:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   11690:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   11692:	d00d      	beq.n	116b0 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   11694:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   11698:	f1bc 0f00 	cmp.w	ip, #0
   1169c:	d008      	beq.n	116b0 <rx_demux+0x254>
   1169e:	2f00      	cmp	r7, #0
   116a0:	d1e2      	bne.n	11668 <rx_demux+0x20c>
   116a2:	f1b8 0f00 	cmp.w	r8, #0
   116a6:	d003      	beq.n	116b0 <rx_demux+0x254>
   116a8:	f89c 3020 	ldrb.w	r3, [ip, #32]
   116ac:	07db      	lsls	r3, r3, #31
   116ae:	d5db      	bpl.n	11668 <rx_demux+0x20c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   116b0:	f1ba 0f00 	cmp.w	sl, #0
   116b4:	f43f aed9 	beq.w	1146a <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   116b8:	f89a 3000 	ldrb.w	r3, [sl]
   116bc:	2b00      	cmp	r3, #0
   116be:	d07a      	beq.n	117b6 <rx_demux+0x35a>
	return hdr->ref--;
   116c0:	3b01      	subs	r3, #1
   116c2:	b2db      	uxtb	r3, r3
   116c4:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   116c8:	2b00      	cmp	r3, #0
   116ca:	f47f aece 	bne.w	1146a <rx_demux+0xe>
   116ce:	f8da 3004 	ldr.w	r3, [sl, #4]
   116d2:	2b00      	cmp	r3, #0
   116d4:	f43f aec9 	beq.w	1146a <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   116d8:	f8da 0008 	ldr.w	r0, [sl, #8]
   116dc:	4798      	blx	r3
			if (nack) {
   116de:	e6c4      	b.n	1146a <rx_demux+0xe>
			LL_ASSERT(rx);
   116e0:	4a09      	ldr	r2, [pc, #36]	; (11708 <rx_demux+0x2ac>)
   116e2:	4910      	ldr	r1, [pc, #64]	; (11724 <rx_demux+0x2c8>)
   116e4:	480a      	ldr	r0, [pc, #40]	; (11710 <rx_demux+0x2b4>)
   116e6:	f240 53ca 	movw	r3, #1482	; 0x5ca
   116ea:	f00a fe8f 	bl	1c40c <printk>
   116ee:	4040      	eors	r0, r0
   116f0:	f380 8811 	msr	BASEPRI, r0
   116f4:	f04f 0003 	mov.w	r0, #3
   116f8:	df02      	svc	2
   116fa:	9b03      	ldr	r3, [sp, #12]
   116fc:	e6c1      	b.n	11482 <rx_demux+0x26>
   116fe:	bf00      	nop
   11700:	20000dc0 	.word	0x20000dc0
   11704:	20000dc8 	.word	0x20000dc8
   11708:	00021f1c 	.word	0x00021f1c
   1170c:	00021c84 	.word	0x00021c84
   11710:	00021ce0 	.word	0x00021ce0
   11714:	20005d1c 	.word	0x20005d1c
   11718:	20000dbc 	.word	0x20000dbc
   1171c:	20005bb8 	.word	0x20005bb8
   11720:	20005bf8 	.word	0x20005bf8
   11724:	00021f60 	.word	0x00021f60
   11728:	20005d80 	.word	0x20005d80
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1172c:	465b      	mov	r3, fp
   1172e:	463a      	mov	r2, r7
   11730:	4639      	mov	r1, r7
   11732:	2001      	movs	r0, #1
			mfy.param = next;
   11734:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11738:	f7fd fa4e 	bl	ebd8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1173c:	2800      	cmp	r0, #0
   1173e:	d09b      	beq.n	11678 <rx_demux+0x21c>
   11740:	4a28      	ldr	r2, [pc, #160]	; (117e4 <rx_demux+0x388>)
   11742:	4929      	ldr	r1, [pc, #164]	; (117e8 <rx_demux+0x38c>)
   11744:	4829      	ldr	r0, [pc, #164]	; (117ec <rx_demux+0x390>)
   11746:	f240 639b 	movw	r3, #1691	; 0x69b
   1174a:	f00a fe5f 	bl	1c40c <printk>
   1174e:	4040      	eors	r0, r0
   11750:	f380 8811 	msr	BASEPRI, r0
   11754:	f04f 0003 	mov.w	r0, #3
   11758:	df02      	svc	2
   1175a:	e78d      	b.n	11678 <rx_demux+0x21c>
	*first = _first; /* Write back read-index */
   1175c:	2300      	movs	r3, #0
   1175e:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   11760:	2a00      	cmp	r2, #0
   11762:	d0a5      	beq.n	116b0 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   11764:	f8df c09c 	ldr.w	ip, [pc, #156]	; 11804 <rx_demux+0x3a8>
   11768:	e799      	b.n	1169e <rx_demux+0x242>
		ull_conn_done(done);
   1176a:	4628      	mov	r0, r5
   1176c:	f004 f8c6 	bl	158fc <ull_conn_done>
		break;
   11770:	e755      	b.n	1161e <rx_demux+0x1c2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11772:	491f      	ldr	r1, [pc, #124]	; (117f0 <rx_demux+0x394>)
   11774:	4602      	mov	r2, r0
   11776:	6860      	ldr	r0, [r4, #4]
   11778:	f7fd f9ca 	bl	eb10 <memq_dequeue>
		if (rx) {
   1177c:	9905      	ldr	r1, [sp, #20]
   1177e:	2900      	cmp	r1, #0
   11780:	f43f ae73 	beq.w	1146a <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11784:	4b1b      	ldr	r3, [pc, #108]	; (117f4 <rx_demux+0x398>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11786:	4a1c      	ldr	r2, [pc, #112]	; (117f8 <rx_demux+0x39c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11788:	78db      	ldrb	r3, [r3, #3]
   1178a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1178c:	4638      	mov	r0, r7
   1178e:	f7fd f9af 	bl	eaf0 <memq_enqueue>
	k_sem_give(sem_recv);
   11792:	6830      	ldr	r0, [r6, #0]
   11794:	f00a f80c 	bl	1b7b0 <z_impl_k_sem_give>
			if (nack) {
   11798:	e667      	b.n	1146a <rx_demux+0xe>
	LL_ASSERT(release == done);
   1179a:	4a12      	ldr	r2, [pc, #72]	; (117e4 <rx_demux+0x388>)
   1179c:	4917      	ldr	r1, [pc, #92]	; (117fc <rx_demux+0x3a0>)
   1179e:	4813      	ldr	r0, [pc, #76]	; (117ec <rx_demux+0x390>)
   117a0:	f240 638a 	movw	r3, #1674	; 0x68a
   117a4:	f00a fe32 	bl	1c40c <printk>
   117a8:	4040      	eors	r0, r0
   117aa:	f380 8811 	msr	BASEPRI, r0
   117ae:	f04f 0003 	mov.w	r0, #3
   117b2:	df02      	svc	2
   117b4:	e74a      	b.n	1164c <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
   117b6:	4a0b      	ldr	r2, [pc, #44]	; (117e4 <rx_demux+0x388>)
   117b8:	4911      	ldr	r1, [pc, #68]	; (11800 <rx_demux+0x3a4>)
   117ba:	480c      	ldr	r0, [pc, #48]	; (117ec <rx_demux+0x390>)
   117bc:	f240 63ad 	movw	r3, #1709	; 0x6ad
   117c0:	f00a fe24 	bl	1c40c <printk>
   117c4:	4040      	eors	r0, r0
   117c6:	f380 8811 	msr	BASEPRI, r0
   117ca:	f04f 0003 	mov.w	r0, #3
   117ce:	df02      	svc	2
   117d0:	f89a 3000 	ldrb.w	r3, [sl]
   117d4:	3b01      	subs	r3, #1
   117d6:	b2db      	uxtb	r3, r3
   117d8:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   117dc:	2b00      	cmp	r3, #0
   117de:	f47f ae44 	bne.w	1146a <rx_demux+0xe>
   117e2:	e774      	b.n	116ce <rx_demux+0x272>
   117e4:	00021f1c 	.word	0x00021f1c
   117e8:	00021f64 	.word	0x00021f64
   117ec:	00021ce0 	.word	0x00021ce0
   117f0:	20000dc0 	.word	0x20000dc0
   117f4:	20005d1c 	.word	0x20005d1c
   117f8:	20000dbc 	.word	0x20000dbc
   117fc:	00021f7c 	.word	0x00021f7c
   11800:	00021f6c 	.word	0x00021f6c
   11804:	20005bfc 	.word	0x20005bfc

00011808 <ll_init>:
{
   11808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   1180c:	4b9a      	ldr	r3, [pc, #616]	; (11a78 <ll_init+0x270>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1180e:	4d9b      	ldr	r5, [pc, #620]	; (11a7c <ll_init+0x274>)
	sem_recv = sem_rx;
   11810:	6018      	str	r0, [r3, #0]
{
   11812:	b086      	sub	sp, #24
	cntr_init();
   11814:	f007 fa7e 	bl	18d14 <cntr_init>
	mayfly_init();
   11818:	f7fd f98a 	bl	eb30 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1181c:	4898      	ldr	r0, [pc, #608]	; (11a80 <ll_init+0x278>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1181e:	4c99      	ldr	r4, [pc, #612]	; (11a84 <ll_init+0x27c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11820:	4b99      	ldr	r3, [pc, #612]	; (11a88 <ll_init+0x280>)
   11822:	4a9a      	ldr	r2, [pc, #616]	; (11a8c <ll_init+0x284>)
   11824:	9305      	str	r3, [sp, #20]
   11826:	e9cd 0502 	strd	r0, r5, [sp, #8]
   1182a:	9204      	str	r2, [sp, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1182c:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1182e:	2102      	movs	r1, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11830:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   11832:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11834:	9201      	str	r2, [sp, #4]
   11836:	9400      	str	r4, [sp, #0]
   11838:	4a95      	ldr	r2, [pc, #596]	; (11a90 <ll_init+0x288>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1183a:	7421      	strb	r1, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1183c:	7020      	strb	r0, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1183e:	7620      	strb	r0, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11840:	2105      	movs	r1, #5
   11842:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   11844:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11846:	f7fe f8c5 	bl	f9d4 <ticker_init>
	LL_ASSERT(!err);
   1184a:	2800      	cmp	r0, #0
   1184c:	f040 80e5 	bne.w	11a1a <ll_init+0x212>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11850:	2201      	movs	r2, #1
   11852:	2100      	movs	r1, #0
   11854:	488f      	ldr	r0, [pc, #572]	; (11a94 <ll_init+0x28c>)
   11856:	f00f f87f 	bl	20958 <z_impl_k_sem_init>
	err = lll_init();
   1185a:	f005 fef9 	bl	17650 <lll_init>
	if (err) {
   1185e:	4604      	mov	r4, r0
   11860:	b118      	cbz	r0, 1186a <ll_init+0x62>
}
   11862:	4620      	mov	r0, r4
   11864:	b006      	add	sp, #24
   11866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1186a:	4b8b      	ldr	r3, [pc, #556]	; (11a98 <ll_init+0x290>)
		link = mem_acquire(&mem_link_done.free);
   1186c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 11aa0 <ll_init+0x298>
   11870:	4d8a      	ldr	r5, [pc, #552]	; (11a9c <ll_init+0x294>)
		rx = mem_acquire(&mem_done.free);
   11872:	4f89      	ldr	r7, [pc, #548]	; (11a98 <ll_init+0x290>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   11874:	1d18      	adds	r0, r3, #4
   11876:	2203      	movs	r2, #3
   11878:	2138      	movs	r1, #56	; 0x38
   1187a:	f7fd f8a7 	bl	e9cc <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1187e:	4643      	mov	r3, r8
   11880:	2203      	movs	r2, #3
   11882:	1d18      	adds	r0, r3, #4
   11884:	2108      	movs	r1, #8
   11886:	f7fd f8a1 	bl	e9cc <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1188a:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   1188c:	786a      	ldrb	r2, [r5, #1]
   1188e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   11890:	3401      	adds	r4, #1
   11892:	b2e4      	uxtb	r4, r4
		last = 0U;
   11894:	42a2      	cmp	r2, r4
   11896:	bf08      	it	eq
   11898:	2400      	moveq	r4, #0
	if (last == first) {
   1189a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1189c:	4640      	mov	r0, r8
   1189e:	d013      	beq.n	118c8 <ll_init+0xc0>
   118a0:	f7fd f8c2 	bl	ea28 <mem_acquire>
   118a4:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   118a6:	4638      	mov	r0, r7
		if (!link) {
   118a8:	b176      	cbz	r6, 118c8 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   118aa:	f7fd f8bd 	bl	ea28 <mem_acquire>
		if (!rx) {
   118ae:	b138      	cbz	r0, 118c0 <ll_init+0xb8>
		rx->link = link;
   118b0:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   118b2:	78ea      	ldrb	r2, [r5, #3]
   118b4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   118b6:	fb02 5303 	mla	r3, r2, r3, r5
   118ba:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   118bc:	70ec      	strb	r4, [r5, #3]
}
   118be:	e7e5      	b.n	1188c <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   118c0:	4977      	ldr	r1, [pc, #476]	; (11aa0 <ll_init+0x298>)
   118c2:	4630      	mov	r0, r6
   118c4:	f7fd f8ca 	bl	ea5c <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   118c8:	4b76      	ldr	r3, [pc, #472]	; (11aa4 <ll_init+0x29c>)
   118ca:	2208      	movs	r2, #8
   118cc:	1d18      	adds	r0, r3, #4
   118ce:	214c      	movs	r1, #76	; 0x4c
   118d0:	f7fd f87c 	bl	e9cc <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   118d4:	4b74      	ldr	r3, [pc, #464]	; (11aa8 <ll_init+0x2a0>)
   118d6:	220a      	movs	r2, #10
   118d8:	1d18      	adds	r0, r3, #4
   118da:	2108      	movs	r1, #8
   118dc:	f7fd f876 	bl	e9cc <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   118e0:	4871      	ldr	r0, [pc, #452]	; (11aa8 <ll_init+0x2a0>)
   118e2:	f7fd f8a1 	bl	ea28 <mem_acquire>
	LL_ASSERT(link);
   118e6:	4604      	mov	r4, r0
   118e8:	2800      	cmp	r0, #0
   118ea:	f000 80b2 	beq.w	11a52 <ll_init+0x24a>
	MEMQ_INIT(ull_rx, link);
   118ee:	4a6f      	ldr	r2, [pc, #444]	; (11aac <ll_init+0x2a4>)
   118f0:	4620      	mov	r0, r4
   118f2:	1f11      	subs	r1, r2, #4
   118f4:	f7fd f8ee 	bl	ead4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   118f8:	486b      	ldr	r0, [pc, #428]	; (11aa8 <ll_init+0x2a0>)
   118fa:	f7fd f895 	bl	ea28 <mem_acquire>
	LL_ASSERT(link);
   118fe:	4604      	mov	r4, r0
   11900:	2800      	cmp	r0, #0
   11902:	f000 8098 	beq.w	11a36 <ll_init+0x22e>
	MEMQ_INIT(ll_rx, link);
   11906:	4a6a      	ldr	r2, [pc, #424]	; (11ab0 <ll_init+0x2a8>)
	mem_link_rx.quota_pdu = RX_CNT;
   11908:	4d6a      	ldr	r5, [pc, #424]	; (11ab4 <ll_init+0x2ac>)
   1190a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 11acc <ll_init+0x2c4>
		rx = mem_acquire(&mem_pdu_rx.free);
   1190e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 11aa4 <ll_init+0x29c>
	MEMQ_INIT(ll_rx, link);
   11912:	4620      	mov	r0, r4
   11914:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   11916:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   11918:	f7fd f8dc 	bl	ead4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1191c:	2307      	movs	r3, #7
   1191e:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   11922:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   11926:	2700      	movs	r7, #0
	if (last == count) {
   11928:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1192c:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   11930:	3401      	adds	r4, #1
   11932:	b2e4      	uxtb	r4, r4
		last = 0U;
   11934:	42a2      	cmp	r2, r4
   11936:	bf08      	it	eq
   11938:	2400      	moveq	r4, #0
	if (last == first) {
   1193a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1193c:	4630      	mov	r0, r6
   1193e:	d03c      	beq.n	119ba <ll_init+0x1b2>
   11940:	f7fd f872 	bl	ea28 <mem_acquire>
   11944:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11946:	4640      	mov	r0, r8
		if (!link) {
   11948:	f1ba 0f00 	cmp.w	sl, #0
   1194c:	d035      	beq.n	119ba <ll_init+0x1b2>
		rx = mem_acquire(&mem_pdu_rx.free);
   1194e:	f7fd f86b 	bl	ea28 <mem_acquire>
		if (!rx) {
   11952:	b370      	cbz	r0, 119b2 <ll_init+0x1aa>
		link->mem = NULL;
   11954:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   11958:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1195c:	f899 1003 	ldrb.w	r1, [r9, #3]
   11960:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   11964:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11966:	fb01 9202 	mla	r2, r1, r2, r9
   1196a:	3b01      	subs	r3, #1
   1196c:	b2db      	uxtb	r3, r3
   1196e:	6050      	str	r0, [r2, #4]
   11970:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11972:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   11976:	2b00      	cmp	r3, #0
   11978:	d1d6      	bne.n	11928 <ll_init+0x120>
	err = lll_adv_init();
   1197a:	f006 fc3b 	bl	181f4 <lll_adv_init>
	if (err) {
   1197e:	4604      	mov	r4, r0
   11980:	2800      	cmp	r0, #0
   11982:	f47f af6e 	bne.w	11862 <ll_init+0x5a>
	err = ull_adv_init();
   11986:	f001 fa5b 	bl	12e40 <ull_adv_init>
	if (err) {
   1198a:	4604      	mov	r4, r0
   1198c:	2800      	cmp	r0, #0
   1198e:	f47f af68 	bne.w	11862 <ll_init+0x5a>
	err = lll_conn_init();
   11992:	f006 fd59 	bl	18448 <lll_conn_init>
	if (err) {
   11996:	4604      	mov	r4, r0
   11998:	2800      	cmp	r0, #0
   1199a:	f47f af62 	bne.w	11862 <ll_init+0x5a>
	err = ull_conn_init();
   1199e:	f002 f9b9 	bl	13d14 <ull_conn_init>
	if (err) {
   119a2:	4604      	mov	r4, r0
   119a4:	2800      	cmp	r0, #0
   119a6:	f47f af5c 	bne.w	11862 <ll_init+0x5a>
		ull_filter_reset(true);
   119aa:	2001      	movs	r0, #1
   119ac:	f005 fb54 	bl	17058 <ull_filter_reset>
	return  0;
   119b0:	e757      	b.n	11862 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   119b2:	493d      	ldr	r1, [pc, #244]	; (11aa8 <ll_init+0x2a0>)
   119b4:	4650      	mov	r0, sl
   119b6:	f7fd f851 	bl	ea5c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   119ba:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   119bc:	1e5f      	subs	r7, r3, #1
   119be:	b2ff      	uxtb	r7, r7
   119c0:	2b00      	cmp	r3, #0
   119c2:	d0da      	beq.n	1197a <ll_init+0x172>
   119c4:	4e3c      	ldr	r6, [pc, #240]	; (11ab8 <ll_init+0x2b0>)
		link = mem_acquire(&mem_link_rx.free);
   119c6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 11aa8 <ll_init+0x2a0>
   119ca:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   119cc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 11aa4 <ll_init+0x29c>
	if (last == count) {
   119d0:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   119d2:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   119d4:	3401      	adds	r4, #1
   119d6:	b2e4      	uxtb	r4, r4
		last = 0U;
   119d8:	42a2      	cmp	r2, r4
   119da:	bf08      	it	eq
   119dc:	2400      	moveq	r4, #0
	if (last == first) {
   119de:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   119e0:	4648      	mov	r0, r9
   119e2:	d0ca      	beq.n	1197a <ll_init+0x172>
   119e4:	f7fd f820 	bl	ea28 <mem_acquire>
   119e8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   119ea:	4640      	mov	r0, r8
		if (!link) {
   119ec:	f1ba 0f00 	cmp.w	sl, #0
   119f0:	d0c3      	beq.n	1197a <ll_init+0x172>
		rx = mem_acquire(&mem_pdu_rx.free);
   119f2:	f7fd f819 	bl	ea28 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   119f6:	3f01      	subs	r7, #1
   119f8:	b2ff      	uxtb	r7, r7
		if (!rx) {
   119fa:	2800      	cmp	r0, #0
   119fc:	d037      	beq.n	11a6e <ll_init+0x266>
		rx->link = link;
   119fe:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11a02:	78f1      	ldrb	r1, [r6, #3]
   11a04:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   11a06:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11a08:	fb01 6202 	mla	r2, r1, r2, r6
   11a0c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11a0e:	2fff      	cmp	r7, #255	; 0xff
   11a10:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   11a12:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11a14:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11a16:	d1db      	bne.n	119d0 <ll_init+0x1c8>
   11a18:	e7af      	b.n	1197a <ll_init+0x172>
	LL_ASSERT(!err);
   11a1a:	4a28      	ldr	r2, [pc, #160]	; (11abc <ll_init+0x2b4>)
   11a1c:	4928      	ldr	r1, [pc, #160]	; (11ac0 <ll_init+0x2b8>)
   11a1e:	4829      	ldr	r0, [pc, #164]	; (11ac4 <ll_init+0x2bc>)
   11a20:	f44f 7388 	mov.w	r3, #272	; 0x110
   11a24:	f00a fcf2 	bl	1c40c <printk>
   11a28:	4040      	eors	r0, r0
   11a2a:	f380 8811 	msr	BASEPRI, r0
   11a2e:	f04f 0003 	mov.w	r0, #3
   11a32:	df02      	svc	2
   11a34:	e70c      	b.n	11850 <ll_init+0x48>
	LL_ASSERT(link);
   11a36:	4a21      	ldr	r2, [pc, #132]	; (11abc <ll_init+0x2b4>)
   11a38:	4923      	ldr	r1, [pc, #140]	; (11ac8 <ll_init+0x2c0>)
   11a3a:	4822      	ldr	r0, [pc, #136]	; (11ac4 <ll_init+0x2bc>)
   11a3c:	f240 43b6 	movw	r3, #1206	; 0x4b6
   11a40:	f00a fce4 	bl	1c40c <printk>
   11a44:	4040      	eors	r0, r0
   11a46:	f380 8811 	msr	BASEPRI, r0
   11a4a:	f04f 0003 	mov.w	r0, #3
   11a4e:	df02      	svc	2
   11a50:	e759      	b.n	11906 <ll_init+0xfe>
	LL_ASSERT(link);
   11a52:	4a1a      	ldr	r2, [pc, #104]	; (11abc <ll_init+0x2b4>)
   11a54:	491c      	ldr	r1, [pc, #112]	; (11ac8 <ll_init+0x2c0>)
   11a56:	481b      	ldr	r0, [pc, #108]	; (11ac4 <ll_init+0x2bc>)
   11a58:	f240 43af 	movw	r3, #1199	; 0x4af
   11a5c:	f00a fcd6 	bl	1c40c <printk>
   11a60:	4040      	eors	r0, r0
   11a62:	f380 8811 	msr	BASEPRI, r0
   11a66:	f04f 0003 	mov.w	r0, #3
   11a6a:	df02      	svc	2
   11a6c:	e73f      	b.n	118ee <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
   11a6e:	490e      	ldr	r1, [pc, #56]	; (11aa8 <ll_init+0x2a0>)
   11a70:	4650      	mov	r0, sl
   11a72:	f7fc fff3 	bl	ea5c <mem_release>
			break;
   11a76:	e780      	b.n	1197a <ll_init+0x172>
   11a78:	20000dc8 	.word	0x20000dc8
   11a7c:	00019975 	.word	0x00019975
   11a80:	20000eac 	.word	0x20000eac
   11a84:	200010ec 	.word	0x200010ec
   11a88:	00019ab9 	.word	0x00019ab9
   11a8c:	000199d9 	.word	0x000199d9
   11a90:	20000de4 	.word	0x20000de4
   11a94:	20000dcc 	.word	0x20000dcc
   11a98:	20000a34 	.word	0x20000a34
   11a9c:	20005bb8 	.word	0x20005bb8
   11aa0:	20000ae0 	.word	0x20000ae0
   11aa4:	20000b54 	.word	0x20000b54
   11aa8:	20000b00 	.word	0x20000b00
   11aac:	20000dc4 	.word	0x20000dc4
   11ab0:	20000dbc 	.word	0x20000dbc
   11ab4:	20000afc 	.word	0x20000afc
   11ab8:	20005be0 	.word	0x20005be0
   11abc:	00021f1c 	.word	0x00021f1c
   11ac0:	00021f58 	.word	0x00021f58
   11ac4:	00021ce0 	.word	0x00021ce0
   11ac8:	000221ec 	.word	0x000221ec
   11acc:	20005bcc 	.word	0x20005bcc

00011ad0 <ll_reset>:
{
   11ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad4:	b087      	sub	sp, #28
	err = ull_adv_reset();
   11ad6:	f001 f9b5 	bl	12e44 <ull_adv_reset>
	LL_ASSERT(!err);
   11ada:	2800      	cmp	r0, #0
   11adc:	f040 80e2 	bne.w	11ca4 <ll_reset+0x1d4>
	err = ull_conn_reset();
   11ae0:	f002 f92a 	bl	13d38 <ull_conn_reset>
	LL_ASSERT(!err);
   11ae4:	2800      	cmp	r0, #0
   11ae6:	f040 80ef 	bne.w	11cc8 <ll_reset+0x1f8>
	MFIFO_INIT(tx_ack);
   11aea:	4b96      	ldr	r3, [pc, #600]	; (11d44 <ll_reset+0x274>)
	MFIFO_INIT(done);
   11aec:	4e96      	ldr	r6, [pc, #600]	; (11d48 <ll_reset+0x278>)
	MFIFO_INIT(pdu_rx_free);
   11aee:	4f97      	ldr	r7, [pc, #604]	; (11d4c <ll_reset+0x27c>)
	MFIFO_INIT(ll_pdu_rx_free);
   11af0:	4d97      	ldr	r5, [pc, #604]	; (11d50 <ll_reset+0x280>)
	MFIFO_INIT(tx_ack);
   11af2:	2400      	movs	r4, #0
   11af4:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   11af6:	4620      	mov	r0, r4
   11af8:	f005 faae 	bl	17058 <ull_filter_reset>
	MFIFO_INIT(prep);
   11afc:	4b95      	ldr	r3, [pc, #596]	; (11d54 <ll_reset+0x284>)
	MFIFO_INIT(done);
   11afe:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   11b00:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   11b02:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   11b04:	806c      	strh	r4, [r5, #2]
   11b06:	2201      	movs	r2, #1
   11b08:	4621      	mov	r1, r4
   11b0a:	4668      	mov	r0, sp
   11b0c:	f00e ff24 	bl	20958 <z_impl_k_sem_init>
		mfy.param = &sem;
   11b10:	4b91      	ldr	r3, [pc, #580]	; (11d58 <ll_reset+0x288>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11b12:	4622      	mov	r2, r4
   11b14:	4621      	mov	r1, r4
   11b16:	2003      	movs	r0, #3
		mfy.param = &sem;
   11b18:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11b1c:	f7fd f85c 	bl	ebd8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   11b20:	2800      	cmp	r0, #0
   11b22:	f040 80df 	bne.w	11ce4 <ll_reset+0x214>
	return z_impl_k_sem_take(sem, timeout);
   11b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11b2a:	4668      	mov	r0, sp
   11b2c:	f009 fe66 	bl	1b7fc <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   11b30:	4b8a      	ldr	r3, [pc, #552]	; (11d5c <ll_reset+0x28c>)
		link = mem_acquire(&mem_link_done.free);
   11b32:	f8df 922c 	ldr.w	r9, [pc, #556]	; 11d60 <ll_reset+0x290>
		rx = mem_acquire(&mem_done.free);
   11b36:	f8df 8224 	ldr.w	r8, [pc, #548]	; 11d5c <ll_reset+0x28c>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   11b3a:	1d18      	adds	r0, r3, #4
   11b3c:	2203      	movs	r2, #3
   11b3e:	2138      	movs	r1, #56	; 0x38
   11b40:	f7fc ff44 	bl	e9cc <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   11b44:	464b      	mov	r3, r9
   11b46:	2203      	movs	r2, #3
   11b48:	1d18      	adds	r0, r3, #4
   11b4a:	2108      	movs	r1, #8
   11b4c:	f7fc ff3e 	bl	e9cc <mem_init>
static inline void done_alloc(void)
   11b50:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   11b52:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   11b54:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   11b56:	3401      	adds	r4, #1
   11b58:	b2e4      	uxtb	r4, r4
		last = 0U;
   11b5a:	42a2      	cmp	r2, r4
   11b5c:	bf08      	it	eq
   11b5e:	2400      	moveq	r4, #0
	if (last == first) {
   11b60:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   11b62:	4648      	mov	r0, r9
   11b64:	d016      	beq.n	11b94 <ll_reset+0xc4>
   11b66:	f7fc ff5f 	bl	ea28 <mem_acquire>
   11b6a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   11b6c:	4640      	mov	r0, r8
		if (!link) {
   11b6e:	f1ba 0f00 	cmp.w	sl, #0
   11b72:	d00f      	beq.n	11b94 <ll_reset+0xc4>
		rx = mem_acquire(&mem_done.free);
   11b74:	f7fc ff58 	bl	ea28 <mem_acquire>
		if (!rx) {
   11b78:	b140      	cbz	r0, 11b8c <ll_reset+0xbc>
		rx->link = link;
   11b7a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11b7e:	78f2      	ldrb	r2, [r6, #3]
   11b80:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11b82:	fb02 6303 	mla	r3, r2, r3, r6
   11b86:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   11b88:	70f4      	strb	r4, [r6, #3]
}
   11b8a:	e7e2      	b.n	11b52 <ll_reset+0x82>
			mem_release(link, &mem_link_done.free);
   11b8c:	4974      	ldr	r1, [pc, #464]	; (11d60 <ll_reset+0x290>)
   11b8e:	4650      	mov	r0, sl
   11b90:	f7fc ff64 	bl	ea5c <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   11b94:	4b73      	ldr	r3, [pc, #460]	; (11d64 <ll_reset+0x294>)
   11b96:	2208      	movs	r2, #8
   11b98:	1d18      	adds	r0, r3, #4
   11b9a:	214c      	movs	r1, #76	; 0x4c
   11b9c:	f7fc ff16 	bl	e9cc <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   11ba0:	4b71      	ldr	r3, [pc, #452]	; (11d68 <ll_reset+0x298>)
   11ba2:	220a      	movs	r2, #10
   11ba4:	1d18      	adds	r0, r3, #4
   11ba6:	2108      	movs	r1, #8
   11ba8:	f7fc ff10 	bl	e9cc <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   11bac:	486e      	ldr	r0, [pc, #440]	; (11d68 <ll_reset+0x298>)
   11bae:	f7fc ff3b 	bl	ea28 <mem_acquire>
	LL_ASSERT(link);
   11bb2:	4604      	mov	r4, r0
   11bb4:	2800      	cmp	r0, #0
   11bb6:	f000 80b1 	beq.w	11d1c <ll_reset+0x24c>
	MEMQ_INIT(ull_rx, link);
   11bba:	4a6c      	ldr	r2, [pc, #432]	; (11d6c <ll_reset+0x29c>)
   11bbc:	4620      	mov	r0, r4
   11bbe:	1f11      	subs	r1, r2, #4
   11bc0:	f7fc ff88 	bl	ead4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   11bc4:	4868      	ldr	r0, [pc, #416]	; (11d68 <ll_reset+0x298>)
   11bc6:	f7fc ff2f 	bl	ea28 <mem_acquire>
	LL_ASSERT(link);
   11bca:	4604      	mov	r4, r0
   11bcc:	2800      	cmp	r0, #0
   11bce:	f000 8097 	beq.w	11d00 <ll_reset+0x230>
	MEMQ_INIT(ll_rx, link);
   11bd2:	4a67      	ldr	r2, [pc, #412]	; (11d70 <ll_reset+0x2a0>)
	mem_link_rx.quota_pdu = RX_CNT;
   11bd4:	4e67      	ldr	r6, [pc, #412]	; (11d74 <ll_reset+0x2a4>)
		rx = mem_acquire(&mem_pdu_rx.free);
   11bd6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 11d64 <ll_reset+0x294>
	MEMQ_INIT(ll_rx, link);
   11bda:	4620      	mov	r0, r4
   11bdc:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   11bde:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   11be0:	f7fc ff78 	bl	ead4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   11be4:	2307      	movs	r3, #7
   11be6:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   11bea:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   11bec:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   11bf0:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11bf2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   11bf4:	3401      	adds	r4, #1
   11bf6:	b2e4      	uxtb	r4, r4
		last = 0U;
   11bf8:	42a2      	cmp	r2, r4
   11bfa:	bf08      	it	eq
   11bfc:	2400      	moveq	r4, #0
	if (last == first) {
   11bfe:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   11c00:	4640      	mov	r0, r8
   11c02:	d020      	beq.n	11c46 <ll_reset+0x176>
   11c04:	f7fc ff10 	bl	ea28 <mem_acquire>
   11c08:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11c0a:	4650      	mov	r0, sl
		if (!link) {
   11c0c:	f1bb 0f00 	cmp.w	fp, #0
   11c10:	d019      	beq.n	11c46 <ll_reset+0x176>
		rx = mem_acquire(&mem_pdu_rx.free);
   11c12:	f7fc ff09 	bl	ea28 <mem_acquire>
		if (!rx) {
   11c16:	b190      	cbz	r0, 11c3e <ll_reset+0x16e>
		link->mem = NULL;
   11c18:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   11c1c:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11c20:	78e9      	ldrb	r1, [r5, #3]
   11c22:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   11c24:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11c26:	fb01 5202 	mla	r2, r1, r2, r5
   11c2a:	3b01      	subs	r3, #1
   11c2c:	b2db      	uxtb	r3, r3
   11c2e:	6050      	str	r0, [r2, #4]
   11c30:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   11c32:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   11c34:	2b00      	cmp	r3, #0
   11c36:	d1db      	bne.n	11bf0 <ll_reset+0x120>
}
   11c38:	b007      	add	sp, #28
   11c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   11c3e:	494a      	ldr	r1, [pc, #296]	; (11d68 <ll_reset+0x298>)
   11c40:	4658      	mov	r0, fp
   11c42:	f7fc ff0b 	bl	ea5c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   11c46:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11c48:	1e5d      	subs	r5, r3, #1
   11c4a:	b2ed      	uxtb	r5, r5
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	d0f3      	beq.n	11c38 <ll_reset+0x168>
   11c50:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   11c52:	f8df 9114 	ldr.w	r9, [pc, #276]	; 11d68 <ll_reset+0x298>
		rx = mem_acquire(&mem_pdu_rx.free);
   11c56:	f8df 810c 	ldr.w	r8, [pc, #268]	; 11d64 <ll_reset+0x294>
	if (last == count) {
   11c5a:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11c5c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   11c5e:	3401      	adds	r4, #1
   11c60:	b2e4      	uxtb	r4, r4
		last = 0U;
   11c62:	42a2      	cmp	r2, r4
   11c64:	bf08      	it	eq
   11c66:	2400      	moveq	r4, #0
	if (last == first) {
   11c68:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   11c6a:	4648      	mov	r0, r9
   11c6c:	d0e4      	beq.n	11c38 <ll_reset+0x168>
   11c6e:	f7fc fedb 	bl	ea28 <mem_acquire>
   11c72:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11c74:	4640      	mov	r0, r8
		if (!link) {
   11c76:	f1ba 0f00 	cmp.w	sl, #0
   11c7a:	d0dd      	beq.n	11c38 <ll_reset+0x168>
		rx = mem_acquire(&mem_pdu_rx.free);
   11c7c:	f7fc fed4 	bl	ea28 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11c80:	3d01      	subs	r5, #1
   11c82:	b2ed      	uxtb	r5, r5
		if (!rx) {
   11c84:	2800      	cmp	r0, #0
   11c86:	d057      	beq.n	11d38 <ll_reset+0x268>
		rx->link = link;
   11c88:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11c8c:	78f9      	ldrb	r1, [r7, #3]
   11c8e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   11c90:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11c92:	fb01 7202 	mla	r2, r1, r2, r7
   11c96:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11c98:	2dff      	cmp	r5, #255	; 0xff
   11c9a:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   11c9c:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   11c9e:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11ca0:	d1db      	bne.n	11c5a <ll_reset+0x18a>
   11ca2:	e7c9      	b.n	11c38 <ll_reset+0x168>
	LL_ASSERT(!err);
   11ca4:	4a34      	ldr	r2, [pc, #208]	; (11d78 <ll_reset+0x2a8>)
   11ca6:	4935      	ldr	r1, [pc, #212]	; (11d7c <ll_reset+0x2ac>)
   11ca8:	4835      	ldr	r0, [pc, #212]	; (11d80 <ll_reset+0x2b0>)
   11caa:	f44f 73af 	mov.w	r3, #350	; 0x15e
   11cae:	f00a fbad 	bl	1c40c <printk>
   11cb2:	4040      	eors	r0, r0
   11cb4:	f380 8811 	msr	BASEPRI, r0
   11cb8:	f04f 0003 	mov.w	r0, #3
   11cbc:	df02      	svc	2
	err = ull_conn_reset();
   11cbe:	f002 f83b 	bl	13d38 <ull_conn_reset>
	LL_ASSERT(!err);
   11cc2:	2800      	cmp	r0, #0
   11cc4:	f43f af11 	beq.w	11aea <ll_reset+0x1a>
   11cc8:	4a2b      	ldr	r2, [pc, #172]	; (11d78 <ll_reset+0x2a8>)
   11cca:	492c      	ldr	r1, [pc, #176]	; (11d7c <ll_reset+0x2ac>)
   11ccc:	482c      	ldr	r0, [pc, #176]	; (11d80 <ll_reset+0x2b0>)
   11cce:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   11cd2:	f00a fb9b 	bl	1c40c <printk>
   11cd6:	4040      	eors	r0, r0
   11cd8:	f380 8811 	msr	BASEPRI, r0
   11cdc:	f04f 0003 	mov.w	r0, #3
   11ce0:	df02      	svc	2
   11ce2:	e702      	b.n	11aea <ll_reset+0x1a>
		LL_ASSERT(!retval);
   11ce4:	4a24      	ldr	r2, [pc, #144]	; (11d78 <ll_reset+0x2a8>)
   11ce6:	4927      	ldr	r1, [pc, #156]	; (11d84 <ll_reset+0x2b4>)
   11ce8:	4825      	ldr	r0, [pc, #148]	; (11d80 <ll_reset+0x2b0>)
   11cea:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   11cee:	f00a fb8d 	bl	1c40c <printk>
   11cf2:	4040      	eors	r0, r0
   11cf4:	f380 8811 	msr	BASEPRI, r0
   11cf8:	f04f 0003 	mov.w	r0, #3
   11cfc:	df02      	svc	2
   11cfe:	e712      	b.n	11b26 <ll_reset+0x56>
	LL_ASSERT(link);
   11d00:	4a1d      	ldr	r2, [pc, #116]	; (11d78 <ll_reset+0x2a8>)
   11d02:	4921      	ldr	r1, [pc, #132]	; (11d88 <ll_reset+0x2b8>)
   11d04:	481e      	ldr	r0, [pc, #120]	; (11d80 <ll_reset+0x2b0>)
   11d06:	f240 43b6 	movw	r3, #1206	; 0x4b6
   11d0a:	f00a fb7f 	bl	1c40c <printk>
   11d0e:	4040      	eors	r0, r0
   11d10:	f380 8811 	msr	BASEPRI, r0
   11d14:	f04f 0003 	mov.w	r0, #3
   11d18:	df02      	svc	2
   11d1a:	e75a      	b.n	11bd2 <ll_reset+0x102>
	LL_ASSERT(link);
   11d1c:	4a16      	ldr	r2, [pc, #88]	; (11d78 <ll_reset+0x2a8>)
   11d1e:	491a      	ldr	r1, [pc, #104]	; (11d88 <ll_reset+0x2b8>)
   11d20:	4817      	ldr	r0, [pc, #92]	; (11d80 <ll_reset+0x2b0>)
   11d22:	f240 43af 	movw	r3, #1199	; 0x4af
   11d26:	f00a fb71 	bl	1c40c <printk>
   11d2a:	4040      	eors	r0, r0
   11d2c:	f380 8811 	msr	BASEPRI, r0
   11d30:	f04f 0003 	mov.w	r0, #3
   11d34:	df02      	svc	2
   11d36:	e740      	b.n	11bba <ll_reset+0xea>
			mem_release(link, &mem_link_rx.free);
   11d38:	490b      	ldr	r1, [pc, #44]	; (11d68 <ll_reset+0x298>)
   11d3a:	4650      	mov	r0, sl
   11d3c:	f7fc fe8e 	bl	ea5c <mem_release>
			break;
   11d40:	e77a      	b.n	11c38 <ll_reset+0x168>
   11d42:	bf00      	nop
   11d44:	20005d1c 	.word	0x20005d1c
   11d48:	20005bb8 	.word	0x20005bb8
   11d4c:	20005be0 	.word	0x20005be0
   11d50:	20005bcc 	.word	0x20005bcc
   11d54:	20005bf8 	.word	0x20005bf8
   11d58:	20005d40 	.word	0x20005d40
   11d5c:	20000a34 	.word	0x20000a34
   11d60:	20000ae0 	.word	0x20000ae0
   11d64:	20000b54 	.word	0x20000b54
   11d68:	20000b00 	.word	0x20000b00
   11d6c:	20000dc4 	.word	0x20000dc4
   11d70:	20000dbc 	.word	0x20000dbc
   11d74:	20000afc 	.word	0x20000afc
   11d78:	00021f1c 	.word	0x00021f1c
   11d7c:	00021f58 	.word	0x00021f58
   11d80:	00021ce0 	.word	0x00021ce0
   11d84:	00021f8c 	.word	0x00021f8c
   11d88:	000221ec 	.word	0x000221ec

00011d8c <ll_rx_get>:
{
   11d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d90:	b085      	sub	sp, #20
   11d92:	e9cd 0100 	strd	r0, r1, [sp]
   11d96:	4c5f      	ldr	r4, [pc, #380]	; (11f14 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   11d98:	4d5f      	ldr	r5, [pc, #380]	; (11f18 <ll_rx_get+0x18c>)
   11d9a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 11f20 <ll_rx_get+0x194>
	*node_rx = NULL;
   11d9e:	9a00      	ldr	r2, [sp, #0]
   11da0:	2300      	movs	r3, #0
   11da2:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   11da4:	e9d9 0100 	ldrd	r0, r1, [r9]
   11da8:	aa03      	add	r2, sp, #12
   11daa:	f7fc fea9 	bl	eb00 <memq_peek>
	if (link) {
   11dae:	4607      	mov	r7, r0
   11db0:	2800      	cmp	r0, #0
   11db2:	f000 80a4 	beq.w	11efe <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11db6:	9b03      	ldr	r3, [sp, #12]
   11db8:	4958      	ldr	r1, [pc, #352]	; (11f1c <ll_rx_get+0x190>)
   11dba:	781a      	ldrb	r2, [r3, #0]
   11dbc:	9801      	ldr	r0, [sp, #4]
   11dbe:	f7ff fae7 	bl	11390 <tx_cmplt_get>
		if (!cmplt) {
   11dc2:	4603      	mov	r3, r0
   11dc4:	2800      	cmp	r0, #0
   11dc6:	f040 8091 	bne.w	11eec <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   11dca:	78a2      	ldrb	r2, [r4, #2]
   11dcc:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   11dd0:	78e2      	ldrb	r2, [r4, #3]
   11dd2:	f10d 0109 	add.w	r1, sp, #9
   11dd6:	f10d 000a 	add.w	r0, sp, #10
   11dda:	461e      	mov	r6, r3
   11ddc:	f7ff fad8 	bl	11390 <tx_cmplt_get>
   11de0:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   11de4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   11de8:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   11dea:	d1f1      	bne.n	11dd0 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   11dec:	9b03      	ldr	r3, [sp, #12]
   11dee:	7919      	ldrb	r1, [r3, #4]
   11df0:	2903      	cmp	r1, #3
   11df2:	d178      	bne.n	11ee6 <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   11df4:	494a      	ldr	r1, [pc, #296]	; (11f20 <ll_rx_get+0x194>)
   11df6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   11dfa:	f7fc fe89 	bl	eb10 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   11dfe:	4949      	ldr	r1, [pc, #292]	; (11f24 <ll_rx_get+0x198>)
   11e00:	4638      	mov	r0, r7
   11e02:	f7fc fe2b 	bl	ea5c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11e06:	782b      	ldrb	r3, [r5, #0]
   11e08:	2b06      	cmp	r3, #6
   11e0a:	d85d      	bhi.n	11ec8 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   11e0c:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   11e0e:	4946      	ldr	r1, [pc, #280]	; (11f28 <ll_rx_get+0x19c>)
   11e10:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   11e12:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   11e14:	f7fc fe22 	bl	ea5c <mem_release>
	while (mem_link_rx.quota_pdu &&
   11e18:	782b      	ldrb	r3, [r5, #0]
   11e1a:	2b00      	cmp	r3, #0
   11e1c:	d0bf      	beq.n	11d9e <ll_rx_get+0x12>
   11e1e:	4f43      	ldr	r7, [pc, #268]	; (11f2c <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   11e20:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11f24 <ll_rx_get+0x198>
   11e24:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   11e26:	f8df a100 	ldr.w	sl, [pc, #256]	; 11f28 <ll_rx_get+0x19c>
	if (last == count) {
   11e2a:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11e2c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   11e2e:	3601      	adds	r6, #1
   11e30:	b2f6      	uxtb	r6, r6
		last = 0U;
   11e32:	42b2      	cmp	r2, r6
   11e34:	bf08      	it	eq
   11e36:	2600      	moveq	r6, #0
	if (last == first) {
   11e38:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   11e3a:	4640      	mov	r0, r8
   11e3c:	d01f      	beq.n	11e7e <ll_rx_get+0xf2>
   11e3e:	f7fc fdf3 	bl	ea28 <mem_acquire>
   11e42:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11e44:	4650      	mov	r0, sl
		if (!link) {
   11e46:	f1bb 0f00 	cmp.w	fp, #0
   11e4a:	d018      	beq.n	11e7e <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   11e4c:	f7fc fdec 	bl	ea28 <mem_acquire>
		if (!rx) {
   11e50:	b188      	cbz	r0, 11e76 <ll_rx_get+0xea>
		link->mem = NULL;
   11e52:	2300      	movs	r3, #0
   11e54:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   11e58:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11e5c:	78f9      	ldrb	r1, [r7, #3]
   11e5e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   11e60:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11e62:	fb01 7202 	mla	r2, r1, r2, r7
   11e66:	3b01      	subs	r3, #1
   11e68:	b2db      	uxtb	r3, r3
   11e6a:	6050      	str	r0, [r2, #4]
   11e6c:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11e6e:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   11e70:	2b00      	cmp	r3, #0
   11e72:	d1da      	bne.n	11e2a <ll_rx_get+0x9e>
   11e74:	e793      	b.n	11d9e <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   11e76:	492b      	ldr	r1, [pc, #172]	; (11f24 <ll_rx_get+0x198>)
   11e78:	4658      	mov	r0, fp
   11e7a:	f7fc fdef 	bl	ea5c <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11e7e:	782b      	ldrb	r3, [r5, #0]
   11e80:	2b00      	cmp	r3, #0
   11e82:	d08c      	beq.n	11d9e <ll_rx_get+0x12>
   11e84:	4f2a      	ldr	r7, [pc, #168]	; (11f30 <ll_rx_get+0x1a4>)
	last = last + 1;
   11e86:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   11e88:	787a      	ldrb	r2, [r7, #1]
   11e8a:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   11e8c:	3601      	adds	r6, #1
   11e8e:	b2f6      	uxtb	r6, r6
		last = 0U;
   11e90:	42b2      	cmp	r2, r6
   11e92:	bf08      	it	eq
   11e94:	2600      	moveq	r6, #0
	if (last == first) {
   11e96:	429e      	cmp	r6, r3
   11e98:	d081      	beq.n	11d9e <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   11e9a:	4822      	ldr	r0, [pc, #136]	; (11f24 <ll_rx_get+0x198>)
   11e9c:	f7fc fdc4 	bl	ea28 <mem_acquire>
		if (!link) {
   11ea0:	4680      	mov	r8, r0
   11ea2:	2800      	cmp	r0, #0
   11ea4:	f43f af7b 	beq.w	11d9e <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   11ea8:	481f      	ldr	r0, [pc, #124]	; (11f28 <ll_rx_get+0x19c>)
   11eaa:	f7fc fdbd 	bl	ea28 <mem_acquire>
		if (!rx) {
   11eae:	b308      	cbz	r0, 11ef4 <ll_rx_get+0x168>
		rx->link = link;
   11eb0:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11eb4:	78f9      	ldrb	r1, [r7, #3]
   11eb6:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   11eb8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11eba:	fb01 7202 	mla	r2, r1, r2, r7
   11ebe:	3b01      	subs	r3, #1
   11ec0:	6050      	str	r0, [r2, #4]
   11ec2:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11ec4:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11ec6:	e76a      	b.n	11d9e <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11ec8:	4a1a      	ldr	r2, [pc, #104]	; (11f34 <ll_rx_get+0x1a8>)
   11eca:	491b      	ldr	r1, [pc, #108]	; (11f38 <ll_rx_get+0x1ac>)
   11ecc:	481b      	ldr	r0, [pc, #108]	; (11f3c <ll_rx_get+0x1b0>)
   11ece:	f240 335d 	movw	r3, #861	; 0x35d
   11ed2:	f00a fa9b 	bl	1c40c <printk>
   11ed6:	4040      	eors	r0, r0
   11ed8:	f380 8811 	msr	BASEPRI, r0
   11edc:	f04f 0003 	mov.w	r0, #3
   11ee0:	df02      	svc	2
   11ee2:	782b      	ldrb	r3, [r5, #0]
   11ee4:	e792      	b.n	11e0c <ll_rx_get+0x80>
			*node_rx = rx;
   11ee6:	9900      	ldr	r1, [sp, #0]
   11ee8:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11eea:	4613      	mov	r3, r2
}
   11eec:	4618      	mov	r0, r3
   11eee:	b005      	add	sp, #20
   11ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   11ef4:	490b      	ldr	r1, [pc, #44]	; (11f24 <ll_rx_get+0x198>)
   11ef6:	4640      	mov	r0, r8
   11ef8:	f7fc fdb0 	bl	ea5c <mem_release>
			break;
   11efc:	e74f      	b.n	11d9e <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   11efe:	78e2      	ldrb	r2, [r4, #3]
   11f00:	4906      	ldr	r1, [pc, #24]	; (11f1c <ll_rx_get+0x190>)
   11f02:	9801      	ldr	r0, [sp, #4]
   11f04:	f7ff fa44 	bl	11390 <tx_cmplt_get>
   11f08:	4603      	mov	r3, r0
}
   11f0a:	4618      	mov	r0, r3
   11f0c:	b005      	add	sp, #20
   11f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f12:	bf00      	nop
   11f14:	20005d1c 	.word	0x20005d1c
   11f18:	20000afc 	.word	0x20000afc
   11f1c:	20005d1e 	.word	0x20005d1e
   11f20:	20000db8 	.word	0x20000db8
   11f24:	20000b00 	.word	0x20000b00
   11f28:	20000b54 	.word	0x20000b54
   11f2c:	20005bcc 	.word	0x20005bcc
   11f30:	20005be0 	.word	0x20005be0
   11f34:	00021f1c 	.word	0x00021f1c
   11f38:	00021f94 	.word	0x00021f94
   11f3c:	00021ce0 	.word	0x00021ce0

00011f40 <ll_rx_dequeue>:
{
   11f40:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11f42:	495d      	ldr	r1, [pc, #372]	; (120b8 <ll_rx_dequeue+0x178>)
{
   11f44:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   11f46:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11f48:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   11f4a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11f4c:	aa01      	add	r2, sp, #4
   11f4e:	f7fc fddf 	bl	eb10 <memq_dequeue>
	LL_ASSERT(link);
   11f52:	4604      	mov	r4, r0
   11f54:	2800      	cmp	r0, #0
   11f56:	d053      	beq.n	12000 <ll_rx_dequeue+0xc0>
	mem_release(link, &mem_link_rx.free);
   11f58:	4958      	ldr	r1, [pc, #352]	; (120bc <ll_rx_dequeue+0x17c>)
   11f5a:	4620      	mov	r0, r4
   11f5c:	f7fc fd7e 	bl	ea5c <mem_release>
	switch (rx->type) {
   11f60:	9a01      	ldr	r2, [sp, #4]
   11f62:	7913      	ldrb	r3, [r2, #4]
   11f64:	2b0e      	cmp	r3, #14
   11f66:	d80d      	bhi.n	11f84 <ll_rx_dequeue+0x44>
   11f68:	e8df f003 	tbb	[pc, r3]
   11f6c:	0c080c08 	.word	0x0c080c08
   11f70:	0c0c0c0c 	.word	0x0c0c0c0c
   11f74:	0808081b 	.word	0x0808081b
   11f78:	0808      	.short	0x0808
   11f7a:	08          	.byte	0x08
   11f7b:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d04d      	beq.n	1201c <ll_rx_dequeue+0xdc>
}
   11f80:	b002      	add	sp, #8
   11f82:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   11f84:	4a4e      	ldr	r2, [pc, #312]	; (120c0 <ll_rx_dequeue+0x180>)
   11f86:	494f      	ldr	r1, [pc, #316]	; (120c4 <ll_rx_dequeue+0x184>)
   11f88:	484f      	ldr	r0, [pc, #316]	; (120c8 <ll_rx_dequeue+0x188>)
   11f8a:	f240 239e 	movw	r3, #670	; 0x29e
   11f8e:	f00a fa3d 	bl	1c40c <printk>
   11f92:	4040      	eors	r0, r0
   11f94:	f380 8811 	msr	BASEPRI, r0
   11f98:	f04f 0003 	mov.w	r0, #3
   11f9c:	df02      	svc	2
}
   11f9e:	b002      	add	sp, #8
   11fa0:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   11fa2:	f892 3020 	ldrb.w	r3, [r2, #32]
   11fa6:	2b3c      	cmp	r3, #60	; 0x3c
   11fa8:	d047      	beq.n	1203a <ll_rx_dequeue+0xfa>
   11faa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
   11fae:	b1cb      	cbz	r3, 11fe4 <ll_rx_dequeue+0xa4>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   11fb0:	6893      	ldr	r3, [r2, #8]
   11fb2:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   11fb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   11fb8:	b128      	cbz	r0, 11fc6 <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
   11fba:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   11fbc:	4943      	ldr	r1, [pc, #268]	; (120cc <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   11fbe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
					mem_release(rx_free, &mem_pdu_rx.free);
   11fc2:	f7fc fd4b 	bl	ea5c <mem_release>
			adv->is_enabled = 0U;
   11fc6:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   11fca:	f36f 0300 	bfc	r3, #0, #1
   11fce:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			      ull_adv_is_enabled(0));
   11fd2:	2000      	movs	r0, #0
   11fd4:	f001 f838 	bl	13048 <ull_adv_is_enabled>
			if (!bm) {
   11fd8:	2800      	cmp	r0, #0
   11fda:	d1d1      	bne.n	11f80 <ll_rx_dequeue+0x40>
				ull_filter_adv_scan_state_cb(0);
   11fdc:	f004 fc00 	bl	167e0 <ull_filter_adv_scan_state_cb>
}
   11fe0:	b002      	add	sp, #8
   11fe2:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   11fe4:	4a36      	ldr	r2, [pc, #216]	; (120c0 <ll_rx_dequeue+0x180>)
   11fe6:	4937      	ldr	r1, [pc, #220]	; (120c4 <ll_rx_dequeue+0x184>)
   11fe8:	4837      	ldr	r0, [pc, #220]	; (120c8 <ll_rx_dequeue+0x188>)
   11fea:	f240 2349 	movw	r3, #585	; 0x249
   11fee:	f00a fa0d 	bl	1c40c <printk>
   11ff2:	4040      	eors	r0, r0
   11ff4:	f380 8811 	msr	BASEPRI, r0
   11ff8:	f04f 0003 	mov.w	r0, #3
   11ffc:	df02      	svc	2
   11ffe:	e7e8      	b.n	11fd2 <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
   12000:	4a2f      	ldr	r2, [pc, #188]	; (120c0 <ll_rx_dequeue+0x180>)
   12002:	4933      	ldr	r1, [pc, #204]	; (120d0 <ll_rx_dequeue+0x190>)
   12004:	4830      	ldr	r0, [pc, #192]	; (120c8 <ll_rx_dequeue+0x188>)
   12006:	f240 230e 	movw	r3, #526	; 0x20e
   1200a:	f00a f9ff 	bl	1c40c <printk>
   1200e:	4040      	eors	r0, r0
   12010:	f380 8811 	msr	BASEPRI, r0
   12014:	f04f 0003 	mov.w	r0, #3
   12018:	df02      	svc	2
   1201a:	e79d      	b.n	11f58 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1201c:	4a28      	ldr	r2, [pc, #160]	; (120c0 <ll_rx_dequeue+0x180>)
   1201e:	492d      	ldr	r1, [pc, #180]	; (120d4 <ll_rx_dequeue+0x194>)
   12020:	4829      	ldr	r0, [pc, #164]	; (120c8 <ll_rx_dequeue+0x188>)
   12022:	f240 239a 	movw	r3, #666	; 0x29a
   12026:	f00a f9f1 	bl	1c40c <printk>
   1202a:	4040      	eors	r0, r0
   1202c:	f380 8811 	msr	BASEPRI, r0
   12030:	f04f 0003 	mov.w	r0, #3
   12034:	df02      	svc	2
}
   12036:	b002      	add	sp, #8
   12038:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
   1203a:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   1203c:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1203e:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   12040:	b1ed      	cbz	r5, 1207e <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   12042:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   12044:	2200      	movs	r2, #0
   12046:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   12048:	b163      	cbz	r3, 12064 <ll_rx_dequeue+0x124>
   1204a:	4a1d      	ldr	r2, [pc, #116]	; (120c0 <ll_rx_dequeue+0x180>)
   1204c:	4922      	ldr	r1, [pc, #136]	; (120d8 <ll_rx_dequeue+0x198>)
   1204e:	481e      	ldr	r0, [pc, #120]	; (120c8 <ll_rx_dequeue+0x188>)
   12050:	f240 232a 	movw	r3, #554	; 0x22a
   12054:	f00a f9da 	bl	1c40c <printk>
   12058:	4040      	eors	r0, r0
   1205a:	f380 8811 	msr	BASEPRI, r0
   1205e:	f04f 0003 	mov.w	r0, #3
   12062:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   12064:	f105 0150 	add.w	r1, r5, #80	; 0x50
   12068:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1206c:	f7fc fd36 	bl	eadc <memq_deinit>
				LL_ASSERT(link);
   12070:	4606      	mov	r6, r0
   12072:	b190      	cbz	r0, 1209a <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   12074:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   12076:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   12078:	f001 fbae 	bl	137d8 <ll_conn_release>
   1207c:	e7a3      	b.n	11fc6 <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
   1207e:	4a10      	ldr	r2, [pc, #64]	; (120c0 <ll_rx_dequeue+0x180>)
   12080:	4916      	ldr	r1, [pc, #88]	; (120dc <ll_rx_dequeue+0x19c>)
   12082:	4811      	ldr	r0, [pc, #68]	; (120c8 <ll_rx_dequeue+0x188>)
   12084:	f240 2327 	movw	r3, #551	; 0x227
   12088:	f00a f9c0 	bl	1c40c <printk>
   1208c:	4040      	eors	r0, r0
   1208e:	f380 8811 	msr	BASEPRI, r0
   12092:	f04f 0003 	mov.w	r0, #3
   12096:	df02      	svc	2
   12098:	e7d3      	b.n	12042 <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   1209a:	4a09      	ldr	r2, [pc, #36]	; (120c0 <ll_rx_dequeue+0x180>)
   1209c:	490c      	ldr	r1, [pc, #48]	; (120d0 <ll_rx_dequeue+0x190>)
   1209e:	480a      	ldr	r0, [pc, #40]	; (120c8 <ll_rx_dequeue+0x188>)
   120a0:	f240 232d 	movw	r3, #557	; 0x22d
   120a4:	f00a f9b2 	bl	1c40c <printk>
   120a8:	4040      	eors	r0, r0
   120aa:	f380 8811 	msr	BASEPRI, r0
   120ae:	f04f 0003 	mov.w	r0, #3
   120b2:	df02      	svc	2
   120b4:	e7de      	b.n	12074 <ll_rx_dequeue+0x134>
   120b6:	bf00      	nop
   120b8:	20000db8 	.word	0x20000db8
   120bc:	20000b00 	.word	0x20000b00
   120c0:	00021f1c 	.word	0x00021f1c
   120c4:	00021c84 	.word	0x00021c84
   120c8:	00021ce0 	.word	0x00021ce0
   120cc:	20000b54 	.word	0x20000b54
   120d0:	000221ec 	.word	0x000221ec
   120d4:	00021fec 	.word	0x00021fec
   120d8:	00021fd4 	.word	0x00021fd4
   120dc:	00021fc8 	.word	0x00021fc8

000120e0 <ll_rx_mem_release>:
{
   120e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   120e4:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   120e6:	4e85      	ldr	r6, [pc, #532]	; (122fc <ll_rx_mem_release+0x21c>)
{
   120e8:	4681      	mov	r9, r0
	while (rx) {
   120ea:	2c00      	cmp	r4, #0
   120ec:	d040      	beq.n	12170 <ll_rx_mem_release+0x90>
			LL_ASSERT(0);
   120ee:	f8df 8238 	ldr.w	r8, [pc, #568]	; 12328 <ll_rx_mem_release+0x248>
   120f2:	f8df a238 	ldr.w	sl, [pc, #568]	; 1232c <ll_rx_mem_release+0x24c>
   120f6:	4f82      	ldr	r7, [pc, #520]	; (12300 <ll_rx_mem_release+0x220>)
		rx = rx->next;
   120f8:	4625      	mov	r5, r4
   120fa:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   120fc:	792b      	ldrb	r3, [r5, #4]
   120fe:	2b0e      	cmp	r3, #14
   12100:	d868      	bhi.n	121d4 <ll_rx_mem_release+0xf4>
   12102:	e8df f003 	tbb	[pc, r3]
   12106:	671c      	.short	0x671c
   12108:	6767671c 	.word	0x6767671c
   1210c:	77086767 	.word	0x77086767
   12110:	1c1c1c1c 	.word	0x1c1c1c1c
   12114:	1c          	.byte	0x1c
   12115:	00          	.byte	0x00
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   12116:	f895 3020 	ldrb.w	r3, [r5, #32]
   1211a:	2b3c      	cmp	r3, #60	; 0x3c
   1211c:	f000 80d1 	beq.w	122c2 <ll_rx_mem_release+0x1e2>
				LL_ASSERT(!cc->status);
   12120:	b1db      	cbz	r3, 1215a <ll_rx_mem_release+0x7a>
   12122:	4978      	ldr	r1, [pc, #480]	; (12304 <ll_rx_mem_release+0x224>)
   12124:	f240 23f6 	movw	r3, #758	; 0x2f6
   12128:	4642      	mov	r2, r8
   1212a:	4638      	mov	r0, r7
   1212c:	f00a f96e 	bl	1c40c <printk>
   12130:	4040      	eors	r0, r0
   12132:	f380 8811 	msr	BASEPRI, r0
   12136:	f04f 0003 	mov.w	r0, #3
   1213a:	df02      	svc	2
   1213c:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1213e:	b963      	cbnz	r3, 1215a <ll_rx_mem_release+0x7a>
   12140:	4971      	ldr	r1, [pc, #452]	; (12308 <ll_rx_mem_release+0x228>)
   12142:	f240 3337 	movw	r3, #823	; 0x337
   12146:	4642      	mov	r2, r8
   12148:	4638      	mov	r0, r7
   1214a:	f00a f95f 	bl	1c40c <printk>
   1214e:	4040      	eors	r0, r0
   12150:	f380 8811 	msr	BASEPRI, r0
   12154:	f04f 0003 	mov.w	r0, #3
   12158:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1215a:	7833      	ldrb	r3, [r6, #0]
   1215c:	2b06      	cmp	r3, #6
   1215e:	d86e      	bhi.n	1223e <ll_rx_mem_release+0x15e>
	mem_link_rx.quota_pdu += delta;
   12160:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   12162:	496a      	ldr	r1, [pc, #424]	; (1230c <ll_rx_mem_release+0x22c>)
	mem_link_rx.quota_pdu += delta;
   12164:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   12166:	4628      	mov	r0, r5
   12168:	f7fc fc78 	bl	ea5c <mem_release>
	while (rx) {
   1216c:	2c00      	cmp	r4, #0
   1216e:	d1c3      	bne.n	120f8 <ll_rx_mem_release+0x18>
	*node_rx = rx;
   12170:	2700      	movs	r7, #0
   12172:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
   12176:	7833      	ldrb	r3, [r6, #0]
   12178:	b353      	cbz	r3, 121d0 <ll_rx_mem_release+0xf0>
   1217a:	4d65      	ldr	r5, [pc, #404]	; (12310 <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   1217c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1231c <ll_rx_mem_release+0x23c>
   12180:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12182:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1230c <ll_rx_mem_release+0x22c>
	if (last == count) {
   12186:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12188:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1218a:	3401      	adds	r4, #1
   1218c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1218e:	42a2      	cmp	r2, r4
   12190:	bf08      	it	eq
   12192:	2400      	moveq	r4, #0
	if (last == first) {
   12194:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12196:	4640      	mov	r0, r8
   12198:	d064      	beq.n	12264 <ll_rx_mem_release+0x184>
   1219a:	f7fc fc45 	bl	ea28 <mem_acquire>
   1219e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   121a0:	4648      	mov	r0, r9
		if (!link) {
   121a2:	f1ba 0f00 	cmp.w	sl, #0
   121a6:	d05d      	beq.n	12264 <ll_rx_mem_release+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   121a8:	f7fc fc3e 	bl	ea28 <mem_acquire>
		if (!rx) {
   121ac:	2800      	cmp	r0, #0
   121ae:	d055      	beq.n	1225c <ll_rx_mem_release+0x17c>
		link->mem = NULL;
   121b0:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   121b4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   121b8:	78e9      	ldrb	r1, [r5, #3]
   121ba:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   121bc:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   121be:	fb01 5202 	mla	r2, r1, r2, r5
   121c2:	3b01      	subs	r3, #1
   121c4:	b2db      	uxtb	r3, r3
   121c6:	6050      	str	r0, [r2, #4]
   121c8:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   121ca:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   121cc:	2b00      	cmp	r3, #0
   121ce:	d1da      	bne.n	12186 <ll_rx_mem_release+0xa6>
}
   121d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   121d4:	f240 3351 	movw	r3, #849	; 0x351
   121d8:	4642      	mov	r2, r8
   121da:	4651      	mov	r1, sl
   121dc:	4638      	mov	r0, r7
   121de:	f00a f915 	bl	1c40c <printk>
   121e2:	4040      	eors	r0, r0
   121e4:	f380 8811 	msr	BASEPRI, r0
   121e8:	f04f 0003 	mov.w	r0, #3
   121ec:	df02      	svc	2
	while (rx) {
   121ee:	2c00      	cmp	r4, #0
   121f0:	d182      	bne.n	120f8 <ll_rx_mem_release+0x18>
   121f2:	e7bd      	b.n	12170 <ll_rx_mem_release+0x90>
			conn = ll_conn_get(rx_free->handle);
   121f4:	88e8      	ldrh	r0, [r5, #6]
   121f6:	f001 fafd 	bl	137f4 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   121fa:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   121fc:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   121fe:	b163      	cbz	r3, 1221a <ll_rx_mem_release+0x13a>
   12200:	4944      	ldr	r1, [pc, #272]	; (12314 <ll_rx_mem_release+0x234>)
   12202:	f44f 7351 	mov.w	r3, #836	; 0x344
   12206:	4642      	mov	r2, r8
   12208:	4638      	mov	r0, r7
   1220a:	f00a f8ff 	bl	1c40c <printk>
   1220e:	4040      	eors	r0, r0
   12210:	f380 8811 	msr	BASEPRI, r0
   12214:	f04f 0003 	mov.w	r0, #3
   12218:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   1221a:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   1221e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   12222:	f7fc fc5b 	bl	eadc <memq_deinit>
			LL_ASSERT(link);
   12226:	4683      	mov	fp, r0
   12228:	2800      	cmp	r0, #0
   1222a:	d052      	beq.n	122d2 <ll_rx_mem_release+0x1f2>
			conn->lll.link_tx_free = link;
   1222c:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
   12230:	4628      	mov	r0, r5
   12232:	f001 fad1 	bl	137d8 <ll_conn_release>
	while (rx) {
   12236:	2c00      	cmp	r4, #0
   12238:	f47f af5e 	bne.w	120f8 <ll_rx_mem_release+0x18>
   1223c:	e798      	b.n	12170 <ll_rx_mem_release+0x90>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1223e:	4936      	ldr	r1, [pc, #216]	; (12318 <ll_rx_mem_release+0x238>)
   12240:	f240 335d 	movw	r3, #861	; 0x35d
   12244:	4642      	mov	r2, r8
   12246:	4638      	mov	r0, r7
   12248:	f00a f8e0 	bl	1c40c <printk>
   1224c:	4040      	eors	r0, r0
   1224e:	f380 8811 	msr	BASEPRI, r0
   12252:	f04f 0003 	mov.w	r0, #3
   12256:	df02      	svc	2
   12258:	7833      	ldrb	r3, [r6, #0]
   1225a:	e781      	b.n	12160 <ll_rx_mem_release+0x80>
			mem_release(link, &mem_link_rx.free);
   1225c:	492f      	ldr	r1, [pc, #188]	; (1231c <ll_rx_mem_release+0x23c>)
   1225e:	4650      	mov	r0, sl
   12260:	f7fc fbfc 	bl	ea5c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   12264:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12266:	1e5f      	subs	r7, r3, #1
   12268:	b2ff      	uxtb	r7, r7
   1226a:	2b00      	cmp	r3, #0
   1226c:	d0b0      	beq.n	121d0 <ll_rx_mem_release+0xf0>
   1226e:	4d2c      	ldr	r5, [pc, #176]	; (12320 <ll_rx_mem_release+0x240>)
		link = mem_acquire(&mem_link_rx.free);
   12270:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1231c <ll_rx_mem_release+0x23c>
   12274:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12276:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1230c <ll_rx_mem_release+0x22c>
	if (last == count) {
   1227a:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1227c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1227e:	3401      	adds	r4, #1
   12280:	b2e4      	uxtb	r4, r4
		last = 0U;
   12282:	42a2      	cmp	r2, r4
   12284:	bf08      	it	eq
   12286:	2400      	moveq	r4, #0
	if (last == first) {
   12288:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1228a:	4640      	mov	r0, r8
   1228c:	d0a0      	beq.n	121d0 <ll_rx_mem_release+0xf0>
   1228e:	f7fc fbcb 	bl	ea28 <mem_acquire>
   12292:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12294:	4648      	mov	r0, r9
		if (!link) {
   12296:	f1ba 0f00 	cmp.w	sl, #0
   1229a:	d099      	beq.n	121d0 <ll_rx_mem_release+0xf0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1229c:	f7fc fbc4 	bl	ea28 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   122a0:	3f01      	subs	r7, #1
   122a2:	b2ff      	uxtb	r7, r7
		if (!rx) {
   122a4:	b318      	cbz	r0, 122ee <ll_rx_mem_release+0x20e>
		rx->link = link;
   122a6:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   122aa:	78e9      	ldrb	r1, [r5, #3]
   122ac:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   122ae:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   122b0:	fb01 5202 	mla	r2, r1, r2, r5
   122b4:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   122b6:	2fff      	cmp	r7, #255	; 0xff
   122b8:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   122ba:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   122bc:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   122be:	d1dc      	bne.n	1227a <ll_rx_mem_release+0x19a>
   122c0:	e786      	b.n	121d0 <ll_rx_mem_release+0xf0>
				mem_release(rx_free, &mem_pdu_rx.free);
   122c2:	4912      	ldr	r1, [pc, #72]	; (1230c <ll_rx_mem_release+0x22c>)
   122c4:	4628      	mov	r0, r5
   122c6:	f7fc fbc9 	bl	ea5c <mem_release>
	while (rx) {
   122ca:	2c00      	cmp	r4, #0
   122cc:	f47f af14 	bne.w	120f8 <ll_rx_mem_release+0x18>
   122d0:	e74e      	b.n	12170 <ll_rx_mem_release+0x90>
			LL_ASSERT(link);
   122d2:	4914      	ldr	r1, [pc, #80]	; (12324 <ll_rx_mem_release+0x244>)
   122d4:	f240 3347 	movw	r3, #839	; 0x347
   122d8:	4642      	mov	r2, r8
   122da:	4638      	mov	r0, r7
   122dc:	f00a f896 	bl	1c40c <printk>
   122e0:	4040      	eors	r0, r0
   122e2:	f380 8811 	msr	BASEPRI, r0
   122e6:	f04f 0003 	mov.w	r0, #3
   122ea:	df02      	svc	2
   122ec:	e79e      	b.n	1222c <ll_rx_mem_release+0x14c>
			mem_release(link, &mem_link_rx.free);
   122ee:	4650      	mov	r0, sl
   122f0:	490a      	ldr	r1, [pc, #40]	; (1231c <ll_rx_mem_release+0x23c>)
}
   122f2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   122f6:	f7fc bbb1 	b.w	ea5c <mem_release>
   122fa:	bf00      	nop
   122fc:	20000afc 	.word	0x20000afc
   12300:	00021ce0 	.word	0x00021ce0
   12304:	0002200c 	.word	0x0002200c
   12308:	00022018 	.word	0x00022018
   1230c:	20000b54 	.word	0x20000b54
   12310:	20005bcc 	.word	0x20005bcc
   12314:	0002203c 	.word	0x0002203c
   12318:	00021f94 	.word	0x00021f94
   1231c:	20000b00 	.word	0x20000b00
   12320:	20005be0 	.word	0x20005be0
   12324:	000221ec 	.word	0x000221ec
   12328:	00021f1c 	.word	0x00021f1c
   1232c:	00021c84 	.word	0x00021c84

00012330 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   12330:	4801      	ldr	r0, [pc, #4]	; (12338 <ll_rx_link_alloc+0x8>)
   12332:	f7fc bb79 	b.w	ea28 <mem_acquire>
   12336:	bf00      	nop
   12338:	20000b00 	.word	0x20000b00

0001233c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1233c:	4901      	ldr	r1, [pc, #4]	; (12344 <ll_rx_link_release+0x8>)
   1233e:	f7fc bb8d 	b.w	ea5c <mem_release>
   12342:	bf00      	nop
   12344:	20000b00 	.word	0x20000b00

00012348 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   12348:	4801      	ldr	r0, [pc, #4]	; (12350 <ll_rx_alloc+0x8>)
   1234a:	f7fc bb6d 	b.w	ea28 <mem_acquire>
   1234e:	bf00      	nop
   12350:	20000b54 	.word	0x20000b54

00012354 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   12354:	4901      	ldr	r1, [pc, #4]	; (1235c <ll_rx_release+0x8>)
   12356:	f7fc bb81 	b.w	ea5c <mem_release>
   1235a:	bf00      	nop
   1235c:	20000b54 	.word	0x20000b54

00012360 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12360:	4b02      	ldr	r3, [pc, #8]	; (1236c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12362:	4a03      	ldr	r2, [pc, #12]	; (12370 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12364:	78db      	ldrb	r3, [r3, #3]
   12366:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12368:	f7fc bbc2 	b.w	eaf0 <memq_enqueue>
   1236c:	20005d1c 	.word	0x20005d1c
   12370:	20000dbc 	.word	0x20000dbc

00012374 <ll_rx_sched>:
	k_sem_give(sem_recv);
   12374:	4b01      	ldr	r3, [pc, #4]	; (1237c <ll_rx_sched+0x8>)
   12376:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   12378:	f009 ba1a 	b.w	1b7b0 <z_impl_k_sem_give>
   1237c:	20000dc8 	.word	0x20000dc8

00012380 <ll_pdu_rx_alloc_peek>:
{
   12380:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   12382:	4b0d      	ldr	r3, [pc, #52]	; (123b8 <ll_pdu_rx_alloc_peek+0x38>)
   12384:	789a      	ldrb	r2, [r3, #2]
   12386:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   12388:	42a2      	cmp	r2, r4
   1238a:	d809      	bhi.n	123a0 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   1238c:	1aa1      	subs	r1, r4, r2
   1238e:	b2c9      	uxtb	r1, r1
   12390:	4288      	cmp	r0, r1
   12392:	d802      	bhi.n	1239a <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   12394:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   12396:	7819      	ldrb	r1, [r3, #0]
   12398:	d109      	bne.n	123ae <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   1239a:	2000      	movs	r0, #0
}
   1239c:	bc10      	pop	{r4}
   1239e:	4770      	bx	lr
		return count - first + last;
   123a0:	7859      	ldrb	r1, [r3, #1]
   123a2:	1a89      	subs	r1, r1, r2
   123a4:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   123a6:	b2c9      	uxtb	r1, r1
   123a8:	4288      	cmp	r0, r1
   123aa:	d8f6      	bhi.n	1239a <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   123ac:	7819      	ldrb	r1, [r3, #0]
}
   123ae:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   123b0:	fb02 3301 	mla	r3, r2, r1, r3
   123b4:	6858      	ldr	r0, [r3, #4]
   123b6:	4770      	bx	lr
   123b8:	20005bcc 	.word	0x20005bcc

000123bc <ll_pdu_rx_alloc>:
{
   123bc:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   123be:	4b0a      	ldr	r3, [pc, #40]	; (123e8 <ll_pdu_rx_alloc+0x2c>)
	u8_t _first = *first; /* Copy read-index */
   123c0:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   123c2:	78da      	ldrb	r2, [r3, #3]
   123c4:	7818      	ldrb	r0, [r3, #0]
   123c6:	785c      	ldrb	r4, [r3, #1]
   123c8:	428a      	cmp	r2, r1
   123ca:	d00a      	beq.n	123e2 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   123cc:	1c4a      	adds	r2, r1, #1
   123ce:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   123d0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   123d4:	4294      	cmp	r4, r2
   123d6:	bf08      	it	eq
   123d8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   123da:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   123dc:	709a      	strb	r2, [r3, #2]
}
   123de:	bc10      	pop	{r4}
   123e0:	4770      	bx	lr
		return NULL;
   123e2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   123e4:	e7fb      	b.n	123de <ll_pdu_rx_alloc+0x22>
   123e6:	bf00      	nop
   123e8:	20005bcc 	.word	0x20005bcc

000123ec <ll_tx_ack_put>:
{
   123ec:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   123ee:	4a13      	ldr	r2, [pc, #76]	; (1243c <ll_tx_ack_put+0x50>)
   123f0:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   123f2:	7855      	ldrb	r5, [r2, #1]
   123f4:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   123f6:	1c73      	adds	r3, r6, #1
   123f8:	b2db      	uxtb	r3, r3
		last = 0U;
   123fa:	429d      	cmp	r5, r3
   123fc:	bf08      	it	eq
   123fe:	2300      	moveq	r3, #0
	if (last == first) {
   12400:	429c      	cmp	r4, r3
   12402:	d00a      	beq.n	1241a <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12404:	4615      	mov	r5, r2
   12406:	f815 4b04 	ldrb.w	r4, [r5], #4
   1240a:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   1240e:	192e      	adds	r6, r5, r4
   12410:	d003      	beq.n	1241a <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   12412:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   12414:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   12416:	6071      	str	r1, [r6, #4]
}
   12418:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   1241a:	4a09      	ldr	r2, [pc, #36]	; (12440 <ll_tx_ack_put+0x54>)
   1241c:	4909      	ldr	r1, [pc, #36]	; (12444 <ll_tx_ack_put+0x58>)
   1241e:	480a      	ldr	r0, [pc, #40]	; (12448 <ll_tx_ack_put+0x5c>)
   12420:	f240 33a7 	movw	r3, #935	; 0x3a7
   12424:	f009 fff2 	bl	1c40c <printk>
   12428:	4040      	eors	r0, r0
   1242a:	f380 8811 	msr	BASEPRI, r0
   1242e:	f04f 0003 	mov.w	r0, #3
   12432:	df02      	svc	2
	tx->handle = handle;
   12434:	2300      	movs	r3, #0
   12436:	801b      	strh	r3, [r3, #0]
   12438:	deff      	udf	#255	; 0xff
   1243a:	bf00      	nop
   1243c:	20005d1c 	.word	0x20005d1c
   12440:	00021f1c 	.word	0x00021f1c
   12444:	000221e0 	.word	0x000221e0
   12448:	00021ce0 	.word	0x00021ce0

0001244c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1244c:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1244e:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   12450:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   12452:	700b      	strb	r3, [r1, #0]
}
   12454:	4770      	bx	lr
   12456:	bf00      	nop

00012458 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   12458:	2200      	movs	r2, #0
{
   1245a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1245c:	4611      	mov	r1, r2
   1245e:	4b0a      	ldr	r3, [pc, #40]	; (12488 <ll_radio_state_abort+0x30>)
   12460:	2001      	movs	r0, #1
   12462:	f7fc fbb9 	bl	ebd8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12466:	b900      	cbnz	r0, 1246a <ll_radio_state_abort+0x12>
}
   12468:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1246a:	4a08      	ldr	r2, [pc, #32]	; (1248c <ll_radio_state_abort+0x34>)
   1246c:	4908      	ldr	r1, [pc, #32]	; (12490 <ll_radio_state_abort+0x38>)
   1246e:	4809      	ldr	r0, [pc, #36]	; (12494 <ll_radio_state_abort+0x3c>)
   12470:	f240 33bf 	movw	r3, #959	; 0x3bf
   12474:	f009 ffca 	bl	1c40c <printk>
   12478:	4040      	eors	r0, r0
   1247a:	f380 8811 	msr	BASEPRI, r0
   1247e:	f04f 0003 	mov.w	r0, #3
   12482:	df02      	svc	2
}
   12484:	bd08      	pop	{r3, pc}
   12486:	bf00      	nop
   12488:	20005d50 	.word	0x20005d50
   1248c:	00021f1c 	.word	0x00021f1c
   12490:	00021f64 	.word	0x00021f64
   12494:	00021ce0 	.word	0x00021ce0

00012498 <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
   12498:	6008      	str	r0, [r1, #0]
   1249a:	4801      	ldr	r0, [pc, #4]	; (124a0 <ull_ticker_status_give+0x8>)
   1249c:	f009 b988 	b.w	1b7b0 <z_impl_k_sem_give>
   124a0:	20000dcc 	.word	0x20000dcc

000124a4 <ull_ticker_status_take>:
{
   124a4:	b510      	push	{r4, lr}
   124a6:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   124a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   124ac:	4802      	ldr	r0, [pc, #8]	; (124b8 <ull_ticker_status_take+0x14>)
   124ae:	f009 f9a5 	bl	1b7fc <z_impl_k_sem_take>
	return *ret_cb;
   124b2:	6820      	ldr	r0, [r4, #0]
}
   124b4:	bd10      	pop	{r4, pc}
   124b6:	bf00      	nop
   124b8:	20000dcc 	.word	0x20000dcc

000124bc <ull_disable_mark>:
	if (!*m) {
   124bc:	4a04      	ldr	r2, [pc, #16]	; (124d0 <ull_disable_mark+0x14>)
   124be:	6813      	ldr	r3, [r2, #0]
   124c0:	b10b      	cbz	r3, 124c6 <ull_disable_mark+0xa>
}
   124c2:	4618      	mov	r0, r3
   124c4:	4770      	bx	lr
		*m = param;
   124c6:	4603      	mov	r3, r0
   124c8:	6010      	str	r0, [r2, #0]
}
   124ca:	4618      	mov	r0, r3
   124cc:	4770      	bx	lr
   124ce:	bf00      	nop
   124d0:	20000a2c 	.word	0x20000a2c

000124d4 <ull_disable_unmark>:
	if (*m && *m == param) {
   124d4:	4a04      	ldr	r2, [pc, #16]	; (124e8 <ull_disable_unmark+0x14>)
   124d6:	6813      	ldr	r3, [r2, #0]
   124d8:	b123      	cbz	r3, 124e4 <ull_disable_unmark+0x10>
   124da:	4298      	cmp	r0, r3
		*m = NULL;
   124dc:	bf06      	itte	eq
   124de:	2100      	moveq	r1, #0
   124e0:	6011      	streq	r1, [r2, #0]
	return NULL;
   124e2:	2300      	movne	r3, #0
}
   124e4:	4618      	mov	r0, r3
   124e6:	4770      	bx	lr
   124e8:	20000a2c 	.word	0x20000a2c

000124ec <ull_disable_mark_get>:
	return mark_get(mark_disable);
   124ec:	4b01      	ldr	r3, [pc, #4]	; (124f4 <ull_disable_mark_get+0x8>)
}
   124ee:	6818      	ldr	r0, [r3, #0]
   124f0:	4770      	bx	lr
   124f2:	bf00      	nop
   124f4:	20000a2c 	.word	0x20000a2c

000124f8 <ull_update_mark>:
	if (!*m) {
   124f8:	4a04      	ldr	r2, [pc, #16]	; (1250c <ull_update_mark+0x14>)
   124fa:	6813      	ldr	r3, [r2, #0]
   124fc:	b10b      	cbz	r3, 12502 <ull_update_mark+0xa>
}
   124fe:	4618      	mov	r0, r3
   12500:	4770      	bx	lr
		*m = param;
   12502:	4603      	mov	r3, r0
   12504:	6010      	str	r0, [r2, #0]
}
   12506:	4618      	mov	r0, r3
   12508:	4770      	bx	lr
   1250a:	bf00      	nop
   1250c:	20000a30 	.word	0x20000a30

00012510 <ull_update_unmark>:
	if (*m && *m == param) {
   12510:	4a04      	ldr	r2, [pc, #16]	; (12524 <ull_update_unmark+0x14>)
   12512:	6813      	ldr	r3, [r2, #0]
   12514:	b123      	cbz	r3, 12520 <ull_update_unmark+0x10>
   12516:	4298      	cmp	r0, r3
		*m = NULL;
   12518:	bf06      	itte	eq
   1251a:	2100      	moveq	r1, #0
   1251c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1251e:	2300      	movne	r3, #0
}
   12520:	4618      	mov	r0, r3
   12522:	4770      	bx	lr
   12524:	20000a30 	.word	0x20000a30

00012528 <ull_update_mark_get>:
	return mark_get(mark_update);
   12528:	4b01      	ldr	r3, [pc, #4]	; (12530 <ull_update_mark_get+0x8>)
}
   1252a:	6818      	ldr	r0, [r3, #0]
   1252c:	4770      	bx	lr
   1252e:	bf00      	nop
   12530:	20000a30 	.word	0x20000a30

00012534 <ull_disable>:
{
   12534:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   12536:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   12538:	f115 0f10 	cmn.w	r5, #16
{
   1253c:	b087      	sub	sp, #28
	if (!hdr) {
   1253e:	d00b      	beq.n	12558 <ull_disable+0x24>
	compiler_barrier();
   12540:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   12542:	2201      	movs	r2, #1
   12544:	4668      	mov	r0, sp
   12546:	2100      	movs	r1, #0
   12548:	f00e fa06 	bl	20958 <z_impl_k_sem_init>
	if (!hdr->ref) {
   1254c:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   1254e:	4a12      	ldr	r2, [pc, #72]	; (12598 <ull_disable+0x64>)
	hdr->disabled_param = &sem;
   12550:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   12554:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   12556:	b913      	cbnz	r3, 1255e <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   12558:	2000      	movs	r0, #0
}
   1255a:	b007      	add	sp, #28
   1255c:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   1255e:	4b0f      	ldr	r3, [pc, #60]	; (1259c <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   12560:	2200      	movs	r2, #0
   12562:	4611      	mov	r1, r2
   12564:	2003      	movs	r0, #3
	mfy.param = lll;
   12566:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   12568:	f7fc fb36 	bl	ebd8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1256c:	b930      	cbnz	r0, 1257c <ull_disable+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1256e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12572:	4668      	mov	r0, sp
   12574:	f009 f942 	bl	1b7fc <z_impl_k_sem_take>
}
   12578:	b007      	add	sp, #28
   1257a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1257c:	4a08      	ldr	r2, [pc, #32]	; (125a0 <ull_disable+0x6c>)
   1257e:	4909      	ldr	r1, [pc, #36]	; (125a4 <ull_disable+0x70>)
   12580:	4809      	ldr	r0, [pc, #36]	; (125a8 <ull_disable+0x74>)
   12582:	f240 4312 	movw	r3, #1042	; 0x412
   12586:	f009 ff41 	bl	1c40c <printk>
   1258a:	4040      	eors	r0, r0
   1258c:	f380 8811 	msr	BASEPRI, r0
   12590:	f04f 0003 	mov.w	r0, #3
   12594:	df02      	svc	2
   12596:	e7ea      	b.n	1256e <ull_disable+0x3a>
   12598:	0001138d 	.word	0x0001138d
   1259c:	20005d60 	.word	0x20005d60
   125a0:	00021f1c 	.word	0x00021f1c
   125a4:	00021f64 	.word	0x00021f64
   125a8:	00021ce0 	.word	0x00021ce0

000125ac <ull_pdu_rx_alloc_peek>:
{
   125ac:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   125ae:	4b0d      	ldr	r3, [pc, #52]	; (125e4 <ull_pdu_rx_alloc_peek+0x38>)
   125b0:	789a      	ldrb	r2, [r3, #2]
   125b2:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   125b4:	42a2      	cmp	r2, r4
   125b6:	d809      	bhi.n	125cc <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   125b8:	1aa1      	subs	r1, r4, r2
   125ba:	b2c9      	uxtb	r1, r1
   125bc:	4288      	cmp	r0, r1
   125be:	d802      	bhi.n	125c6 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   125c0:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   125c2:	7819      	ldrb	r1, [r3, #0]
   125c4:	d109      	bne.n	125da <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   125c6:	2000      	movs	r0, #0
}
   125c8:	bc10      	pop	{r4}
   125ca:	4770      	bx	lr
		return count - first + last;
   125cc:	7859      	ldrb	r1, [r3, #1]
   125ce:	1a89      	subs	r1, r1, r2
   125d0:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   125d2:	b2c9      	uxtb	r1, r1
   125d4:	4288      	cmp	r0, r1
   125d6:	d8f6      	bhi.n	125c6 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   125d8:	7819      	ldrb	r1, [r3, #0]
}
   125da:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   125dc:	fb02 3301 	mla	r3, r2, r1, r3
   125e0:	6858      	ldr	r0, [r3, #4]
   125e2:	4770      	bx	lr
   125e4:	20005be0 	.word	0x20005be0

000125e8 <ull_pdu_rx_alloc>:
{
   125e8:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   125ea:	4b0a      	ldr	r3, [pc, #40]	; (12614 <ull_pdu_rx_alloc+0x2c>)
	u8_t _first = *first; /* Copy read-index */
   125ec:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   125ee:	78da      	ldrb	r2, [r3, #3]
   125f0:	7818      	ldrb	r0, [r3, #0]
   125f2:	785c      	ldrb	r4, [r3, #1]
   125f4:	428a      	cmp	r2, r1
   125f6:	d00a      	beq.n	1260e <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   125f8:	1c4a      	adds	r2, r1, #1
   125fa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   125fc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   12600:	4294      	cmp	r4, r2
   12602:	bf08      	it	eq
   12604:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   12606:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12608:	709a      	strb	r2, [r3, #2]
}
   1260a:	bc10      	pop	{r4}
   1260c:	4770      	bx	lr
		return NULL;
   1260e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   12610:	e7fb      	b.n	1260a <ull_pdu_rx_alloc+0x22>
   12612:	bf00      	nop
   12614:	20005be0 	.word	0x20005be0

00012618 <ull_rx_put>:
{
   12618:	b538      	push	{r3, r4, r5, lr}
   1261a:	460c      	mov	r4, r1
   1261c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1261e:	f003 fbdb 	bl	15dd8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12622:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12624:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12626:	4a03      	ldr	r2, [pc, #12]	; (12634 <ull_rx_put+0x1c>)
   12628:	4628      	mov	r0, r5
}
   1262a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1262e:	f7fc ba5f 	b.w	eaf0 <memq_enqueue>
   12632:	bf00      	nop
   12634:	20000dc4 	.word	0x20000dc4

00012638 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   12638:	2201      	movs	r2, #1
   1263a:	4b02      	ldr	r3, [pc, #8]	; (12644 <ull_rx_sched+0xc>)
   1263c:	4611      	mov	r1, r2
   1263e:	2000      	movs	r0, #0
   12640:	f7fc baca 	b.w	ebd8 <mayfly_enqueue>
   12644:	20005d70 	.word	0x20005d70

00012648 <ull_prepare_enqueue>:
{
   12648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1264c:	4e19      	ldr	r6, [pc, #100]	; (126b4 <ull_prepare_enqueue+0x6c>)
{
   1264e:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12652:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   12654:	7877      	ldrb	r7, [r6, #1]
   12656:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   1265a:	1c65      	adds	r5, r4, #1
   1265c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1265e:	42af      	cmp	r7, r5
   12660:	bf08      	it	eq
   12662:	2500      	moveq	r5, #0
	if (last == first) {
   12664:	45ac      	cmp	ip, r5
   12666:	d021      	beq.n	126ac <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12668:	4699      	mov	r9, r3
   1266a:	4633      	mov	r3, r6
   1266c:	460f      	mov	r7, r1
   1266e:	4611      	mov	r1, r2
   12670:	f813 2b04 	ldrb.w	r2, [r3], #4
   12674:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   12678:	b1c4      	cbz	r4, 126ac <ull_prepare_enqueue+0x64>
   1267a:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1267c:	2210      	movs	r2, #16
   1267e:	4620      	mov	r0, r4
   12680:	f00b ff32 	bl	1e4e8 <memcpy>
	e->is_resume = is_resume;
   12684:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   12688:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   1268c:	f00a 0a01 	and.w	sl, sl, #1
   12690:	f022 0303 	bic.w	r3, r2, #3
   12694:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   12698:	9a08      	ldr	r2, [sp, #32]
   1269a:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   1269c:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   126a0:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   126a2:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   126a6:	2000      	movs	r0, #0
}
   126a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   126ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   126b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   126b4:	20005bf8 	.word	0x20005bf8

000126b8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   126b8:	4b05      	ldr	r3, [pc, #20]	; (126d0 <ull_prepare_dequeue_get+0x18>)
   126ba:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   126bc:	78d9      	ldrb	r1, [r3, #3]
   126be:	7818      	ldrb	r0, [r3, #0]
   126c0:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   126c2:	bf1a      	itte	ne
   126c4:	3304      	addne	r3, #4
   126c6:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   126ca:	2000      	moveq	r0, #0
}
   126cc:	4770      	bx	lr
   126ce:	bf00      	nop
   126d0:	20005bf8 	.word	0x20005bf8

000126d4 <ull_prepare_dequeue_iter>:
{
   126d4:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   126d6:	4b0c      	ldr	r3, [pc, #48]	; (12708 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   126d8:	7802      	ldrb	r2, [r0, #0]
   126da:	785c      	ldrb	r4, [r3, #1]
   126dc:	78dd      	ldrb	r5, [r3, #3]
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	4294      	cmp	r4, r2
   126e2:	bf9c      	itt	ls
   126e4:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   126e6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   126e8:	4295      	cmp	r5, r2
   126ea:	d00a      	beq.n	12702 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   126ec:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   126ee:	4d07      	ldr	r5, [pc, #28]	; (1270c <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   126f0:	b2db      	uxtb	r3, r3
		i = 0U;
   126f2:	429c      	cmp	r4, r3
   126f4:	bf08      	it	eq
   126f6:	2300      	moveq	r3, #0
	*idx = i;
   126f8:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   126fa:	fb02 5001 	mla	r0, r2, r1, r5
}
   126fe:	bc30      	pop	{r4, r5}
   12700:	4770      	bx	lr
		return NULL;
   12702:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   12704:	e7fb      	b.n	126fe <ull_prepare_dequeue_iter+0x2a>
   12706:	bf00      	nop
   12708:	20005bf8 	.word	0x20005bf8
   1270c:	20005bfc 	.word	0x20005bfc

00012710 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   12710:	4b06      	ldr	r3, [pc, #24]	; (1272c <ull_event_done_extra_get+0x1c>)
   12712:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   12714:	78d8      	ldrb	r0, [r3, #3]
   12716:	781a      	ldrb	r2, [r3, #0]
   12718:	4288      	cmp	r0, r1
   1271a:	d005      	beq.n	12728 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1271c:	fb01 3302 	mla	r3, r1, r2, r3
   12720:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   12722:	b110      	cbz	r0, 1272a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   12724:	3024      	adds	r0, #36	; 0x24
   12726:	4770      	bx	lr
		return NULL;
   12728:	2000      	movs	r0, #0
}
   1272a:	4770      	bx	lr
   1272c:	20005bb8 	.word	0x20005bb8

00012730 <ull_event_done>:
{
   12730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   12732:	4a14      	ldr	r2, [pc, #80]	; (12784 <ull_event_done+0x54>)
	u8_t _first = *first; /* Copy read-index */
   12734:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   12736:	78d4      	ldrb	r4, [r2, #3]
   12738:	7811      	ldrb	r1, [r2, #0]
   1273a:	7855      	ldrb	r5, [r2, #1]
   1273c:	429c      	cmp	r4, r3
   1273e:	d01f      	beq.n	12780 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   12740:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   12744:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   12746:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   12748:	b2db      	uxtb	r3, r3
		_first = 0U;
   1274a:	429d      	cmp	r5, r3
   1274c:	bf08      	it	eq
   1274e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12750:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   12752:	b19c      	cbz	r4, 1277c <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   12754:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   12756:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   12758:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   1275a:	6220      	str	r0, [r4, #32]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1275c:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   1275e:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12760:	f003 fb3a 	bl	15dd8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12764:	4a08      	ldr	r2, [pc, #32]	; (12788 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12766:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12768:	4621      	mov	r1, r4
   1276a:	4638      	mov	r0, r7
   1276c:	f7fc f9c0 	bl	eaf0 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   12770:	4b06      	ldr	r3, [pc, #24]	; (1278c <ull_event_done+0x5c>)
   12772:	4630      	mov	r0, r6
   12774:	462a      	mov	r2, r5
   12776:	4629      	mov	r1, r5
   12778:	f7fc fa2e 	bl	ebd8 <mayfly_enqueue>
}
   1277c:	4620      	mov	r0, r4
   1277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   12780:	2400      	movs	r4, #0
   12782:	e7fb      	b.n	1277c <ull_event_done+0x4c>
   12784:	20005bb8 	.word	0x20005bb8
   12788:	20000dc4 	.word	0x20000dc4
   1278c:	20005d70 	.word	0x20005d70

00012790 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CONN */

#if defined(CONFIG_BT_CONN)
u8_t lll_chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		    u8_t chan_count)
{
   12790:	b470      	push	{r4, r5, r6}
   12792:	4605      	mov	r5, r0
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12794:	7800      	ldrb	r0, [r0, #0]
   12796:	4c1b      	ldr	r4, [pc, #108]	; (12804 <lll_chan_sel_1+0x74>)
   12798:	fb02 1101 	mla	r1, r2, r1, r1
   1279c:	180a      	adds	r2, r1, r0
   1279e:	fb84 0102 	smull	r0, r1, r4, r2
   127a2:	4411      	add	r1, r2
   127a4:	1149      	asrs	r1, r1, #5
   127a6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   127aa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   127ae:	1a51      	subs	r1, r2, r1
   127b0:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   127b2:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   127b4:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   127b6:	5c9c      	ldrb	r4, [r3, r2]
{
   127b8:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   127bc:	f001 0107 	and.w	r1, r1, #7
   127c0:	410c      	asrs	r4, r1
   127c2:	f014 0401 	ands.w	r4, r4, #1
   127c6:	d11b      	bne.n	12800 <lll_chan_sel_1+0x70>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
   127c8:	fbb0 f2f5 	udiv	r2, r0, r5
   127cc:	fb05 0212 	mls	r2, r5, r2, r0
   127d0:	b2d2      	uxtb	r2, r2
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   127d2:	1e5d      	subs	r5, r3, #1
   127d4:	1d1e      	adds	r6, r3, #4
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
   127d6:	f104 0108 	add.w	r1, r4, #8
   127da:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   127de:	4620      	mov	r0, r4
   127e0:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   127e2:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   127e6:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   127ea:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   127ee:	d002      	beq.n	127f6 <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   127f0:	b132      	cbz	r2, 12800 <lll_chan_sel_1+0x70>
				chan_index--;
   127f2:	3a01      	subs	r2, #1
   127f4:	b2d2      	uxtb	r2, r2
			chan_next++;
   127f6:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   127f8:	4284      	cmp	r4, r0
   127fa:	d1f2      	bne.n	127e2 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   127fc:	42b5      	cmp	r5, r6
   127fe:	d1ea      	bne.n	127d6 <lll_chan_sel_1+0x46>
}
   12800:	bc70      	pop	{r4, r5, r6}
   12802:	4770      	bx	lr
   12804:	dd67c8a7 	.word	0xdd67c8a7

00012808 <lll_chan_sel_2>:
{
   12808:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static u8_t chan_rev_8(u8_t b)
{
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   1280a:	4f2f      	ldr	r7, [pc, #188]	; (128c8 <lll_chan_sel_2+0xc0>)
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1280c:	4e2f      	ldr	r6, [pc, #188]	; (128cc <lll_chan_sel_2+0xc4>)
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
   1280e:	ea80 0501 	eor.w	r5, r0, r1
   12812:	2403      	movs	r4, #3
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   12814:	0a28      	lsrs	r0, r5, #8
   12816:	b2ed      	uxtb	r5, r5
   12818:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   1281c:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   12820:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   12824:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   12828:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1282c:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
   12830:	ea4c 0c0e 	orr.w	ip, ip, lr
   12834:	4328      	orrs	r0, r5
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   12836:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   1283a:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   1283e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   12842:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   12846:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1284a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1284e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((u32_t)a * 17U + b) & 0xFFFF;
   12852:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   12856:	3c01      	subs	r4, #1
   12858:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1285a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((u32_t)a * 17U + b) & 0xFFFF;
   1285e:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   12860:	d1d8      	bne.n	12814 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   12862:	481b      	ldr	r0, [pc, #108]	; (128d0 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   12864:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   12866:	fba0 5001 	umull	r5, r0, r0, r1
   1286a:	1a0d      	subs	r5, r1, r0
   1286c:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   12870:	0940      	lsrs	r0, r0, #5
   12872:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   12876:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1287a:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1287c:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   12880:	f000 0607 	and.w	r6, r0, #7
   12884:	5d55      	ldrb	r5, [r2, r5]
   12886:	4135      	asrs	r5, r6
   12888:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   1288a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1288c:	d41a      	bmi.n	128c4 <lll_chan_sel_2+0xbc>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   1288e:	fb01 f303 	mul.w	r3, r1, r3
   12892:	1e56      	subs	r6, r2, #1
   12894:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   12898:	3204      	adds	r2, #4
		bite = *chan_map;
   1289a:	f104 0508 	add.w	r5, r4, #8
   1289e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   128a2:	4620      	mov	r0, r4
   128a4:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   128a6:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   128aa:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   128ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   128b2:	d002      	beq.n	128ba <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   128b4:	b133      	cbz	r3, 128c4 <lll_chan_sel_2+0xbc>
				chan_index--;
   128b6:	3b01      	subs	r3, #1
   128b8:	b2db      	uxtb	r3, r3
			chan_next++;
   128ba:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   128bc:	42a0      	cmp	r0, r4
   128be:	d1f2      	bne.n	128a6 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   128c0:	42b2      	cmp	r2, r6
   128c2:	d1ea      	bne.n	1289a <lll_chan_sel_2+0x92>
}
   128c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128c6:	bf00      	nop
   128c8:	00022110 	.word	0x00022110
   128cc:	00088440 	.word	0x00088440
   128d0:	bacf914d 	.word	0xbacf914d

000128d4 <disabled_cb>:
{
   128d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   128d6:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   128d8:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
{
   128dc:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   128de:	b1f7      	cbz	r7, 1291e <disabled_cb+0x4a>
	LL_ASSERT(adv->node_rx_cc_free);
   128e0:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
	adv->link_cc_free = NULL;
   128e4:	2300      	movs	r3, #0
   128e6:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	LL_ASSERT(adv->node_rx_cc_free);
   128ea:	b374      	cbz	r4, 1294a <disabled_cb+0x76>
	adv->node_rx_cc_free = NULL;
   128ec:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   128ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   128f2:	2208      	movs	r2, #8
	adv->node_rx_cc_free = NULL;
   128f4:	f8c5 10d4 	str.w	r1, [r5, #212]	; 0xd4
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   128f8:	f104 0020 	add.w	r0, r4, #32
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   128fc:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   128fe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   12900:	221e      	movs	r2, #30
   12902:	f00b fe1c 	bl	1e53e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   12906:	233c      	movs	r3, #60	; 0x3c
	ftr->param = param;
   12908:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1290a:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1290c:	f884 3020 	strb.w	r3, [r4, #32]
	ll_rx_put(link, rx);
   12910:	4621      	mov	r1, r4
   12912:	f7ff fd25 	bl	12360 <ll_rx_put>
}
   12916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1291a:	f7ff bd2b 	b.w	12374 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1291e:	4a13      	ldr	r2, [pc, #76]	; (1296c <disabled_cb+0x98>)
   12920:	4913      	ldr	r1, [pc, #76]	; (12970 <disabled_cb+0x9c>)
   12922:	4814      	ldr	r0, [pc, #80]	; (12974 <disabled_cb+0xa0>)
   12924:	f240 43ad 	movw	r3, #1197	; 0x4ad
   12928:	f009 fd70 	bl	1c40c <printk>
   1292c:	4040      	eors	r0, r0
   1292e:	f380 8811 	msr	BASEPRI, r0
   12932:	f04f 0003 	mov.w	r0, #3
   12936:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   12938:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
   1293c:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   12940:	2300      	movs	r3, #0
   12942:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	LL_ASSERT(adv->node_rx_cc_free);
   12946:	2c00      	cmp	r4, #0
   12948:	d1d0      	bne.n	128ec <disabled_cb+0x18>
   1294a:	4a08      	ldr	r2, [pc, #32]	; (1296c <disabled_cb+0x98>)
   1294c:	490a      	ldr	r1, [pc, #40]	; (12978 <disabled_cb+0xa4>)
   1294e:	4809      	ldr	r0, [pc, #36]	; (12974 <disabled_cb+0xa0>)
   12950:	f240 43b1 	movw	r3, #1201	; 0x4b1
   12954:	f009 fd5a 	bl	1c40c <printk>
   12958:	4040      	eors	r0, r0
   1295a:	f380 8811 	msr	BASEPRI, r0
   1295e:	f04f 0003 	mov.w	r0, #3
   12962:	df02      	svc	2
   12964:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
   12968:	e7c0      	b.n	128ec <disabled_cb+0x18>
   1296a:	bf00      	nop
   1296c:	00022074 	.word	0x00022074
   12970:	000220b4 	.word	0x000220b4
   12974:	00021ce0 	.word	0x00021ce0
   12978:	000220c8 	.word	0x000220c8

0001297c <ticker_cb>:
{
   1297c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12980:	461c      	mov	r4, r3
	return ++hdr->ref;
   12982:	7c1b      	ldrb	r3, [r3, #16]
   12984:	3301      	adds	r3, #1
   12986:	b2db      	uxtb	r3, r3
   12988:	b08b      	sub	sp, #44	; 0x2c
   1298a:	4680      	mov	r8, r0
   1298c:	460f      	mov	r7, r1
   1298e:	4616      	mov	r6, r2
   12990:	7423      	strb	r3, [r4, #16]
	lll = &adv->lll;
   12992:	f104 091c 	add.w	r9, r4, #28
		LL_ASSERT(ref);
   12996:	b1bb      	cbz	r3, 129c8 <ticker_cb+0x4c>
		p.ticks_at_expire = ticks_at_expire;
   12998:	4d35      	ldr	r5, [pc, #212]	; (12a70 <ticker_cb+0xf4>)
		mfy.param = &p;
   1299a:	4b36      	ldr	r3, [pc, #216]	; (12a74 <ticker_cb+0xf8>)
		p.ticks_at_expire = ticks_at_expire;
   1299c:	f8c5 8000 	str.w	r8, [r5]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   129a0:	2200      	movs	r2, #0
   129a2:	4611      	mov	r1, r2
   129a4:	2001      	movs	r0, #1
		mfy.param = &p;
   129a6:	609d      	str	r5, [r3, #8]
		p.remainder = remainder;
   129a8:	606f      	str	r7, [r5, #4]
		p.lazy = lazy;
   129aa:	812e      	strh	r6, [r5, #8]
		p.param = lll;
   129ac:	f8c5 900c 	str.w	r9, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   129b0:	f7fc f912 	bl	ebd8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   129b4:	2800      	cmp	r0, #0
   129b6:	d14d      	bne.n	12a54 <ticker_cb+0xd8>
	if (!lll->is_hdcd)
   129b8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   129bc:	f015 0501 	ands.w	r5, r5, #1
   129c0:	d010      	beq.n	129e4 <ticker_cb+0x68>
}
   129c2:	b00b      	add	sp, #44	; 0x2c
   129c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(ref);
   129c8:	4a2b      	ldr	r2, [pc, #172]	; (12a78 <ticker_cb+0xfc>)
   129ca:	492c      	ldr	r1, [pc, #176]	; (12a7c <ticker_cb+0x100>)
   129cc:	482c      	ldr	r0, [pc, #176]	; (12a80 <ticker_cb+0x104>)
   129ce:	f240 4329 	movw	r3, #1065	; 0x429
   129d2:	f009 fd1b 	bl	1c40c <printk>
   129d6:	4040      	eors	r0, r0
   129d8:	f380 8811 	msr	BASEPRI, r0
   129dc:	f04f 0003 	mov.w	r0, #3
   129e0:	df02      	svc	2
   129e2:	e7d9      	b.n	12998 <ticker_cb+0x1c>
		lll_entropy_get(sizeof(random_delay), &random_delay);
   129e4:	a909      	add	r1, sp, #36	; 0x24
   129e6:	2004      	movs	r0, #4
   129e8:	f004 fe6e 	bl	176c8 <lll_entropy_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   129ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   129ee:	4925      	ldr	r1, [pc, #148]	; (12a84 <ticker_cb+0x108>)
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   129f0:	4a25      	ldr	r2, [pc, #148]	; (12a88 <ticker_cb+0x10c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   129f2:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   129f4:	fba1 3100 	umull	r3, r1, r1, r0
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   129f8:	1aa2      	subs	r2, r4, r2
   129fa:	4c24      	ldr	r4, [pc, #144]	; (12a8c <ticker_cb+0x110>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   129fc:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   129fe:	1a43      	subs	r3, r0, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12a00:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12a02:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12a06:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12a0a:	f240 1147 	movw	r1, #327	; 0x147
   12a0e:	0a1b      	lsrs	r3, r3, #8
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12a10:	0852      	lsrs	r2, r2, #1
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12a12:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   12a16:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12a18:	491d      	ldr	r1, [pc, #116]	; (12a90 <ticker_cb+0x114>)
   12a1a:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   12a1c:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12a1e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   12a22:	e9cd 5500 	strd	r5, r5, [sp]
   12a26:	4628      	mov	r0, r5
   12a28:	b2d2      	uxtb	r2, r2
   12a2a:	2101      	movs	r1, #1
		random_delay += 1;
   12a2c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12a2e:	f7fd f87b 	bl	fb28 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12a32:	f030 0302 	bics.w	r3, r0, #2
   12a36:	d0c4      	beq.n	129c2 <ticker_cb+0x46>
   12a38:	4a0f      	ldr	r2, [pc, #60]	; (12a78 <ticker_cb+0xfc>)
   12a3a:	4916      	ldr	r1, [pc, #88]	; (12a94 <ticker_cb+0x118>)
   12a3c:	4810      	ldr	r0, [pc, #64]	; (12a80 <ticker_cb+0x104>)
   12a3e:	f240 434b 	movw	r3, #1099	; 0x44b
   12a42:	f009 fce3 	bl	1c40c <printk>
   12a46:	4040      	eors	r0, r0
   12a48:	f380 8811 	msr	BASEPRI, r0
   12a4c:	f04f 0003 	mov.w	r0, #3
   12a50:	df02      	svc	2
}
   12a52:	e7b6      	b.n	129c2 <ticker_cb+0x46>
		LL_ASSERT(!ret);
   12a54:	4a08      	ldr	r2, [pc, #32]	; (12a78 <ticker_cb+0xfc>)
   12a56:	4910      	ldr	r1, [pc, #64]	; (12a98 <ticker_cb+0x11c>)
   12a58:	4809      	ldr	r0, [pc, #36]	; (12a80 <ticker_cb+0x104>)
   12a5a:	f240 4335 	movw	r3, #1077	; 0x435
   12a5e:	f009 fcd5 	bl	1c40c <printk>
   12a62:	4040      	eors	r0, r0
   12a64:	f380 8811 	msr	BASEPRI, r0
   12a68:	f04f 0003 	mov.w	r0, #3
   12a6c:	df02      	svc	2
   12a6e:	e7a3      	b.n	129b8 <ticker_cb+0x3c>
   12a70:	20001200 	.word	0x20001200
   12a74:	20005d90 	.word	0x20005d90
   12a78:	00022074 	.word	0x00022074
   12a7c:	000220e0 	.word	0x000220e0
   12a80:	00021ce0 	.word	0x00021ce0
   12a84:	90d4f121 	.word	0x90d4f121
   12a88:	2000111c 	.word	0x2000111c
   12a8c:	08fb823f 	.word	0x08fb823f
   12a90:	00012b3d 	.word	0x00012b3d
   12a94:	000220e4 	.word	0x000220e4
   12a98:	00021f64 	.word	0x00021f64

00012a9c <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   12a9c:	2800      	cmp	r0, #0
   12a9e:	d130      	bne.n	12b02 <ticker_op_stop_cb+0x66>
{
   12aa0:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
   12aa2:	4d1f      	ldr	r5, [pc, #124]	; (12b20 <ticker_op_stop_cb+0x84>)
	if (hdr->ref) {
   12aa4:	7c0a      	ldrb	r2, [r1, #16]
	mfy.param = &adv->lll;
   12aa6:	f101 031c 	add.w	r3, r1, #28
   12aaa:	460c      	mov	r4, r1
   12aac:	60ab      	str	r3, [r5, #8]
	if (hdr->ref) {
   12aae:	b1e2      	cbz	r2, 12aea <ticker_op_stop_cb+0x4e>
		LL_ASSERT(!hdr->disabled_cb);
   12ab0:	694a      	ldr	r2, [r1, #20]
   12ab2:	b16a      	cbz	r2, 12ad0 <ticker_op_stop_cb+0x34>
   12ab4:	4a1b      	ldr	r2, [pc, #108]	; (12b24 <ticker_op_stop_cb+0x88>)
   12ab6:	491c      	ldr	r1, [pc, #112]	; (12b28 <ticker_op_stop_cb+0x8c>)
   12ab8:	481c      	ldr	r0, [pc, #112]	; (12b2c <ticker_op_stop_cb+0x90>)
   12aba:	f240 4393 	movw	r3, #1171	; 0x493
   12abe:	f009 fca5 	bl	1c40c <printk>
   12ac2:	4040      	eors	r0, r0
   12ac4:	f380 8811 	msr	BASEPRI, r0
   12ac8:	f04f 0003 	mov.w	r0, #3
   12acc:	df02      	svc	2
   12ace:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   12ad0:	4917      	ldr	r1, [pc, #92]	; (12b30 <ticker_op_stop_cb+0x94>)
		mfy.fp = lll_disable;
   12ad2:	4818      	ldr	r0, [pc, #96]	; (12b34 <ticker_op_stop_cb+0x98>)
		hdr->disabled_param = mfy.param;
   12ad4:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12ad6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12ad8:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   12ada:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12adc:	4b10      	ldr	r3, [pc, #64]	; (12b20 <ticker_op_stop_cb+0x84>)
   12ade:	4611      	mov	r1, r2
   12ae0:	2002      	movs	r0, #2
   12ae2:	f7fc f879 	bl	ebd8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12ae6:	b968      	cbnz	r0, 12b04 <ticker_op_stop_cb+0x68>
}
   12ae8:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   12aea:	4b11      	ldr	r3, [pc, #68]	; (12b30 <ticker_op_stop_cb+0x94>)
   12aec:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12aee:	2101      	movs	r1, #1
   12af0:	462b      	mov	r3, r5
   12af2:	2002      	movs	r0, #2
   12af4:	f7fc f870 	bl	ebd8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12af8:	2800      	cmp	r0, #0
   12afa:	d0f5      	beq.n	12ae8 <ticker_op_stop_cb+0x4c>
   12afc:	f240 439f 	movw	r3, #1183	; 0x49f
   12b00:	e002      	b.n	12b08 <ticker_op_stop_cb+0x6c>
   12b02:	4770      	bx	lr
		LL_ASSERT(!ret);
   12b04:	f240 439a 	movw	r3, #1178	; 0x49a
		LL_ASSERT(!ret);
   12b08:	4a06      	ldr	r2, [pc, #24]	; (12b24 <ticker_op_stop_cb+0x88>)
   12b0a:	490b      	ldr	r1, [pc, #44]	; (12b38 <ticker_op_stop_cb+0x9c>)
   12b0c:	4807      	ldr	r0, [pc, #28]	; (12b2c <ticker_op_stop_cb+0x90>)
   12b0e:	f009 fc7d 	bl	1c40c <printk>
   12b12:	4040      	eors	r0, r0
   12b14:	f380 8811 	msr	BASEPRI, r0
   12b18:	f04f 0003 	mov.w	r0, #3
   12b1c:	df02      	svc	2
}
   12b1e:	bd38      	pop	{r3, r4, r5, pc}
   12b20:	20005da0 	.word	0x20005da0
   12b24:	00022074 	.word	0x00022074
   12b28:	00022100 	.word	0x00022100
   12b2c:	00021ce0 	.word	0x00021ce0
   12b30:	000128d5 	.word	0x000128d5
   12b34:	00017751 	.word	0x00017751
   12b38:	00021f64 	.word	0x00021f64

00012b3c <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12b3c:	b900      	cbnz	r0, 12b40 <ticker_op_update_cb+0x4>
   12b3e:	4770      	bx	lr
{
   12b40:	b510      	push	{r4, lr}
   12b42:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12b44:	f7ff fcd2 	bl	124ec <ull_disable_mark_get>
   12b48:	4284      	cmp	r4, r0
   12b4a:	d00c      	beq.n	12b66 <ticker_op_update_cb+0x2a>
   12b4c:	4a06      	ldr	r2, [pc, #24]	; (12b68 <ticker_op_update_cb+0x2c>)
   12b4e:	4907      	ldr	r1, [pc, #28]	; (12b6c <ticker_op_update_cb+0x30>)
   12b50:	4807      	ldr	r0, [pc, #28]	; (12b70 <ticker_op_update_cb+0x34>)
   12b52:	f240 4354 	movw	r3, #1108	; 0x454
   12b56:	f009 fc59 	bl	1c40c <printk>
   12b5a:	4040      	eors	r0, r0
   12b5c:	f380 8811 	msr	BASEPRI, r0
   12b60:	f04f 0003 	mov.w	r0, #3
   12b64:	df02      	svc	2
}
   12b66:	bd10      	pop	{r4, pc}
   12b68:	00022074 	.word	0x00022074
   12b6c:	00022114 	.word	0x00022114
   12b70:	00021ce0 	.word	0x00021ce0

00012b74 <ticker_stop_cb>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12b74:	4a1a      	ldr	r2, [pc, #104]	; (12be0 <ticker_stop_cb+0x6c>)
   12b76:	481b      	ldr	r0, [pc, #108]	; (12be4 <ticker_stop_cb+0x70>)
{
   12b78:	b530      	push	{r4, r5, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12b7a:	1a9a      	subs	r2, r3, r2
   12b7c:	0892      	lsrs	r2, r2, #2
{
   12b7e:	461d      	mov	r5, r3
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12b80:	fba0 3202 	umull	r3, r2, r0, r2
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   12b84:	f3c2 034f 	ubfx	r3, r2, #1, #16
{
   12b88:	b083      	sub	sp, #12
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12b8a:	0854      	lsrs	r4, r2, #1
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   12b8c:	b9cb      	cbnz	r3, 12bc2 <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
   12b8e:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   12b90:	4b15      	ldr	r3, [pc, #84]	; (12be8 <ticker_stop_cb+0x74>)
   12b92:	9500      	str	r5, [sp, #0]
   12b94:	b2d2      	uxtb	r2, r2
   12b96:	2101      	movs	r1, #1
   12b98:	2000      	movs	r0, #0
   12b9a:	f7fd f817 	bl	fbcc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12b9e:	f030 0302 	bics.w	r3, r0, #2
   12ba2:	d00c      	beq.n	12bbe <ticker_stop_cb+0x4a>
   12ba4:	4a11      	ldr	r2, [pc, #68]	; (12bec <ticker_stop_cb+0x78>)
   12ba6:	4912      	ldr	r1, [pc, #72]	; (12bf0 <ticker_stop_cb+0x7c>)
   12ba8:	4812      	ldr	r0, [pc, #72]	; (12bf4 <ticker_stop_cb+0x80>)
   12baa:	f240 4375 	movw	r3, #1141	; 0x475
   12bae:	f009 fc2d 	bl	1c40c <printk>
   12bb2:	4040      	eors	r0, r0
   12bb4:	f380 8811 	msr	BASEPRI, r0
   12bb8:	f04f 0003 	mov.w	r0, #3
   12bbc:	df02      	svc	2
}
   12bbe:	b003      	add	sp, #12
   12bc0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
   12bc2:	4a0a      	ldr	r2, [pc, #40]	; (12bec <ticker_stop_cb+0x78>)
   12bc4:	490c      	ldr	r1, [pc, #48]	; (12bf8 <ticker_stop_cb+0x84>)
   12bc6:	480b      	ldr	r0, [pc, #44]	; (12bf4 <ticker_stop_cb+0x80>)
   12bc8:	f44f 638e 	mov.w	r3, #1136	; 0x470
   12bcc:	f009 fc1e 	bl	1c40c <printk>
   12bd0:	4040      	eors	r0, r0
   12bd2:	f380 8811 	msr	BASEPRI, r0
   12bd6:	f04f 0003 	mov.w	r0, #3
   12bda:	df02      	svc	2
   12bdc:	e7d7      	b.n	12b8e <ticker_stop_cb+0x1a>
   12bde:	bf00      	nop
   12be0:	2000111c 	.word	0x2000111c
   12be4:	08fb823f 	.word	0x08fb823f
   12be8:	00012a9d 	.word	0x00012a9d
   12bec:	00022074 	.word	0x00022074
   12bf0:	000220e4 	.word	0x000220e4
   12bf4:	00021ce0 	.word	0x00021ce0
   12bf8:	00022144 	.word	0x00022144

00012bfc <ll_adv_params_set>:
{
   12bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c00:	4d4a      	ldr	r5, [pc, #296]	; (12d2c <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
   12c02:	4c4b      	ldr	r4, [pc, #300]	; (12d30 <ll_adv_params_set+0x134>)
{
   12c04:	4684      	mov	ip, r0
	if (!adv || adv->is_enabled) {
   12c06:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
{
   12c0a:	468a      	mov	sl, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c0c:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   12c10:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   12c12:	f016 0601 	ands.w	r6, r6, #1
{
   12c16:	4698      	mov	r8, r3
   12c18:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   12c1c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12c20:	9000      	str	r0, [sp, #0]
   12c22:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   12c26:	d16e      	bne.n	12d06 <ll_adv_params_set+0x10a>
   12c28:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   12c2c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   12c2e:	f8df e104 	ldr.w	lr, [pc, #260]	; 12d34 <ll_adv_params_set+0x138>
   12c32:	4615      	mov	r5, r2
   12c34:	2727      	movs	r7, #39	; 0x27
   12c36:	222d      	movs	r2, #45	; 0x2d
   12c38:	fb17 2701 	smlabb	r7, r7, r1, r2
	pdu->type = pdu_adv_type[adv_type];
   12c3c:	aa02      	add	r2, sp, #8
   12c3e:	4452      	add	r2, sl
		adv->interval = 0;
   12c40:	f1ba 0f01 	cmp.w	sl, #1
	adv->lll.chan_map = chan_map;
   12c44:	f009 0107 	and.w	r1, r9, #7
	pdu->type = pdu_adv_type[adv_type];
   12c48:	f812 ac08 	ldrb.w	sl, [r2, #-8]
   12c4c:	5de2      	ldrb	r2, [r4, r7]
	adv->lll.chan_map = chan_map;
   12c4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
   12c52:	f003 0303 	and.w	r3, r3, #3
		adv->interval = 0;
   12c56:	bf08      	it	eq
   12c58:	f04f 0c00 	moveq.w	ip, #0
	pdu->type = pdu_adv_type[adv_type];
   12c5c:	f00a 090f 	and.w	r9, sl, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   12c60:	f01a 0f0e 	tst.w	sl, #14
	adv->lll.chan_map = chan_map;
   12c64:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   12c68:	f022 021f 	bic.w	r2, r2, #31
	adv->own_addr_type = own_addr_type;
   12c6c:	f894 10da 	ldrb.w	r1, [r4, #218]	; 0xda
   12c70:	f8a4 c0d8 	strh.w	ip, [r4, #216]	; 0xd8
	adv->lll.filter_policy = filter_policy;
   12c74:	ea49 0202 	orr.w	r2, r9, r2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   12c78:	bf0c      	ite	eq
   12c7a:	f04f 0c01 	moveq.w	ip, #1
   12c7e:	f04f 0c00 	movne.w	ip, #0
	adv->lll.chan_map = chan_map;
   12c82:	ea00 000e 	and.w	r0, r0, lr
	adv->own_addr_type = own_addr_type;
   12c86:	f365 0101 	bfi	r1, r5, #0, #2
   12c8a:	f36c 1245 	bfi	r2, ip, #5, #1
	adv->lll.chan_map = chan_map;
   12c8e:	4303      	orrs	r3, r0
   12c90:	8523      	strh	r3, [r4, #40]	; 0x28
   12c92:	55e2      	strb	r2, [r4, r7]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   12c94:	078a      	lsls	r2, r1, #30
   12c96:	eb04 0907 	add.w	r9, r4, r7
   12c9a:	b2cb      	uxtb	r3, r1
	adv->own_addr_type = own_addr_type;
   12c9c:	f884 10da 	strb.w	r1, [r4, #218]	; 0xda
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   12ca0:	d426      	bmi.n	12cf0 <ll_adv_params_set+0xf4>
	pdu->tx_addr = own_addr_type & 0x1;
   12ca2:	5de2      	ldrb	r2, [r4, r7]
   12ca4:	f365 1286 	bfi	r2, r5, #6, #1
	pdu->rx_addr = 0;
   12ca8:	f36f 12c7 	bfc	r2, #7, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12cac:	f002 030f 	and.w	r3, r2, #15
   12cb0:	2b01      	cmp	r3, #1
	pdu->rx_addr = 0;
   12cb2:	55e2      	strb	r2, [r4, r7]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12cb4:	b2d2      	uxtb	r2, r2
   12cb6:	d02b      	beq.n	12d10 <ll_adv_params_set+0x114>
	} else if (pdu->len == 0) {
   12cb8:	f899 3001 	ldrb.w	r3, [r9, #1]
   12cbc:	b913      	cbnz	r3, 12cc4 <ll_adv_params_set+0xc8>
		pdu->len = BDADDR_SIZE;
   12cbe:	2306      	movs	r3, #6
   12cc0:	f889 3001 	strb.w	r3, [r9, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12cc4:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12cc8:	01ad      	lsls	r5, r5, #6
   12cca:	2327      	movs	r3, #39	; 0x27
   12ccc:	227d      	movs	r2, #125	; 0x7d
   12cce:	fb13 2301 	smlabb	r3, r3, r1, r2
   12cd2:	f005 0540 	and.w	r5, r5, #64	; 0x40
   12cd6:	f045 0504 	orr.w	r5, r5, #4
   12cda:	54e5      	strb	r5, [r4, r3]
   12cdc:	441c      	add	r4, r3
	if (pdu->len == 0) {
   12cde:	7863      	ldrb	r3, [r4, #1]
   12ce0:	b913      	cbnz	r3, 12ce8 <ll_adv_params_set+0xec>
		pdu->len = BDADDR_SIZE;
   12ce2:	2206      	movs	r2, #6
	return 0;
   12ce4:	461e      	mov	r6, r3
		pdu->len = BDADDR_SIZE;
   12ce6:	7062      	strb	r2, [r4, #1]
}
   12ce8:	4630      	mov	r0, r6
   12cea:	b002      	add	sp, #8
   12cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		adv->id_addr_type = direct_addr_type;
   12cf0:	f368 0382 	bfi	r3, r8, #2, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   12cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   12cf6:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   12cfa:	2206      	movs	r2, #6
   12cfc:	f104 00db 	add.w	r0, r4, #219	; 0xdb
   12d00:	f00b fbf2 	bl	1e4e8 <memcpy>
   12d04:	e7cd      	b.n	12ca2 <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12d06:	260c      	movs	r6, #12
}
   12d08:	4630      	mov	r0, r6
   12d0a:	b002      	add	sp, #8
   12d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   12d10:	4613      	mov	r3, r2
   12d12:	f368 13c7 	bfi	r3, r8, #7, #1
   12d16:	55e3      	strb	r3, [r4, r7]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   12d18:	990a      	ldr	r1, [sp, #40]	; 0x28
   12d1a:	2206      	movs	r2, #6
   12d1c:	f109 0008 	add.w	r0, r9, #8
   12d20:	f00b fbe2 	bl	1e4e8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   12d24:	230c      	movs	r3, #12
   12d26:	f889 3001 	strb.w	r3, [r9, #1]
   12d2a:	e7cb      	b.n	12cc4 <ll_adv_params_set+0xc8>
   12d2c:	000212e4 	.word	0x000212e4
   12d30:	2000111c 	.word	0x2000111c
   12d34:	fffffcf1 	.word	0xfffffcf1

00012d38 <ll_adv_data_set>:
{
   12d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12d3c:	4d21      	ldr	r5, [pc, #132]	; (12dc4 <ll_adv_data_set+0x8c>)
   12d3e:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   12d42:	2627      	movs	r6, #39	; 0x27
   12d44:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
   12d48:	fb16 c207 	smlabb	r2, r6, r7, ip
   12d4c:	4688      	mov	r8, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   12d4e:	5cab      	ldrb	r3, [r5, r2]
   12d50:	f003 0e0f 	and.w	lr, r3, #15
   12d54:	f1be 0f01 	cmp.w	lr, #1
   12d58:	eb05 0102 	add.w	r1, r5, r2
   12d5c:	d023      	beq.n	12da6 <ll_adv_data_set+0x6e>
	if (pdu->first == pdu->last) {
   12d5e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
   12d62:	42ba      	cmp	r2, r7
   12d64:	4604      	mov	r4, r0
   12d66:	d021      	beq.n	12dac <ll_adv_data_set+0x74>
   12d68:	460e      	mov	r6, r1
		pdu->chan_sel = prev->chan_sel;
   12d6a:	f3c3 1040 	ubfx	r0, r3, #5, #1
	pdu->type = prev->type;
   12d6e:	f3c3 0203 	ubfx	r2, r3, #0, #4
   12d72:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   12d76:	f3c3 1080 	ubfx	r0, r3, #6, #1
	pdu->type = prev->type;
   12d7a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
   12d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   12d82:	4630      	mov	r0, r6
   12d84:	4313      	orrs	r3, r2
   12d86:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   12d8a:	3102      	adds	r1, #2
   12d8c:	2206      	movs	r2, #6
   12d8e:	f00b fbab 	bl	1e4e8 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   12d92:	4622      	mov	r2, r4
   12d94:	4641      	mov	r1, r8
   12d96:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   12d9a:	3406      	adds	r4, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   12d9c:	f00b fba4 	bl	1e4e8 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   12da0:	7074      	strb	r4, [r6, #1]
	pdu->last = idx;
   12da2:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
}
   12da6:	2000      	movs	r0, #0
   12da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   12dac:	3701      	adds	r7, #1
   12dae:	b2ff      	uxtb	r7, r7
		if (last == DOUBLE_BUFFER_SIZE) {
   12db0:	2f02      	cmp	r7, #2
   12db2:	d003      	beq.n	12dbc <ll_adv_data_set+0x84>
   12db4:	fb16 c607 	smlabb	r6, r6, r7, ip
   12db8:	442e      	add	r6, r5
   12dba:	e7d6      	b.n	12d6a <ll_adv_data_set+0x32>
   12dbc:	f105 062d 	add.w	r6, r5, #45	; 0x2d
			last = 0U;
   12dc0:	2700      	movs	r7, #0
   12dc2:	e7d2      	b.n	12d6a <ll_adv_data_set+0x32>
   12dc4:	2000111c 	.word	0x2000111c

00012dc8 <ll_adv_scan_rsp_set>:
{
   12dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12dcc:	4d1b      	ldr	r5, [pc, #108]	; (12e3c <ll_adv_scan_rsp_set+0x74>)
   12dce:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
	if (pdu->first == pdu->last) {
   12dd2:	f895 c07b 	ldrb.w	ip, [r5, #123]	; 0x7b
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12dd6:	2427      	movs	r4, #39	; 0x27
   12dd8:	227d      	movs	r2, #125	; 0x7d
   12dda:	fb14 2306 	smlabb	r3, r4, r6, r2
	if (pdu->first == pdu->last) {
   12dde:	45b4      	cmp	ip, r6
   12de0:	4688      	mov	r8, r1
   12de2:	4607      	mov	r7, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12de4:	eb05 0103 	add.w	r1, r5, r3
	if (pdu->first == pdu->last) {
   12de8:	d01b      	beq.n	12e22 <ll_adv_scan_rsp_set+0x5a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12dea:	460c      	mov	r4, r1
	pdu->tx_addr = prev->tx_addr;
   12dec:	5ceb      	ldrb	r3, [r5, r3]
   12dee:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12df2:	019b      	lsls	r3, r3, #6
   12df4:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
   12df8:	f107 0c06 	add.w	ip, r7, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12dfc:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
   12dfe:	f884 c001 	strb.w	ip, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   12e02:	3102      	adds	r1, #2
   12e04:	2206      	movs	r2, #6
   12e06:	1ca0      	adds	r0, r4, #2
   12e08:	f00b fb6e 	bl	1e4e8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   12e0c:	463a      	mov	r2, r7
   12e0e:	4641      	mov	r1, r8
   12e10:	f104 0008 	add.w	r0, r4, #8
   12e14:	f00b fb68 	bl	1e4e8 <memcpy>
	pdu->last = idx;
   12e18:	f885 607c 	strb.w	r6, [r5, #124]	; 0x7c
}
   12e1c:	2000      	movs	r0, #0
   12e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   12e22:	3601      	adds	r6, #1
   12e24:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
   12e26:	2e02      	cmp	r6, #2
   12e28:	d003      	beq.n	12e32 <ll_adv_scan_rsp_set+0x6a>
   12e2a:	fb14 2406 	smlabb	r4, r4, r6, r2
   12e2e:	442c      	add	r4, r5
   12e30:	e7dc      	b.n	12dec <ll_adv_scan_rsp_set+0x24>
   12e32:	f105 047d 	add.w	r4, r5, #125	; 0x7d
			last = 0U;
   12e36:	2600      	movs	r6, #0
   12e38:	e7d8      	b.n	12dec <ll_adv_scan_rsp_set+0x24>
   12e3a:	bf00      	nop
   12e3c:	2000111c 	.word	0x2000111c

00012e40 <ull_adv_init>:
}
   12e40:	2000      	movs	r0, #0
   12e42:	4770      	bx	lr

00012e44 <ull_adv_reset>:
{
   12e44:	b570      	push	{r4, r5, r6, lr}
	if (!adv || !adv->is_enabled) {
   12e46:	4c62      	ldr	r4, [pc, #392]	; (12fd0 <ull_adv_reset+0x18c>)
{
   12e48:	b084      	sub	sp, #16
	if (!adv || !adv->is_enabled) {
   12e4a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   12e4e:	2202      	movs	r2, #2
   12e50:	9203      	str	r2, [sp, #12]
	if (!adv || !adv->is_enabled) {
   12e52:	07da      	lsls	r2, r3, #31
   12e54:	d57a      	bpl.n	12f4c <ull_adv_reset+0x108>
	mark = ull_disable_mark(adv);
   12e56:	4620      	mov	r0, r4
   12e58:	f7ff fb30 	bl	124bc <ull_disable_mark>
	LL_ASSERT(mark == adv);
   12e5c:	4284      	cmp	r4, r0
   12e5e:	d00c      	beq.n	12e7a <ull_adv_reset+0x36>
   12e60:	4a5c      	ldr	r2, [pc, #368]	; (12fd4 <ull_adv_reset+0x190>)
   12e62:	495d      	ldr	r1, [pc, #372]	; (12fd8 <ull_adv_reset+0x194>)
   12e64:	485d      	ldr	r0, [pc, #372]	; (12fdc <ull_adv_reset+0x198>)
   12e66:	f240 43e4 	movw	r3, #1252	; 0x4e4
   12e6a:	f009 facf 	bl	1c40c <printk>
   12e6e:	4040      	eors	r0, r0
   12e70:	f380 8811 	msr	BASEPRI, r0
   12e74:	f04f 0003 	mov.w	r0, #3
   12e78:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   12e7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   12e7e:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   12e80:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   12e82:	d50e      	bpl.n	12ea2 <ull_adv_reset+0x5e>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   12e84:	2103      	movs	r1, #3
   12e86:	4b56      	ldr	r3, [pc, #344]	; (12fe0 <ull_adv_reset+0x19c>)
   12e88:	9500      	str	r5, [sp, #0]
   12e8a:	2201      	movs	r2, #1
   12e8c:	2000      	movs	r0, #0
   12e8e:	f7fc fe9d 	bl	fbcc <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   12e92:	4629      	mov	r1, r5
   12e94:	f7ff fb06 	bl	124a4 <ull_ticker_status_take>
		if (ret) {
   12e98:	2800      	cmp	r0, #0
   12e9a:	f040 8090 	bne.w	12fbe <ull_adv_reset+0x17a>
		ret_cb = TICKER_STATUS_BUSY;
   12e9e:	2302      	movs	r3, #2
   12ea0:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12ea2:	2103      	movs	r1, #3
   12ea4:	4b4e      	ldr	r3, [pc, #312]	; (12fe0 <ull_adv_reset+0x19c>)
   12ea6:	9500      	str	r5, [sp, #0]
   12ea8:	2202      	movs	r2, #2
   12eaa:	2000      	movs	r0, #0
   12eac:	f7fc fe8e 	bl	fbcc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   12eb0:	4629      	mov	r1, r5
   12eb2:	f7ff faf7 	bl	124a4 <ull_ticker_status_take>
	if (ret) {
   12eb6:	2800      	cmp	r0, #0
   12eb8:	d15e      	bne.n	12f78 <ull_adv_reset+0x134>
	ret = ull_disable(&adv->lll);
   12eba:	484a      	ldr	r0, [pc, #296]	; (12fe4 <ull_adv_reset+0x1a0>)
   12ebc:	f7ff fb3a 	bl	12534 <ull_disable>
	LL_ASSERT(!ret);
   12ec0:	2800      	cmp	r0, #0
   12ec2:	d146      	bne.n	12f52 <ull_adv_reset+0x10e>
	mark = ull_disable_unmark(adv);
   12ec4:	4842      	ldr	r0, [pc, #264]	; (12fd0 <ull_adv_reset+0x18c>)
   12ec6:	f7ff fb05 	bl	124d4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   12eca:	4284      	cmp	r4, r0
   12ecc:	d00c      	beq.n	12ee8 <ull_adv_reset+0xa4>
   12ece:	4a41      	ldr	r2, [pc, #260]	; (12fd4 <ull_adv_reset+0x190>)
   12ed0:	4941      	ldr	r1, [pc, #260]	; (12fd8 <ull_adv_reset+0x194>)
   12ed2:	4842      	ldr	r0, [pc, #264]	; (12fdc <ull_adv_reset+0x198>)
   12ed4:	f240 5306 	movw	r3, #1286	; 0x506
   12ed8:	f009 fa98 	bl	1c40c <printk>
   12edc:	4040      	eors	r0, r0
   12ede:	f380 8811 	msr	BASEPRI, r0
   12ee2:	f04f 0003 	mov.w	r0, #3
   12ee6:	df02      	svc	2
	if (adv->lll.conn) {
   12ee8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   12eea:	b34d      	cbz	r5, 12f40 <ull_adv_reset+0xfc>
	LL_ASSERT(!lll->link_tx_free);
   12eec:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   12eee:	b163      	cbz	r3, 12f0a <ull_adv_reset+0xc6>
   12ef0:	4a38      	ldr	r2, [pc, #224]	; (12fd4 <ull_adv_reset+0x190>)
   12ef2:	493d      	ldr	r1, [pc, #244]	; (12fe8 <ull_adv_reset+0x1a4>)
   12ef4:	4839      	ldr	r0, [pc, #228]	; (12fdc <ull_adv_reset+0x198>)
   12ef6:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
   12efa:	f009 fa87 	bl	1c40c <printk>
   12efe:	4040      	eors	r0, r0
   12f00:	f380 8811 	msr	BASEPRI, r0
   12f04:	f04f 0003 	mov.w	r0, #3
   12f08:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   12f0a:	f105 0150 	add.w	r1, r5, #80	; 0x50
   12f0e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   12f12:	f7fb fde3 	bl	eadc <memq_deinit>
	LL_ASSERT(link);
   12f16:	4606      	mov	r6, r0
   12f18:	2800      	cmp	r0, #0
   12f1a:	d042      	beq.n	12fa2 <ull_adv_reset+0x15e>
	ll_conn_release(lll->hdr.parent);
   12f1c:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   12f1e:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   12f20:	f000 fc5a 	bl	137d8 <ll_conn_release>
	adv->lll.conn = NULL;
   12f24:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   12f26:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
   12f2a:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   12f2c:	f7ff fa12 	bl	12354 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   12f30:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->node_rx_cc_free = NULL;
   12f34:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
   12f38:	f7ff fa00 	bl	1233c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   12f3c:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	adv->is_enabled = 0U;
   12f40:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   12f44:	f36f 0300 	bfc	r3, #0, #1
   12f48:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
}
   12f4c:	2000      	movs	r0, #0
   12f4e:	b004      	add	sp, #16
   12f50:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!ret);
   12f52:	4a20      	ldr	r2, [pc, #128]	; (12fd4 <ull_adv_reset+0x190>)
   12f54:	4925      	ldr	r1, [pc, #148]	; (12fec <ull_adv_reset+0x1a8>)
   12f56:	4821      	ldr	r0, [pc, #132]	; (12fdc <ull_adv_reset+0x198>)
   12f58:	f240 5303 	movw	r3, #1283	; 0x503
   12f5c:	f009 fa56 	bl	1c40c <printk>
   12f60:	4040      	eors	r0, r0
   12f62:	f380 8811 	msr	BASEPRI, r0
   12f66:	f04f 0003 	mov.w	r0, #3
   12f6a:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   12f6c:	4818      	ldr	r0, [pc, #96]	; (12fd0 <ull_adv_reset+0x18c>)
   12f6e:	f7ff fab1 	bl	124d4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   12f72:	4284      	cmp	r4, r0
   12f74:	d1ab      	bne.n	12ece <ull_adv_reset+0x8a>
   12f76:	e7b7      	b.n	12ee8 <ull_adv_reset+0xa4>
		mark = ull_disable_mark(adv);
   12f78:	4815      	ldr	r0, [pc, #84]	; (12fd0 <ull_adv_reset+0x18c>)
   12f7a:	f7ff fa9f 	bl	124bc <ull_disable_mark>
		LL_ASSERT(mark == adv);
   12f7e:	4284      	cmp	r4, r0
   12f80:	d0e4      	beq.n	12f4c <ull_adv_reset+0x108>
   12f82:	f240 43fd 	movw	r3, #1277	; 0x4fd
   12f86:	4a13      	ldr	r2, [pc, #76]	; (12fd4 <ull_adv_reset+0x190>)
   12f88:	4913      	ldr	r1, [pc, #76]	; (12fd8 <ull_adv_reset+0x194>)
   12f8a:	4814      	ldr	r0, [pc, #80]	; (12fdc <ull_adv_reset+0x198>)
   12f8c:	f009 fa3e 	bl	1c40c <printk>
   12f90:	4040      	eors	r0, r0
   12f92:	f380 8811 	msr	BASEPRI, r0
   12f96:	f04f 0003 	mov.w	r0, #3
   12f9a:	df02      	svc	2
}
   12f9c:	2000      	movs	r0, #0
   12f9e:	b004      	add	sp, #16
   12fa0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   12fa2:	4a0c      	ldr	r2, [pc, #48]	; (12fd4 <ull_adv_reset+0x190>)
   12fa4:	4912      	ldr	r1, [pc, #72]	; (12ff0 <ull_adv_reset+0x1ac>)
   12fa6:	480d      	ldr	r0, [pc, #52]	; (12fdc <ull_adv_reset+0x198>)
   12fa8:	f240 43ca 	movw	r3, #1226	; 0x4ca
   12fac:	f009 fa2e 	bl	1c40c <printk>
   12fb0:	4040      	eors	r0, r0
   12fb2:	f380 8811 	msr	BASEPRI, r0
   12fb6:	f04f 0003 	mov.w	r0, #3
   12fba:	df02      	svc	2
   12fbc:	e7ae      	b.n	12f1c <ull_adv_reset+0xd8>
			mark = ull_disable_mark(adv);
   12fbe:	4804      	ldr	r0, [pc, #16]	; (12fd0 <ull_adv_reset+0x18c>)
   12fc0:	f7ff fa7c 	bl	124bc <ull_disable_mark>
			LL_ASSERT(mark == adv);
   12fc4:	4284      	cmp	r4, r0
   12fc6:	d0c1      	beq.n	12f4c <ull_adv_reset+0x108>
   12fc8:	f240 43ee 	movw	r3, #1262	; 0x4ee
   12fcc:	e7db      	b.n	12f86 <ull_adv_reset+0x142>
   12fce:	bf00      	nop
   12fd0:	2000111c 	.word	0x2000111c
   12fd4:	00022074 	.word	0x00022074
   12fd8:	00022150 	.word	0x00022150
   12fdc:	00021ce0 	.word	0x00021ce0
   12fe0:	00012499 	.word	0x00012499
   12fe4:	20001138 	.word	0x20001138
   12fe8:	0002215c 	.word	0x0002215c
   12fec:	00021f64 	.word	0x00021f64
   12ff0:	000221ec 	.word	0x000221ec

00012ff4 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   12ff4:	4a04      	ldr	r2, [pc, #16]	; (13008 <ull_adv_handle_get+0x14>)
   12ff6:	4b05      	ldr	r3, [pc, #20]	; (1300c <ull_adv_handle_get+0x18>)
   12ff8:	1a80      	subs	r0, r0, r2
   12ffa:	0880      	lsrs	r0, r0, #2
   12ffc:	fba3 3000 	umull	r3, r0, r3, r0
}
   13000:	f3c0 004f 	ubfx	r0, r0, #1, #16
   13004:	4770      	bx	lr
   13006:	bf00      	nop
   13008:	2000111c 	.word	0x2000111c
   1300c:	08fb823f 	.word	0x08fb823f

00013010 <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
   13010:	4a04      	ldr	r2, [pc, #16]	; (13024 <ull_adv_lll_handle_get+0x14>)
   13012:	6800      	ldr	r0, [r0, #0]
   13014:	4b04      	ldr	r3, [pc, #16]	; (13028 <ull_adv_lll_handle_get+0x18>)
   13016:	1a80      	subs	r0, r0, r2
   13018:	0880      	lsrs	r0, r0, #2
   1301a:	fba3 3000 	umull	r3, r0, r3, r0
}
   1301e:	f3c0 004f 	ubfx	r0, r0, #1, #16
   13022:	4770      	bx	lr
   13024:	2000111c 	.word	0x2000111c
   13028:	08fb823f 	.word	0x08fb823f

0001302c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
   1302c:	b938      	cbnz	r0, 1303e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1302e:	4805      	ldr	r0, [pc, #20]	; (13044 <ull_adv_is_enabled_get+0x18>)
   13030:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
   13034:	f013 0f01 	tst.w	r3, #1
   13038:	bf08      	it	eq
   1303a:	2000      	moveq	r0, #0
   1303c:	4770      	bx	lr
		return NULL;
   1303e:	2000      	movs	r0, #0
}
   13040:	4770      	bx	lr
   13042:	bf00      	nop
   13044:	2000111c 	.word	0x2000111c

00013048 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_MAX) {
   13048:	b928      	cbnz	r0, 13056 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1304a:	4b04      	ldr	r3, [pc, #16]	; (1305c <ull_adv_is_enabled+0x14>)
   1304c:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
   13050:	f000 0001 	and.w	r0, r0, #1
   13054:	4770      	bx	lr
		return 0;
   13056:	2000      	movs	r0, #0
}
   13058:	4770      	bx	lr
   1305a:	bf00      	nop
   1305c:	2000111c 	.word	0x2000111c

00013060 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
   13060:	b950      	cbnz	r0, 13078 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   13062:	4b06      	ldr	r3, [pc, #24]	; (1307c <ull_adv_filter_pol_get+0x1c>)
   13064:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
   13068:	f010 0001 	ands.w	r0, r0, #1
   1306c:	d005      	beq.n	1307a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1306e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   13072:	f000 0003 	and.w	r0, r0, #3
   13076:	4770      	bx	lr
		return 0;
   13078:	2000      	movs	r0, #0
}
   1307a:	4770      	bx	lr
   1307c:	2000111c 	.word	0x2000111c

00013080 <tx_ull_dequeue>:
{
   13080:	b410      	push	{r4}
   13082:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
   13086:	4603      	mov	r3, r0
   13088:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1308a:	b164      	cbz	r4, 130a6 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   1308c:	4294      	cmp	r4, r2
   1308e:	d027      	beq.n	130e0 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   13090:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   13094:	4291      	cmp	r1, r2
   13096:	d018      	beq.n	130ca <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   13098:	6812      	ldr	r2, [r2, #0]
   1309a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   1309e:	2300      	movs	r3, #0
}
   130a0:	bc10      	pop	{r4}
		tx->next = NULL;
   130a2:	6003      	str	r3, [r0, #0]
}
   130a4:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   130a6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   130aa:	4291      	cmp	r1, r2
   130ac:	d023      	beq.n	130f6 <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   130ae:	7911      	ldrb	r1, [r2, #4]
   130b0:	f001 0103 	and.w	r1, r1, #3
   130b4:	2903      	cmp	r1, #3
   130b6:	d00d      	beq.n	130d4 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   130b8:	6812      	ldr	r2, [r2, #0]
   130ba:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   130be:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   130c0:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   130c4:	bc10      	pop	{r4}
		tx->next = tx;
   130c6:	6000      	str	r0, [r0, #0]
}
   130c8:	4770      	bx	lr
   130ca:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   130cc:	6809      	ldr	r1, [r1, #0]
   130ce:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   130d2:	e7e1      	b.n	13098 <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
   130d4:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   130d6:	2903      	cmp	r1, #3
   130d8:	d0de      	beq.n	13098 <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   130da:	290a      	cmp	r1, #10
   130dc:	d1ec      	bne.n	130b8 <tx_ull_dequeue+0x38>
   130de:	e7db      	b.n	13098 <tx_ull_dequeue+0x18>
   130e0:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   130e4:	6812      	ldr	r2, [r2, #0]
   130e6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   130ea:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   130ec:	bf18      	it	ne
   130ee:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   130f2:	d1e7      	bne.n	130c4 <tx_ull_dequeue+0x44>
   130f4:	e7e3      	b.n	130be <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   130f6:	2a00      	cmp	r2, #0
   130f8:	d1e8      	bne.n	130cc <tx_ull_dequeue+0x4c>
   130fa:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
   130fe:	4614      	mov	r4, r2
   13100:	e7f0      	b.n	130e4 <tx_ull_dequeue+0x64>
   13102:	bf00      	nop

00013104 <ticker_update_latency_cancel_op_cb>:
{
   13104:	b510      	push	{r4, lr}
   13106:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   13108:	b930      	cbnz	r0, 13118 <ticker_update_latency_cancel_op_cb+0x14>
	conn->slave.latency_cancel = 0U;
   1310a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1310e:	f36f 0341 	bfc	r3, #1, #1
   13112:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   13116:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   13118:	4a09      	ldr	r2, [pc, #36]	; (13140 <ticker_update_latency_cancel_op_cb+0x3c>)
   1311a:	490a      	ldr	r1, [pc, #40]	; (13144 <ticker_update_latency_cancel_op_cb+0x40>)
   1311c:	480a      	ldr	r0, [pc, #40]	; (13148 <ticker_update_latency_cancel_op_cb+0x44>)
   1311e:	f240 634e 	movw	r3, #1614	; 0x64e
   13122:	f009 f973 	bl	1c40c <printk>
   13126:	4040      	eors	r0, r0
   13128:	f380 8811 	msr	BASEPRI, r0
   1312c:	f04f 0003 	mov.w	r0, #3
   13130:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   13132:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   13136:	f36f 0341 	bfc	r3, #1, #1
   1313a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1313e:	bd10      	pop	{r4, pc}
   13140:	00022180 	.word	0x00022180
   13144:	000221c0 	.word	0x000221c0
   13148:	00021ce0 	.word	0x00021ce0

0001314c <ctrl_tx_pause_enqueue>:
{
   1314c:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   1314e:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   13152:	4604      	mov	r4, r0
   13154:	460d      	mov	r5, r1
	if (
   13156:	b11b      	cbz	r3, 13160 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   13158:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   1315c:	0788      	lsls	r0, r1, #30
   1315e:	d50d      	bpl.n	1317c <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   13160:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   13164:	b301      	cbz	r1, 131a8 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   13166:	bb4a      	cbnz	r2, 131bc <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   13168:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1316c:	681a      	ldr	r2, [r3, #0]
   1316e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13170:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   13172:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   13176:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   13178:	b19b      	cbz	r3, 131a2 <ctrl_tx_pause_enqueue+0x56>
}
   1317a:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   1317c:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   13180:	07c9      	lsls	r1, r1, #31
   13182:	d4ed      	bmi.n	13160 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   13184:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   13188:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   1318a:	bf04      	itt	eq
   1318c:	6819      	ldreq	r1, [r3, #0]
   1318e:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13192:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   13196:	b1f9      	cbz	r1, 131d8 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   13198:	2a00      	cmp	r2, #0
   1319a:	d0e5      	beq.n	13168 <ctrl_tx_pause_enqueue+0x1c>
   1319c:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   131a0:	e00e      	b.n	131c0 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   131a2:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   131a6:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   131a8:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   131aa:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   131ae:	2a00      	cmp	r2, #0
   131b0:	d1e2      	bne.n	13178 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   131b2:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   131b6:	2b00      	cmp	r3, #0
   131b8:	d1df      	bne.n	1317a <ctrl_tx_pause_enqueue+0x2e>
   131ba:	e7f2      	b.n	131a2 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   131bc:	f240 7372 	movw	r3, #1906	; 0x772
   131c0:	4a0b      	ldr	r2, [pc, #44]	; (131f0 <ctrl_tx_pause_enqueue+0xa4>)
   131c2:	490c      	ldr	r1, [pc, #48]	; (131f4 <ctrl_tx_pause_enqueue+0xa8>)
   131c4:	480c      	ldr	r0, [pc, #48]	; (131f8 <ctrl_tx_pause_enqueue+0xac>)
   131c6:	f009 f921 	bl	1c40c <printk>
   131ca:	4040      	eors	r0, r0
   131cc:	f380 8811 	msr	BASEPRI, r0
   131d0:	f04f 0003 	mov.w	r0, #3
   131d4:	df02      	svc	2
   131d6:	e7c7      	b.n	13168 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   131d8:	6819      	ldr	r1, [r3, #0]
   131da:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   131dc:	601d      	str	r5, [r3, #0]
			if (!pause) {
   131de:	2a00      	cmp	r2, #0
   131e0:	d1c9      	bne.n	13176 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   131e2:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   131e6:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   131e8:	2b00      	cmp	r3, #0
   131ea:	d1c6      	bne.n	1317a <ctrl_tx_pause_enqueue+0x2e>
   131ec:	e7d9      	b.n	131a2 <ctrl_tx_pause_enqueue+0x56>
   131ee:	bf00      	nop
   131f0:	00022180 	.word	0x00022180
   131f4:	000221d4 	.word	0x000221d4
   131f8:	00021ce0 	.word	0x00021ce0

000131fc <init_reset>:
{
   131fc:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   131fe:	4813      	ldr	r0, [pc, #76]	; (1324c <init_reset+0x50>)
   13200:	4b13      	ldr	r3, [pc, #76]	; (13250 <init_reset+0x54>)
   13202:	2201      	movs	r2, #1
   13204:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13208:	f7fb fbe0 	bl	e9cc <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1320c:	4b11      	ldr	r3, [pc, #68]	; (13254 <init_reset+0x58>)
   1320e:	2203      	movs	r2, #3
   13210:	1d18      	adds	r0, r3, #4
   13212:	2124      	movs	r1, #36	; 0x24
   13214:	f7fb fbda 	bl	e9cc <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   13218:	4b0f      	ldr	r3, [pc, #60]	; (13258 <init_reset+0x5c>)
   1321a:	2204      	movs	r2, #4
   1321c:	1898      	adds	r0, r3, r2
   1321e:	2120      	movs	r1, #32
   13220:	f7fb fbd4 	bl	e9cc <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   13224:	4b0d      	ldr	r3, [pc, #52]	; (1325c <init_reset+0x60>)
   13226:	2207      	movs	r2, #7
   13228:	1d18      	adds	r0, r3, #4
   1322a:	2108      	movs	r1, #8
   1322c:	f7fb fbce 	bl	e9cc <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13230:	4b0b      	ldr	r3, [pc, #44]	; (13260 <init_reset+0x64>)
	default_phy_tx |= BIT(2);
   13232:	490c      	ldr	r1, [pc, #48]	; (13264 <init_reset+0x68>)
	default_phy_rx |= BIT(2);
   13234:	4a0c      	ldr	r2, [pc, #48]	; (13268 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   13236:	480d      	ldr	r0, [pc, #52]	; (1326c <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13238:	251b      	movs	r5, #27
   1323a:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   1323c:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   1323e:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   13242:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   13244:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0);
   13246:	8004      	strh	r4, [r0, #0]
}
   13248:	2000      	movs	r0, #0
   1324a:	bd38      	pop	{r3, r4, r5, pc}
   1324c:	20001214 	.word	0x20001214
   13250:	20001210 	.word	0x20001210
   13254:	200013ec 	.word	0x200013ec
   13258:	2000145c 	.word	0x2000145c
   1325c:	200014e0 	.word	0x200014e0
   13260:	20001ce4 	.word	0x20001ce4
   13264:	20002284 	.word	0x20002284
   13268:	20002283 	.word	0x20002283
   1326c:	20001ce6 	.word	0x20001ce6

00013270 <tx_lll_flush>:
{
   13270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   13274:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   13278:	4935      	ldr	r1, [pc, #212]	; (13350 <tx_lll_flush+0xe0>)
{
   1327a:	b083      	sub	sp, #12
   1327c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1327e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   13282:	4640      	mov	r0, r8
   13284:	f7fb fc06 	bl	ea94 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   13288:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   1328c:	4629      	mov	r1, r5
   1328e:	f005 fc1b 	bl	18ac8 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   13292:	6d28      	ldr	r0, [r5, #80]	; 0x50
   13294:	4631      	mov	r1, r6
   13296:	aa01      	add	r2, sp, #4
   13298:	f7fb fc3a 	bl	eb10 <memq_dequeue>
	while (link) {
   1329c:	b340      	cbz	r0, 132f0 <tx_lll_flush+0x80>
   1329e:	4c2d      	ldr	r4, [pc, #180]	; (13354 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   132a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   132a4:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   132a8:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   132aa:	f894 c001 	ldrb.w	ip, [r4, #1]
   132ae:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   132b0:	1c4b      	adds	r3, r1, #1
   132b2:	b2db      	uxtb	r3, r3
		last = 0U;
   132b4:	459c      	cmp	ip, r3
   132b6:	bf08      	it	eq
   132b8:	2300      	moveq	r3, #0
	if (last == first) {
   132ba:	429a      	cmp	r2, r3
   132bc:	d038      	beq.n	13330 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   132be:	7822      	ldrb	r2, [r4, #0]
   132c0:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   132c4:	eb19 0e02 	adds.w	lr, r9, r2
   132c8:	d032      	beq.n	13330 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   132ca:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   132ce:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   132d2:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   132d6:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   132da:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   132dc:	6001      	str	r1, [r0, #0]
		tx->next = link;
   132de:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   132e2:	4631      	mov	r1, r6
   132e4:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   132e6:	70e3      	strb	r3, [r4, #3]
   132e8:	f7fb fc12 	bl	eb10 <memq_dequeue>
	while (link) {
   132ec:	2800      	cmp	r0, #0
   132ee:	d1db      	bne.n	132a8 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   132f0:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
	rx = (void *)&conn->llcp_terminate.node_rx;
   132f4:	f508 7496 	add.w	r4, r8, #300	; 0x12c
	LL_ASSERT(rx->hdr.link);
   132f8:	b150      	cbz	r0, 13310 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   132fa:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   132fc:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   132fe:	f8c8 312c 	str.w	r3, [r8, #300]	; 0x12c
	ull_rx_put(link, rx);
   13302:	f7ff f989 	bl	12618 <ull_rx_put>
	ull_rx_sched();
   13306:	f7ff f997 	bl	12638 <ull_rx_sched>
}
   1330a:	b003      	add	sp, #12
   1330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   13310:	4a11      	ldr	r2, [pc, #68]	; (13358 <tx_lll_flush+0xe8>)
   13312:	4912      	ldr	r1, [pc, #72]	; (1335c <tx_lll_flush+0xec>)
   13314:	4812      	ldr	r0, [pc, #72]	; (13360 <tx_lll_flush+0xf0>)
   13316:	f240 7305 	movw	r3, #1797	; 0x705
   1331a:	f009 f877 	bl	1c40c <printk>
   1331e:	4040      	eors	r0, r0
   13320:	f380 8811 	msr	BASEPRI, r0
   13324:	f04f 0003 	mov.w	r0, #3
   13328:	df02      	svc	2
   1332a:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
   1332e:	e7e4      	b.n	132fa <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   13330:	4a09      	ldr	r2, [pc, #36]	; (13358 <tx_lll_flush+0xe8>)
   13332:	490c      	ldr	r1, [pc, #48]	; (13364 <tx_lll_flush+0xf4>)
   13334:	480a      	ldr	r0, [pc, #40]	; (13360 <tx_lll_flush+0xf0>)
   13336:	f240 63f1 	movw	r3, #1777	; 0x6f1
   1333a:	f009 f867 	bl	1c40c <printk>
   1333e:	4040      	eors	r0, r0
   13340:	f380 8811 	msr	BASEPRI, r0
   13344:	f04f 0003 	mov.w	r0, #3
   13348:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1334a:	2300      	movs	r3, #0
   1334c:	801b      	strh	r3, [r3, #0]
   1334e:	deff      	udf	#255	; 0xff
   13350:	20001214 	.word	0x20001214
   13354:	20005db8 	.word	0x20005db8
   13358:	00022180 	.word	0x00022180
   1335c:	000221e4 	.word	0x000221e4
   13360:	00021ce0 	.word	0x00021ce0
   13364:	000221dc 	.word	0x000221dc

00013368 <ticker_start_conn_op_cb>:
{
   13368:	b510      	push	{r4, lr}
   1336a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1336c:	b990      	cbnz	r0, 13394 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   1336e:	4620      	mov	r0, r4
   13370:	f7ff f8ce 	bl	12510 <ull_update_unmark>
	LL_ASSERT(p == param);
   13374:	4284      	cmp	r4, r0
   13376:	d00c      	beq.n	13392 <ticker_start_conn_op_cb+0x2a>
   13378:	4a0d      	ldr	r2, [pc, #52]	; (133b0 <ticker_start_conn_op_cb+0x48>)
   1337a:	490e      	ldr	r1, [pc, #56]	; (133b4 <ticker_start_conn_op_cb+0x4c>)
   1337c:	480e      	ldr	r0, [pc, #56]	; (133b8 <ticker_start_conn_op_cb+0x50>)
   1337e:	f240 636e 	movw	r3, #1646	; 0x66e
   13382:	f009 f843 	bl	1c40c <printk>
   13386:	4040      	eors	r0, r0
   13388:	f380 8811 	msr	BASEPRI, r0
   1338c:	f04f 0003 	mov.w	r0, #3
   13390:	df02      	svc	2
}
   13392:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13394:	4a06      	ldr	r2, [pc, #24]	; (133b0 <ticker_start_conn_op_cb+0x48>)
   13396:	4909      	ldr	r1, [pc, #36]	; (133bc <ticker_start_conn_op_cb+0x54>)
   13398:	4807      	ldr	r0, [pc, #28]	; (133b8 <ticker_start_conn_op_cb+0x50>)
   1339a:	f240 636a 	movw	r3, #1642	; 0x66a
   1339e:	f009 f835 	bl	1c40c <printk>
   133a2:	4040      	eors	r0, r0
   133a4:	f380 8811 	msr	BASEPRI, r0
   133a8:	f04f 0003 	mov.w	r0, #3
   133ac:	df02      	svc	2
   133ae:	e7de      	b.n	1336e <ticker_start_conn_op_cb+0x6>
   133b0:	00022180 	.word	0x00022180
   133b4:	00022200 	.word	0x00022200
   133b8:	00021ce0 	.word	0x00021ce0
   133bc:	000221f4 	.word	0x000221f4

000133c0 <ticker_stop_conn_op_cb>:
{
   133c0:	b510      	push	{r4, lr}
   133c2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   133c4:	b990      	cbnz	r0, 133ec <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   133c6:	4620      	mov	r0, r4
   133c8:	f7ff f896 	bl	124f8 <ull_update_mark>
	LL_ASSERT(p == param);
   133cc:	4284      	cmp	r4, r0
   133ce:	d00c      	beq.n	133ea <ticker_stop_conn_op_cb+0x2a>
   133d0:	4a0d      	ldr	r2, [pc, #52]	; (13408 <ticker_stop_conn_op_cb+0x48>)
   133d2:	490e      	ldr	r1, [pc, #56]	; (1340c <ticker_stop_conn_op_cb+0x4c>)
   133d4:	480e      	ldr	r0, [pc, #56]	; (13410 <ticker_stop_conn_op_cb+0x50>)
   133d6:	f240 6365 	movw	r3, #1637	; 0x665
   133da:	f009 f817 	bl	1c40c <printk>
   133de:	4040      	eors	r0, r0
   133e0:	f380 8811 	msr	BASEPRI, r0
   133e4:	f04f 0003 	mov.w	r0, #3
   133e8:	df02      	svc	2
}
   133ea:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   133ec:	4a06      	ldr	r2, [pc, #24]	; (13408 <ticker_stop_conn_op_cb+0x48>)
   133ee:	4909      	ldr	r1, [pc, #36]	; (13414 <ticker_stop_conn_op_cb+0x54>)
   133f0:	4807      	ldr	r0, [pc, #28]	; (13410 <ticker_stop_conn_op_cb+0x50>)
   133f2:	f240 6361 	movw	r3, #1633	; 0x661
   133f6:	f009 f809 	bl	1c40c <printk>
   133fa:	4040      	eors	r0, r0
   133fc:	f380 8811 	msr	BASEPRI, r0
   13400:	f04f 0003 	mov.w	r0, #3
   13404:	df02      	svc	2
   13406:	e7de      	b.n	133c6 <ticker_stop_conn_op_cb+0x6>
   13408:	00022180 	.word	0x00022180
   1340c:	00022200 	.word	0x00022200
   13410:	00021ce0 	.word	0x00021ce0
   13414:	000221f4 	.word	0x000221f4

00013418 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13418:	b900      	cbnz	r0, 1341c <ticker_update_conn_op_cb+0x4>
   1341a:	4770      	bx	lr
{
   1341c:	b510      	push	{r4, lr}
   1341e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13420:	f7ff f882 	bl	12528 <ull_update_mark_get>
   13424:	4284      	cmp	r4, r0
   13426:	d010      	beq.n	1344a <ticker_update_conn_op_cb+0x32>
   13428:	f7ff f860 	bl	124ec <ull_disable_mark_get>
   1342c:	4284      	cmp	r4, r0
   1342e:	d00c      	beq.n	1344a <ticker_update_conn_op_cb+0x32>
   13430:	4a06      	ldr	r2, [pc, #24]	; (1344c <ticker_update_conn_op_cb+0x34>)
   13432:	4907      	ldr	r1, [pc, #28]	; (13450 <ticker_update_conn_op_cb+0x38>)
   13434:	4807      	ldr	r0, [pc, #28]	; (13454 <ticker_update_conn_op_cb+0x3c>)
   13436:	f240 635a 	movw	r3, #1626	; 0x65a
   1343a:	f008 ffe7 	bl	1c40c <printk>
   1343e:	4040      	eors	r0, r0
   13440:	f380 8811 	msr	BASEPRI, r0
   13444:	f04f 0003 	mov.w	r0, #3
   13448:	df02      	svc	2
}
   1344a:	bd10      	pop	{r4, pc}
   1344c:	00022180 	.word	0x00022180
   13450:	0002220c 	.word	0x0002220c
   13454:	00021ce0 	.word	0x00021ce0

00013458 <ticker_op_stop_cb>:
{
   13458:	b510      	push	{r4, lr}
   1345a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1345c:	b9b0      	cbnz	r0, 1348c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   1345e:	4b12      	ldr	r3, [pc, #72]	; (134a8 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13460:	2200      	movs	r2, #0
   13462:	4611      	mov	r1, r2
   13464:	2002      	movs	r0, #2
	mfy.param = param;
   13466:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13468:	f7fb fbb6 	bl	ebd8 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1346c:	b900      	cbnz	r0, 13470 <ticker_op_stop_cb+0x18>
}
   1346e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   13470:	4a0e      	ldr	r2, [pc, #56]	; (134ac <ticker_op_stop_cb+0x54>)
   13472:	490f      	ldr	r1, [pc, #60]	; (134b0 <ticker_op_stop_cb+0x58>)
   13474:	480f      	ldr	r0, [pc, #60]	; (134b4 <ticker_op_stop_cb+0x5c>)
   13476:	f240 637e 	movw	r3, #1662	; 0x67e
   1347a:	f008 ffc7 	bl	1c40c <printk>
   1347e:	4040      	eors	r0, r0
   13480:	f380 8811 	msr	BASEPRI, r0
   13484:	f04f 0003 	mov.w	r0, #3
   13488:	df02      	svc	2
}
   1348a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1348c:	4a07      	ldr	r2, [pc, #28]	; (134ac <ticker_op_stop_cb+0x54>)
   1348e:	490a      	ldr	r1, [pc, #40]	; (134b8 <ticker_op_stop_cb+0x60>)
   13490:	4808      	ldr	r0, [pc, #32]	; (134b4 <ticker_op_stop_cb+0x5c>)
   13492:	f240 6377 	movw	r3, #1655	; 0x677
   13496:	f008 ffb9 	bl	1c40c <printk>
   1349a:	4040      	eors	r0, r0
   1349c:	f380 8811 	msr	BASEPRI, r0
   134a0:	f04f 0003 	mov.w	r0, #3
   134a4:	df02      	svc	2
   134a6:	e7da      	b.n	1345e <ticker_op_stop_cb+0x6>
   134a8:	20005e20 	.word	0x20005e20
   134ac:	00022180 	.word	0x00022180
   134b0:	00021f8c 	.word	0x00021f8c
   134b4:	00021ce0 	.word	0x00021ce0
   134b8:	000221f4 	.word	0x000221f4

000134bc <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   134bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134c0:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   134c2:	4826      	ldr	r0, [pc, #152]	; (1355c <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   134c4:	460e      	mov	r6, r1
   134c6:	4690      	mov	r8, r2
   134c8:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   134ca:	f7fb faad 	bl	ea28 <mem_acquire>
	if (!tx) {
   134ce:	2800      	cmp	r0, #0
   134d0:	d041      	beq.n	13556 <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   134d2:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134d4:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   134d6:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   134d8:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   134dc:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134e0:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   134e2:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   134e4:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134e6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   134e8:	71c1      	strb	r1, [r0, #7]
	if (
   134ea:	b11a      	cbz	r2, 134f4 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   134ec:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   134f0:	0799      	lsls	r1, r3, #30
   134f2:	d510      	bpl.n	13516 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   134f4:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   134f8:	b33b      	cbz	r3, 1354a <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   134fa:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   134fe:	681a      	ldr	r2, [r3, #0]
   13500:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13502:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13504:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   13508:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
   1350a:	b1da      	cbz	r2, 13544 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1350c:	2303      	movs	r3, #3
   1350e:	7033      	strb	r3, [r6, #0]

	return 0;
   13510:	2000      	movs	r0, #0
}
   13512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   13516:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   1351a:	07db      	lsls	r3, r3, #31
   1351c:	d4ea      	bmi.n	134f4 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   1351e:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   13522:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   13524:	bf04      	itt	eq
   13526:	6813      	ldreq	r3, [r2, #0]
   13528:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1352c:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   13530:	2b00      	cmp	r3, #0
   13532:	d1e2      	bne.n	134fa <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   13534:	6813      	ldr	r3, [r2, #0]
   13536:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   13538:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   1353a:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1353c:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   13540:	2a00      	cmp	r2, #0
   13542:	d1e3      	bne.n	1350c <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   13544:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   13548:	e7e0      	b.n	1350c <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   1354a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1354c:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13550:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   13554:	e7d9      	b.n	1350a <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   13556:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1355a:	e7da      	b.n	13512 <reject_ext_ind_send.isra.0+0x56>
   1355c:	2000145c 	.word	0x2000145c

00013560 <start_enc_rsp_send>:
{
   13560:	b570      	push	{r4, r5, r6, lr}
   13562:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   13564:	b179      	cbz	r1, 13586 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   13566:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1356a:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   1356c:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13570:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   13572:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13576:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1357a:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1357c:	704e      	strb	r6, [r1, #1]
	return 0;
   1357e:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13580:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13582:	70cd      	strb	r5, [r1, #3]
}
   13584:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13586:	4826      	ldr	r0, [pc, #152]	; (13620 <start_enc_rsp_send+0xc0>)
   13588:	f7fb fa4e 	bl	ea28 <mem_acquire>
		if (!tx) {
   1358c:	2800      	cmp	r0, #0
   1358e:	d043      	beq.n	13618 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   13590:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13594:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   13596:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1359a:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   1359c:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   135a0:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   135a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   135a6:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   135aa:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   135ac:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   135ae:	71c1      	strb	r1, [r0, #7]
	if (
   135b0:	b1e3      	cbz	r3, 135ec <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   135b2:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   135b6:	0791      	lsls	r1, r2, #30
   135b8:	d418      	bmi.n	135ec <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   135ba:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   135be:	07d2      	lsls	r2, r2, #31
   135c0:	d414      	bmi.n	135ec <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   135c2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   135c6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   135c8:	bf04      	itt	eq
   135ca:	681a      	ldreq	r2, [r3, #0]
   135cc:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   135d0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   135d4:	b1ca      	cbz	r2, 1360a <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   135d6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   135da:	681a      	ldr	r2, [r3, #0]
   135dc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   135de:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   135e0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   135e4:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   135e6:	b163      	cbz	r3, 13602 <start_enc_rsp_send+0xa2>
	return 0;
   135e8:	2000      	movs	r0, #0
}
   135ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   135ec:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   135f0:	2a00      	cmp	r2, #0
   135f2:	d1f0      	bne.n	135d6 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   135f4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   135f6:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   135fa:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   135fe:	2b00      	cmp	r3, #0
   13600:	d1f2      	bne.n	135e8 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   13602:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   13606:	4618      	mov	r0, r3
}
   13608:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   1360a:	681a      	ldr	r2, [r3, #0]
   1360c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1360e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   13610:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13612:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   13616:	e7e6      	b.n	135e6 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   13618:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1361c:	bd70      	pop	{r4, r5, r6, pc}
   1361e:	bf00      	nop
   13620:	2000145c 	.word	0x2000145c

00013624 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   13624:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   13628:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   1362c:	079b      	lsls	r3, r3, #30
{
   1362e:	b570      	push	{r4, r5, r6, lr}
   13630:	4604      	mov	r4, r0
   13632:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   13634:	d509      	bpl.n	1364a <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   13636:	2a00      	cmp	r2, #0
   13638:	d03d      	beq.n	136b6 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   1363a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   1363e:	681a      	ldr	r2, [r3, #0]
   13640:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   13642:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   13644:	682b      	ldr	r3, [r5, #0]
   13646:	b333      	cbz	r3, 13696 <ctrl_tx_sec_enqueue+0x72>
}
   13648:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1364a:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
   1364e:	b1e1      	cbz	r1, 1368a <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   13650:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
   13654:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   13658:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   1365c:	4286      	cmp	r6, r0
   1365e:	f003 0301 	and.w	r3, r3, #1
   13662:	d003      	beq.n	1366c <ctrl_tx_sec_enqueue+0x48>
   13664:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   13668:	2803      	cmp	r0, #3
   1366a:	d02c      	beq.n	136c6 <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   1366c:	b9b3      	cbnz	r3, 1369c <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   1366e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   13672:	4299      	cmp	r1, r3
   13674:	d045      	beq.n	13702 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   13676:	b99a      	cbnz	r2, 136a0 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   13678:	680b      	ldr	r3, [r1, #0]
   1367a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   1367c:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl_last = tx;
   1367e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   13682:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   13684:	2b00      	cmp	r3, #0
   13686:	d1df      	bne.n	13648 <ctrl_tx_sec_enqueue+0x24>
   13688:	e005      	b.n	13696 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   1368a:	b94a      	cbnz	r2, 136a0 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   1368c:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1368e:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13692:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
   13696:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   1369a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1369c:	2a00      	cmp	r2, #0
   1369e:	d036      	beq.n	1370e <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   136a0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   136a4:	681a      	ldr	r2, [r3, #0]
   136a6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   136a8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   136aa:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   136ae:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   136b0:	2b00      	cmp	r3, #0
   136b2:	d1c9      	bne.n	13648 <ctrl_tx_sec_enqueue+0x24>
   136b4:	e7ef      	b.n	13696 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   136b6:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   136ba:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   136bc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   136c0:	2b00      	cmp	r3, #0
   136c2:	d1c1      	bne.n	13648 <ctrl_tx_sec_enqueue+0x24>
   136c4:	e7e7      	b.n	13696 <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   136c6:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   136c8:	f000 0003 	and.w	r0, r0, #3
   136cc:	2803      	cmp	r0, #3
   136ce:	d1cd      	bne.n	1366c <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   136d0:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   136d2:	2803      	cmp	r0, #3
   136d4:	d001      	beq.n	136da <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   136d6:	280a      	cmp	r0, #10
   136d8:	d1c8      	bne.n	1366c <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   136da:	b9f3      	cbnz	r3, 1371a <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   136dc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   136e0:	428b      	cmp	r3, r1
   136e2:	d022      	beq.n	1372a <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   136e4:	b332      	cbz	r2, 13734 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   136e6:	f44f 63ec 	mov.w	r3, #1888	; 0x760
			LL_ASSERT(!pause);
   136ea:	4a14      	ldr	r2, [pc, #80]	; (1373c <ctrl_tx_sec_enqueue+0x118>)
   136ec:	4914      	ldr	r1, [pc, #80]	; (13740 <ctrl_tx_sec_enqueue+0x11c>)
   136ee:	4815      	ldr	r0, [pc, #84]	; (13744 <ctrl_tx_sec_enqueue+0x120>)
   136f0:	f008 fe8c 	bl	1c40c <printk>
   136f4:	4040      	eors	r0, r0
   136f6:	f380 8811 	msr	BASEPRI, r0
   136fa:	f04f 0003 	mov.w	r0, #3
   136fe:	df02      	svc	2
   13700:	e7ce      	b.n	136a0 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   13702:	680b      	ldr	r3, [r1, #0]
   13704:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13708:	2a00      	cmp	r2, #0
   1370a:	d1c9      	bne.n	136a0 <ctrl_tx_sec_enqueue+0x7c>
   1370c:	e7b4      	b.n	13678 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   1370e:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   13710:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13714:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   13718:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1371a:	b112      	cbz	r2, 13722 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   1371c:	f240 7372 	movw	r3, #1906	; 0x772
   13720:	e7e3      	b.n	136ea <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   13722:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   13724:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   13728:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   1372a:	680b      	ldr	r3, [r1, #0]
   1372c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13730:	2a00      	cmp	r2, #0
   13732:	d1d8      	bne.n	136e6 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   13734:	680b      	ldr	r3, [r1, #0]
   13736:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   13738:	600d      	str	r5, [r1, #0]
			if (!pause) {
   1373a:	e783      	b.n	13644 <ctrl_tx_sec_enqueue+0x20>
   1373c:	00022180 	.word	0x00022180
   13740:	000221d4 	.word	0x000221d4
   13744:	00021ce0 	.word	0x00021ce0

00013748 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   13748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1374a:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1374c:	481d      	ldr	r0, [pc, #116]	; (137c4 <feature_rsp_send.isra.0+0x7c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1374e:	460d      	mov	r5, r1
   13750:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13752:	f7fb f969 	bl	ea28 <mem_acquire>
	if (!tx) {
   13756:	b390      	cbz	r0, 137be <feature_rsp_send.isra.0+0x76>
	       (features[1] << 8) | (features[2] << 16);
   13758:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1375a:	793a      	ldrb	r2, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   1375c:	491a      	ldr	r1, [pc, #104]	; (137c8 <feature_rsp_send.isra.0+0x80>)
   1375e:	4604      	mov	r4, r0
   13760:	7978      	ldrb	r0, [r7, #5]
   13762:	041b      	lsls	r3, r3, #16
   13764:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   13768:	4313      	orrs	r3, r2
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   1376a:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   1376e:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   13772:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13774:	7921      	ldrb	r1, [r4, #4]
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   13776:	4003      	ands	r3, r0
	conn->common.fex_valid = 1U;
   13778:	f042 0201 	orr.w	r2, r2, #1
   1377c:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   13780:	f3c3 0310 	ubfx	r3, r3, #0, #17
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13784:	2009      	movs	r0, #9
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13786:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13788:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp_feature.features &= feat_get(&req->features[0]);
   1378c:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13790:	7121      	strb	r1, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13792:	7160      	strb	r0, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   13794:	71e0      	strb	r0, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13796:	2100      	movs	r1, #0
   13798:	18a0      	adds	r0, r4, r2
   1379a:	f00a fed0 	bl	1e53e <memset>
	sys_put_le24(conn->llcp_feature.features,
   1379e:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
   137a2:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   137a4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   137a8:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, tx);
   137aa:	4630      	mov	r0, r6
   137ac:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   137ae:	7262      	strb	r2, [r4, #9]
   137b0:	4621      	mov	r1, r4
   137b2:	f7ff ff37 	bl	13624 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   137b6:	2303      	movs	r3, #3
   137b8:	702b      	strb	r3, [r5, #0]
	return 0;
   137ba:	2000      	movs	r0, #0
}
   137bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   137be:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   137c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137c4:	2000145c 	.word	0x2000145c
   137c8:	fffe30d0 	.word	0xfffe30d0

000137cc <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   137cc:	4801      	ldr	r0, [pc, #4]	; (137d4 <ll_conn_acquire+0x8>)
   137ce:	f7fb b92b 	b.w	ea28 <mem_acquire>
   137d2:	bf00      	nop
   137d4:	20001210 	.word	0x20001210

000137d8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   137d8:	4901      	ldr	r1, [pc, #4]	; (137e0 <ll_conn_release+0x8>)
   137da:	f7fb b93f 	b.w	ea5c <mem_release>
   137de:	bf00      	nop
   137e0:	20001210 	.word	0x20001210

000137e4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   137e4:	4902      	ldr	r1, [pc, #8]	; (137f0 <ll_conn_handle_get+0xc>)
   137e6:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   137ea:	f7fb b953 	b.w	ea94 <mem_index_get>
   137ee:	bf00      	nop
   137f0:	20001214 	.word	0x20001214

000137f4 <ll_conn_get>:
{
   137f4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   137f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   137fa:	4801      	ldr	r0, [pc, #4]	; (13800 <ll_conn_get+0xc>)
   137fc:	f7fb b946 	b.w	ea8c <mem_get>
   13800:	20001214 	.word	0x20001214

00013804 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13804:	b958      	cbnz	r0, 1381e <ll_connected_get+0x1a>
{
   13806:	b508      	push	{r3, lr}
   13808:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1380a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1380e:	4805      	ldr	r0, [pc, #20]	; (13824 <ll_connected_get+0x20>)
   13810:	f7fb f93c 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13814:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13816:	b903      	cbnz	r3, 1381a <ll_connected_get+0x16>
}
   13818:	bd08      	pop	{r3, pc}
		return NULL;
   1381a:	2000      	movs	r0, #0
}
   1381c:	bd08      	pop	{r3, pc}
		return NULL;
   1381e:	2000      	movs	r0, #0
}
   13820:	4770      	bx	lr
   13822:	bf00      	nop
   13824:	20001214 	.word	0x20001214

00013828 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   13828:	4801      	ldr	r0, [pc, #4]	; (13830 <ll_tx_mem_acquire+0x8>)
   1382a:	f7fb b8fd 	b.w	ea28 <mem_acquire>
   1382e:	bf00      	nop
   13830:	200013ec 	.word	0x200013ec

00013834 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   13834:	4901      	ldr	r1, [pc, #4]	; (1383c <ll_tx_mem_release+0x8>)
   13836:	f7fb b911 	b.w	ea5c <mem_release>
   1383a:	bf00      	nop
   1383c:	200013ec 	.word	0x200013ec

00013840 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13840:	2800      	cmp	r0, #0
   13842:	d15c      	bne.n	138fe <ll_tx_mem_enqueue+0xbe>
{
   13844:	b5f0      	push	{r4, r5, r6, r7, lr}
   13846:	4602      	mov	r2, r0
   13848:	b089      	sub	sp, #36	; 0x24
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1384a:	482e      	ldr	r0, [pc, #184]	; (13904 <ll_tx_mem_enqueue+0xc4>)
   1384c:	460c      	mov	r4, r1
   1384e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13852:	f7fb f91b 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13856:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
   13858:	b9e6      	cbnz	r6, 13894 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1385a:	4a2b      	ldr	r2, [pc, #172]	; (13908 <ll_tx_mem_enqueue+0xc8>)
   1385c:	78d7      	ldrb	r7, [r2, #3]
	if (last == count) {
   1385e:	7855      	ldrb	r5, [r2, #1]
   13860:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   13862:	1c7b      	adds	r3, r7, #1
   13864:	b2db      	uxtb	r3, r3
		last = 0U;
   13866:	429d      	cmp	r5, r3
   13868:	bf08      	it	eq
   1386a:	2300      	moveq	r3, #0
	if (last == first) {
   1386c:	4299      	cmp	r1, r3
   1386e:	d015      	beq.n	1389c <ll_tx_mem_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13870:	4615      	mov	r5, r2
   13872:	f815 1b04 	ldrb.w	r1, [r5], #4
   13876:	fb11 f107 	smulbb	r1, r1, r7
	if (!lll_tx) {
   1387a:	186f      	adds	r7, r5, r1
   1387c:	d00e      	beq.n	1389c <ll_tx_mem_enqueue+0x5c>
	if (conn->lll.role && conn->lll.latency_event &&
   1387e:	f990 c03d 	ldrsb.w	ip, [r0, #61]	; 0x3d
	lll_tx->handle = handle;
   13882:	526e      	strh	r6, [r5, r1]
	if (conn->lll.role && conn->lll.latency_event &&
   13884:	f1bc 0f00 	cmp.w	ip, #0
	lll_tx->node = tx;
   13888:	607c      	str	r4, [r7, #4]
	*last = idx; /* Commit: Update write index */
   1388a:	70d3      	strb	r3, [r2, #3]
	if (conn->lll.role && conn->lll.latency_event &&
   1388c:	db0a      	blt.n	138a4 <ll_tx_mem_enqueue+0x64>
	return 0;
   1388e:	2000      	movs	r0, #0
}
   13890:	b009      	add	sp, #36	; 0x24
   13892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   13894:	f06f 0015 	mvn.w	r0, #21
}
   13898:	b009      	add	sp, #36	; 0x24
   1389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1389c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   138a0:	b009      	add	sp, #36	; 0x24
   138a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   138a4:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   138a6:	2b00      	cmp	r3, #0
   138a8:	d0f1      	beq.n	1388e <ll_tx_mem_enqueue+0x4e>
	    !conn->slave.latency_cancel) {
   138aa:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
   138ae:	f013 0402 	ands.w	r4, r3, #2
   138b2:	d1ec      	bne.n	1388e <ll_tx_mem_enqueue+0x4e>
		conn->slave.latency_cancel = 1U;
   138b4:	f043 0302 	orr.w	r3, r3, #2
   138b8:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   138bc:	4913      	ldr	r1, [pc, #76]	; (1390c <ll_tx_mem_enqueue+0xcc>)
   138be:	9006      	str	r0, [sp, #24]
   138c0:	2301      	movs	r3, #1
   138c2:	2203      	movs	r2, #3
   138c4:	9105      	str	r1, [sp, #20]
   138c6:	9303      	str	r3, [sp, #12]
   138c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   138cc:	4623      	mov	r3, r4
   138ce:	9404      	str	r4, [sp, #16]
   138d0:	9400      	str	r4, [sp, #0]
   138d2:	4611      	mov	r1, r2
   138d4:	4620      	mov	r0, r4
   138d6:	f7fc f927 	bl	fb28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   138da:	f030 0302 	bics.w	r3, r0, #2
   138de:	d0d6      	beq.n	1388e <ll_tx_mem_enqueue+0x4e>
   138e0:	4a0b      	ldr	r2, [pc, #44]	; (13910 <ll_tx_mem_enqueue+0xd0>)
   138e2:	490c      	ldr	r1, [pc, #48]	; (13914 <ll_tx_mem_enqueue+0xd4>)
   138e4:	480c      	ldr	r0, [pc, #48]	; (13918 <ll_tx_mem_enqueue+0xd8>)
   138e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   138ea:	f008 fd8f 	bl	1c40c <printk>
   138ee:	4040      	eors	r0, r0
   138f0:	f380 8811 	msr	BASEPRI, r0
   138f4:	f04f 0003 	mov.w	r0, #3
   138f8:	df02      	svc	2
	return 0;
   138fa:	4620      	mov	r0, r4
   138fc:	e7c8      	b.n	13890 <ll_tx_mem_enqueue+0x50>
		return -EINVAL;
   138fe:	f06f 0015 	mvn.w	r0, #21
}
   13902:	4770      	bx	lr
   13904:	20001214 	.word	0x20001214
   13908:	20005dfc 	.word	0x20005dfc
   1390c:	00013105 	.word	0x00013105
   13910:	00022180 	.word	0x00022180
   13914:	00022260 	.word	0x00022260
   13918:	00021ce0 	.word	0x00021ce0

0001391c <ll_conn_update>:
{
   1391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13920:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   13924:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   13928:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1392c:	bb40      	cbnz	r0, 13980 <ll_conn_update+0x64>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1392e:	460c      	mov	r4, r1
   13930:	4616      	mov	r6, r2
   13932:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13936:	4602      	mov	r2, r0
   13938:	4839      	ldr	r0, [pc, #228]	; (13a20 <ll_conn_update+0x104>)
   1393a:	461d      	mov	r5, r3
   1393c:	f7fb f8a6 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13940:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13942:	b9eb      	cbnz	r3, 13980 <ll_conn_update+0x64>
	if (!cmd) {
   13944:	b1fc      	cbz	r4, 13986 <ll_conn_update+0x6a>
		cmd--;
   13946:	3c01      	subs	r4, #1
		if (cmd) {
   13948:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1394c:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   13950:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
   13954:	d04b      	beq.n	139ee <ll_conn_update+0xd2>
			if ((conn->llcp_conn_param.req ==
   13956:	428a      	cmp	r2, r1
   13958:	d012      	beq.n	13980 <ll_conn_update+0x64>
			    (conn->llcp_conn_param.state !=
   1395a:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   1395e:	f002 0107 	and.w	r1, r2, #7
   13962:	2903      	cmp	r1, #3
   13964:	d10c      	bne.n	13980 <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
   13966:	f004 0407 	and.w	r4, r4, #7
   1396a:	f044 0408 	orr.w	r4, r4, #8
   1396e:	f022 020f 	bic.w	r2, r2, #15
   13972:	4314      	orrs	r4, r2
   13974:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   13978:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   1397c:	4618      	mov	r0, r3
   1397e:	e000      	b.n	13982 <ll_conn_update+0x66>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13980:	200c      	movs	r0, #12
}
   13982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn->llcp_conn_param.disabled &&
   13986:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   1398a:	06d9      	lsls	r1, r3, #27
   1398c:	d523      	bpl.n	139d6 <ll_conn_update+0xba>
		} else if (conn->lll.role) {
   1398e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   13992:	2b00      	cmp	r3, #0
   13994:	db42      	blt.n	13a1c <ll_conn_update+0x100>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   13996:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   1399a:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   1399e:	4293      	cmp	r3, r2
   139a0:	d1ee      	bne.n	13980 <ll_conn_update+0x64>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   139a2:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   139a6:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   139aa:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   139ac:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   139ae:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   139b2:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   139b6:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   139ba:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   139bc:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   139c0:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   139c4:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   139c8:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   139cc:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   139d0:	4618      	mov	r0, r3
}
   139d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   139d6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   139da:	07da      	lsls	r2, r3, #31
   139dc:	d503      	bpl.n	139e6 <ll_conn_update+0xca>
		     (conn->llcp_feature.features &
   139de:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   139e2:	079b      	lsls	r3, r3, #30
   139e4:	d5d3      	bpl.n	1398e <ll_conn_update+0x72>
   139e6:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   139ea:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
   139ee:	428a      	cmp	r2, r1
   139f0:	d1c6      	bne.n	13980 <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
   139f2:	f8b0 3172 	ldrh.w	r3, [r0, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
   139f6:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   139fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   139fe:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   13a00:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   13a04:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
			conn->llcp_conn_param.interval_max = interval_max;
   13a08:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
   13a0c:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   13a10:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   13a14:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
	return 0;
   13a18:	2000      	movs	r0, #0
   13a1a:	e7b2      	b.n	13982 <ll_conn_update+0x66>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13a1c:	201a      	movs	r0, #26
   13a1e:	e7b0      	b.n	13982 <ll_conn_update+0x66>
   13a20:	20001214 	.word	0x20001214

00013a24 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13a24:	b9d0      	cbnz	r0, 13a5c <ll_chm_get+0x38>
{
   13a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a28:	4602      	mov	r2, r0
   13a2a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a2c:	480c      	ldr	r0, [pc, #48]	; (13a60 <ll_chm_get+0x3c>)
   13a2e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13a32:	f7fb f82b 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13a36:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a38:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   13a3a:	b96e      	cbnz	r6, 13a58 <ll_chm_get+0x34>
   13a3c:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   13a40:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   13a44:	2205      	movs	r2, #5
   13a46:	4639      	mov	r1, r7
   13a48:	4628      	mov	r0, r5
   13a4a:	f00a fd4d 	bl	1e4e8 <memcpy>
	} while (conn->chm_updated);
   13a4e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   13a52:	2800      	cmp	r0, #0
   13a54:	d1f4      	bne.n	13a40 <ll_chm_get+0x1c>
}
   13a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13a58:	200c      	movs	r0, #12
}
   13a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13a5c:	200c      	movs	r0, #12
}
   13a5e:	4770      	bx	lr
   13a60:	20001214 	.word	0x20001214

00013a64 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13a64:	b9a0      	cbnz	r0, 13a90 <ll_terminate_ind_send+0x2c>
{
   13a66:	b510      	push	{r4, lr}
   13a68:	4602      	mov	r2, r0
   13a6a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a6c:	4809      	ldr	r0, [pc, #36]	; (13a94 <ll_terminate_ind_send+0x30>)
   13a6e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13a72:	f7fb f80b 	bl	ea8c <mem_get>
   13a76:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   13a78:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13a7a:	b938      	cbnz	r0, 13a8c <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   13a7c:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
	conn->llcp_terminate.reason_own = reason;
   13a80:	f883 412a 	strb.w	r4, [r3, #298]	; 0x12a
	conn->llcp_terminate.req++;
   13a84:	3201      	adds	r2, #1
   13a86:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
}
   13a8a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13a8c:	200c      	movs	r0, #12
}
   13a8e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13a90:	200c      	movs	r0, #12
}
   13a92:	4770      	bx	lr
   13a94:	20001214 	.word	0x20001214

00013a98 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13a98:	b9a8      	cbnz	r0, 13ac6 <ll_feature_req_send+0x2e>
{
   13a9a:	b508      	push	{r3, lr}
   13a9c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a9e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13aa2:	480a      	ldr	r0, [pc, #40]	; (13acc <ll_feature_req_send+0x34>)
   13aa4:	f7fa fff2 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13aa8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13aaa:	b953      	cbnz	r3, 13ac2 <ll_feature_req_send+0x2a>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   13aac:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   13ab0:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   13ab4:	428a      	cmp	r2, r1
   13ab6:	d104      	bne.n	13ac2 <ll_feature_req_send+0x2a>
	conn->llcp_feature.req++;
   13ab8:	3201      	adds	r2, #1
   13aba:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	return 0;
   13abe:	4618      	mov	r0, r3
}
   13ac0:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13ac2:	200c      	movs	r0, #12
}
   13ac4:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13ac6:	200c      	movs	r0, #12
}
   13ac8:	4770      	bx	lr
   13aca:	bf00      	nop
   13acc:	20001214 	.word	0x20001214

00013ad0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ad0:	b9a8      	cbnz	r0, 13afe <ll_version_ind_send+0x2e>
{
   13ad2:	b508      	push	{r3, lr}
   13ad4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13ad6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13ada:	480a      	ldr	r0, [pc, #40]	; (13b04 <ll_version_ind_send+0x34>)
   13adc:	f7fa ffd6 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13ae0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13ae2:	b953      	cbnz	r3, 13afa <ll_version_ind_send+0x2a>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   13ae4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   13ae8:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   13aec:	428a      	cmp	r2, r1
   13aee:	d104      	bne.n	13afa <ll_version_ind_send+0x2a>
	conn->llcp_version.req++;
   13af0:	3201      	adds	r2, #1
   13af2:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	return 0;
   13af6:	4618      	mov	r0, r3
}
   13af8:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13afa:	200c      	movs	r0, #12
}
   13afc:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13afe:	200c      	movs	r0, #12
}
   13b00:	4770      	bx	lr
   13b02:	bf00      	nop
   13b04:	20001214 	.word	0x20001214

00013b08 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13b08:	bbb8      	cbnz	r0, 13b7a <ll_length_req_send+0x72>
{
   13b0a:	b538      	push	{r3, r4, r5, lr}
   13b0c:	460d      	mov	r5, r1
   13b0e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13b10:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13b14:	4602      	mov	r2, r0
   13b16:	481a      	ldr	r0, [pc, #104]	; (13b80 <ll_length_req_send+0x78>)
   13b18:	f7fa ffb8 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13b1c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13b1e:	b9cb      	cbnz	r3, 13b54 <ll_length_req_send+0x4c>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   13b20:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   13b24:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   13b28:	428a      	cmp	r2, r1
   13b2a:	d015      	beq.n	13b58 <ll_length_req_send+0x50>
		switch (conn->llcp_length.state) {
   13b2c:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   13b30:	f003 0307 	and.w	r3, r3, #7
   13b34:	2b03      	cmp	r3, #3
   13b36:	d004      	beq.n	13b42 <ll_length_req_send+0x3a>
   13b38:	3303      	adds	r3, #3
   13b3a:	f003 0307 	and.w	r3, r3, #7
   13b3e:	2b01      	cmp	r3, #1
   13b40:	d819      	bhi.n	13b76 <ll_length_req_send+0x6e>
			if (!conn->llcp_length.cache.tx_octets) {
   13b42:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   13b46:	b9b3      	cbnz	r3, 13b76 <ll_length_req_send+0x6e>
				conn->llcp_length.cache.tx_octets = tx_octets;
   13b48:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   13b4c:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   13b50:	4618      	mov	r0, r3
}
   13b52:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b54:	2002      	movs	r0, #2
}
   13b56:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13b58:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
   13b5c:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   13b60:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13b62:	f363 0102 	bfi	r1, r3, #0, #3
	conn->llcp_length.req++;
   13b66:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   13b6a:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13b6e:	f880 119a 	strb.w	r1, [r0, #410]	; 0x19a
	return 0;
   13b72:	4618      	mov	r0, r3
}
   13b74:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   13b76:	200c      	movs	r0, #12
}
   13b78:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b7a:	2002      	movs	r0, #2
}
   13b7c:	4770      	bx	lr
   13b7e:	bf00      	nop
   13b80:	20001214 	.word	0x20001214

00013b84 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   13b84:	4a03      	ldr	r2, [pc, #12]	; (13b94 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   13b86:	4b04      	ldr	r3, [pc, #16]	; (13b98 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   13b88:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   13b8a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   13b8c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   13b8e:	800b      	strh	r3, [r1, #0]
}
   13b90:	4770      	bx	lr
   13b92:	bf00      	nop
   13b94:	20001ce4 	.word	0x20001ce4
   13b98:	20001ce6 	.word	0x20001ce6

00013b9c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   13b9c:	4a02      	ldr	r2, [pc, #8]	; (13ba8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   13b9e:	4b03      	ldr	r3, [pc, #12]	; (13bac <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   13ba0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   13ba2:	8019      	strh	r1, [r3, #0]
}
   13ba4:	2000      	movs	r0, #0
   13ba6:	4770      	bx	lr
   13ba8:	20001ce4 	.word	0x20001ce4
   13bac:	20001ce6 	.word	0x20001ce6

00013bb0 <ll_length_max_get>:
{
   13bb0:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13bb2:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   13bb4:	f44f 6429 	mov.w	r4, #2704	; 0xa90
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13bb8:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13bba:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   13bbc:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   13bbe:	801c      	strh	r4, [r3, #0]
}
   13bc0:	bc30      	pop	{r4, r5}
   13bc2:	4770      	bx	lr

00013bc4 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13bc4:	b9c0      	cbnz	r0, 13bf8 <ll_phy_get+0x34>
{
   13bc6:	b538      	push	{r3, r4, r5, lr}
   13bc8:	460d      	mov	r5, r1
   13bca:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13bcc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13bd0:	4602      	mov	r2, r0
   13bd2:	480a      	ldr	r0, [pc, #40]	; (13bfc <ll_phy_get+0x38>)
   13bd4:	f7fa ff5a 	bl	ea8c <mem_get>
   13bd8:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   13bda:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13bdc:	b950      	cbnz	r0, 13bf4 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   13bde:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   13be2:	f3c2 0202 	ubfx	r2, r2, #0, #3
   13be6:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   13be8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   13bec:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13bf0:	7023      	strb	r3, [r4, #0]
}
   13bf2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13bf4:	2002      	movs	r0, #2
}
   13bf6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13bf8:	2002      	movs	r0, #2
}
   13bfa:	4770      	bx	lr
   13bfc:	20001214 	.word	0x20001214

00013c00 <ll_phy_default_set>:
	default_phy_tx = tx;
   13c00:	4a02      	ldr	r2, [pc, #8]	; (13c0c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   13c02:	4b03      	ldr	r3, [pc, #12]	; (13c10 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   13c04:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   13c06:	7019      	strb	r1, [r3, #0]
}
   13c08:	2000      	movs	r0, #0
   13c0a:	4770      	bx	lr
   13c0c:	20002284 	.word	0x20002284
   13c10:	20002283 	.word	0x20002283

00013c14 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c14:	bba0      	cbnz	r0, 13c80 <ll_phy_req_send+0x6c>
{
   13c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c18:	460c      	mov	r4, r1
   13c1a:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c1c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13c20:	4602      	mov	r2, r0
   13c22:	4818      	ldr	r0, [pc, #96]	; (13c84 <ll_phy_req_send+0x70>)
   13c24:	461f      	mov	r7, r3
   13c26:	f7fa ff31 	bl	ea8c <mem_get>
   13c2a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   13c2c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13c2e:	bb28      	cbnz	r0, 13c7c <ll_phy_req_send+0x68>
	if ((conn->llcp_req != conn->llcp_ack) ||
   13c30:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   13c34:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13c38:	429a      	cmp	r2, r3
   13c3a:	d11d      	bne.n	13c78 <ll_phy_req_send+0x64>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   13c3c:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   13c40:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   13c44:	429a      	cmp	r2, r3
   13c46:	d117      	bne.n	13c78 <ll_phy_req_send+0x64>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   13c48:	f004 0407 	and.w	r4, r4, #7
   13c4c:	00a4      	lsls	r4, r4, #2
   13c4e:	f8b5 11aa 	ldrh.w	r1, [r5, #426]	; 0x1aa
   13c52:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   13c56:	f007 0307 	and.w	r3, r7, #7
   13c5a:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   13c5e:	f006 0601 	and.w	r6, r6, #1
   13c62:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   13c66:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   13c6a:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   13c6c:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   13c6e:	f885 21a8 	strb.w	r2, [r5, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   13c72:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
}
   13c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13c78:	200c      	movs	r0, #12
}
   13c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13c7c:	2002      	movs	r0, #2
}
   13c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13c80:	2002      	movs	r0, #2
}
   13c82:	4770      	bx	lr
   13c84:	20001214 	.word	0x20001214

00013c88 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c88:	b9d8      	cbnz	r0, 13cc2 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c8a:	4602      	mov	r2, r0
{
   13c8c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c8e:	480e      	ldr	r0, [pc, #56]	; (13cc8 <ll_apto_get+0x40>)
   13c90:	460c      	mov	r4, r1
   13c92:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13c96:	f7fa fef9 	bl	ea8c <mem_get>
   13c9a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   13c9c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13c9e:	b970      	cbnz	r0, 13cbe <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   13ca0:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   13ca4:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   13ca6:	4a09      	ldr	r2, [pc, #36]	; (13ccc <ll_apto_get+0x44>)
   13ca8:	fb03 f301 	mul.w	r3, r3, r1
   13cac:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   13cb0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13cb4:	fba2 2303 	umull	r2, r3, r2, r3
   13cb8:	099b      	lsrs	r3, r3, #6
   13cba:	8023      	strh	r3, [r4, #0]
}
   13cbc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13cbe:	2002      	movs	r0, #2
}
   13cc0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13cc2:	2002      	movs	r0, #2
}
   13cc4:	4770      	bx	lr
   13cc6:	bf00      	nop
   13cc8:	20001214 	.word	0x20001214
   13ccc:	10624dd3 	.word	0x10624dd3

00013cd0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13cd0:	b9d8      	cbnz	r0, 13d0a <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13cd2:	4602      	mov	r2, r0
{
   13cd4:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13cd6:	480e      	ldr	r0, [pc, #56]	; (13d10 <ll_apto_set+0x40>)
   13cd8:	460d      	mov	r5, r1
   13cda:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13cde:	f7fa fed5 	bl	ea8c <mem_get>
   13ce2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   13ce4:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13ce6:	b970      	cbnz	r0, 13d06 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   13ce8:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   13cea:	f240 44e2 	movw	r4, #1250	; 0x4e2
   13cee:	fb04 f403 	mul.w	r4, r4, r3
   13cf2:	f242 7310 	movw	r3, #10000	; 0x2710
   13cf6:	fb03 4305 	mla	r3, r3, r5, r4
   13cfa:	3b01      	subs	r3, #1
   13cfc:	fbb3 f3f4 	udiv	r3, r3, r4
   13d00:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   13d04:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13d06:	2002      	movs	r0, #2
}
   13d08:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13d0a:	2002      	movs	r0, #2
}
   13d0c:	4770      	bx	lr
   13d0e:	bf00      	nop
   13d10:	20001214 	.word	0x20001214

00013d14 <ull_conn_init>:
{
   13d14:	b508      	push	{r3, lr}
   13d16:	4806      	ldr	r0, [pc, #24]	; (13d30 <ull_conn_init+0x1c>)
   13d18:	f006 fe64 	bl	1a9e4 <z_impl_device_get_binding>
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   13d1c:	4b05      	ldr	r3, [pc, #20]	; (13d34 <ull_conn_init+0x20>)
   13d1e:	6018      	str	r0, [r3, #0]
	if (!entropy) {
   13d20:	b118      	cbz	r0, 13d2a <ull_conn_init+0x16>
}
   13d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = init_reset();
   13d26:	f7ff ba69 	b.w	131fc <init_reset>
}
   13d2a:	f06f 0012 	mvn.w	r0, #18
   13d2e:	bd08      	pop	{r3, pc}
   13d30:	00021c7c 	.word	0x00021c7c
   13d34:	200013e0 	.word	0x200013e0

00013d38 <ull_conn_reset>:
{
   13d38:	b530      	push	{r4, r5, lr}
   13d3a:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   13d3c:	2302      	movs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13d3e:	2200      	movs	r2, #0
   13d40:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13d44:	482e      	ldr	r0, [pc, #184]	; (13e00 <ull_conn_reset+0xc8>)
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
   13d46:	9303      	str	r3, [sp, #12]
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13d48:	f7fa fea0 	bl	ea8c <mem_get>
   13d4c:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   13d4e:	f7fe fbb5 	bl	124bc <ull_disable_mark>
	LL_ASSERT(mark == conn);
   13d52:	4284      	cmp	r4, r0
   13d54:	d00c      	beq.n	13d70 <ull_conn_reset+0x38>
   13d56:	4a2b      	ldr	r2, [pc, #172]	; (13e04 <ull_conn_reset+0xcc>)
   13d58:	492b      	ldr	r1, [pc, #172]	; (13e08 <ull_conn_reset+0xd0>)
   13d5a:	482c      	ldr	r0, [pc, #176]	; (13e0c <ull_conn_reset+0xd4>)
   13d5c:	f240 638b 	movw	r3, #1675	; 0x68b
   13d60:	f008 fb54 	bl	1c40c <printk>
   13d64:	4040      	eors	r0, r0
   13d66:	f380 8811 	msr	BASEPRI, r0
   13d6a:	f04f 0003 	mov.w	r0, #3
   13d6e:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13d70:	ad03      	add	r5, sp, #12
   13d72:	2203      	movs	r2, #3
   13d74:	4611      	mov	r1, r2
   13d76:	4b26      	ldr	r3, [pc, #152]	; (13e10 <ull_conn_reset+0xd8>)
   13d78:	9500      	str	r5, [sp, #0]
   13d7a:	2000      	movs	r0, #0
   13d7c:	f7fb ff26 	bl	fbcc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   13d80:	4629      	mov	r1, r5
   13d82:	f7fe fb8f 	bl	124a4 <ull_ticker_status_take>
	if (!ret) {
   13d86:	b338      	cbz	r0, 13dd8 <ull_conn_reset+0xa0>
	conn->lll.link_tx_free = NULL;
   13d88:	2300      	movs	r3, #0
   13d8a:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   13d8c:	4620      	mov	r0, r4
   13d8e:	f7fe fba1 	bl	124d4 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   13d92:	4284      	cmp	r4, r0
   13d94:	d00c      	beq.n	13db0 <ull_conn_reset+0x78>
   13d96:	4a1b      	ldr	r2, [pc, #108]	; (13e04 <ull_conn_reset+0xcc>)
   13d98:	491b      	ldr	r1, [pc, #108]	; (13e08 <ull_conn_reset+0xd0>)
   13d9a:	481c      	ldr	r0, [pc, #112]	; (13e0c <ull_conn_reset+0xd4>)
   13d9c:	f240 639a 	movw	r3, #1690	; 0x69a
   13da0:	f008 fb34 	bl	1c40c <printk>
   13da4:	4040      	eors	r0, r0
   13da6:	f380 8811 	msr	BASEPRI, r0
   13daa:	f04f 0003 	mov.w	r0, #3
   13dae:	df02      	svc	2
	data_chan_map[0] = 0xFF;
   13db0:	4b18      	ldr	r3, [pc, #96]	; (13e14 <ull_conn_reset+0xdc>)
	MFIFO_INIT(conn_ack);
   13db2:	4919      	ldr	r1, [pc, #100]	; (13e18 <ull_conn_reset+0xe0>)
	MFIFO_INIT(conn_tx);
   13db4:	4819      	ldr	r0, [pc, #100]	; (13e1c <ull_conn_reset+0xe4>)
	conn_upd_curr = NULL;
   13db6:	4a1a      	ldr	r2, [pc, #104]	; (13e20 <ull_conn_reset+0xe8>)
	data_chan_count = 37U;
   13db8:	4c1a      	ldr	r4, [pc, #104]	; (13e24 <ull_conn_reset+0xec>)
	data_chan_map[0] = 0xFF;
   13dba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13dbe:	601d      	str	r5, [r3, #0]
	data_chan_map[4] = 0x1F;
   13dc0:	251f      	movs	r5, #31
   13dc2:	711d      	strb	r5, [r3, #4]
	MFIFO_INIT(conn_tx);
   13dc4:	2300      	movs	r3, #0
	data_chan_count = 37U;
   13dc6:	2525      	movs	r5, #37	; 0x25
	MFIFO_INIT(conn_tx);
   13dc8:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   13dca:	804b      	strh	r3, [r1, #2]
	data_chan_count = 37U;
   13dcc:	7025      	strb	r5, [r4, #0]
	conn_upd_curr = NULL;
   13dce:	6013      	str	r3, [r2, #0]
	err = init_reset();
   13dd0:	f7ff fa14 	bl	131fc <init_reset>
}
   13dd4:	b005      	add	sp, #20
   13dd6:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
   13dd8:	f104 001c 	add.w	r0, r4, #28
   13ddc:	f7fe fbaa 	bl	12534 <ull_disable>
		LL_ASSERT(!ret);
   13de0:	2800      	cmp	r0, #0
   13de2:	d0d1      	beq.n	13d88 <ull_conn_reset+0x50>
   13de4:	4a07      	ldr	r2, [pc, #28]	; (13e04 <ull_conn_reset+0xcc>)
   13de6:	4910      	ldr	r1, [pc, #64]	; (13e28 <ull_conn_reset+0xf0>)
   13de8:	4808      	ldr	r0, [pc, #32]	; (13e0c <ull_conn_reset+0xd4>)
   13dea:	f240 6394 	movw	r3, #1684	; 0x694
   13dee:	f008 fb0d 	bl	1c40c <printk>
   13df2:	4040      	eors	r0, r0
   13df4:	f380 8811 	msr	BASEPRI, r0
   13df8:	f04f 0003 	mov.w	r0, #3
   13dfc:	df02      	svc	2
   13dfe:	e7c3      	b.n	13d88 <ull_conn_reset+0x50>
   13e00:	20001214 	.word	0x20001214
   13e04:	00022180 	.word	0x00022180
   13e08:	00022290 	.word	0x00022290
   13e0c:	00021ce0 	.word	0x00021ce0
   13e10:	00012499 	.word	0x00012499
   13e14:	20005db0 	.word	0x20005db0
   13e18:	20005db8 	.word	0x20005db8
   13e1c:	20005dfc 	.word	0x20005dfc
   13e20:	200013dc 	.word	0x200013dc
   13e24:	20006072 	.word	0x20006072
   13e28:	00021f64 	.word	0x00021f64

00013e2c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   13e2c:	4b01      	ldr	r3, [pc, #4]	; (13e34 <ull_conn_default_tx_octets_get+0x8>)
}
   13e2e:	8818      	ldrh	r0, [r3, #0]
   13e30:	4770      	bx	lr
   13e32:	bf00      	nop
   13e34:	20001ce4 	.word	0x20001ce4

00013e38 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   13e38:	4b01      	ldr	r3, [pc, #4]	; (13e40 <ull_conn_default_tx_time_get+0x8>)
}
   13e3a:	8818      	ldrh	r0, [r3, #0]
   13e3c:	4770      	bx	lr
   13e3e:	bf00      	nop
   13e40:	20001ce6 	.word	0x20001ce6

00013e44 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   13e44:	4b01      	ldr	r3, [pc, #4]	; (13e4c <ull_conn_default_phy_tx_get+0x8>)
}
   13e46:	7818      	ldrb	r0, [r3, #0]
   13e48:	4770      	bx	lr
   13e4a:	bf00      	nop
   13e4c:	20002284 	.word	0x20002284

00013e50 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   13e50:	4b01      	ldr	r3, [pc, #4]	; (13e58 <ull_conn_default_phy_rx_get+0x8>)
}
   13e52:	7818      	ldrb	r0, [r3, #0]
   13e54:	4770      	bx	lr
   13e56:	bf00      	nop
   13e58:	20002283 	.word	0x20002283

00013e5c <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
   13e5c:	688b      	ldr	r3, [r1, #8]
   13e5e:	689b      	ldr	r3, [r3, #8]
{
   13e60:	b510      	push	{r4, lr}
	switch (lll->role) {
   13e62:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   13e66:	09e4      	lsrs	r4, r4, #7
   13e68:	d10d      	bne.n	13e86 <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   13e6a:	4a0a      	ldr	r2, [pc, #40]	; (13e94 <ull_conn_setup+0x38>)
   13e6c:	490a      	ldr	r1, [pc, #40]	; (13e98 <ull_conn_setup+0x3c>)
   13e6e:	480b      	ldr	r0, [pc, #44]	; (13e9c <ull_conn_setup+0x40>)
   13e70:	f240 23c2 	movw	r3, #706	; 0x2c2
   13e74:	f008 faca 	bl	1c40c <printk>
   13e78:	4040      	eors	r0, r0
   13e7a:	f380 8811 	msr	BASEPRI, r0
   13e7e:	f04f 0003 	mov.w	r0, #3
   13e82:	df02      	svc	2
}
   13e84:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   13e86:	460a      	mov	r2, r1
}
   13e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   13e8c:	3208      	adds	r2, #8
   13e8e:	f7ee befb 	b.w	2c88 <ull_slave_setup>
   13e92:	bf00      	nop
   13e94:	00022180 	.word	0x00022180
   13e98:	00021c84 	.word	0x00021c84
   13e9c:	00021ce0 	.word	0x00021ce0

00013ea0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   13ea0:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ea2:	88da      	ldrh	r2, [r3, #6]
   13ea4:	2a00      	cmp	r2, #0
   13ea6:	d15f      	bne.n	13f68 <ull_conn_rx+0xc8>
{
   13ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eac:	460c      	mov	r4, r1
   13eae:	b085      	sub	sp, #20
   13eb0:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13eb2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13eb6:	48bf      	ldr	r0, [pc, #764]	; (141b4 <ull_conn_rx+0x314>)
   13eb8:	f7fa fde8 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   13ebc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13ebe:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	f040 8095 	bne.w	13ff0 <ull_conn_rx+0x150>
	pdu_rx = (void *)(*rx)->pdu;
   13ec6:	6820      	ldr	r0, [r4, #0]
   13ec8:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	switch (pdu_rx->ll_id) {
   13ecc:	f890 2020 	ldrb.w	r2, [r0, #32]
   13ed0:	f002 0203 	and.w	r2, r2, #3
   13ed4:	2a03      	cmp	r2, #3
	pdu_rx = (void *)(*rx)->pdu;
   13ed6:	4606      	mov	r6, r0
	switch (pdu_rx->ll_id) {
   13ed8:	f001 0c01 	and.w	ip, r1, #1
   13edc:	d12b      	bne.n	13f36 <ull_conn_rx+0x96>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	u8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   13ede:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   13ee2:	f1bc 0f00 	cmp.w	ip, #0
   13ee6:	f000 808a 	beq.w	13ffe <ull_conn_rx+0x15e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13eea:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   13eee:	2a00      	cmp	r2, #0
   13ef0:	f001 0004 	and.w	r0, r1, #4
   13ef4:	f2c0 8692 	blt.w	14c1c <ull_conn_rx+0xd7c>
	return (!conn->lll.role &&
   13ef8:	2800      	cmp	r0, #0
   13efa:	f040 80e8 	bne.w	140ce <ull_conn_rx+0x22e>
		((!conn->llcp_enc.refresh &&
   13efe:	f1b9 0f02 	cmp.w	r9, #2
   13f02:	f000 8377 	beq.w	145f4 <ull_conn_rx+0x754>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13f06:	f1b9 0f05 	cmp.w	r9, #5
   13f0a:	f000 8592 	beq.w	14a32 <ull_conn_rx+0xb92>
   13f0e:	f1b9 0f06 	cmp.w	r9, #6
   13f12:	f000 86e1 	beq.w	14cd8 <ull_conn_rx+0xe38>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13f16:	f1b9 0f0d 	cmp.w	r9, #13
   13f1a:	f000 84bb 	beq.w	14894 <ull_conn_rx+0x9f4>
   13f1e:	f1b9 0f11 	cmp.w	r9, #17
   13f22:	f000 83c4 	beq.w	146ae <ull_conn_rx+0x80e>
		conn->llcp_terminate.reason_peer =
   13f26:	233d      	movs	r3, #61	; 0x3d
   13f28:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13f2c:	6823      	ldr	r3, [r4, #0]
   13f2e:	2203      	movs	r2, #3
   13f30:	711a      	strb	r2, [r3, #4]

		return 0;
   13f32:	2000      	movs	r0, #0
   13f34:	e00a      	b.n	13f4c <ull_conn_rx+0xac>
	switch (pdu_rx->ll_id) {
   13f36:	b962      	cbnz	r2, 13f52 <ull_conn_rx+0xb2>
		if (conn->llcp_enc.pause_rx) {
   13f38:	f1bc 0f00 	cmp.w	ip, #0
   13f3c:	d003      	beq.n	13f46 <ull_conn_rx+0xa6>
			conn->llcp_terminate.reason_peer =
   13f3e:	233d      	movs	r3, #61	; 0x3d
   13f40:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
   13f44:	6820      	ldr	r0, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13f46:	2303      	movs	r3, #3
   13f48:	7103      	strb	r3, [r0, #4]
	return 0;
   13f4a:	2000      	movs	r0, #0
}
   13f4c:	b005      	add	sp, #20
   13f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   13f52:	f1bc 0f00 	cmp.w	ip, #0
   13f56:	d0f8      	beq.n	13f4a <ull_conn_rx+0xaa>
			conn->llcp_terminate.reason_peer =
   13f58:	223d      	movs	r2, #61	; 0x3d
   13f5a:	f885 212b 	strb.w	r2, [r5, #299]	; 0x12b
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13f5e:	6822      	ldr	r2, [r4, #0]
   13f60:	2103      	movs	r1, #3
	return 0;
   13f62:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13f64:	7111      	strb	r1, [r2, #4]
   13f66:	e7f1      	b.n	13f4c <ull_conn_rx+0xac>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13f68:	2203      	movs	r2, #3
   13f6a:	711a      	strb	r2, [r3, #4]
		return 0;
   13f6c:	2000      	movs	r0, #0
}
   13f6e:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   13f70:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   13f74:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   13f76:	f043 0303 	orr.w	r3, r3, #3
   13f7a:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   13f7e:	d112      	bne.n	13fa6 <ull_conn_rx+0x106>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   13f80:	f8b5 31aa 	ldrh.w	r3, [r5, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   13f84:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
					conn->llcp_phy.tx =
   13f88:	488b      	ldr	r0, [pc, #556]	; (141b8 <ull_conn_rx+0x318>)
   13f8a:	4018      	ands	r0, r3
   13f8c:	f001 0307 	and.w	r3, r1, #7
   13f90:	009b      	lsls	r3, r3, #2
   13f92:	f3c1 1102 	ubfx	r1, r1, #4, #3
   13f96:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
					conn->llcp_phy.ack--;
   13f9a:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   13f9c:	4303      	orrs	r3, r0
					conn->llcp_phy.ack--;
   13f9e:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
					conn->llcp_phy.tx =
   13fa2:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   13fa6:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   13faa:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
				conn->llcp_phy.rx &= p->tx_phys;
   13fae:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
				conn->llcp_phy.tx &= p->rx_phys;
   13fb2:	f3c2 0082 	ubfx	r0, r2, #2, #3
   13fb6:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   13fb8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   13fbc:	009b      	lsls	r3, r3, #2
   13fbe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   13fc2:	f002 0203 	and.w	r2, r2, #3
   13fc6:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   13fc8:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   13fcc:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   13fd0:	d002      	beq.n	13fd8 <ull_conn_rx+0x138>
   13fd2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   13fd6:	d105      	bne.n	13fe4 <ull_conn_rx+0x144>
					conn->llcp_phy.tx = 0;
   13fd8:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   13fdc:	f003 0303 	and.w	r3, r3, #3
   13fe0:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   13fe4:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   13fe8:	f043 0301 	orr.w	r3, r3, #1
   13fec:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13ff0:	6823      	ldr	r3, [r4, #0]
   13ff2:	2203      	movs	r2, #3
	int nack = 0;
   13ff4:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13ff6:	711a      	strb	r2, [r3, #4]
}
   13ff8:	b005      	add	sp, #20
   13ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   13ffe:	f100 0220 	add.w	r2, r0, #32
	switch (opcode) {
   14002:	f1b9 0f19 	cmp.w	r9, #25
   14006:	d820      	bhi.n	1404a <ull_conn_rx+0x1aa>
   14008:	e8df f019 	tbh	[pc, r9, lsl #1]
   1400c:	030100da 	.word	0x030100da
   14010:	04c202f4 	.word	0x04c202f4
   14014:	050e0507 	.word	0x050e0507
   14018:	0296052e 	.word	0x0296052e
   1401c:	0256027d 	.word	0x0256027d
   14020:	054a0207 	.word	0x054a0207
   14024:	04440459 	.word	0x04440459
   14028:	041a043d 	.word	0x041a043d
   1402c:	03510388 	.word	0x03510388
   14030:	04300337 	.word	0x04300337
   14034:	008a008a 	.word	0x008a008a
   14038:	01c90494 	.word	0x01c90494
   1403c:	014a0182 	.word	0x014a0182
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   14040:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14044:	2a01      	cmp	r2, #1
   14046:	f000 8535 	beq.w	14ab4 <ull_conn_rx+0xc14>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1404a:	485c      	ldr	r0, [pc, #368]	; (141bc <ull_conn_rx+0x31c>)
   1404c:	f7fa fcec 	bl	ea28 <mem_acquire>
	if (!tx) {
   14050:	2800      	cmp	r0, #0
   14052:	f000 8674 	beq.w	14d3e <ull_conn_rx+0xe9e>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   14056:	2202      	movs	r2, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14058:	7901      	ldrb	r1, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1405a:	7142      	strb	r2, [r0, #5]
	    conn->tx_head &&
   1405c:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   14060:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14064:	f041 0303 	orr.w	r3, r1, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   14068:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1406a:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1406c:	71c1      	strb	r1, [r0, #7]
	if (
   1406e:	b302      	cbz	r2, 140b2 <ull_conn_rx+0x212>
	    !conn->llcp_enc.pause_tx &&
   14070:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   14074:	0799      	lsls	r1, r3, #30
   14076:	d41c      	bmi.n	140b2 <ull_conn_rx+0x212>
	    !conn->llcp_phy.pause_tx &&
   14078:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   1407c:	07db      	lsls	r3, r3, #31
   1407e:	d418      	bmi.n	140b2 <ull_conn_rx+0x212>
		if (conn->tx_head == conn->tx_data) {
   14080:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   14084:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   14086:	bf04      	itt	eq
   14088:	6813      	ldreq	r3, [r2, #0]
   1408a:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1408e:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   14092:	b99b      	cbnz	r3, 140bc <ull_conn_rx+0x21c>
			tx->next = conn->tx_head->next;
   14094:	6813      	ldr	r3, [r2, #0]
   14096:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   14098:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   1409a:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1409c:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   140a0:	2a00      	cmp	r2, #0
   140a2:	f000 85e6 	beq.w	14c72 <ull_conn_rx+0xdd2>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   140a6:	2303      	movs	r3, #3
	return 0;
   140a8:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   140aa:	7133      	strb	r3, [r6, #4]
}
   140ac:	b005      	add	sp, #20
   140ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   140b2:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   140b6:	2b00      	cmp	r3, #0
   140b8:	f000 85df 	beq.w	14c7a <ull_conn_rx+0xdda>
	tx->next = conn->tx_ctrl_last->next;
   140bc:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   140c0:	681a      	ldr	r2, [r3, #0]
   140c2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   140c4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   140c6:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   140ca:	6802      	ldr	r2, [r0, #0]
}
   140cc:	e7e8      	b.n	140a0 <ull_conn_rx+0x200>
		 (conn->llcp_enc.refresh &&
   140ce:	f1b9 0f02 	cmp.w	r9, #2
   140d2:	f000 828f 	beq.w	145f4 <ull_conn_rx+0x754>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   140d6:	f1b9 0f0b 	cmp.w	r9, #11
   140da:	f000 85d5 	beq.w	14c88 <ull_conn_rx+0xde8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   140de:	f1b9 0f04 	cmp.w	r9, #4
   140e2:	f47f af10 	bne.w	13f06 <ull_conn_rx+0x66>
		if (conn->lll.role ||
   140e6:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   140ea:	2a0d      	cmp	r2, #13
   140ec:	d1ad      	bne.n	1404a <ull_conn_rx+0x1aa>
		memcpy(&conn->llcp.encryption.skd[8],
   140ee:	2208      	movs	r2, #8
   140f0:	f106 0124 	add.w	r1, r6, #36	; 0x24
   140f4:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
   140f8:	f00a f9f6 	bl	1e4e8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   140fc:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   14100:	2204      	movs	r2, #4
   14102:	f105 009c 	add.w	r0, r5, #156	; 0x9c
   14106:	f00a f9ef 	bl	1e4e8 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1410a:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1410e:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
   14110:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14114:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   14116:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   1411a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1411c:	7111      	strb	r1, [r2, #4]
		break;
   1411e:	e715      	b.n	13f4c <ull_conn_rx+0xac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   14120:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14124:	2a09      	cmp	r2, #9
   14126:	d190      	bne.n	1404a <ull_conn_rx+0x1aa>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   14128:	f1b9 0f14 	cmp.w	r9, #20
   1412c:	f001 8031 	beq.w	15192 <ull_conn_rx+0x12f2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   14130:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   14134:	f895 1199 	ldrb.w	r1, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   14138:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1413c:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1413e:	4291      	cmp	r1, r2
	eff_rx_time = conn->lll.max_rx_time;
   14140:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	eff_tx_octets = conn->lll.max_tx_octets;
   14144:	f8b5 a05c 	ldrh.w	sl, [r5, #92]	; 0x5c
	eff_tx_time = conn->lll.max_tx_time;
   14148:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   1414c:	9202      	str	r2, [sp, #8]
	eff_rx_time = conn->lll.max_rx_time;
   1414e:	9300      	str	r3, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   14150:	f000 86c9 	beq.w	14ee6 <ull_conn_rx+0x1046>
	      ((conn->llcp_length.state == LLCP_LENGTH_STATE_RSP_WAIT) &&
   14154:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   14158:	f001 0107 	and.w	r1, r1, #7
   1415c:	2902      	cmp	r1, #2
	struct node_tx *tx = NULL;
   1415e:	f04f 0800 	mov.w	r8, #0
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   14162:	f001 8034 	beq.w	151ce <ull_conn_rx+0x132e>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   14166:	f1b9 0f15 	cmp.w	r9, #21
   1416a:	f040 86c2 	bne.w	14ef2 <ull_conn_rx+0x1052>
send_length_resp:
   1416e:	f8dd c000 	ldr.w	ip, [sp]
   14172:	9801      	ldr	r0, [sp, #4]
   14174:	4659      	mov	r1, fp
   14176:	4653      	mov	r3, sl
	if (tx) {
   14178:	f1b8 0f00 	cmp.w	r8, #0
   1417c:	f43f aee5 	beq.w	13f4a <ull_conn_rx+0xaa>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14180:	f898 2004 	ldrb.w	r2, [r8, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   14184:	f8a8 300c 	strh.w	r3, [r8, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14188:	f042 0203 	orr.w	r2, r2, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1418c:	2315      	movs	r3, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1418e:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   14190:	f8a8 0008 	strh.w	r0, [r8, #8]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   14194:	f8a8 100e 	strh.w	r1, [r8, #14]
	ctrl_tx_sec_enqueue(conn, tx);
   14198:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1419a:	f8a8 c00a 	strh.w	ip, [r8, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1419e:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   141a2:	f888 4005 	strb.w	r4, [r8, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   141a6:	f888 3007 	strb.w	r3, [r8, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   141aa:	4641      	mov	r1, r8
   141ac:	f7ff fa3a 	bl	13624 <ctrl_tx_sec_enqueue>
	return 0;
   141b0:	2000      	movs	r0, #0
}
   141b2:	e6cb      	b.n	13f4c <ull_conn_rx+0xac>
   141b4:	20001214 	.word	0x20001214
   141b8:	fffffb03 	.word	0xfffffb03
   141bc:	2000145c 	.word	0x2000145c
		if (!conn->lll.role ||
   141c0:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   141c4:	2a00      	cmp	r2, #0
   141c6:	f6bf af40 	bge.w	1404a <ull_conn_rx+0x1aa>
   141ca:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   141ce:	2a0c      	cmp	r2, #12
   141d0:	f47f af3b 	bne.w	1404a <ull_conn_rx+0x1aa>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   141d4:	f8b0 002d 	ldrh.w	r0, [r0, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   141d8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   141da:	1ac3      	subs	r3, r0, r3
   141dc:	0419      	lsls	r1, r3, #16
   141de:	f101 808f 	bmi.w	15300 <ull_conn_rx+0x1460>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   141e2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   141e6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   141ea:	1a9b      	subs	r3, r3, r2
   141ec:	f003 0303 	and.w	r3, r3, #3
   141f0:	2b02      	cmp	r3, #2
   141f2:	f001 80be 	beq.w	15372 <ull_conn_rx+0x14d2>
	if (!conn_upd_curr) {
   141f6:	4bcc      	ldr	r3, [pc, #816]	; (14528 <ull_conn_rx+0x688>)
   141f8:	681a      	ldr	r2, [r3, #0]
   141fa:	2a00      	cmp	r2, #0
   141fc:	f001 80bd 	beq.w	1537a <ull_conn_rx+0x14da>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   14200:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   14204:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   14208:	f8b6 1025 	ldrh.w	r1, [r6, #37]	; 0x25
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1420c:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   14210:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14214:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   14218:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1421c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   14220:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
   14224:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   14228:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1422c:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   14230:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
   14234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   14238:	f8a5 210a 	strh.w	r2, [r5, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1423c:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
	conn->llcp_cu.ack--;
   14240:	f895 2105 	ldrb.w	r2, [r5, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   14244:	f896 602c 	ldrb.w	r6, [r6, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
   14248:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1424c:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   14250:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   14254:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   14258:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1425a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   1425e:	f885 2105 	strb.w	r2, [r5, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   14262:	f885 3106 	strb.w	r3, [r5, #262]	; 0x106
	conn->llcp_cu.timeout =
   14266:	f8a5 110c 	strh.w	r1, [r5, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   1426a:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   1426c:	6823      	ldr	r3, [r4, #0]
   1426e:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   14270:	6823      	ldr	r3, [r4, #0]
   14272:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   14276:	2300      	movs	r3, #0
   14278:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1427a:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   1427e:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14282:	4293      	cmp	r3, r2
   14284:	d007      	beq.n	14296 <ull_conn_rx+0x3f6>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   14286:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1428a:	f003 0307 	and.w	r3, r3, #7
   1428e:	2b04      	cmp	r3, #4
   14290:	d101      	bne.n	14296 <ull_conn_rx+0x3f6>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14292:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		conn->procedure_expire = 0U;
   14296:	2300      	movs	r3, #0
   14298:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   1429c:	4618      	mov	r0, r3
		break;
   1429e:	e655      	b.n	13f4c <ull_conn_rx+0xac>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   142a0:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   142a4:	2a00      	cmp	r2, #0
   142a6:	f6ff aed0 	blt.w	1404a <ull_conn_rx+0x1aa>
   142aa:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
   142ae:	2f03      	cmp	r7, #3
   142b0:	f47f aecb 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   142b4:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
					 conn->lll.phy_rx))) {
   142b8:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   142bc:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   142c0:	430b      	orrs	r3, r1
   142c2:	f003 0307 	and.w	r3, r3, #7
   142c6:	4213      	tst	r3, r2
   142c8:	f43f ae3f 	beq.w	13f4a <ull_conn_rx+0xaa>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   142cc:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   142d0:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   142d4:	1a9b      	subs	r3, r3, r2
   142d6:	f003 0303 	and.w	r3, r3, #3
   142da:	2b02      	cmp	r3, #2
   142dc:	f43f ae35 	beq.w	13f4a <ull_conn_rx+0xaa>
			    0x02) {
				break;
			}

			memcpy(&conn->llcp.chan_map.chm[0], data_chan_map,
   142e0:	4992      	ldr	r1, [pc, #584]	; (1452c <ull_conn_rx+0x68c>)
   142e2:	2205      	movs	r2, #5
   142e4:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   142e8:	f00a f8fe 	bl	1e4e8 <memcpy>
			       sizeof(conn->llcp.chan_map.chm));
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   142ec:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   142f0:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
			conn->llcp_ack -= 2U;
   142f4:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   142f6:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   142f8:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   142fc:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14300:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
   14302:	f043 0301 	orr.w	r3, r3, #1
   14306:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	int nack = 0;
   1430a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1430c:	7117      	strb	r7, [r2, #4]

		break;
   1430e:	e61d      	b.n	13f4c <ull_conn_rx+0xac>
		if (!conn->lll.role ||
   14310:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14314:	2a00      	cmp	r2, #0
   14316:	f6bf ae98 	bge.w	1404a <ull_conn_rx+0x1aa>
   1431a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   1431e:	2a05      	cmp	r2, #5
   14320:	f47f ae93 	bne.w	1404a <ull_conn_rx+0x1aa>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   14324:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   14328:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   1432c:	ea41 0003 	orr.w	r0, r1, r3
   14330:	f010 0007 	ands.w	r0, r0, #7
   14334:	f040 86ad 	bne.w	15092 <ull_conn_rx+0x11f2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14338:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   1433c:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   14340:	428b      	cmp	r3, r1
   14342:	f43f aeb0 	beq.w	140a6 <ull_conn_rx+0x206>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   14346:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1434a:	f003 0303 	and.w	r3, r3, #3
   1434e:	2b02      	cmp	r3, #2
   14350:	f47f aea9 	bne.w	140a6 <ull_conn_rx+0x206>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14354:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14358:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1435c:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   14360:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14364:	4611      	mov	r1, r2
   14366:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1436a:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   1436e:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   14372:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14376:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   1437a:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   1437e:	f43f adee 	beq.w	13f5e <ull_conn_rx+0xbe>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14382:	6823      	ldr	r3, [r4, #0]
   14384:	210e      	movs	r1, #14
   14386:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   14388:	f886 0020 	strb.w	r0, [r6, #32]
		p->tx = conn->lll.phy_tx;
   1438c:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
   14390:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   14394:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14398:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
		if (err) {
   1439c:	e5d6      	b.n	13f4c <ull_conn_rx+0xac>
		if (conn->lll.role ||
   1439e:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   143a2:	2a00      	cmp	r2, #0
   143a4:	f6ff ae51 	blt.w	1404a <ull_conn_rx+0x1aa>
   143a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   143ac:	2a03      	cmp	r2, #3
   143ae:	f47f ae4c 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (!conn->lll.role &&
   143b2:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   143b6:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
   143ba:	429a      	cmp	r2, r3
   143bc:	f43f ae73 	beq.w	140a6 <ull_conn_rx+0x206>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   143c0:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   143c4:	f001 0303 	and.w	r3, r1, #3
   143c8:	2b02      	cmp	r3, #2
   143ca:	f47f ae6c 	bne.w	140a6 <ull_conn_rx+0x206>
			conn->llcp_phy.tx &= p->rx_phys;
   143ce:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
			conn->llcp_phy.rx &= p->tx_phys;
   143d2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
			conn->llcp_phy.tx &= p->rx_phys;
   143d6:	f3c1 0082 	ubfx	r0, r1, #2, #3
   143da:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   143dc:	009b      	lsls	r3, r3, #2
   143de:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   143e2:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   143e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   143ea:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   143ee:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   143f2:	d002      	beq.n	143fa <ull_conn_rx+0x55a>
   143f4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   143f8:	d105      	bne.n	14406 <ull_conn_rx+0x566>
				conn->llcp_phy.tx = 0;
   143fa:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   143fe:	f003 0303 	and.w	r3, r3, #3
   14402:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   14406:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   1440a:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   1440c:	f043 0301 	orr.w	r3, r3, #1
   14410:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   14414:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14418:	e645      	b.n	140a6 <ull_conn_rx+0x206>
		if (!conn->lll.role ||
   1441a:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   1441e:	2a00      	cmp	r2, #0
   14420:	f6bf ae13 	bge.w	1404a <ull_conn_rx+0x1aa>
   14424:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   14428:	2c01      	cmp	r4, #1
   1442a:	f47f ae0e 	bne.w	1404a <ull_conn_rx+0x1aa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1442e:	4840      	ldr	r0, [pc, #256]	; (14530 <ull_conn_rx+0x690>)
   14430:	f7fa fafa 	bl	ea28 <mem_acquire>
		if (!tx) {
   14434:	4603      	mov	r3, r0
   14436:	2800      	cmp	r0, #0
   14438:	f000 8481 	beq.w	14d3e <ull_conn_rx+0xe9e>
	conn->llcp_enc.pause_rx = 1U;
   1443c:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   14440:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   14444:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   14448:	f36f 01c3 	bfc	r1, #3, #1
   1444c:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   14450:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14454:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   14456:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1445a:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   1445c:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14460:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   14464:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14466:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   14468:	71d8      	strb	r0, [r3, #7]
	if (
   1446a:	2a00      	cmp	r2, #0
   1446c:	f000 8428 	beq.w	14cc0 <ull_conn_rx+0xe20>
	    !conn->llcp_enc.pause_tx &&
   14470:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	    conn->tx_head &&
   14474:	078f      	lsls	r7, r1, #30
   14476:	f100 8423 	bmi.w	14cc0 <ull_conn_rx+0xe20>
	    !conn->llcp_phy.pause_tx &&
   1447a:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
   1447e:	07cc      	lsls	r4, r1, #31
   14480:	f100 841e 	bmi.w	14cc0 <ull_conn_rx+0xe20>
		if (conn->tx_head == conn->tx_data) {
   14484:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   14488:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1448a:	bf04      	itt	eq
   1448c:	6811      	ldreq	r1, [r2, #0]
   1448e:	f8c5 11bc 	streq.w	r1, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   14492:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   14496:	2900      	cmp	r1, #0
   14498:	f001 806b 	beq.w	15572 <ull_conn_rx+0x16d2>
	tx->next = conn->tx_ctrl_last->next;
   1449c:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
   144a0:	6811      	ldr	r1, [r2, #0]
   144a2:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   144a4:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   144a6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
	if (!tx->next) {
   144aa:	681a      	ldr	r2, [r3, #0]
   144ac:	2a00      	cmp	r2, #0
   144ae:	f47f adfa 	bne.w	140a6 <ull_conn_rx+0x206>
		conn->tx_data_last = tx;
   144b2:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
   144b6:	e5f6      	b.n	140a6 <ull_conn_rx+0x206>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   144b8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   144bc:	2a09      	cmp	r2, #9
   144be:	f47f adc4 	bne.w	1404a <ull_conn_rx+0x1aa>
	       (features[1] << 8) | (features[2] << 16);
   144c2:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
   144c6:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   144ca:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
   144ce:	4919      	ldr	r1, [pc, #100]	; (14534 <ull_conn_rx+0x694>)
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   144d0:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   144d4:	0412      	lsls	r2, r2, #16
   144d6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   144da:	4302      	orrs	r2, r0
   144dc:	430a      	orrs	r2, r1
	conn->common.fex_valid = 1U;
   144de:	f895 10dc 	ldrb.w	r1, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   144e2:	f895 0118 	ldrb.w	r0, [r5, #280]	; 0x118
   144e6:	f885 0119 	strb.w	r0, [r5, #281]	; 0x119
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   144ea:	401a      	ands	r2, r3
   144ec:	f3c2 0210 	ubfx	r2, r2, #0, #17
	conn->procedure_expire = 0U;
   144f0:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   144f2:	f041 0101 	orr.w	r1, r1, #1
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
   144f6:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   144fa:	f885 10dc 	strb.w	r1, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
   144fe:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   14502:	4618      	mov	r0, r3
}
   14504:	e522      	b.n	13f4c <ull_conn_rx+0xac>
		if (!conn->lll.role ||
   14506:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   1450a:	2900      	cmp	r1, #0
   1450c:	f6bf ad9d 	bge.w	1404a <ull_conn_rx+0x1aa>
		if (conn->lll.role ||
   14510:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   14514:	2909      	cmp	r1, #9
   14516:	f47f ad98 	bne.w	1404a <ull_conn_rx+0x1aa>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1451a:	1d31      	adds	r1, r6, #4
   1451c:	4628      	mov	r0, r5
}
   1451e:	b005      	add	sp, #20
   14520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   14524:	f7ff b910 	b.w	13748 <feature_rsp_send.isra.0>
   14528:	200013dc 	.word	0x200013dc
   1452c:	20005db0 	.word	0x20005db0
   14530:	2000145c 	.word	0x2000145c
   14534:	fffe30d0 	.word	0xfffe30d0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   14538:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   1453c:	2a02      	cmp	r2, #2
   1453e:	f47f ad84 	bne.w	1404a <ull_conn_rx+0x1aa>
		} else if (conn->llcp_conn_param.ack !=
   14542:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
   14546:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   1454a:	429a      	cmp	r2, r3
   1454c:	f000 83fb 	beq.w	14d46 <ull_conn_rx+0xea6>
			conn->llcp_conn_param.disabled = 1U;
   14550:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   14554:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   14558:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   1455c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   1455e:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   14562:	f2c0 8414 	blt.w	14d8e <ull_conn_rx+0xeee>
				LL_ASSERT(conn->llcp_cu.req ==
   14566:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   1456a:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   1456e:	429a      	cmp	r2, r3
   14570:	d00e      	beq.n	14590 <ull_conn_rx+0x6f0>
   14572:	4aeb      	ldr	r2, [pc, #940]	; (14920 <ull_conn_rx+0xa80>)
   14574:	49eb      	ldr	r1, [pc, #940]	; (14924 <ull_conn_rx+0xa84>)
   14576:	48ec      	ldr	r0, [pc, #944]	; (14928 <ull_conn_rx+0xa88>)
   14578:	f241 63c3 	movw	r3, #5827	; 0x16c3
   1457c:	f007 ff46 	bl	1c40c <printk>
   14580:	4040      	eors	r0, r0
   14582:	f380 8811 	msr	BASEPRI, r0
   14586:	f04f 0003 	mov.w	r0, #3
   1458a:	df02      	svc	2
   1458c:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
				conn->llcp_conn_param.state =
   14590:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.interval =
   14594:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   14598:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
				conn->llcp_conn_param.state =
   1459c:	2205      	movs	r2, #5
   1459e:	f362 0002 	bfi	r0, r2, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   145a2:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
				conn->llcp_cu.latency =
   145a6:	f8b5 6178 	ldrh.w	r6, [r5, #376]	; 0x178
				conn->llcp_cu.ack--;
   145aa:	3b01      	subs	r3, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   145ac:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   145b0:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   145b4:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
   145b6:	2301      	movs	r3, #1
   145b8:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   145bc:	431a      	orrs	r2, r3
   145be:	f021 0307 	bic.w	r3, r1, #7
   145c2:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   145c4:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.timeout =
   145c6:	f8b5 417a 	ldrh.w	r4, [r5, #378]	; 0x17a
				conn->llcp_conn_param.state =
   145ca:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   145ce:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
   145d2:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   145d4:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   145d6:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
				conn->llcp_cu.latency =
   145da:	f8a5 610a 	strh.w	r6, [r5, #266]	; 0x10a
				conn->llcp_cu.timeout =
   145de:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   145e2:	710a      	strb	r2, [r1, #4]
				break;
   145e4:	e4b2      	b.n	13f4c <ull_conn_rx+0xac>
		((!conn->llcp_enc.refresh &&
   145e6:	f1b9 0f07 	cmp.w	r9, #7
   145ea:	d0a5      	beq.n	14538 <ull_conn_rx+0x698>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   145ec:	f1b9 0f02 	cmp.w	r9, #2
   145f0:	f040 8323 	bne.w	14c3a <ull_conn_rx+0xd9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   145f4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   145f8:	2a02      	cmp	r2, #2
   145fa:	f47f ad26 	bne.w	1404a <ull_conn_rx+0x1aa>
		terminate_ind_recv(conn, *rx, pdu_rx);
   145fe:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   14602:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14606:	2303      	movs	r3, #3
   14608:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1460a:	2000      	movs	r0, #0
}
   1460c:	e49e      	b.n	13f4c <ull_conn_rx+0xac>
		if (!conn->lll.role ||
   1460e:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14612:	2a00      	cmp	r2, #0
   14614:	f6bf ad19 	bge.w	1404a <ull_conn_rx+0x1aa>
   14618:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   1461c:	2a08      	cmp	r2, #8
   1461e:	f47f ad14 	bne.w	1404a <ull_conn_rx+0x1aa>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   14622:	f8b0 4029 	ldrh.w	r4, [r0, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   14626:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   14628:	1ae3      	subs	r3, r4, r3
   1462a:	041a      	lsls	r2, r3, #16
   1462c:	f100 8668 	bmi.w	15300 <ull_conn_rx+0x1460>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14630:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14634:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14638:	1a9b      	subs	r3, r3, r2
   1463a:	f003 0303 	and.w	r3, r3, #3
   1463e:	2b02      	cmp	r3, #2
   14640:	f000 8697 	beq.w	15372 <ull_conn_rx+0x14d2>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   14644:	f100 0124 	add.w	r1, r0, #36	; 0x24
   14648:	2205      	movs	r2, #5
   1464a:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   1464e:	f009 ff4b 	bl	1e4e8 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   14652:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   14656:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   1465a:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   1465e:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   14660:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   14664:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14666:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   14668:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   1466c:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   14670:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	int nack = 0;
   14674:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14676:	7131      	strb	r1, [r6, #4]
		if (err) {
   14678:	e468      	b.n	13f4c <ull_conn_rx+0xac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   1467a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   1467e:	2c01      	cmp	r4, #1
   14680:	f47f ace3 	bne.w	1404a <ull_conn_rx+0x1aa>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14684:	48a9      	ldr	r0, [pc, #676]	; (1492c <ull_conn_rx+0xa8c>)
   14686:	f7fa f9cf 	bl	ea28 <mem_acquire>
	if (!tx) {
   1468a:	4601      	mov	r1, r0
   1468c:	2800      	cmp	r0, #0
   1468e:	f000 8356 	beq.w	14d3e <ull_conn_rx+0xe9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14692:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   14694:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14696:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1469a:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1469c:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1469e:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   146a0:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   146a2:	f7fe ffbf 	bl	13624 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   146a6:	2303      	movs	r3, #3
   146a8:	7133      	strb	r3, [r6, #4]
	return 0;
   146aa:	2000      	movs	r0, #0
   146ac:	e44e      	b.n	13f4c <ull_conn_rx+0xac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   146ae:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   146b2:	2a03      	cmp	r2, #3
   146b4:	f47f acc9 	bne.w	1404a <ull_conn_rx+0x1aa>
	switch (rej_ext_ind->reject_opcode) {
   146b8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   146bc:	3b03      	subs	r3, #3
   146be:	2b13      	cmp	r3, #19
   146c0:	f63f acf1 	bhi.w	140a6 <ull_conn_rx+0x206>
   146c4:	a201      	add	r2, pc, #4	; (adr r2, 146cc <ull_conn_rx+0x82c>)
   146c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   146ca:	bf00      	nop
   146cc:	00014bdb 	.word	0x00014bdb
   146d0:	000140a7 	.word	0x000140a7
   146d4:	000140a7 	.word	0x000140a7
   146d8:	000140a7 	.word	0x000140a7
   146dc:	000140a7 	.word	0x000140a7
   146e0:	000140a7 	.word	0x000140a7
   146e4:	000140a7 	.word	0x000140a7
   146e8:	000140a7 	.word	0x000140a7
   146ec:	000140a7 	.word	0x000140a7
   146f0:	000140a7 	.word	0x000140a7
   146f4:	000140a7 	.word	0x000140a7
   146f8:	000140a7 	.word	0x000140a7
   146fc:	00014b73 	.word	0x00014b73
   14700:	000140a7 	.word	0x000140a7
   14704:	000140a7 	.word	0x000140a7
   14708:	000140a7 	.word	0x000140a7
   1470c:	000140a7 	.word	0x000140a7
   14710:	00014b31 	.word	0x00014b31
   14714:	000140a7 	.word	0x000140a7
   14718:	00014ac5 	.word	0x00014ac5
		if (conn->lll.role ||
   1471c:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14720:	2a00      	cmp	r2, #0
   14722:	f6ff ac92 	blt.w	1404a <ull_conn_rx+0x1aa>
   14726:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   1472a:	2a18      	cmp	r2, #24
   1472c:	f47f ac8d 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (!conn->lll.role &&
   14730:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   14734:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14738:	429a      	cmp	r2, r3
   1473a:	f43f acb4 	beq.w	140a6 <ull_conn_rx+0x206>
		    (conn->llcp_conn_param.state ==
   1473e:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   14742:	f003 0307 	and.w	r3, r3, #7
   14746:	2b04      	cmp	r3, #4
   14748:	f47f acad 	bne.w	140a6 <ull_conn_rx+0x206>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1474c:	8c87      	ldrh	r7, [r0, #36]	; 0x24
			if ((interval_min < 6) ||
   1474e:	2f05      	cmp	r7, #5
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14750:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   14752:	f240 85cf 	bls.w	152f4 <ull_conn_rx+0x1454>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14756:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
			if ((interval_min < 6) ||
   14758:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1475c:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   1475e:	f200 85c9 	bhi.w	152f4 <ull_conn_rx+0x1454>
			    (interval_max > 3200) ||
   14762:	429a      	cmp	r2, r3
   14764:	f200 85c6 	bhi.w	152f4 <ull_conn_rx+0x1454>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   14768:	8d31      	ldrh	r1, [r6, #40]	; 0x28
			    (interval_min > interval_max) ||
   1476a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   1476e:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   14772:	f080 85bf 	bcs.w	152f4 <ull_conn_rx+0x1454>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14776:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
			    (latency > 499) ||
   14778:	f1a2 0e0a 	sub.w	lr, r2, #10
   1477c:	fa1f fe8e 	uxth.w	lr, lr
   14780:	f640 4976 	movw	r9, #3190	; 0xc76
   14784:	45ce      	cmp	lr, r9
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14786:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   1478a:	f200 85b3 	bhi.w	152f4 <ull_conn_rx+0x1454>
			     ((latency + 1) * interval_max)) ||
   1478e:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   14792:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   14796:	f080 85ad 	bcs.w	152f4 <ull_conn_rx+0x1454>
			     ((latency + 1) * interval_max)) ||
   1479a:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   1479e:	4573      	cmp	r3, lr
   147a0:	f0c0 85a8 	bcc.w	152f4 <ull_conn_rx+0x1454>
			conn->procedure_expire = 0U;
   147a4:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
   147a6:	f8a5 217a 	strh.w	r2, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   147aa:	f885 e17c 	strb.w	lr, [r5, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   147ae:	f8a5 7174 	strh.w	r7, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   147b2:	f8a5 0176 	strh.w	r0, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   147b6:	f8a5 1178 	strh.w	r1, [r5, #376]	; 0x178
			conn->procedure_expire = 0U;
   147ba:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   147be:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   147c2:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   147c6:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   147ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   147ce:	f8a5 317e 	strh.w	r3, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   147d2:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   147d6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   147da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   147de:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   147e2:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   147e6:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   147ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   147ee:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   147f2:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   147f6:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   147fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   147fe:	f8a5 3184 	strh.w	r3, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   14802:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
   14806:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   1480a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   1480e:	f8a5 3186 	strh.w	r3, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   14812:	f896 1038 	ldrb.w	r1, [r6, #56]	; 0x38
   14816:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
   1481a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   1481e:	f8a5 3188 	strh.w	r3, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   14822:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   14826:	f896 003a 	ldrb.w	r0, [r6, #58]	; 0x3a
   1482a:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1482c:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   1482e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14832:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   14836:	f8a5 318a 	strh.w	r3, [r5, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1483a:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1483e:	e432      	b.n	140a6 <ull_conn_rx+0x206>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   14840:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14844:	2a18      	cmp	r2, #24
   14846:	f47f ac00 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1484a:	4f39      	ldr	r7, [pc, #228]	; (14930 <ull_conn_rx+0xa90>)
   1484c:	683b      	ldr	r3, [r7, #0]
   1484e:	2b00      	cmp	r3, #0
   14850:	f000 8249 	beq.w	14ce6 <ull_conn_rx+0xe46>
   14854:	429d      	cmp	r5, r3
   14856:	f000 8246 	beq.w	14ce6 <ull_conn_rx+0xe46>
			nack = reject_ext_ind_send(conn, *rx,
   1485a:	1d01      	adds	r1, r0, #4
   1485c:	2320      	movs	r3, #32
   1485e:	4628      	mov	r0, r5
   14860:	220f      	movs	r2, #15
}
   14862:	b005      	add	sp, #20
   14864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   14868:	f7fe be28 	b.w	134bc <reject_ext_ind_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   1486c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14870:	2a01      	cmp	r2, #1
   14872:	f47f abea 	bne.w	1404a <ull_conn_rx+0x1aa>
		conn->procedure_expire = 0U;
   14876:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14878:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   1487a:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   1487e:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14880:	7132      	strb	r2, [r6, #4]
		break;
   14882:	f7ff bb63 	b.w	13f4c <ull_conn_rx+0xac>
		if (conn->lll.role ||
   14886:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   1488a:	2900      	cmp	r1, #0
   1488c:	f6bf ae40 	bge.w	14510 <ull_conn_rx+0x670>
   14890:	f7ff bbdb 	b.w	1404a <ull_conn_rx+0x1aa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   14894:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14898:	2a02      	cmp	r2, #2
   1489a:	f47f abd6 	bne.w	1404a <ull_conn_rx+0x1aa>
		conn->llcp_enc.pause_rx = 0U;
   1489e:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
   148a2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   148a6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 0U;
   148aa:	f022 0203 	bic.w	r2, r2, #3
		conn->procedure_expire = 0U;
   148ae:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   148b0:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
		conn->procedure_expire = 0U;
   148b4:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   148b8:	4618      	mov	r0, r3
		break;
   148ba:	f7ff bb47 	b.w	13f4c <ull_conn_rx+0xac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   148be:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   148c2:	2c06      	cmp	r4, #6
   148c4:	f47f abc1 	bne.w	1404a <ull_conn_rx+0x1aa>
	if (!conn->llcp_version.tx) {
   148c8:	f895 3122 	ldrb.w	r3, [r5, #290]	; 0x122
   148cc:	07d8      	lsls	r0, r3, #31
   148ce:	f140 8324 	bpl.w	14f1a <ull_conn_rx+0x107a>
	} else if (!conn->llcp_version.rx) {
   148d2:	f013 0302 	ands.w	r3, r3, #2
   148d6:	f47f abe6 	bne.w	140a6 <ull_conn_rx+0x206>
		conn->llcp_version.ack = conn->llcp_version.req;
   148da:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
		conn->procedure_expire = 0U;
   148de:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   148e2:	f885 2121 	strb.w	r2, [r5, #289]	; 0x121
	conn->llcp_version.version_number = v->version_number;
   148e6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   148ea:	f885 3123 	strb.w	r3, [r5, #291]	; 0x123
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   148ee:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   148f2:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
	conn->llcp_version.rx = 1U;
   148f6:	f895 3122 	ldrb.w	r3, [r5, #290]	; 0x122
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   148fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   148fe:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		sys_le16_to_cpu(v->sub_version_number);
   14902:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
   14906:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
	conn->llcp_version.rx = 1U;
   1490a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1490e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   14912:	f8a5 2126 	strh.w	r2, [r5, #294]	; 0x126
	conn->llcp_version.rx = 1U;
   14916:	f885 3122 	strb.w	r3, [r5, #290]	; 0x122
	return 0;
   1491a:	2000      	movs	r0, #0
   1491c:	f7ff bb16 	b.w	13f4c <ull_conn_rx+0xac>
   14920:	00022180 	.word	0x00022180
   14924:	000222a0 	.word	0x000222a0
   14928:	00021ce0 	.word	0x00021ce0
   1492c:	2000145c 	.word	0x2000145c
   14930:	200013dc 	.word	0x200013dc
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   14934:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14938:	2a03      	cmp	r2, #3
   1493a:	f47f ab86 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (!conn->lll.role) {
   1493e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14942:	2b00      	cmp	r3, #0
   14944:	f2c0 8258 	blt.w	14df8 <ull_conn_rx+0xf58>
			if ((conn->llcp_phy.ack !=
   14948:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   1494c:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   14950:	428a      	cmp	r2, r1
   14952:	d007      	beq.n	14964 <ull_conn_rx+0xac4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   14954:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   14958:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   1495c:	3b01      	subs	r3, #1
   1495e:	2b02      	cmp	r3, #2
   14960:	f240 84c3 	bls.w	152ea <ull_conn_rx+0x144a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   14964:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14968:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   1496c:	1a1b      	subs	r3, r3, r0
   1496e:	f003 0303 	and.w	r3, r3, #3
   14972:	2b02      	cmp	r3, #2
   14974:	f000 83fb 	beq.w	1516e <ull_conn_rx+0x12ce>
				     LLCP_ENCRYPTION)) ||
   14978:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
   1497c:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14980:	4298      	cmp	r0, r3
   14982:	f43f aaf5 	beq.w	13f70 <ull_conn_rx+0xd0>
				nack = reject_ext_ind_send(conn, *rx,
   14986:	1d31      	adds	r1, r6, #4
   14988:	4628      	mov	r0, r5
   1498a:	232a      	movs	r3, #42	; 0x2a
   1498c:	2216      	movs	r2, #22
   1498e:	e768      	b.n	14862 <ull_conn_rx+0x9c2>
		if (!conn->lll.role ||
   14990:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14994:	2a00      	cmp	r2, #0
   14996:	f6bf ab58 	bge.w	1404a <ull_conn_rx+0x1aa>
   1499a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   1499e:	2a17      	cmp	r2, #23
   149a0:	f47f ab53 	bne.w	1404a <ull_conn_rx+0x1aa>
		memcpy(&conn->llcp_enc.rand[0],
   149a4:	2208      	movs	r2, #8
   149a6:	f106 0124 	add.w	r1, r6, #36	; 0x24
   149aa:	f205 1055 	addw	r0, r5, #341	; 0x155
   149ae:	f009 fd9b 	bl	1e4e8 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   149b2:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   149b6:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   149ba:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   149be:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   149c2:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   149c6:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   149c8:	2201      	movs	r2, #1
   149ca:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   149ce:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   149d0:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   149d4:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   149d6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   149da:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_ack -= 2U;
   149de:	3b02      	subs	r3, #2
   149e0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   149e4:	2208      	movs	r2, #8
   149e6:	f106 012e 	add.w	r1, r6, #46	; 0x2e
   149ea:	f105 00ee 	add.w	r0, r5, #238	; 0xee
   149ee:	f009 fd7b 	bl	1e4e8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   149f2:	2204      	movs	r2, #4
   149f4:	f106 0136 	add.w	r1, r6, #54	; 0x36
   149f8:	f105 0098 	add.w	r0, r5, #152	; 0x98
   149fc:	f009 fd74 	bl	1e4e8 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   14a00:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   14a04:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
   14a08:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   14a0c:	f043 0301 	orr.w	r3, r3, #1
   14a10:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   14a14:	2000      	movs	r0, #0
		break;
   14a16:	f7ff ba99 	b.w	13f4c <ull_conn_rx+0xac>
		if (conn->lll.role ||
   14a1a:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14a1e:	2a00      	cmp	r2, #0
   14a20:	f6bf ab61 	bge.w	140e6 <ull_conn_rx+0x246>
   14a24:	f7ff bb11 	b.w	1404a <ull_conn_rx+0x1aa>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   14a28:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14a2c:	2a00      	cmp	r2, #0
   14a2e:	f6ff ab0c 	blt.w	1404a <ull_conn_rx+0x1aa>
   14a32:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
   14a36:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14a3a:	4291      	cmp	r1, r2
   14a3c:	f43f ab05 	beq.w	1404a <ull_conn_rx+0x1aa>
   14a40:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   14a44:	2a03      	cmp	r2, #3
   14a46:	f47f ab00 	bne.w	1404a <ull_conn_rx+0x1aa>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   14a4a:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   14a4e:	2901      	cmp	r1, #1
   14a50:	f47f aafb 	bne.w	1404a <ull_conn_rx+0x1aa>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14a54:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
   14a58:	f36f 0301 	bfc	r3, #0, #2
   14a5c:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	int nack = 0;
   14a60:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a62:	7132      	strb	r2, [r6, #4]
		break;
   14a64:	f7ff ba72 	b.w	13f4c <ull_conn_rx+0xac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   14a68:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14a6c:	2a01      	cmp	r2, #1
   14a6e:	f47f aaec 	bne.w	1404a <ull_conn_rx+0x1aa>
		if (conn->lll.role) {
   14a72:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   14a76:	2a00      	cmp	r2, #0
   14a78:	f2c0 80e8 	blt.w	14c4c <ull_conn_rx+0xdac>
			conn->llcp_enc.pause_rx = 0U;
   14a7c:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
   14a80:	f021 0103 	bic.w	r1, r1, #3
   14a84:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   14a88:	074b      	lsls	r3, r1, #29
   14a8a:	f57f ac04 	bpl.w	14296 <ull_conn_rx+0x3f6>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14a8e:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   14a90:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14a94:	220b      	movs	r2, #11
			conn->llcp_enc.refresh = 0U;
   14a96:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14a9a:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   14a9c:	f7ff bbfb 	b.w	14296 <ull_conn_rx+0x3f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   14aa0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
   14aa4:	2a01      	cmp	r2, #1
   14aa6:	f47f aad0 	bne.w	1404a <ull_conn_rx+0x1aa>
	} else if (!conn->lll.role) {
   14aaa:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14aae:	2b00      	cmp	r3, #0
   14ab0:	f280 80ef 	bge.w	14c92 <ull_conn_rx+0xdf2>
		conn->lll.enc_tx = 0;
   14ab4:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   14ab8:	f36f 1304 	bfc	r3, #4, #1
   14abc:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   14ac0:	f7ff baf1 	b.w	140a6 <ull_conn_rx+0x206>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14ac4:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   14ac8:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   14acc:	4283      	cmp	r3, r0
   14ace:	f43f aaea 	beq.w	140a6 <ull_conn_rx+0x206>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   14ad2:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   14ad6:	2a23      	cmp	r2, #35	; 0x23
   14ad8:	d012      	beq.n	14b00 <ull_conn_rx+0xc60>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14ada:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14ade:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14ae2:	f885 01a9 	strb.w	r0, [r5, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14ae6:	f3c3 0002 	ubfx	r0, r3, #0, #3
   14aea:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   14aee:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   14af2:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14af4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14af8:	f885 11ab 	strb.w	r1, [r5, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   14afc:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   14b00:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   14b04:	075f      	lsls	r7, r3, #29
   14b06:	f57f aace 	bpl.w	140a6 <ull_conn_rx+0x206>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14b0a:	230e      	movs	r3, #14
	p->status = rej_ext_ind->error_code;
   14b0c:	f886 2020 	strb.w	r2, [r6, #32]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14b10:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   14b12:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   14b16:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14b1a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	p->rx = conn->lll.phy_rx;
   14b1e:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   14b22:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14b26:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	int nack = 0;
   14b2a:	2000      	movs	r0, #0
   14b2c:	f7ff ba0e 	b.w	13f4c <ull_conn_rx+0xac>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   14b30:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
   14b34:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
   14b38:	4293      	cmp	r3, r2
   14b3a:	f43f aab4 	beq.w	140a6 <ull_conn_rx+0x206>
	conn->procedure_expire = 0U;
   14b3e:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14b40:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   14b42:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
	conn->procedure_expire = 0U;
   14b46:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14b4a:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   14b4e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14b52:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   14b56:	f8b5 4062 	ldrh.w	r4, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   14b5a:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   14b5e:	84b2      	strh	r2, [r6, #36]	; 0x24
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14b60:	2215      	movs	r2, #21
	int nack = 0;
   14b62:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14b64:	8537      	strh	r7, [r6, #40]	; 0x28
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   14b66:	84f4      	strh	r4, [r6, #38]	; 0x26
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   14b68:	8571      	strh	r1, [r6, #42]	; 0x2a
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14b6a:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	if (err) {
   14b6e:	f7ff b9ed 	b.w	13f4c <ull_conn_rx+0xac>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14b72:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
   14b76:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   14b7a:	429a      	cmp	r2, r3
   14b7c:	f43f aa93 	beq.w	140a6 <ull_conn_rx+0x206>
	if (!lll->role && (rej_ext_ind->error_code ==
   14b80:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   14b84:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   14b88:	2900      	cmp	r1, #0
   14b8a:	f2c0 8516 	blt.w	155ba <ull_conn_rx+0x171a>
   14b8e:	2a1a      	cmp	r2, #26
   14b90:	f000 8590 	beq.w	156b4 <ull_conn_rx+0x1814>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   14b94:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   14b98:	f002 0107 	and.w	r1, r2, #7
   14b9c:	2904      	cmp	r1, #4
   14b9e:	f000 84ef 	beq.w	15580 <ull_conn_rx+0x16e0>
	if (!conn->llcp_conn_param.cmd) {
   14ba2:	0714      	lsls	r4, r2, #28
   14ba4:	f57f aa7f 	bpl.w	140a6 <ull_conn_rx+0x206>
	cu->status = rej_ext_ind->error_code;
   14ba8:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   14bac:	f886 3020 	strb.w	r3, [r6, #32]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14bb0:	220a      	movs	r2, #10
   14bb2:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   14bb4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   14bb6:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   14bba:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
   14bbc:	8473      	strh	r3, [r6, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
   14bbe:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   14bc2:	237d      	movs	r3, #125	; 0x7d
   14bc4:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   14bc8:	84b1      	strh	r1, [r6, #36]	; 0x24
		      lll->interval * 125U / 1000;
   14bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   14bce:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   14bd0:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   14bd4:	84f3      	strh	r3, [r6, #38]	; 0x26
	if (err) {
   14bd6:	f7ff b9b9 	b.w	13f4c <ull_conn_rx+0xac>
		if ((conn->llcp_ack != conn->llcp_req) &&
   14bda:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14bde:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14be2:	429a      	cmp	r2, r3
   14be4:	f43f aa5f 	beq.w	140a6 <ull_conn_rx+0x206>
   14be8:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   14bec:	2a03      	cmp	r2, #3
   14bee:	f47f aa5a 	bne.w	140a6 <ull_conn_rx+0x206>
	conn->llcp_enc.pause_rx = 0U;
   14bf2:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   14bf6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   14bfa:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   14bfe:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   14c00:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	conn->procedure_expire = 0U;
   14c04:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   14c08:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   14c0c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   14c10:	220d      	movs	r2, #13
	int nack = 0;
   14c12:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   14c14:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	if (err) {
   14c18:	f7ff b998 	b.w	13f4c <ull_conn_rx+0xac>
	       (conn->lll.role &&
   14c1c:	2800      	cmp	r0, #0
   14c1e:	f43f ace2 	beq.w	145e6 <ull_conn_rx+0x746>
		 (conn->llcp_enc.refresh &&
   14c22:	f1b9 0f02 	cmp.w	r9, #2
   14c26:	f43f ace5 	beq.w	145f4 <ull_conn_rx+0x754>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14c2a:	f1b9 0f0b 	cmp.w	r9, #11
   14c2e:	f43f aa07 	beq.w	14040 <ull_conn_rx+0x1a0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14c32:	f1b9 0f03 	cmp.w	r9, #3
   14c36:	f43f aeb0 	beq.w	1499a <ull_conn_rx+0xafa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c3a:	f1b9 0f06 	cmp.w	r9, #6
   14c3e:	f47f a96a 	bne.w	13f16 <ull_conn_rx+0x76>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   14c42:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14c46:	2a01      	cmp	r2, #1
   14c48:	f47f a9ff 	bne.w	1404a <ull_conn_rx+0x1aa>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14c4c:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   14c50:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   14c54:	4282      	cmp	r2, r0
   14c56:	f000 8393 	beq.w	15380 <ull_conn_rx+0x14e0>
   14c5a:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   14c5e:	2a03      	cmp	r2, #3
   14c60:	f47f a9f3 	bne.w	1404a <ull_conn_rx+0x1aa>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14c64:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
   14c68:	f36f 0301 	bfc	r3, #0, #2
   14c6c:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   14c70:	e70a      	b.n	14a88 <ull_conn_rx+0xbe8>
		conn->tx_data_last = tx;
   14c72:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   14c76:	f7ff ba16 	b.w	140a6 <ull_conn_rx+0x206>
			tx->next = conn->tx_head;
   14c7a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   14c7c:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   14c80:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   14c84:	f7ff ba0c 	b.w	140a0 <ull_conn_rx+0x200>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   14c88:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14c8c:	2a01      	cmp	r2, #1
   14c8e:	f47f a9dc 	bne.w	1404a <ull_conn_rx+0x1aa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14c92:	48b4      	ldr	r0, [pc, #720]	; (14f64 <ull_conn_rx+0x10c4>)
   14c94:	f7f9 fec8 	bl	ea28 <mem_acquire>
		if (!tx) {
   14c98:	4603      	mov	r3, r0
   14c9a:	2800      	cmp	r0, #0
   14c9c:	d04f      	beq.n	14d3e <ull_conn_rx+0xe9e>
	conn->llcp_enc.pause_rx = 1U;
   14c9e:	f895 0152 	ldrb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   14ca2:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ca6:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   14ca8:	f040 0001 	orr.w	r0, r0, #1
   14cac:	f885 0152 	strb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   14cb0:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14cb4:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   14cb6:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14cba:	7158      	strb	r0, [r3, #5]
   14cbc:	f7ff bbce 	b.w	1445c <ull_conn_rx+0x5bc>
		if (!conn->tx_ctrl) {
   14cc0:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   14cc4:	2900      	cmp	r1, #0
   14cc6:	f47f abe9 	bne.w	1449c <ull_conn_rx+0x5fc>
			tx->next = conn->tx_head;
   14cca:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   14ccc:	e9c5 336c 	strd	r3, r3, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   14cd0:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   14cd4:	f7ff bbe9 	b.w	144aa <ull_conn_rx+0x60a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   14cd8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14cdc:	2a01      	cmp	r2, #1
   14cde:	f43f aecd 	beq.w	14a7c <ull_conn_rx+0xbdc>
   14ce2:	f7ff b9b2 	b.w	1404a <ull_conn_rx+0x1aa>
		if (!conn->lll.role) {
   14ce6:	f995 c03d 	ldrsb.w	ip, [r5, #61]	; 0x3d
   14cea:	f895 0171 	ldrb.w	r0, [r5, #369]	; 0x171
   14cee:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   14cf2:	9000      	str	r0, [sp, #0]
   14cf4:	f1bc 0f00 	cmp.w	ip, #0
   14cf8:	db30      	blt.n	14d5c <ull_conn_rx+0xebc>
			if ((conn->llcp_conn_param.req !=
   14cfa:	4282      	cmp	r2, r0
   14cfc:	d009      	beq.n	14d12 <ull_conn_rx+0xe72>
			    ((conn->llcp_conn_param.state ==
   14cfe:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   14d02:	f012 0207 	ands.w	r2, r2, #7
   14d06:	f000 8303 	beq.w	15310 <ull_conn_rx+0x1470>
			      LLCP_CPR_STATE_REQ) ||
   14d0a:	3a04      	subs	r2, #4
   14d0c:	2a01      	cmp	r2, #1
   14d0e:	f240 82ff 	bls.w	15310 <ull_conn_rx+0x1470>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   14d12:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   14d16:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   14d1a:	1a12      	subs	r2, r2, r0
   14d1c:	f002 0203 	and.w	r2, r2, #3
   14d20:	2a02      	cmp	r2, #2
   14d22:	f000 8415 	beq.w	15550 <ull_conn_rx+0x16b0>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   14d26:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   14d2a:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   14d2e:	4290      	cmp	r0, r2
   14d30:	f000 8380 	beq.w	15434 <ull_conn_rx+0x1594>
				nack = reject_ext_ind_send(conn, *rx,
   14d34:	1d31      	adds	r1, r6, #4
   14d36:	4628      	mov	r0, r5
   14d38:	232a      	movs	r3, #42	; 0x2a
   14d3a:	220f      	movs	r2, #15
   14d3c:	e591      	b.n	14862 <ull_conn_rx+0x9c2>
			return -ENOBUFS;
   14d3e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14d42:	f7ff b903 	b.w	13f4c <ull_conn_rx+0xac>
		} else if (conn->llcp_length.req != conn->llcp_length.ack) {
   14d46:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
   14d4a:	f895 2199 	ldrb.w	r2, [r5, #409]	; 0x199
   14d4e:	429a      	cmp	r2, r3
   14d50:	f000 82e4 	beq.w	1531c <ull_conn_rx+0x147c>
			conn->llcp_length.ack = conn->llcp_length.req;
   14d54:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
   14d58:	f7ff ba9d 	b.w	14296 <ull_conn_rx+0x3f6>
		} else if ((conn->llcp_conn_param.req ==
   14d5c:	9900      	ldr	r1, [sp, #0]
   14d5e:	428a      	cmp	r2, r1
   14d60:	f000 810e 	beq.w	14f80 <ull_conn_rx+0x10e0>
			    conn->llcp_conn_param.ack) ||
   14d64:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   14d68:	0792      	lsls	r2, r2, #30
   14d6a:	f000 8109 	beq.w	14f80 <ull_conn_rx+0x10e0>
			LL_ASSERT(0);
   14d6e:	4a7e      	ldr	r2, [pc, #504]	; (14f68 <ull_conn_rx+0x10c8>)
   14d70:	497e      	ldr	r1, [pc, #504]	; (14f6c <ull_conn_rx+0x10cc>)
   14d72:	487f      	ldr	r0, [pc, #508]	; (14f70 <ull_conn_rx+0x10d0>)
   14d74:	f241 6343 	movw	r3, #5699	; 0x1643
   14d78:	f007 fb48 	bl	1c40c <printk>
   14d7c:	4040      	eors	r0, r0
   14d7e:	f380 8811 	msr	BASEPRI, r0
   14d82:	f04f 0003 	mov.w	r0, #3
   14d86:	df02      	svc	2
	int nack = 0;
   14d88:	2000      	movs	r0, #0
   14d8a:	f7ff b8df 	b.w	13f4c <ull_conn_rx+0xac>
			LL_ASSERT(conn_upd_curr == conn);
   14d8e:	4f79      	ldr	r7, [pc, #484]	; (14f74 <ull_conn_rx+0x10d4>)
   14d90:	683a      	ldr	r2, [r7, #0]
   14d92:	4295      	cmp	r5, r2
   14d94:	d00e      	beq.n	14db4 <ull_conn_rx+0xf14>
   14d96:	4a74      	ldr	r2, [pc, #464]	; (14f68 <ull_conn_rx+0x10c8>)
   14d98:	4977      	ldr	r1, [pc, #476]	; (14f78 <ull_conn_rx+0x10d8>)
   14d9a:	4875      	ldr	r0, [pc, #468]	; (14f70 <ull_conn_rx+0x10d0>)
   14d9c:	f241 63db 	movw	r3, #5851	; 0x16db
   14da0:	f007 fb34 	bl	1c40c <printk>
   14da4:	4040      	eors	r0, r0
   14da6:	f380 8811 	msr	BASEPRI, r0
   14daa:	f04f 0003 	mov.w	r0, #3
   14dae:	df02      	svc	2
   14db0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   14db4:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14db8:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
			conn_upd_curr = NULL;
   14dbc:	2300      	movs	r3, #0
   14dbe:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   14dc0:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14dc4:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   14dc6:	f43f a8cb 	beq.w	13f60 <ull_conn_rx+0xc0>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14dca:	210a      	movs	r1, #10
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14dcc:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14dce:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14dd0:	f886 3020 	strb.w	r3, [r6, #32]
			cu->interval = lll->interval;
   14dd4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   14dd6:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   14dda:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   14ddc:	8473      	strh	r3, [r6, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
   14dde:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   14de2:	237d      	movs	r3, #125	; 0x7d
   14de4:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   14de8:	84b1      	strh	r1, [r6, #36]	; 0x24
				      lll->interval * 125U / 1000;
   14dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14dee:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   14df2:	84f3      	strh	r3, [r6, #38]	; 0x26
   14df4:	f7ff ba4f 	b.w	14296 <ull_conn_rx+0x3f6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14df8:	485a      	ldr	r0, [pc, #360]	; (14f64 <ull_conn_rx+0x10c4>)
   14dfa:	f7f9 fe15 	bl	ea28 <mem_acquire>
	if (!tx) {
   14dfe:	4602      	mov	r2, r0
   14e00:	2800      	cmp	r0, #0
   14e02:	d09c      	beq.n	14d3e <ull_conn_rx+0xe9e>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14e04:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   14e08:	f895 e1a9 	ldrb.w	lr, [r5, #425]	; 0x1a9
   14e0c:	f895 71a8 	ldrb.w	r7, [r5, #424]	; 0x1a8
   14e10:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14e14:	2002      	movs	r0, #2
   14e16:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   14e1a:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14e1c:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   14e20:	f3c3 0402 	ubfx	r4, r3, #0, #3
   14e24:	f003 0c07 	and.w	ip, r3, #7
   14e28:	f3c3 1002 	ubfx	r0, r3, #4, #3
   14e2c:	d113      	bne.n	14e56 <ull_conn_rx+0xfb6>
		conn->llcp_phy.tx =
   14e2e:	b2c9      	uxtb	r1, r1
   14e30:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   14e34:	f895 c1ab 	ldrb.w	ip, [r5, #427]	; 0x1ab
		conn->procedure_expire =
   14e38:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
   14e3c:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_phy.ack--;
   14e40:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   14e42:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   14e46:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   14e4a:	f885 71a9 	strb.w	r7, [r5, #425]	; 0x1a9
		conn->llcp_phy.rx =
   14e4e:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
   14e52:	f885 c1ab 	strb.w	ip, [r5, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
   14e56:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   14e5a:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
	conn->llcp_phy.rx &= p->tx_phys;
   14e5e:	f896 7024 	ldrb.w	r7, [r6, #36]	; 0x24
	conn->llcp_phy.tx &= p->rx_phys;
   14e62:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   14e66:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   14e6a:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   14e6e:	009b      	lsls	r3, r3, #2
   14e70:	f001 0103 	and.w	r1, r1, #3
   14e74:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   14e78:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   14e7a:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   14e7c:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e80:	7913      	ldrb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   14e82:	7151      	strb	r1, [r2, #5]
	    conn->tx_head &&
   14e84:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   14e88:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e8a:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   14e8e:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   14e90:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e92:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   14e94:	71d4      	strb	r4, [r2, #7]
	if (
   14e96:	2900      	cmp	r1, #0
   14e98:	f000 8170 	beq.w	1517c <ull_conn_rx+0x12dc>
	    !conn->llcp_enc.pause_tx &&
   14e9c:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   14ea0:	079c      	lsls	r4, r3, #30
   14ea2:	f100 816b 	bmi.w	1517c <ull_conn_rx+0x12dc>
	    !conn->llcp_phy.pause_tx &&
   14ea6:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   14eaa:	07d8      	lsls	r0, r3, #31
   14eac:	f100 8166 	bmi.w	1517c <ull_conn_rx+0x12dc>
		if (conn->tx_head == conn->tx_data) {
   14eb0:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   14eb4:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   14eb6:	bf04      	itt	eq
   14eb8:	680b      	ldreq	r3, [r1, #0]
   14eba:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   14ebe:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	f000 83b8 	beq.w	15638 <ull_conn_rx+0x1798>
	tx->next = conn->tx_ctrl_last->next;
   14ec8:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   14ecc:	6819      	ldr	r1, [r3, #0]
   14ece:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   14ed0:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   14ed2:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
	if (!tx->next) {
   14ed6:	6813      	ldr	r3, [r2, #0]
   14ed8:	2b00      	cmp	r3, #0
   14eda:	f47f a8e4 	bne.w	140a6 <ull_conn_rx+0x206>
		conn->tx_data_last = tx;
   14ede:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14ee2:	f7ff b8e0 	b.w	140a6 <ull_conn_rx+0x206>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   14ee6:	f1b9 0f15 	cmp.w	r9, #21
   14eea:	f43f a82e 	beq.w	13f4a <ull_conn_rx+0xaa>
	struct node_tx *tx = NULL;
   14eee:	f04f 0800 	mov.w	r8, #0
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   14ef2:	4a1d      	ldr	r2, [pc, #116]	; (14f68 <ull_conn_rx+0x10c8>)
   14ef4:	4921      	ldr	r1, [pc, #132]	; (14f7c <ull_conn_rx+0x10dc>)
   14ef6:	481e      	ldr	r0, [pc, #120]	; (14f70 <ull_conn_rx+0x10d0>)
   14ef8:	f241 2343 	movw	r3, #4675	; 0x1243
   14efc:	f007 fa86 	bl	1c40c <printk>
   14f00:	4040      	eors	r0, r0
   14f02:	f380 8811 	msr	BASEPRI, r0
   14f06:	f04f 0003 	mov.w	r0, #3
   14f0a:	df02      	svc	2
   14f0c:	f8dd c000 	ldr.w	ip, [sp]
   14f10:	9801      	ldr	r0, [sp, #4]
   14f12:	4659      	mov	r1, fp
   14f14:	4653      	mov	r3, sl
   14f16:	f7ff b92f 	b.w	14178 <ull_conn_rx+0x2d8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f1a:	4812      	ldr	r0, [pc, #72]	; (14f64 <ull_conn_rx+0x10c4>)
   14f1c:	f7f9 fd84 	bl	ea28 <mem_acquire>
		if (!tx) {
   14f20:	4601      	mov	r1, r0
   14f22:	2800      	cmp	r0, #0
   14f24:	f43f af0b 	beq.w	14d3e <ull_conn_rx+0xe9e>
		conn->llcp_version.tx = 1U;
   14f28:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f2c:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   14f2e:	f042 0201 	orr.w	r2, r2, #1
   14f32:	f885 2122 	strb.w	r2, [r5, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f36:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f3a:	220c      	movs	r2, #12
		pdu_tx->len =
   14f3c:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f3e:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   14f40:	240a      	movs	r4, #10
		v->sub_version_number =
   14f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f46:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f4a:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f4c:	2205      	movs	r2, #5
   14f4e:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   14f50:	72cb      	strb	r3, [r1, #11]
   14f52:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   14f54:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f56:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   14f58:	4628      	mov	r0, r5
   14f5a:	f7fe fb63 	bl	13624 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14f5e:	2303      	movs	r3, #3
   14f60:	7133      	strb	r3, [r6, #4]
   14f62:	e4c0      	b.n	148e6 <ull_conn_rx+0xa46>
   14f64:	2000145c 	.word	0x2000145c
   14f68:	00022180 	.word	0x00022180
   14f6c:	00021c84 	.word	0x00021c84
   14f70:	00021ce0 	.word	0x00021ce0
   14f74:	200013dc 	.word	0x200013dc
   14f78:	000222c8 	.word	0x000222c8
   14f7c:	000222e0 	.word	0x000222e0
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14f80:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
			if ((interval_min < 6) ||
   14f84:	f1b8 0f05 	cmp.w	r8, #5
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14f88:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < 6) ||
   14f8c:	d97b      	bls.n	15086 <ull_conn_rx+0x11e6>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14f8e:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
			if ((interval_min < 6) ||
   14f92:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14f96:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
   14f9a:	d874      	bhi.n	15086 <ull_conn_rx+0x11e6>
			    (interval_max > 3200) ||
   14f9c:	428a      	cmp	r2, r1
   14f9e:	d872      	bhi.n	15086 <ull_conn_rx+0x11e6>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   14fa0:	f8b6 c028 	ldrh.w	ip, [r6, #40]	; 0x28
			    (interval_min > interval_max) ||
   14fa4:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			u16_t latency = sys_le16_to_cpu(cpr->latency);
   14fa8:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   14fac:	d26b      	bcs.n	15086 <ull_conn_rx+0x11e6>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14fae:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
			    (latency > 499) ||
   14fb0:	f1a0 090a 	sub.w	r9, r0, #10
   14fb4:	fa1f f989 	uxth.w	r9, r9
   14fb8:	f640 4b76 	movw	fp, #3190	; 0xc76
   14fbc:	45d9      	cmp	r9, fp
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14fbe:	b282      	uxth	r2, r0
			    (latency > 499) ||
   14fc0:	d861      	bhi.n	15086 <ull_conn_rx+0x11e6>
			     ((latency + 1) * interval_max)) ||
   14fc2:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   14fc6:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   14fca:	d25c      	bcs.n	15086 <ull_conn_rx+0x11e6>
			     ((latency + 1) * interval_max)) ||
   14fcc:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
   14fd0:	4559      	cmp	r1, fp
   14fd2:	d358      	bcc.n	15086 <ull_conn_rx+0x11e6>
			conn->llcp_conn_param.latency =	latency;
   14fd4:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
			conn->llcp_conn_param.interval_min = interval_min;
   14fd8:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   14fdc:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
			conn->llcp_conn_param.timeout =	timeout;
   14fe0:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   14fe4:	f885 b17c 	strb.w	fp, [r5, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   14fe8:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   14fec:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
			     lll->interval) ||
   14ff0:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   14ff4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   14ff8:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   14ffc:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   15000:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   15004:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   15008:	f8a5 0180 	strh.w	r0, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   1500c:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   15010:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   15014:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   15018:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   1501c:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   15020:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   15024:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   15028:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   1502c:	f896 e036 	ldrb.w	lr, [r6, #54]	; 0x36
   15030:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   15034:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   15038:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   1503c:	f896 0037 	ldrb.w	r0, [r6, #55]	; 0x37
   15040:	f896 e038 	ldrb.w	lr, [r6, #56]	; 0x38
   15044:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   15048:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   1504c:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
   15050:	f896 603a 	ldrb.w	r6, [r6, #58]	; 0x3a
			if ((conn->llcp_conn_param.interval_max !=
   15054:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   15056:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   1505a:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   1505e:	f000 8313 	beq.w	15688 <ull_conn_rx+0x17e8>
				conn->llcp_conn_param.state =
   15062:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   15066:	2103      	movs	r1, #3
   15068:	f361 0202 	bfi	r2, r1, #0, #3
   1506c:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   15070:	9a00      	ldr	r2, [sp, #0]
   15072:	3a01      	subs	r2, #1
   15074:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
			if (!conn_upd_curr) {
   15078:	2b00      	cmp	r3, #0
   1507a:	f47e af66 	bne.w	13f4a <ull_conn_rx+0xaa>
				conn_upd_curr = conn;
   1507e:	603d      	str	r5, [r7, #0]
	int nack = 0;
   15080:	4618      	mov	r0, r3
   15082:	f7fe bf63 	b.w	13f4c <ull_conn_rx+0xac>
				nack = reject_ext_ind_send(conn, *rx,
   15086:	1d31      	adds	r1, r6, #4
   15088:	4628      	mov	r0, r5
   1508a:	231e      	movs	r3, #30
   1508c:	220f      	movs	r2, #15
   1508e:	f7ff bbe8 	b.w	14862 <ull_conn_rx+0x9c2>
	instant = sys_le16_to_cpu(ind->instant);
   15092:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   15094:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   15096:	1a82      	subs	r2, r0, r2
   15098:	0412      	lsls	r2, r2, #16
   1509a:	f100 8131 	bmi.w	15300 <ull_conn_rx+0x1460>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1509e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   150a2:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   150a6:	eba2 020c 	sub.w	r2, r2, ip
   150aa:	f002 0203 	and.w	r2, r2, #3
   150ae:	2a02      	cmp	r2, #2
   150b0:	f000 815f 	beq.w	15372 <ull_conn_rx+0x14d2>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   150b4:	f895 c1a8 	ldrb.w	ip, [r5, #424]	; 0x1a8
   150b8:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   150bc:	4562      	cmp	r2, ip
   150be:	d019      	beq.n	150f4 <ull_conn_rx+0x1254>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   150c0:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   150c4:	f002 0203 	and.w	r2, r2, #3
   150c8:	2a02      	cmp	r2, #2
   150ca:	d113      	bne.n	150f4 <ull_conn_rx+0x1254>
		conn->llcp_phy.pause_tx = 0U;
   150cc:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   150d0:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   150d4:	f885 c1a9 	strb.w	ip, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   150d8:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   150dc:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   150e0:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   150e4:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   150e8:	f885 21ab 	strb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   150ec:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   150f0:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   150f4:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   150f8:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   150fc:	009b      	lsls	r3, r3, #2
   150fe:	f003 031c 	and.w	r3, r3, #28
   15102:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   15106:	f002 0202 	and.w	r2, r2, #2
   1510a:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   1510c:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   15110:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   15114:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   15116:	6823      	ldr	r3, [r4, #0]
   15118:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1511a:	6823      	ldr	r3, [r4, #0]
   1511c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   15120:	2300      	movs	r3, #0
   15122:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   15124:	f7fd f94a 	bl	123bc <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   15128:	4604      	mov	r4, r0
   1512a:	2800      	cmp	r0, #0
   1512c:	f000 825b 	beq.w	155e6 <ull_conn_rx+0x1746>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   15130:	6823      	ldr	r3, [r4, #0]
   15132:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
   15136:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   15138:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   1513c:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   15140:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
	conn->llcp_ack -= 2U;
   15144:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   15146:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   15148:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   1514c:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   15150:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   15154:	f43e aef9 	beq.w	13f4a <ull_conn_rx+0xaa>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   15158:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   1515c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15160:	f363 1206 	bfi	r2, r3, #4, #3
   15164:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   15168:	2000      	movs	r0, #0
   1516a:	f7fe beef 	b.w	13f4c <ull_conn_rx+0xac>
				      0x03) == 0x02) &&
   1516e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   15172:	2b03      	cmp	r3, #3
   15174:	f47f ac07 	bne.w	14986 <ull_conn_rx+0xae6>
   15178:	f7ff bbfe 	b.w	14978 <ull_conn_rx+0xad8>
		if (!conn->tx_ctrl) {
   1517c:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   15180:	2b00      	cmp	r3, #0
   15182:	f47f aea1 	bne.w	14ec8 <ull_conn_rx+0x1028>
			tx->next = conn->tx_head;
   15186:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   15188:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1518c:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
   15190:	e6a1      	b.n	14ed6 <ull_conn_rx+0x1036>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15192:	48a7      	ldr	r0, [pc, #668]	; (15430 <ull_conn_rx+0x1590>)
   15194:	f7f9 fc48 	bl	ea28 <mem_acquire>
		if (!tx) {
   15198:	4680      	mov	r8, r0
   1519a:	2800      	cmp	r0, #0
   1519c:	f43f adcf 	beq.w	14d3e <ull_conn_rx+0xe9e>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   151a0:	f895 1198 	ldrb.w	r1, [r5, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   151a4:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   151a8:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
   151ac:	9201      	str	r2, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   151ae:	428b      	cmp	r3, r1
	eff_rx_time = conn->lll.max_rx_time;
   151b0:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
	eff_tx_octets = conn->lll.max_tx_octets;
   151b4:	f8b5 a05c 	ldrh.w	sl, [r5, #92]	; 0x5c
	eff_tx_time = conn->lll.max_tx_time;
   151b8:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   151bc:	9102      	str	r1, [sp, #8]
	eff_rx_time = conn->lll.max_rx_time;
   151be:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   151c0:	f040 8120 	bne.w	15404 <ull_conn_rx+0x1564>
	    ((conn->llcp_length.req == conn->llcp_length.ack) &&
   151c4:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   151c8:	2b14      	cmp	r3, #20
   151ca:	f040 82b2 	bne.w	15732 <ull_conn_rx+0x1892>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   151ce:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   151d0:	2b1a      	cmp	r3, #26
   151d2:	f240 80e9 	bls.w	153a8 <ull_conn_rx+0x1508>
			eff_tx_octets = MIN(max_rx_octets,
   151d6:	f8b5 10d6 	ldrh.w	r1, [r5, #214]	; 0xd6
   151da:	428b      	cmp	r3, r1
   151dc:	bf28      	it	cs
   151de:	460b      	movcs	r3, r1
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   151e0:	8d30      	ldrh	r0, [r6, #40]	; 0x28
	if (!conn->common.fex_valid ||
   151e2:	f895 10dc 	ldrb.w	r1, [r5, #220]	; 0xdc
			eff_rx_octets = MIN(max_tx_octets,
   151e6:	9a01      	ldr	r2, [sp, #4]
   151e8:	281b      	cmp	r0, #27
   151ea:	bf34      	ite	cc
   151ec:	4610      	movcc	r0, r2
   151ee:	201b      	movcs	r0, #27
	if (!conn->common.fex_valid ||
   151f0:	07c9      	lsls	r1, r1, #31
   151f2:	f140 80d5 	bpl.w	153a0 <ull_conn_rx+0x1500>
	feature_coded_phy = (conn->llcp_feature.features &
   151f6:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   151fa:	050a      	lsls	r2, r1, #20
   151fc:	f140 81e6 	bpl.w	155cc <ull_conn_rx+0x172c>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2)),
   15200:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
   15204:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   15208:	bf28      	it	cs
   1520a:	f44f 6129 	movcs.w	r1, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0), tx_time);
   1520e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   15212:	bf38      	it	cc
   15214:	f44f 71a4 	movcc.w	r1, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(2)),
   15218:	f44f 6929 	mov.w	r9, #2704	; 0xa90
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   1521c:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   15220:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   15222:	9203      	str	r2, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   15224:	f5be 7fa4 	cmp.w	lr, #328	; 0x148
   15228:	f0c0 80b8 	bcc.w	1539c <ull_conn_rx+0x14fc>
			eff_tx_time = MAX(eff_tx_time,
   1522c:	f895 c064 	ldrb.w	ip, [r5, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   15230:	458e      	cmp	lr, r1
   15232:	bf28      	it	cs
   15234:	468e      	movcs	lr, r1
			eff_tx_time = MAX(eff_tx_time,
   15236:	f00c 0107 	and.w	r1, ip, #7
   1523a:	f01c 0f04 	tst.w	ip, #4
   1523e:	bf03      	ittte	eq
   15240:	ea4f 0c61 	moveq.w	ip, r1, asr #1
   15244:	f44f 71a4 	moveq.w	r1, #328	; 0x148
   15248:	fa21 f10c 	lsreq.w	r1, r1, ip
   1524c:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   15250:	4571      	cmp	r1, lr
   15252:	bf38      	it	cc
   15254:	4671      	movcc	r1, lr
   15256:	b289      	uxth	r1, r1
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, 0)) {
   15258:	9a03      	ldr	r2, [sp, #12]
   1525a:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
   1525e:	f0c0 80a5 	bcc.w	153ac <ull_conn_rx+0x150c>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   15262:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
			eff_rx_time = MAX(eff_rx_time,
   15266:	f895 c065 	ldrb.w	ip, [r5, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1526a:	46ce      	mov	lr, r9
   1526c:	bf38      	it	cc
   1526e:	f44f 7ea4 	movcc.w	lr, #328	; 0x148
   15272:	4572      	cmp	r2, lr
   15274:	bf28      	it	cs
   15276:	4672      	movcs	r2, lr
			eff_rx_time = MAX(eff_rx_time,
   15278:	f01c 0f04 	tst.w	ip, #4
   1527c:	f00c 0e07 	and.w	lr, ip, #7
   15280:	bf03      	ittte	eq
   15282:	ea4f 0e6e 	moveq.w	lr, lr, asr #1
   15286:	f44f 7ca4 	moveq.w	ip, #328	; 0x148
   1528a:	fa2c fc0e 	lsreq.w	ip, ip, lr
   1528e:	f44f 6c29 	movne.w	ip, #2704	; 0xa90
   15292:	4594      	cmp	ip, r2
   15294:	bf38      	it	cc
   15296:	4694      	movcc	ip, r2
   15298:	fa1f fc8c 	uxth.w	ip, ip
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1529c:	9a01      	ldr	r2, [sp, #4]
   1529e:	4290      	cmp	r0, r2
   152a0:	f000 8087 	beq.w	153b2 <ull_conn_rx+0x1512>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   152a4:	9a02      	ldr	r2, [sp, #8]
			conn->llcp_length.rx_octets = eff_rx_octets;
   152a6:	f8a5 019c 	strh.w	r0, [r5, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   152aa:	3a01      	subs	r2, #1
   152ac:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   152b0:	f8a5 319e 	strh.w	r3, [r5, #414]	; 0x19e
				conn->llcp_length.state =
   152b4:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   152b8:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   152bc:	f8a5 11a2 	strh.w	r1, [r5, #418]	; 0x1a2
			if (tx) {
   152c0:	f1b8 0f00 	cmp.w	r8, #0
   152c4:	f000 814b 	beq.w	1555e <ull_conn_rx+0x16be>
				conn->llcp_length.state =
   152c8:	2605      	movs	r6, #5
   152ca:	f366 0202 	bfi	r2, r6, #0, #3
   152ce:	f885 219a 	strb.w	r2, [r5, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   152d2:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
   152d6:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   152d8:	6822      	ldr	r2, [r4, #0]
   152da:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   152dc:	6822      	ldr	r2, [r4, #0]
   152de:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
			*rx = NULL;
   152e2:	2200      	movs	r2, #0
   152e4:	6022      	str	r2, [r4, #0]
   152e6:	f7fe bf47 	b.w	14178 <ull_conn_rx+0x2d8>
				nack = reject_ext_ind_send(conn, *rx,
   152ea:	1d01      	adds	r1, r0, #4
   152ec:	2323      	movs	r3, #35	; 0x23
   152ee:	4628      	mov	r0, r5
   152f0:	f7ff bb4c 	b.w	1498c <ull_conn_rx+0xaec>
				nack = reject_ext_ind_send(conn, *rx,
   152f4:	1d31      	adds	r1, r6, #4
   152f6:	4628      	mov	r0, r5
   152f8:	231e      	movs	r3, #30
   152fa:	2210      	movs	r2, #16
   152fc:	f7ff bab1 	b.w	14862 <ull_conn_rx+0x9c2>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15300:	2303      	movs	r3, #3
   15302:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   15304:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   15306:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
	int nack = 0;
   1530a:	2000      	movs	r0, #0
   1530c:	f7fe be1e 	b.w	13f4c <ull_conn_rx+0xac>
				nack = reject_ext_ind_send(conn, *rx,
   15310:	1d31      	adds	r1, r6, #4
   15312:	4628      	mov	r0, r5
   15314:	2323      	movs	r3, #35	; 0x23
   15316:	220f      	movs	r2, #15
   15318:	f7ff baa3 	b.w	14862 <ull_conn_rx+0x9c2>
		} else if (conn->llcp_phy.req !=
   1531c:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   15320:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   15324:	428b      	cmp	r3, r1
   15326:	f000 8171 	beq.w	1560c <ull_conn_rx+0x176c>
			lll->phy_tx_time = lll->phy_tx;
   1532a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   1532e:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
			conn->llcp_phy.ack = conn->llcp_phy.req;
   15332:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   15336:	f36f 0200 	bfc	r2, #0, #1
			lll->phy_tx_time = lll->phy_tx;
   1533a:	4619      	mov	r1, r3
   1533c:	f363 1106 	bfi	r1, r3, #4, #3
			if (conn->llcp_phy.cmd) {
   15340:	0750      	lsls	r0, r2, #29
			lll->phy_tx_time = lll->phy_tx;
   15342:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   15346:	f3c3 0302 	ubfx	r3, r3, #0, #3
			conn->llcp_phy.pause_tx = 0U;
   1534a:	f885 21ab 	strb.w	r2, [r5, #427]	; 0x1ab
			if (conn->llcp_phy.cmd) {
   1534e:	f140 8158 	bpl.w	15602 <ull_conn_rx+0x1762>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15352:	6821      	ldr	r1, [r4, #0]
   15354:	200e      	movs	r0, #14
				p->status = 0U;
   15356:	2200      	movs	r2, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15358:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   1535a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
				p->status = 0U;
   1535e:	f886 2020 	strb.w	r2, [r6, #32]
				p->rx = lll->phy_rx;
   15362:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   15366:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1536a:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
   1536e:	f7fe bf92 	b.w	14296 <ull_conn_rx+0x3f6>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15372:	2303      	movs	r3, #3
   15374:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   15376:	232a      	movs	r3, #42	; 0x2a
   15378:	e7c5      	b.n	15306 <ull_conn_rx+0x1466>
		conn_upd_curr = conn;
   1537a:	601d      	str	r5, [r3, #0]
   1537c:	f7fe bf40 	b.w	14200 <ull_conn_rx+0x360>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15380:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
				conn->llcp_ack -= 2U;
   15384:	3a02      	subs	r2, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15386:	f36f 0301 	bfc	r3, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   1538a:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   1538c:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15390:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   15394:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   15398:	f7ff bb76 	b.w	14a88 <ull_conn_rx+0xbe8>
   1539c:	4659      	mov	r1, fp
   1539e:	e75b      	b.n	15258 <ull_conn_rx+0x13b8>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0),
   153a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0);
   153a4:	4689      	mov	r9, r1
   153a6:	e739      	b.n	1521c <ull_conn_rx+0x137c>
   153a8:	4653      	mov	r3, sl
   153aa:	e719      	b.n	151e0 <ull_conn_rx+0x1340>
   153ac:	f8dd c000 	ldr.w	ip, [sp]
   153b0:	e774      	b.n	1529c <ull_conn_rx+0x13fc>
			conn->llcp_length.ack = conn->llcp_length.req;
   153b2:	9a02      	ldr	r2, [sp, #8]
   153b4:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
			conn->procedure_expire = 0U;
   153b8:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   153ba:	4553      	cmp	r3, sl
			conn->procedure_expire = 0U;
   153bc:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   153c0:	f000 812c 	beq.w	1561c <ull_conn_rx+0x177c>
			conn->lll.max_rx_time = eff_rx_time;
   153c4:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
   153c8:	f1b8 0f00 	cmp.w	r8, #0
   153cc:	f000 8106 	beq.w	155dc <ull_conn_rx+0x173c>
				conn->llcp_length.state =
   153d0:	f895 419a 	ldrb.w	r4, [r5, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   153d4:	9a02      	ldr	r2, [sp, #8]
				conn->llcp_length.rx_octets = eff_rx_octets;
   153d6:	f8a5 019c 	strh.w	r0, [r5, #412]	; 0x19c
				conn->llcp_length.state =
   153da:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   153dc:	3a01      	subs	r2, #1
				conn->llcp_length.state =
   153de:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   153e2:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   153e6:	f8a5 319e 	strh.w	r3, [r5, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   153ea:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   153ee:	f8a5 11a2 	strh.w	r1, [r5, #418]	; 0x1a2
				conn->llcp_length.state =
   153f2:	f885 419a 	strb.w	r4, [r5, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   153f6:	84b0      	strh	r0, [r6, #36]	; 0x24
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   153f8:	8533      	strh	r3, [r6, #40]	; 0x28
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   153fa:	f8a6 c026 	strh.w	ip, [r6, #38]	; 0x26
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   153fe:	8571      	strh	r1, [r6, #42]	; 0x2a
   15400:	f7fe beba 	b.w	14178 <ull_conn_rx+0x2d8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15404:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
   15408:	f896 9023 	ldrb.w	r9, [r6, #35]	; 0x23
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1540c:	f011 0f06 	tst.w	r1, #6
   15410:	d103      	bne.n	1541a <ull_conn_rx+0x157a>
		(conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT)) &&
   15412:	f1b9 0f14 	cmp.w	r9, #20
   15416:	f43f aeda 	beq.w	151ce <ull_conn_rx+0x132e>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1541a:	f001 0107 	and.w	r1, r1, #7
   1541e:	2902      	cmp	r1, #2
   15420:	f47e aea1 	bne.w	14166 <ull_conn_rx+0x2c6>
	      ((conn->llcp_length.state == LLCP_LENGTH_STATE_RSP_WAIT) &&
   15424:	f1a9 0114 	sub.w	r1, r9, #20
   15428:	2901      	cmp	r1, #1
   1542a:	f63e ae9c 	bhi.w	14166 <ull_conn_rx+0x2c6>
   1542e:	e6ce      	b.n	151ce <ull_conn_rx+0x132e>
   15430:	2000145c 	.word	0x2000145c
				u16_t interval_min =
   15434:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
				if ((interval_min < 6) ||
   15438:	f1b8 0f05 	cmp.w	r8, #5
				u16_t interval_min =
   1543c:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
   15440:	f67f ae21 	bls.w	15086 <ull_conn_rx+0x11e6>
				u16_t interval_max =
   15444:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
				if ((interval_min < 6) ||
   15448:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				u16_t interval_max =
   1544c:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
   15450:	f63f ae19 	bhi.w	15086 <ull_conn_rx+0x11e6>
				    (interval_max > 3200) ||
   15454:	4290      	cmp	r0, r2
   15456:	f63f ae16 	bhi.w	15086 <ull_conn_rx+0x11e6>
				u16_t latency =
   1545a:	f8b6 c028 	ldrh.w	ip, [r6, #40]	; 0x28
   1545e:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   15462:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				u16_t latency =
   15466:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   1546a:	f4bf ae0c 	bcs.w	15086 <ull_conn_rx+0x11e6>
				u16_t timeout =
   1546e:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   15470:	f8ad 000c 	strh.w	r0, [sp, #12]
				    (latency > 499) ||
   15474:	f1a0 090a 	sub.w	r9, r0, #10
   15478:	fa1f f989 	uxth.w	r9, r9
   1547c:	f640 4a76 	movw	sl, #3190	; 0xc76
   15480:	45d1      	cmp	r9, sl
				u16_t timeout =
   15482:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   15486:	f63f adfe 	bhi.w	15086 <ull_conn_rx+0x11e6>
				     ((latency + 1) * interval_max)) ||
   1548a:	9801      	ldr	r0, [sp, #4]
   1548c:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   15490:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   15494:	f4bf adf7 	bcs.w	15086 <ull_conn_rx+0x11e6>
				     ((latency + 1) * interval_max)) ||
   15498:	f896 a02c 	ldrb.w	sl, [r6, #44]	; 0x2c
   1549c:	4552      	cmp	r2, sl
   1549e:	f4ff adf2 	bcc.w	15086 <ull_conn_rx+0x11e6>
				conn->llcp_conn_param.timeout =	timeout;
   154a2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
				conn->llcp_conn_param.latency =	latency;
   154a6:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   154aa:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   154ae:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   154b2:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   154b6:	f885 a17c 	strb.w	sl, [r5, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   154ba:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   154be:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
				     lll->interval) ||
   154c2:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   154c6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   154ca:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   154ce:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   154d2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   154d6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   154da:	f8a5 0180 	strh.w	r0, [r5, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   154de:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   154e2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   154e6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   154ea:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   154ee:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   154f2:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   154f6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   154fa:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   154fe:	f896 e036 	ldrb.w	lr, [r6, #54]	; 0x36
   15502:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   15506:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1550a:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   1550e:	f896 0037 	ldrb.w	r0, [r6, #55]	; 0x37
   15512:	f896 e038 	ldrb.w	lr, [r6, #56]	; 0x38
   15516:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1551a:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   1551e:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
   15522:	f896 603a 	ldrb.w	r6, [r6, #58]	; 0x3a
				if ((conn->llcp_conn_param.interval_max !=
   15526:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   15528:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1552c:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   15530:	f000 8088 	beq.w	15644 <ull_conn_rx+0x17a4>
					if (conn->llcp_enc.pause_tx) {
   15534:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
   15536:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   1553a:	f57f ad94 	bpl.w	15066 <ull_conn_rx+0x11c6>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1553e:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   15540:	2002      	movs	r0, #2
   15542:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15546:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
   15548:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1554c:	7108      	strb	r0, [r1, #4]
   1554e:	e58f      	b.n	15070 <ull_conn_rx+0x11d0>
				      0x03) == 0x02) &&
   15550:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   15554:	2a03      	cmp	r2, #3
   15556:	f47f abed 	bne.w	14d34 <ull_conn_rx+0xe94>
   1555a:	f7ff bbe4 	b.w	14d26 <ull_conn_rx+0xe86>
				conn->llcp_length.state =
   1555e:	2604      	movs	r6, #4
   15560:	f366 0202 	bfi	r2, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   15564:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   15568:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
				conn->llcp_length.state =
   1556c:	f885 219a 	strb.w	r2, [r5, #410]	; 0x19a
   15570:	e6af      	b.n	152d2 <ull_conn_rx+0x1432>
			tx->next = conn->tx_head->next;
   15572:	6811      	ldr	r1, [r2, #0]
   15574:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   15576:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   15578:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1557c:	f7fe bf95 	b.w	144aa <ull_conn_rx+0x60a>
		LL_ASSERT(conn_upd_curr == conn);
   15580:	4f71      	ldr	r7, [pc, #452]	; (15748 <ull_conn_rx+0x18a8>)
   15582:	6839      	ldr	r1, [r7, #0]
   15584:	428d      	cmp	r5, r1
   15586:	d010      	beq.n	155aa <ull_conn_rx+0x170a>
   15588:	4a70      	ldr	r2, [pc, #448]	; (1574c <ull_conn_rx+0x18ac>)
   1558a:	4971      	ldr	r1, [pc, #452]	; (15750 <ull_conn_rx+0x18b0>)
   1558c:	4871      	ldr	r0, [pc, #452]	; (15754 <ull_conn_rx+0x18b4>)
   1558e:	f241 0391 	movw	r3, #4241	; 0x1091
   15592:	f006 ff3b 	bl	1c40c <printk>
   15596:	4040      	eors	r0, r0
   15598:	f380 8811 	msr	BASEPRI, r0
   1559c:	f04f 0003 	mov.w	r0, #3
   155a0:	df02      	svc	2
   155a2:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   155a6:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   155aa:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
		conn_upd_curr = NULL;
   155ae:	2300      	movs	r3, #0
   155b0:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   155b2:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   155b6:	f7ff baf4 	b.w	14ba2 <ull_conn_rx+0xd02>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   155ba:	2a23      	cmp	r2, #35	; 0x23
   155bc:	f43f aaea 	beq.w	14b94 <ull_conn_rx+0xcf4>
			conn->slave.ticks_to_offset =
   155c0:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   155c4:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   155c8:	f7ff bae4 	b.w	14b94 <ull_conn_rx+0xcf4>
	    (!feature_coded_phy && !feature_phy_2m)) {
   155cc:	f411 7f80 	tst.w	r1, #256	; 0x100
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0),
   155d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   155d4:	d02e      	beq.n	15634 <ull_conn_rx+0x1794>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, BIT(1)),
   155d6:	f04f 09a4 	mov.w	r9, #164	; 0xa4
   155da:	e61f      	b.n	1521c <ull_conn_rx+0x137c>
				conn->lll.max_tx_octets = eff_tx_octets;
   155dc:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   155e0:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
   155e4:	e707      	b.n	153f6 <ull_conn_rx+0x1556>
	LL_ASSERT(rx_dle);
   155e6:	4a59      	ldr	r2, [pc, #356]	; (1574c <ull_conn_rx+0x18ac>)
   155e8:	495b      	ldr	r1, [pc, #364]	; (15758 <ull_conn_rx+0x18b8>)
   155ea:	485a      	ldr	r0, [pc, #360]	; (15754 <ull_conn_rx+0x18b4>)
   155ec:	f241 3304 	movw	r3, #4868	; 0x1304
   155f0:	f006 ff0c 	bl	1c40c <printk>
   155f4:	4040      	eors	r0, r0
   155f6:	f380 8811 	msr	BASEPRI, r0
   155fa:	f04f 0003 	mov.w	r0, #3
   155fe:	df02      	svc	2
   15600:	e596      	b.n	15130 <ull_conn_rx+0x1290>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15602:	6823      	ldr	r3, [r4, #0]
   15604:	2203      	movs	r2, #3
   15606:	711a      	strb	r2, [r3, #4]
   15608:	f7fe be45 	b.w	14296 <ull_conn_rx+0x3f6>
			switch (llctrl->unknown_rsp.type) {
   1560c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   15610:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15612:	bf04      	itt	eq
   15614:	2303      	moveq	r3, #3
   15616:	7133      	strbeq	r3, [r6, #4]
				break;
   15618:	f7fe be3d 	b.w	14296 <ull_conn_rx+0x3f6>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1561c:	4559      	cmp	r1, fp
   1561e:	f47f aed1 	bne.w	153c4 <ull_conn_rx+0x1524>
			    eff_rx_time == conn->lll.max_rx_time &&
   15622:	9a00      	ldr	r2, [sp, #0]
   15624:	4562      	cmp	r2, ip
   15626:	f47f aecd 	bne.w	153c4 <ull_conn_rx+0x1524>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1562a:	6822      	ldr	r2, [r4, #0]
   1562c:	2403      	movs	r4, #3
   1562e:	7114      	strb	r4, [r2, #4]
				goto send_length_resp;
   15630:	f7fe bda2 	b.w	14178 <ull_conn_rx+0x2d8>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, 0);
   15634:	4689      	mov	r9, r1
   15636:	e5f1      	b.n	1521c <ull_conn_rx+0x137c>
			tx->next = conn->tx_head->next;
   15638:	680b      	ldr	r3, [r1, #0]
   1563a:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   1563c:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   1563e:	e9c5 226d 	strd	r2, r2, [r5, #436]	; 0x1b4
   15642:	e448      	b.n	14ed6 <ull_conn_rx+0x1036>
				     lll->interval) ||
   15644:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   15646:	9802      	ldr	r0, [sp, #8]
   15648:	4282      	cmp	r2, r0
   1564a:	f47f af73 	bne.w	15534 <ull_conn_rx+0x1694>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1564e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15652:	fb02 f00c 	mul.w	r0, r2, ip
   15656:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   1565a:	f8b5 60c6 	ldrh.w	r6, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1565e:	fb02 020b 	mla	r2, r2, fp, r0
   15662:	3a01      	subs	r2, #1
   15664:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   15668:	b292      	uxth	r2, r2
   1566a:	4296      	cmp	r6, r2
   1566c:	f47f af62 	bne.w	15534 <ull_conn_rx+0x1694>
				conn->llcp_conn_param.state =
   15670:	f8b5 2172 	ldrh.w	r2, [r5, #370]	; 0x172
   15674:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   15678:	f042 0201 	orr.w	r2, r2, #1
   1567c:	f8a5 2172 	strh.w	r2, [r5, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15680:	6822      	ldr	r2, [r4, #0]
   15682:	2103      	movs	r1, #3
   15684:	7111      	strb	r1, [r2, #4]
   15686:	e4f3      	b.n	15070 <ull_conn_rx+0x11d0>
			     lll->interval) ||
   15688:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   1568a:	4550      	cmp	r0, sl
   1568c:	f47f ace9 	bne.w	15062 <ull_conn_rx+0x11c2>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   15690:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15694:	fb00 f101 	mul.w	r1, r0, r1
   15698:	f242 7010 	movw	r0, #10000	; 0x2710
   1569c:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   156a0:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   156a4:	3a01      	subs	r2, #1
   156a6:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   156aa:	b292      	uxth	r2, r2
   156ac:	4290      	cmp	r0, r2
   156ae:	f47f acd8 	bne.w	15062 <ull_conn_rx+0x11c2>
   156b2:	e7dd      	b.n	15670 <ull_conn_rx+0x17d0>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   156b4:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   156b8:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   156bc:	429a      	cmp	r2, r3
   156be:	d00e      	beq.n	156de <ull_conn_rx+0x183e>
   156c0:	4a22      	ldr	r2, [pc, #136]	; (1574c <ull_conn_rx+0x18ac>)
   156c2:	4926      	ldr	r1, [pc, #152]	; (1575c <ull_conn_rx+0x18bc>)
   156c4:	4823      	ldr	r0, [pc, #140]	; (15754 <ull_conn_rx+0x18b4>)
   156c6:	f241 0376 	movw	r3, #4214	; 0x1076
   156ca:	f006 fe9f 	bl	1c40c <printk>
   156ce:	4040      	eors	r0, r0
   156d0:	f380 8811 	msr	BASEPRI, r0
   156d4:	f04f 0003 	mov.w	r0, #3
   156d8:	df02      	svc	2
   156da:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   156de:	f895 1172 	ldrb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   156e2:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   156e6:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   156ea:	2205      	movs	r2, #5
   156ec:	f362 0102 	bfi	r1, r2, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   156f0:	f895 0106 	ldrb.w	r0, [r5, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   156f4:	f885 1172 	strb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   156f8:	f3c1 02c0 	ubfx	r2, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   156fc:	0092      	lsls	r2, r2, #2
   156fe:	f020 0007 	bic.w	r0, r0, #7
		conn->llcp_cu.ack--;
   15702:	3b01      	subs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15704:	f042 0201 	orr.w	r2, r2, #1
   15708:	4302      	orrs	r2, r0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1570a:	f8b5 1178 	ldrh.w	r1, [r5, #376]	; 0x178
		conn->llcp_cu.ack--;
   1570e:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
   15712:	2401      	movs	r4, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   15714:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15718:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   1571c:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1571e:	f885 4114 	strb.w	r4, [r5, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   15722:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   15726:	f8a5 110a 	strh.w	r1, [r5, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1572a:	f8a5 310c 	strh.w	r3, [r5, #268]	; 0x10c
	if (err) {
   1572e:	f7fe bcba 	b.w	140a6 <ull_conn_rx+0x206>
		LL_ASSERT(pdu_rx->llctrl.opcode ==
   15732:	2b15      	cmp	r3, #21
   15734:	f47f abdd 	bne.w	14ef2 <ull_conn_rx+0x1052>
	eff_rx_time = conn->lll.max_rx_time;
   15738:	f8dd c000 	ldr.w	ip, [sp]
	eff_rx_octets = conn->lll.max_rx_octets;
   1573c:	9801      	ldr	r0, [sp, #4]
	eff_tx_time = conn->lll.max_tx_time;
   1573e:	4659      	mov	r1, fp
	eff_tx_octets = conn->lll.max_tx_octets;
   15740:	4653      	mov	r3, sl
   15742:	f7fe bd1d 	b.w	14180 <ull_conn_rx+0x2e0>
   15746:	bf00      	nop
   15748:	200013dc 	.word	0x200013dc
   1574c:	00022180 	.word	0x00022180
   15750:	000222c8 	.word	0x000222c8
   15754:	00021ce0 	.word	0x00021ce0
   15758:	0002231c 	.word	0x0002231c
   1575c:	000222a0 	.word	0x000222a0

00015760 <ull_conn_tx_demux>:
{
   15760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15764:	4f24      	ldr	r7, [pc, #144]	; (157f8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15766:	4e25      	ldr	r6, [pc, #148]	; (157fc <ull_conn_tx_demux+0x9c>)
   15768:	78fa      	ldrb	r2, [r7, #3]
{
   1576a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   1576c:	1d3d      	adds	r5, r7, #4
   1576e:	e021      	b.n	157b4 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15770:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15774:	4630      	mov	r0, r6
   15776:	f7f9 f989 	bl	ea8c <mem_get>
	if (conn->lll.handle != handle) {
   1577a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1577c:	bb32      	cbnz	r2, 157cc <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1577e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   15782:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   15786:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   15788:	b369      	cbz	r1, 157e6 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   1578a:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   1578e:	b102      	cbz	r2, 15792 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   15790:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   15792:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   15796:	78fa      	ldrb	r2, [r7, #3]
	u8_t _first = *first; /* Copy read-index */
   15798:	78bb      	ldrb	r3, [r7, #2]
   1579a:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   1579c:	429a      	cmp	r2, r3
   1579e:	d005      	beq.n	157ac <ull_conn_tx_demux+0x4c>
	_first += 1U;
   157a0:	3301      	adds	r3, #1
   157a2:	b2db      	uxtb	r3, r3
		_first = 0U;
   157a4:	4299      	cmp	r1, r3
   157a6:	bf08      	it	eq
   157a8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   157aa:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   157ac:	3c01      	subs	r4, #1
   157ae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   157b2:	d016      	beq.n	157e2 <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   157b4:	78bb      	ldrb	r3, [r7, #2]
   157b6:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   157b8:	4293      	cmp	r3, r2
   157ba:	d012      	beq.n	157e2 <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   157bc:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   157c0:	eb15 0803 	adds.w	r8, r5, r3
   157c4:	d00d      	beq.n	157e2 <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   157c6:	5aea      	ldrh	r2, [r5, r3]
   157c8:	2a00      	cmp	r2, #0
   157ca:	d0d1      	beq.n	15770 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   157cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   157d0:	790b      	ldrb	r3, [r1, #4]
   157d2:	f36f 0301 	bfc	r3, #0, #2
   157d6:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   157d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   157dc:	f7fc fe06 	bl	123ec <ll_tx_ack_put>
   157e0:	e7d9      	b.n	15796 <ull_conn_tx_demux+0x36>
}
   157e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   157e6:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   157ea:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   157ee:	2a00      	cmp	r2, #0
   157f0:	d1cb      	bne.n	1578a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   157f2:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   157f6:	e7cc      	b.n	15792 <ull_conn_tx_demux+0x32>
   157f8:	20005dfc 	.word	0x20005dfc
   157fc:	20001214 	.word	0x20001214

00015800 <conn_cleanup>:
{
   15800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   15804:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   15808:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((u8_t *)rx->pdu) = reason;
   1580a:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1580e:	2309      	movs	r3, #9
{
   15810:	b083      	sub	sp, #12
   15812:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   15814:	f8a0 2132 	strh.w	r2, [r0, #306]	; 0x132
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15818:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
	struct lll_conn *lll = &conn->lll;
   1581c:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   15820:	b144      	cbz	r4, 15834 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15822:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   15824:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   15826:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   15828:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1582a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1582c:	f7fc fd98 	bl	12360 <ll_rx_put>
	while (rx) {
   15830:	2c00      	cmp	r4, #0
   15832:	d1f7      	bne.n	15824 <conn_cleanup+0x24>
	while (conn->tx_head) {
   15834:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   15838:	b381      	cbz	r1, 1589c <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   1583a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 158f4 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   1583e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 158ec <conn_cleanup+0xec>
   15842:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 158f8 <conn_cleanup+0xf8>
   15846:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   1584a:	e007      	b.n	1585c <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1584c:	4629      	mov	r1, r5
   1584e:	4620      	mov	r0, r4
   15850:	463a      	mov	r2, r7
   15852:	f7f9 f94d 	bl	eaf0 <memq_enqueue>
	while (conn->tx_head) {
   15856:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1585a:	b1f9      	cbz	r1, 1589c <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1585c:	4630      	mov	r0, r6
   1585e:	f7fd fc0f 	bl	13080 <tx_ull_dequeue>
   15862:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   15864:	4640      	mov	r0, r8
   15866:	f7f9 f8df 	bl	ea28 <mem_acquire>
		LL_ASSERT(link);
   1586a:	4604      	mov	r4, r0
   1586c:	2800      	cmp	r0, #0
   1586e:	d1ed      	bne.n	1584c <conn_cleanup+0x4c>
   15870:	481c      	ldr	r0, [pc, #112]	; (158e4 <conn_cleanup+0xe4>)
   15872:	f240 63d9 	movw	r3, #1753	; 0x6d9
   15876:	4652      	mov	r2, sl
   15878:	4649      	mov	r1, r9
   1587a:	f006 fdc7 	bl	1c40c <printk>
   1587e:	4040      	eors	r0, r0
   15880:	f380 8811 	msr	BASEPRI, r0
   15884:	f04f 0003 	mov.w	r0, #3
   15888:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1588a:	4629      	mov	r1, r5
   1588c:	4620      	mov	r0, r4
   1588e:	463a      	mov	r2, r7
   15890:	f7f9 f92e 	bl	eaf0 <memq_enqueue>
	while (conn->tx_head) {
   15894:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   15898:	2900      	cmp	r1, #0
   1589a:	d1df      	bne.n	1585c <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   1589c:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   158a0:	4b11      	ldr	r3, [pc, #68]	; (158e8 <conn_cleanup+0xe8>)
   158a2:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   158a6:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   158a8:	b2d2      	uxtb	r2, r2
   158aa:	2101      	movs	r1, #1
   158ac:	2000      	movs	r0, #0
   158ae:	f7fa f98d 	bl	fbcc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158b2:	f030 0302 	bics.w	r3, r0, #2
   158b6:	d00c      	beq.n	158d2 <conn_cleanup+0xd2>
   158b8:	4a0c      	ldr	r2, [pc, #48]	; (158ec <conn_cleanup+0xec>)
   158ba:	490d      	ldr	r1, [pc, #52]	; (158f0 <conn_cleanup+0xf0>)
   158bc:	4809      	ldr	r0, [pc, #36]	; (158e4 <conn_cleanup+0xe4>)
   158be:	f240 63c6 	movw	r3, #1734	; 0x6c6
   158c2:	f006 fda3 	bl	1c40c <printk>
   158c6:	4040      	eors	r0, r0
   158c8:	f380 8811 	msr	BASEPRI, r0
   158cc:	f04f 0003 	mov.w	r0, #3
   158d0:	df02      	svc	2
	lll->handle = 0xFFFF;
   158d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   158d6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   158d8:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   158da:	b003      	add	sp, #12
   158dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   158e0:	f7ff bf3e 	b.w	15760 <ull_conn_tx_demux>
   158e4:	00021ce0 	.word	0x00021ce0
   158e8:	00013459 	.word	0x00013459
   158ec:	00022180 	.word	0x00022180
   158f0:	00022260 	.word	0x00022260
   158f4:	200014e0 	.word	0x200014e0
   158f8:	000221ec 	.word	0x000221ec

000158fc <ull_conn_done>:
{
   158fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   15900:	6a06      	ldr	r6, [r0, #32]
	if (lll->handle == 0xFFFF) {
   15902:	8bb2      	ldrh	r2, [r6, #28]
   15904:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15908:	429a      	cmp	r2, r3
{
   1590a:	b08b      	sub	sp, #44	; 0x2c
	if (lll->handle == 0xFFFF) {
   1590c:	f000 8087 	beq.w	15a1e <ull_conn_done+0x122>
	switch (done->extra.mic_state) {
   15910:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   15914:	68f4      	ldr	r4, [r6, #12]
	switch (done->extra.mic_state) {
   15916:	2b01      	cmp	r3, #1
   15918:	4605      	mov	r5, r0
   1591a:	f000 810d 	beq.w	15b38 <ull_conn_done+0x23c>
   1591e:	2b02      	cmp	r3, #2
   15920:	f000 8110 	beq.w	15b44 <ull_conn_done+0x248>
   15924:	2b00      	cmp	r3, #0
   15926:	f000 80e8 	beq.w	15afa <ull_conn_done+0x1fe>
	reason_peer = conn->llcp_terminate.reason_peer;
   1592a:	f894 712b 	ldrb.w	r7, [r4, #299]	; 0x12b
	if (reason_peer && (
   1592e:	2f00      	cmp	r7, #0
   15930:	f040 810b 	bne.w	15b4a <ull_conn_done+0x24e>
	latency_event = lll->latency_event;
   15934:	f8b6 9024 	ldrh.w	r9, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
   15938:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
	ticks_drift_plus = 0U;
   1593a:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1593c:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   15940:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   15942:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   15946:	2b00      	cmp	r3, #0
   15948:	d06c      	beq.n	15a24 <ull_conn_done+0x128>
		} else if (lll->role) {
   1594a:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   1594e:	2b00      	cmp	r3, #0
   15950:	f2c0 8104 	blt.w	15b5c <ull_conn_done+0x260>
	if (done->extra.crc_valid) {
   15954:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
		conn->connect_expire = 0U;
   15958:	2200      	movs	r2, #0
   1595a:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   1595e:	2b00      	cmp	r3, #0
   15960:	f000 8093 	beq.w	15a8a <ull_conn_done+0x18e>
		conn->supervision_expire = 0U;
   15964:	2300      	movs	r3, #0
   15966:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   1596a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1596e:	b133      	cbz	r3, 1597e <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   15970:	4543      	cmp	r3, r8
   15972:	f240 8109 	bls.w	15b88 <ull_conn_done+0x28c>
			conn->procedure_expire -= elapsed_event;
   15976:	eba3 0308 	sub.w	r3, r3, r8
   1597a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   1597e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15982:	b133      	cbz	r3, 15992 <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   15984:	4543      	cmp	r3, r8
   15986:	f240 80a2 	bls.w	15ace <ull_conn_done+0x1d2>
			conn->apto_expire -= elapsed_event;
   1598a:	eba3 0308 	sub.w	r3, r3, r8
   1598e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   15992:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   15996:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1599a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1599e:	b152      	cbz	r2, 159b6 <ull_conn_done+0xba>
		if (conn->appto_expire > elapsed_event) {
   159a0:	4542      	cmp	r2, r8
   159a2:	d87e      	bhi.n	15aa2 <ull_conn_done+0x1a6>
			if ((conn->procedure_expire == 0U) &&
   159a4:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   159a8:	2000      	movs	r0, #0
   159aa:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   159ae:	b912      	cbnz	r2, 159b6 <ull_conn_done+0xba>
   159b0:	428b      	cmp	r3, r1
   159b2:	f000 80f2 	beq.w	15b9a <ull_conn_done+0x29e>
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   159b6:	1a5b      	subs	r3, r3, r1
   159b8:	f003 0303 	and.w	r3, r3, #3
   159bc:	2b02      	cmp	r3, #2
   159be:	d079      	beq.n	15ab4 <ull_conn_done+0x1b8>
   159c0:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   159c2:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   159c6:	b90f      	cbnz	r7, 159cc <ull_conn_done+0xd0>
   159c8:	4591      	cmp	r9, r2
   159ca:	d07b      	beq.n	15ac4 <ull_conn_done+0x1c8>
		lazy = lll->latency_event + 1;
   159cc:	3201      	adds	r2, #1
   159ce:	b291      	uxth	r1, r2
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   159d0:	b90b      	cbnz	r3, 159d6 <ull_conn_done+0xda>
   159d2:	2c00      	cmp	r4, #0
   159d4:	d062      	beq.n	15a9c <ull_conn_done+0x1a0>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   159d6:	7f32      	ldrb	r2, [r6, #28]
		struct ll_conn *conn = lll->hdr.parent;
   159d8:	68f5      	ldr	r5, [r6, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   159da:	4e7d      	ldr	r6, [pc, #500]	; (15bd0 <ull_conn_done+0x2d4>)
   159dc:	9103      	str	r1, [sp, #12]
   159de:	2000      	movs	r0, #0
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   159e0:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   159e2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   159e6:	9506      	str	r5, [sp, #24]
   159e8:	b2d2      	uxtb	r2, r2
   159ea:	9704      	str	r7, [sp, #16]
   159ec:	9400      	str	r4, [sp, #0]
   159ee:	9605      	str	r6, [sp, #20]
   159f0:	2101      	movs	r1, #1
   159f2:	f7fa f899 	bl	fb28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   159f6:	f030 0302 	bics.w	r3, r0, #2
   159fa:	d010      	beq.n	15a1e <ull_conn_done+0x122>
   159fc:	f7fc fd76 	bl	124ec <ull_disable_mark_get>
   15a00:	4285      	cmp	r5, r0
   15a02:	d00c      	beq.n	15a1e <ull_conn_done+0x122>
   15a04:	4a73      	ldr	r2, [pc, #460]	; (15bd4 <ull_conn_done+0x2d8>)
   15a06:	4974      	ldr	r1, [pc, #464]	; (15bd8 <ull_conn_done+0x2dc>)
   15a08:	4874      	ldr	r0, [pc, #464]	; (15bdc <ull_conn_done+0x2e0>)
   15a0a:	f240 43dd 	movw	r3, #1245	; 0x4dd
   15a0e:	f006 fcfd 	bl	1c40c <printk>
   15a12:	4040      	eors	r0, r0
   15a14:	f380 8811 	msr	BASEPRI, r0
   15a18:	f04f 0003 	mov.w	r0, #3
   15a1c:	df02      	svc	2
}
   15a1e:	b00b      	add	sp, #44	; 0x2c
   15a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   15a24:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   15a28:	2b00      	cmp	r3, #0
   15a2a:	d19b      	bne.n	15964 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   15a2c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15a30:	b35b      	cbz	r3, 15a8a <ull_conn_done+0x18e>
		if (conn->connect_expire > elapsed_event) {
   15a32:	4543      	cmp	r3, r8
   15a34:	f240 80b8 	bls.w	15ba8 <ull_conn_done+0x2ac>
			conn->connect_expire -= elapsed_event;
   15a38:	eba3 0308 	sub.w	r3, r3, r8
   15a3c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   15a40:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   15a44:	2b00      	cmp	r3, #0
   15a46:	d090      	beq.n	1596a <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   15a48:	4598      	cmp	r8, r3
   15a4a:	f080 8098 	bcs.w	15b7e <ull_conn_done+0x282>
			conn->supervision_expire -= elapsed_event;
   15a4e:	eba3 0308 	sub.w	r3, r3, r8
   15a52:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
   15a54:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   15a56:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   15a58:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
   15a5c:	84b2      	strh	r2, [r6, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   15a5e:	d97b      	bls.n	15b58 <ull_conn_done+0x25c>
			else if (lll->role) {
   15a60:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   15a64:	4293      	cmp	r3, r2
   15a66:	da80      	bge.n	1596a <ull_conn_done+0x6e>
				if (latency_event) {
   15a68:	f1b9 0f00 	cmp.w	r9, #0
   15a6c:	d174      	bne.n	15b58 <ull_conn_done+0x25c>
					force = conn->slave.force & 0x01;
   15a6e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
   15a72:	085a      	lsrs	r2, r3, #1
					if (force) {
   15a74:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   15a78:	bf17      	itett	ne
   15a7a:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1;
   15a7e:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   15a82:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   15a86:	461f      	movne	r7, r3
   15a88:	e76f      	b.n	1596a <ull_conn_done+0x6e>
		if (!conn->supervision_expire) {
   15a8a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15a8e:	2b00      	cmp	r3, #0
   15a90:	d1da      	bne.n	15a48 <ull_conn_done+0x14c>
			conn->supervision_expire = conn->supervision_reload;
   15a92:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15a96:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   15a9a:	e7d3      	b.n	15a44 <ull_conn_done+0x148>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   15a9c:	b349      	cbz	r1, 15af2 <ull_conn_done+0x1f6>
   15a9e:	4623      	mov	r3, r4
   15aa0:	e799      	b.n	159d6 <ull_conn_done+0xda>
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15aa2:	1a5b      	subs	r3, r3, r1
   15aa4:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   15aa8:	eba2 0808 	sub.w	r8, r2, r8
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15aac:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   15aae:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15ab2:	d185      	bne.n	159c0 <ull_conn_done+0xc4>
   15ab4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15ab8:	3b01      	subs	r3, #1
   15aba:	2b01      	cmp	r3, #1
   15abc:	d880      	bhi.n	159c0 <ull_conn_done+0xc4>
		lll->latency_event = 0;
   15abe:	2200      	movs	r2, #0
   15ac0:	84b2      	strh	r2, [r6, #36]	; 0x24
   15ac2:	e77e      	b.n	159c2 <ull_conn_done+0xc6>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   15ac4:	b90b      	cbnz	r3, 15aca <ull_conn_done+0x1ce>
   15ac6:	2c00      	cmp	r4, #0
   15ac8:	d0a9      	beq.n	15a1e <ull_conn_done+0x122>
	lazy = 0U;
   15aca:	4639      	mov	r1, r7
   15acc:	e783      	b.n	159d6 <ull_conn_done+0xda>
			rx = ll_pdu_rx_alloc();
   15ace:	f7fc fc75 	bl	123bc <ll_pdu_rx_alloc>
			if (rx) {
   15ad2:	4601      	mov	r1, r0
   15ad4:	2800      	cmp	r0, #0
   15ad6:	d05c      	beq.n	15b92 <ull_conn_done+0x296>
				conn->apto_expire = 0U;
   15ad8:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   15ada:	8bb2      	ldrh	r2, [r6, #28]
				conn->apto_expire = 0U;
   15adc:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   15ae0:	230c      	movs	r3, #12
				rx->handle = lll->handle;
   15ae2:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   15ae4:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   15ae6:	6800      	ldr	r0, [r0, #0]
   15ae8:	f7fc fc3a 	bl	12360 <ll_rx_put>
				ll_rx_sched();
   15aec:	f7fc fc42 	bl	12374 <ll_rx_sched>
   15af0:	e74f      	b.n	15992 <ull_conn_done+0x96>
	    (lazy != 0U) || (force != 0U)) {
   15af2:	2f00      	cmp	r7, #0
   15af4:	d093      	beq.n	15a1e <ull_conn_done+0x122>
   15af6:	4623      	mov	r3, r4
   15af8:	e76d      	b.n	159d6 <ull_conn_done+0xda>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   15afa:	f896 306e 	ldrb.w	r3, [r6, #110]	; 0x6e
   15afe:	0719      	lsls	r1, r3, #28
   15b00:	d404      	bmi.n	15b0c <ull_conn_done+0x210>
   15b02:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15b06:	07da      	lsls	r2, r3, #31
   15b08:	f57f af0f 	bpl.w	1592a <ull_conn_done+0x2e>
					    (lll->latency + 6)) ?
   15b0c:	8c33      	ldrh	r3, [r6, #32]
			appto_reload_new = (conn->apto_reload >
   15b0e:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   15b12:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   15b14:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   15b16:	bfc4      	itt	gt
   15b18:	1ad3      	subgt	r3, r2, r3
   15b1a:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   15b1c:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   15b20:	bfcc      	ite	gt
   15b22:	b29b      	uxthgt	r3, r3
   15b24:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   15b26:	4299      	cmp	r1, r3
   15b28:	d023      	beq.n	15b72 <ull_conn_done+0x276>
				conn->appto_reload = appto_reload_new;
   15b2a:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   15b2e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   15b32:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   15b36:	e6f8      	b.n	1592a <ull_conn_done+0x2e>
		conn->appto_expire = conn->apto_expire = 0U;
   15b38:	2300      	movs	r3, #0
   15b3a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   15b3e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   15b42:	e6f2      	b.n	1592a <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   15b44:	273d      	movs	r7, #61	; 0x3d
   15b46:	f884 712b 	strb.w	r7, [r4, #299]	; 0x12b
		conn_cleanup(conn, reason_peer);
   15b4a:	4639      	mov	r1, r7
   15b4c:	4620      	mov	r0, r4
   15b4e:	f7ff fe57 	bl	15800 <conn_cleanup>
}
   15b52:	b00b      	add	sp, #44	; 0x2c
   15b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				force = 1U;
   15b58:	2701      	movs	r7, #1
   15b5a:	e706      	b.n	1596a <ull_conn_done+0x6e>
			ull_slave_done(done, &ticks_drift_plus,
   15b5c:	aa08      	add	r2, sp, #32
   15b5e:	a909      	add	r1, sp, #36	; 0x24
   15b60:	4628      	mov	r0, r5
   15b62:	f7ed fa81 	bl	3068 <ull_slave_done>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   15b66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15b6a:	b313      	cbz	r3, 15bb2 <ull_conn_done+0x2b6>
				lll->latency_event = 0;
   15b6c:	2300      	movs	r3, #0
   15b6e:	84b3      	strh	r3, [r6, #36]	; 0x24
   15b70:	e6f0      	b.n	15954 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   15b72:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   15b76:	2900      	cmp	r1, #0
   15b78:	f47f aed7 	bne.w	1592a <ull_conn_done+0x2e>
   15b7c:	e7d7      	b.n	15b2e <ull_conn_done+0x232>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   15b7e:	4620      	mov	r0, r4
   15b80:	2108      	movs	r1, #8
   15b82:	f7ff fe3d 	bl	15800 <conn_cleanup>
			return;
   15b86:	e74a      	b.n	15a1e <ull_conn_done+0x122>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   15b88:	4620      	mov	r0, r4
   15b8a:	2122      	movs	r1, #34	; 0x22
   15b8c:	f7ff fe38 	bl	15800 <conn_cleanup>
			return;
   15b90:	e745      	b.n	15a1e <ull_conn_done+0x122>
				conn->apto_expire = 1U;
   15b92:	2301      	movs	r3, #1
   15b94:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   15b98:	e6fb      	b.n	15992 <ull_conn_done+0x96>
				conn->llcp_ack -= 2U;
   15b9a:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   15b9c:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   15b9e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   15ba2:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if ((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15ba6:	e70b      	b.n	159c0 <ull_conn_done+0xc4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   15ba8:	4620      	mov	r0, r4
   15baa:	213e      	movs	r1, #62	; 0x3e
   15bac:	f7ff fe28 	bl	15800 <conn_cleanup>
			return;
   15bb0:	e735      	b.n	15a1e <ull_conn_done+0x122>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   15bb2:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
   15bb6:	463a      	mov	r2, r7
   15bb8:	f7f8 ffa2 	bl	eb00 <memq_peek>
   15bbc:	2800      	cmp	r0, #0
   15bbe:	d1d5      	bne.n	15b6c <ull_conn_done+0x270>
			} else if (lll->slave.latency_enabled) {
   15bc0:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   15bc4:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   15bc6:	bf44      	itt	mi
   15bc8:	8c33      	ldrhmi	r3, [r6, #32]
   15bca:	84b3      	strhmi	r3, [r6, #36]	; 0x24
   15bcc:	e6c2      	b.n	15954 <ull_conn_done+0x58>
   15bce:	bf00      	nop
   15bd0:	00013419 	.word	0x00013419
   15bd4:	00022180 	.word	0x00022180
   15bd8:	00022354 	.word	0x00022354
   15bdc:	00021ce0 	.word	0x00021ce0

00015be0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   15be0:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   15be4:	2b00      	cmp	r3, #0
   15be6:	f000 80e7 	beq.w	15db8 <ull_conn_tx_lll_enqueue+0x1d8>
   15bea:	3901      	subs	r1, #1
{
   15bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   15bf0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 15dc0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   15bf4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 15dc4 <ull_conn_tx_lll_enqueue+0x1e4>
   15bf8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 15dc8 <ull_conn_tx_lll_enqueue+0x1e8>
   15bfc:	4604      	mov	r4, r0
   15bfe:	b2cd      	uxtb	r5, r1
   15c00:	e012      	b.n	15c28 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   15c02:	4640      	mov	r0, r8
   15c04:	f7f8 ff10 	bl	ea28 <mem_acquire>
		LL_ASSERT(link);
   15c08:	4607      	mov	r7, r0
   15c0a:	2800      	cmp	r0, #0
   15c0c:	d066      	beq.n	15cdc <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15c0e:	4631      	mov	r1, r6
   15c10:	4638      	mov	r0, r7
   15c12:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   15c16:	f7f8 ff6b 	bl	eaf0 <memq_enqueue>
	while (conn->tx_head &&
   15c1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15c1e:	3d01      	subs	r5, #1
   15c20:	b2ed      	uxtb	r5, r5
   15c22:	2b00      	cmp	r3, #0
   15c24:	f000 8089 	beq.w	15d3a <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   15c28:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   15c2c:	07d1      	lsls	r1, r2, #31
   15c2e:	d403      	bmi.n	15c38 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   15c30:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   15c34:	0792      	lsls	r2, r2, #30
   15c36:	d566      	bpl.n	15d06 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   15c38:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15c3c:	4293      	cmp	r3, r2
   15c3e:	d17c      	bne.n	15d3a <ull_conn_tx_lll_enqueue+0x15a>
   15c40:	2dff      	cmp	r5, #255	; 0xff
   15c42:	d07a      	beq.n	15d3a <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15c44:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   15c48:	4620      	mov	r0, r4
   15c4a:	f7fd fa19 	bl	13080 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15c4e:	7903      	ldrb	r3, [r0, #4]
   15c50:	f003 0303 	and.w	r3, r3, #3
   15c54:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15c56:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15c58:	d1d3      	bne.n	15c02 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   15c5a:	79c3      	ldrb	r3, [r0, #7]
   15c5c:	3b03      	subs	r3, #3
   15c5e:	2b14      	cmp	r3, #20
   15c60:	d8cf      	bhi.n	15c02 <ull_conn_tx_lll_enqueue+0x22>
   15c62:	a201      	add	r2, pc, #4	; (adr r2, 15c68 <ull_conn_tx_lll_enqueue+0x88>)
   15c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c68:	00015cc5 	.word	0x00015cc5
   15c6c:	00015cc5 	.word	0x00015cc5
   15c70:	00015c03 	.word	0x00015c03
   15c74:	00015c03 	.word	0x00015c03
   15c78:	00015c03 	.word	0x00015c03
   15c7c:	00015c03 	.word	0x00015c03
   15c80:	00015c03 	.word	0x00015c03
   15c84:	00015cc5 	.word	0x00015cc5
   15c88:	00015cbd 	.word	0x00015cbd
   15c8c:	00015c03 	.word	0x00015c03
   15c90:	00015c03 	.word	0x00015c03
   15c94:	00015c03 	.word	0x00015c03
   15c98:	00015c03 	.word	0x00015c03
   15c9c:	00015c03 	.word	0x00015c03
   15ca0:	00015c03 	.word	0x00015c03
   15ca4:	00015c03 	.word	0x00015c03
   15ca8:	00015c03 	.word	0x00015c03
   15cac:	00015c03 	.word	0x00015c03
   15cb0:	00015c03 	.word	0x00015c03
   15cb4:	00015cf9 	.word	0x00015cf9
   15cb8:	00015cf9 	.word	0x00015cf9
		if (!conn->lll.role) {
   15cbc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	da9e      	bge.n	15c02 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   15cc4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15cc8:	f043 0302 	orr.w	r3, r3, #2
   15ccc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   15cd0:	4640      	mov	r0, r8
   15cd2:	f7f8 fea9 	bl	ea28 <mem_acquire>
		LL_ASSERT(link);
   15cd6:	4607      	mov	r7, r0
   15cd8:	2800      	cmp	r0, #0
   15cda:	d198      	bne.n	15c0e <ull_conn_tx_lll_enqueue+0x2e>
   15cdc:	4837      	ldr	r0, [pc, #220]	; (15dbc <ull_conn_tx_lll_enqueue+0x1dc>)
   15cde:	f240 5359 	movw	r3, #1369	; 0x559
   15ce2:	4652      	mov	r2, sl
   15ce4:	4649      	mov	r1, r9
   15ce6:	f006 fb91 	bl	1c40c <printk>
   15cea:	4040      	eors	r0, r0
   15cec:	f380 8811 	msr	BASEPRI, r0
   15cf0:	f04f 0003 	mov.w	r0, #3
   15cf4:	df02      	svc	2
   15cf6:	e78a      	b.n	15c0e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   15cf8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   15cfc:	f043 0301 	orr.w	r3, r3, #1
   15d00:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   15d04:	e77d      	b.n	15c02 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15d06:	791a      	ldrb	r2, [r3, #4]
   15d08:	f002 0203 	and.w	r2, r2, #3
   15d0c:	2a03      	cmp	r2, #3
   15d0e:	d197      	bne.n	15c40 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   15d10:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15d12:	2a03      	cmp	r2, #3
   15d14:	d001      	beq.n	15d1a <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15d16:	2a0a      	cmp	r2, #10
   15d18:	d192      	bne.n	15c40 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   15d1a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   15d1e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   15d22:	428a      	cmp	r2, r1
   15d24:	d00b      	beq.n	15d3e <ull_conn_tx_lll_enqueue+0x15e>
   15d26:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   15d2a:	2a03      	cmp	r2, #3
   15d2c:	d088      	beq.n	15c40 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   15d2e:	681a      	ldr	r2, [r3, #0]
   15d30:	b11a      	cbz	r2, 15d3a <ull_conn_tx_lll_enqueue+0x15a>
   15d32:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   15d36:	428a      	cmp	r2, r1
   15d38:	d02d      	beq.n	15d96 <ull_conn_tx_lll_enqueue+0x1b6>
}
   15d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   15d3e:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   15d42:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   15d46:	4288      	cmp	r0, r1
   15d48:	d1f1      	bne.n	15d2e <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   15d4a:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   15d4e:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   15d52:	4288      	cmp	r0, r1
   15d54:	d1eb      	bne.n	15d2e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   15d56:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   15d5a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   15d5e:	4288      	cmp	r0, r1
   15d60:	d1e5      	bne.n	15d2e <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   15d62:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   15d66:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   15d6a:	4288      	cmp	r0, r1
   15d6c:	d1df      	bne.n	15d2e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   15d6e:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   15d72:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   15d76:	4288      	cmp	r0, r1
   15d78:	d1d9      	bne.n	15d2e <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15d7a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15d7e:	2101      	movs	r1, #1
   15d80:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   15d84:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   15d86:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   15d88:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15d8c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   15d90:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   15d94:	e754      	b.n	15c40 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   15d96:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   15d9a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   15d9e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   15da2:	680a      	ldr	r2, [r1, #0]
   15da4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   15da6:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   15da8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   15dac:	2800      	cmp	r0, #0
   15dae:	f47f af47 	bne.w	15c40 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   15db2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   15db6:	e743      	b.n	15c40 <ull_conn_tx_lll_enqueue+0x60>
   15db8:	4770      	bx	lr
   15dba:	bf00      	nop
   15dbc:	00021ce0 	.word	0x00021ce0
   15dc0:	200014e0 	.word	0x200014e0
   15dc4:	00022180 	.word	0x00022180
   15dc8:	000221ec 	.word	0x000221ec

00015dcc <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   15dcc:	4901      	ldr	r1, [pc, #4]	; (15dd4 <ull_conn_link_tx_release+0x8>)
   15dce:	f7f8 be45 	b.w	ea5c <mem_release>
   15dd2:	bf00      	nop
   15dd4:	200014e0 	.word	0x200014e0

00015dd8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   15dd8:	4b01      	ldr	r3, [pc, #4]	; (15de0 <ull_conn_ack_last_idx_get+0x8>)
}
   15dda:	78d8      	ldrb	r0, [r3, #3]
   15ddc:	4770      	bx	lr
   15dde:	bf00      	nop
   15de0:	20005db8 	.word	0x20005db8

00015de4 <ull_conn_ack_peek>:
{
   15de4:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   15de6:	4b0b      	ldr	r3, [pc, #44]	; (15e14 <ull_conn_ack_peek+0x30>)
   15de8:	789c      	ldrb	r4, [r3, #2]
   15dea:	78de      	ldrb	r6, [r3, #3]
   15dec:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   15dee:	42b4      	cmp	r4, r6
   15df0:	d00d      	beq.n	15e0e <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   15df2:	3304      	adds	r3, #4
   15df4:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   15df8:	4605      	mov	r5, r0
   15dfa:	1918      	adds	r0, r3, r4
   15dfc:	d005      	beq.n	15e0a <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   15dfe:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   15e00:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   15e02:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   15e04:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   15e06:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   15e08:	6818      	ldr	r0, [r3, #0]
}
   15e0a:	bcf0      	pop	{r4, r5, r6, r7}
   15e0c:	4770      	bx	lr
		return NULL;
   15e0e:	2000      	movs	r0, #0
   15e10:	e7fb      	b.n	15e0a <ull_conn_ack_peek+0x26>
   15e12:	bf00      	nop
   15e14:	20005db8 	.word	0x20005db8

00015e18 <ull_conn_ack_by_last_peek>:
{
   15e18:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   15e1a:	4b09      	ldr	r3, [pc, #36]	; (15e40 <ull_conn_ack_by_last_peek+0x28>)
   15e1c:	789c      	ldrb	r4, [r3, #2]
   15e1e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   15e20:	4284      	cmp	r4, r0
   15e22:	d00b      	beq.n	15e3c <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   15e24:	3304      	adds	r3, #4
   15e26:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   15e2a:	1918      	adds	r0, r3, r4
   15e2c:	d004      	beq.n	15e38 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   15e2e:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   15e30:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   15e32:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   15e34:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   15e36:	6818      	ldr	r0, [r3, #0]
}
   15e38:	bc30      	pop	{r4, r5}
   15e3a:	4770      	bx	lr
		return NULL;
   15e3c:	2000      	movs	r0, #0
   15e3e:	e7fb      	b.n	15e38 <ull_conn_ack_by_last_peek+0x20>
   15e40:	20005db8 	.word	0x20005db8

00015e44 <ull_conn_ack_dequeue>:
{
   15e44:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   15e46:	4b0a      	ldr	r3, [pc, #40]	; (15e70 <ull_conn_ack_dequeue+0x2c>)
	u8_t _first = *first; /* Copy read-index */
   15e48:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   15e4a:	78da      	ldrb	r2, [r3, #3]
   15e4c:	7818      	ldrb	r0, [r3, #0]
   15e4e:	785c      	ldrb	r4, [r3, #1]
   15e50:	428a      	cmp	r2, r1
   15e52:	d00a      	beq.n	15e6a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   15e54:	1c4a      	adds	r2, r1, #1
   15e56:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   15e58:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   15e5c:	4294      	cmp	r4, r2
   15e5e:	bf08      	it	eq
   15e60:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   15e62:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   15e64:	709a      	strb	r2, [r3, #2]
}
   15e66:	bc10      	pop	{r4}
   15e68:	4770      	bx	lr
		return NULL;
   15e6a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   15e6c:	e7fb      	b.n	15e66 <ull_conn_ack_dequeue+0x22>
   15e6e:	bf00      	nop
   15e70:	20005db8 	.word	0x20005db8

00015e74 <ull_conn_lll_ack_enqueue>:
{
   15e74:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   15e76:	4a13      	ldr	r2, [pc, #76]	; (15ec4 <ull_conn_lll_ack_enqueue+0x50>)
   15e78:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   15e7a:	7855      	ldrb	r5, [r2, #1]
   15e7c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   15e7e:	1c73      	adds	r3, r6, #1
   15e80:	b2db      	uxtb	r3, r3
		last = 0U;
   15e82:	429d      	cmp	r5, r3
   15e84:	bf08      	it	eq
   15e86:	2300      	moveq	r3, #0
	if (last == first) {
   15e88:	429c      	cmp	r4, r3
   15e8a:	d00a      	beq.n	15ea2 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15e8c:	4615      	mov	r5, r2
   15e8e:	f815 4b04 	ldrb.w	r4, [r5], #4
   15e92:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   15e96:	192e      	adds	r6, r5, r4
   15e98:	d003      	beq.n	15ea2 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   15e9a:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   15e9c:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   15e9e:	6071      	str	r1, [r6, #4]
}
   15ea0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   15ea2:	4a09      	ldr	r2, [pc, #36]	; (15ec8 <ull_conn_lll_ack_enqueue+0x54>)
   15ea4:	4909      	ldr	r1, [pc, #36]	; (15ecc <ull_conn_lll_ack_enqueue+0x58>)
   15ea6:	480a      	ldr	r0, [pc, #40]	; (15ed0 <ull_conn_lll_ack_enqueue+0x5c>)
   15ea8:	f240 5397 	movw	r3, #1431	; 0x597
   15eac:	f006 faae 	bl	1c40c <printk>
   15eb0:	4040      	eors	r0, r0
   15eb2:	f380 8811 	msr	BASEPRI, r0
   15eb6:	f04f 0003 	mov.w	r0, #3
   15eba:	df02      	svc	2
	lll_tx->handle = handle;
   15ebc:	2300      	movs	r3, #0
   15ebe:	801b      	strh	r3, [r3, #0]
   15ec0:	deff      	udf	#255	; 0xff
   15ec2:	bf00      	nop
   15ec4:	20005db8 	.word	0x20005db8
   15ec8:	00022180 	.word	0x00022180
   15ecc:	000221dc 	.word	0x000221dc
   15ed0:	00021ce0 	.word	0x00021ce0

00015ed4 <ull_conn_tx_ack>:
{
   15ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   15ed6:	7953      	ldrb	r3, [r2, #5]
{
   15ed8:	b083      	sub	sp, #12
   15eda:	4614      	mov	r4, r2
   15edc:	4605      	mov	r5, r0
   15ede:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   15ee0:	2b00      	cmp	r3, #0
   15ee2:	d033      	beq.n	15f4c <ull_conn_tx_ack+0x78>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15ee4:	7923      	ldrb	r3, [r4, #4]
   15ee6:	f003 0203 	and.w	r2, r3, #3
   15eea:	2a03      	cmp	r2, #3
   15eec:	d016      	beq.n	15f1c <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   15eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15ef2:	4295      	cmp	r5, r2
   15ef4:	d10a      	bne.n	15f0c <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   15ef6:	f36f 0301 	bfc	r3, #0, #2
   15efa:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   15efc:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   15efe:	4621      	mov	r1, r4
   15f00:	4628      	mov	r0, r5
   15f02:	f7fc fa73 	bl	123ec <ll_tx_ack_put>
}
   15f06:	4630      	mov	r0, r6
   15f08:	b003      	add	sp, #12
   15f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f0c:	48c3      	ldr	r0, [pc, #780]	; (1621c <ull_conn_tx_ack+0x348>)
   15f0e:	462a      	mov	r2, r5
   15f10:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15f14:	f7f8 fdba 	bl	ea8c <mem_get>
   15f18:	4606      	mov	r6, r0
   15f1a:	e7f0      	b.n	15efe <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   15f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15f20:	429d      	cmp	r5, r3
   15f22:	d121      	bne.n	15f68 <ull_conn_tx_ack+0x94>
	struct ll_conn *conn = NULL;
   15f24:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   15f26:	6838      	ldr	r0, [r7, #0]
   15f28:	4284      	cmp	r4, r0
   15f2a:	d045      	beq.n	15fb8 <ull_conn_tx_ack+0xe4>
			LL_ASSERT(!link->next);
   15f2c:	2800      	cmp	r0, #0
   15f2e:	d0e6      	beq.n	15efe <ull_conn_tx_ack+0x2a>
   15f30:	4abb      	ldr	r2, [pc, #748]	; (16220 <ull_conn_tx_ack+0x34c>)
   15f32:	49bc      	ldr	r1, [pc, #752]	; (16224 <ull_conn_tx_ack+0x350>)
   15f34:	48bc      	ldr	r0, [pc, #752]	; (16228 <ull_conn_tx_ack+0x354>)
   15f36:	f240 53b9 	movw	r3, #1465	; 0x5b9
   15f3a:	f006 fa67 	bl	1c40c <printk>
   15f3e:	4040      	eors	r0, r0
   15f40:	f380 8811 	msr	BASEPRI, r0
   15f44:	f04f 0003 	mov.w	r0, #3
   15f48:	df02      	svc	2
   15f4a:	e7d8      	b.n	15efe <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   15f4c:	4ab4      	ldr	r2, [pc, #720]	; (16220 <ull_conn_tx_ack+0x34c>)
   15f4e:	49b7      	ldr	r1, [pc, #732]	; (1622c <ull_conn_tx_ack+0x358>)
   15f50:	48b5      	ldr	r0, [pc, #724]	; (16228 <ull_conn_tx_ack+0x354>)
   15f52:	f240 53a6 	movw	r3, #1446	; 0x5a6
   15f56:	f006 fa59 	bl	1c40c <printk>
   15f5a:	4040      	eors	r0, r0
   15f5c:	f380 8811 	msr	BASEPRI, r0
   15f60:	f04f 0003 	mov.w	r0, #3
   15f64:	df02      	svc	2
   15f66:	e7bd      	b.n	15ee4 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f68:	48ac      	ldr	r0, [pc, #688]	; (1621c <ull_conn_tx_ack+0x348>)
   15f6a:	462a      	mov	r2, r5
   15f6c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15f70:	f7f8 fd8c 	bl	ea8c <mem_get>
   15f74:	79e3      	ldrb	r3, [r4, #7]
   15f76:	3b02      	subs	r3, #2
   15f78:	4606      	mov	r6, r0
	switch (pdu_tx->llctrl.opcode) {
   15f7a:	2b16      	cmp	r3, #22
   15f7c:	d818      	bhi.n	15fb0 <ull_conn_tx_ack+0xdc>
   15f7e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15f82:	0123      	.short	0x0123
   15f84:	00460107 	.word	0x00460107
   15f88:	00170017 	.word	0x00170017
   15f8c:	00170017 	.word	0x00170017
   15f90:	00f60017 	.word	0x00f60017
   15f94:	0017005a 	.word	0x0017005a
   15f98:	00170050 	.word	0x00170050
   15f9c:	00170017 	.word	0x00170017
   15fa0:	0017004d 	.word	0x0017004d
   15fa4:	00dd0017 	.word	0x00dd0017
   15fa8:	001f00b5 	.word	0x001f00b5
   15fac:	00e50026 	.word	0x00e50026
		if (link->next == (void *)tx) {
   15fb0:	6838      	ldr	r0, [r7, #0]
   15fb2:	42a0      	cmp	r0, r4
   15fb4:	d1ba      	bne.n	15f2c <ull_conn_tx_ack+0x58>
   15fb6:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15fb8:	499d      	ldr	r1, [pc, #628]	; (16230 <ull_conn_tx_ack+0x35c>)
   15fba:	f7f8 fd4f 	bl	ea5c <mem_release>
			return conn;
   15fbe:	e7a2      	b.n	15f06 <ull_conn_tx_ack+0x32>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15fc0:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   15fc4:	2202      	movs	r2, #2
   15fc6:	f362 0301 	bfi	r3, r2, #0, #2
   15fca:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   15fce:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   15fd2:	2b00      	cmp	r3, #0
   15fd4:	da14      	bge.n	16000 <ull_conn_tx_ack+0x12c>
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   15fd6:	4997      	ldr	r1, [pc, #604]	; (16234 <ull_conn_tx_ack+0x360>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   15fd8:	f896 2064 	ldrb.w	r2, [r6, #100]	; 0x64
   15fdc:	f896 31aa 	ldrb.w	r3, [r6, #426]	; 0x1aa
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   15fe0:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   15fe2:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   15fe6:	f10d 0c08 	add.w	ip, sp, #8
   15fea:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   15fee:	f003 0307 	and.w	r3, r3, #7
   15ff2:	4463      	add	r3, ip
   15ff4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   15ff8:	f363 1206 	bfi	r2, r3, #4, #3
   15ffc:	f886 2064 	strb.w	r2, [r6, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16000:	f896 31ab 	ldrb.w	r3, [r6, #427]	; 0x1ab
   16004:	f36f 0300 	bfc	r3, #0, #1
   16008:	f886 31ab 	strb.w	r3, [r6, #427]	; 0x1ab
		break;
   1600c:	e78b      	b.n	15f26 <ull_conn_tx_ack+0x52>
			conn->llcp_enc.pause_tx = 1U;
   1600e:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
   16012:	f043 0302 	orr.w	r3, r3, #2
   16016:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
   1601a:	e784      	b.n	15f26 <ull_conn_tx_ack+0x52>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1601c:	7a23      	ldrb	r3, [r4, #8]
   1601e:	2b03      	cmp	r3, #3
   16020:	d181      	bne.n	15f26 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_rx = 0U;
   16022:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   16026:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   16028:	f023 0303 	bic.w	r3, r3, #3
   1602c:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   16030:	f8a6 20cc 	strh.w	r2, [r6, #204]	; 0xcc
		break;
   16034:	e777      	b.n	15f26 <ull_conn_tx_ack+0x52>
		if (!conn->lll.role) {
   16036:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1603a:	2b00      	cmp	r3, #0
   1603c:	dbe7      	blt.n	1600e <ull_conn_tx_ack+0x13a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1603e:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16040:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16042:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   16046:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16048:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1604a:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1604c:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1604e:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   16050:	f200 1155 	addw	r1, r0, #341	; 0x155
   16054:	18a0      	adds	r0, r4, r2
   16056:	f008 fa47 	bl	1e4e8 <memcpy>
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   1605a:	4a77      	ldr	r2, [pc, #476]	; (16238 <ull_conn_tx_ack+0x364>)
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1605c:	f896 3153 	ldrb.w	r3, [r6, #339]	; 0x153
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   16060:	6810      	ldr	r0, [r2, #0]
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   16062:	7423      	strb	r3, [r4, #16]
	if (unlikely(!api->get_entropy_isr)) {
   16064:	6842      	ldr	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   16066:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
   1606a:	6855      	ldr	r5, [r2, #4]
   1606c:	7463      	strb	r3, [r4, #17]
	entropy_get_entropy_isr(entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   1606e:	f104 0112 	add.w	r1, r4, #18
   16072:	b115      	cbz	r5, 1607a <ull_conn_tx_ack+0x1a6>
	return api->get_entropy_isr(dev, buffer, length, flags);
   16074:	2300      	movs	r3, #0
   16076:	220c      	movs	r2, #12
   16078:	47a8      	blx	r5
	    conn->tx_head &&
   1607a:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	if (
   1607e:	2b00      	cmp	r3, #0
   16080:	f000 80ac 	beq.w	161dc <ull_conn_tx_ack+0x308>
	    !conn->llcp_enc.pause_tx &&
   16084:	f896 2152 	ldrb.w	r2, [r6, #338]	; 0x152
	    conn->tx_head &&
   16088:	0791      	lsls	r1, r2, #30
   1608a:	f100 80a7 	bmi.w	161dc <ull_conn_tx_ack+0x308>
	    !conn->llcp_phy.pause_tx &&
   1608e:	f896 21ab 	ldrb.w	r2, [r6, #427]	; 0x1ab
   16092:	07d2      	lsls	r2, r2, #31
   16094:	f100 80a2 	bmi.w	161dc <ull_conn_tx_ack+0x308>
		if (conn->tx_head == conn->tx_data) {
   16098:	f8d6 21bc 	ldr.w	r2, [r6, #444]	; 0x1bc
   1609c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1609e:	bf04      	itt	eq
   160a0:	681a      	ldreq	r2, [r3, #0]
   160a2:	f8c6 21bc 	streq.w	r2, [r6, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   160a6:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   160aa:	2a00      	cmp	r2, #0
   160ac:	f000 80c8 	beq.w	16240 <ull_conn_tx_ack+0x36c>
	tx->next = conn->tx_ctrl_last->next;
   160b0:	f8d6 31b8 	ldr.w	r3, [r6, #440]	; 0x1b8
   160b4:	681a      	ldr	r2, [r3, #0]
   160b6:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   160b8:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   160ba:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   160be:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
   160c0:	683a      	ldr	r2, [r7, #0]
   160c2:	2b00      	cmp	r3, #0
   160c4:	f000 8087 	beq.w	161d6 <ull_conn_tx_ack+0x302>
		if (link->next == (void *)tx) {
   160c8:	2a00      	cmp	r2, #0
   160ca:	f47f af1c 	bne.w	15f06 <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   160ce:	4a54      	ldr	r2, [pc, #336]	; (16220 <ull_conn_tx_ack+0x34c>)
   160d0:	495a      	ldr	r1, [pc, #360]	; (1623c <ull_conn_tx_ack+0x368>)
   160d2:	4855      	ldr	r0, [pc, #340]	; (16228 <ull_conn_tx_ack+0x354>)
   160d4:	f240 53b2 	movw	r3, #1458	; 0x5b2
   160d8:	f006 f998 	bl	1c40c <printk>
   160dc:	4040      	eors	r0, r0
   160de:	f380 8811 	msr	BASEPRI, r0
   160e2:	f04f 0003 	mov.w	r0, #3
   160e6:	df02      	svc	2
   160e8:	2000      	movs	r0, #0
   160ea:	e765      	b.n	15fb8 <ull_conn_tx_ack+0xe4>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   160ec:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   160f0:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   160f4:	428b      	cmp	r3, r1
   160f6:	f43f af16 	beq.w	15f26 <ull_conn_tx_ack+0x52>
			switch (conn->llcp_length.state) {
   160fa:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   160fe:	f002 0307 	and.w	r3, r2, #7
   16102:	2b03      	cmp	r3, #3
   16104:	d005      	beq.n	16112 <ull_conn_tx_ack+0x23e>
   16106:	3303      	adds	r3, #3
   16108:	f003 0307 	and.w	r3, r3, #7
   1610c:	2b01      	cmp	r3, #1
   1610e:	f63f af4f 	bhi.w	15fb0 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   16112:	f8b6 319e 	ldrh.w	r3, [r6, #414]	; 0x19e
   16116:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1611a:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   1611e:	f8b6 01a2 	ldrh.w	r0, [r6, #418]	; 0x1a2
   16122:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
				if (conn->llcp_length.state ==
   16126:	2b05      	cmp	r3, #5
   16128:	d071      	beq.n	1620e <ull_conn_tx_ack+0x33a>
				if (!conn->llcp_length.cache.tx_octets) {
   1612a:	f8b6 31a4 	ldrh.w	r3, [r6, #420]	; 0x1a4
   1612e:	2b00      	cmp	r3, #0
   16130:	d15f      	bne.n	161f2 <ull_conn_tx_ack+0x31e>
					conn->llcp_length.ack =
   16132:	f886 1199 	strb.w	r1, [r6, #409]	; 0x199
					conn->procedure_expire = 0U;
   16136:	f8a6 30cc 	strh.w	r3, [r6, #204]	; 0xcc
					break;
   1613a:	e6f4      	b.n	15f26 <ull_conn_tx_ack+0x52>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1613c:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   16140:	2202      	movs	r2, #2
   16142:	f362 0302 	bfi	r3, r2, #0, #3
   16146:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   1614a:	e6ec      	b.n	15f26 <ull_conn_tx_ack+0x52>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1614c:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   16150:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16154:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16158:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1615c:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   16160:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16164:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16168:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   1616c:	e6db      	b.n	15f26 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_tx = 1U;
   1616e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   16172:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   16176:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   1617a:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1617e:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   16182:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   16186:	f043 0306 	orr.w	r3, r3, #6
   1618a:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   1618e:	e6ca      	b.n	15f26 <ull_conn_tx_ack+0x52>
		memcpy(&conn->llcp.encryption.skd[0],
   16190:	2208      	movs	r2, #8
   16192:	f104 0112 	add.w	r1, r4, #18
   16196:	30ee      	adds	r0, #238	; 0xee
   16198:	f008 f9a6 	bl	1e4e8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1619c:	2204      	movs	r2, #4
   1619e:	f104 011a 	add.w	r1, r4, #26
   161a2:	f106 0098 	add.w	r0, r6, #152	; 0x98
   161a6:	f008 f99f 	bl	1e4e8 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   161aa:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   161ae:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   161b2:	f896 2150 	ldrb.w	r2, [r6, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   161b6:	f8a6 10cc 	strh.w	r1, [r6, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   161ba:	f043 0302 	orr.w	r3, r3, #2
   161be:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   161c2:	f886 2151 	strb.w	r2, [r6, #337]	; 0x151
		break;
   161c6:	e6ae      	b.n	15f26 <ull_conn_tx_ack+0x52>
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   161c8:	7a21      	ldrb	r1, [r4, #8]
   161ca:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   161cc:	bf08      	it	eq
   161ce:	2116      	moveq	r1, #22
   161d0:	f7ff fb16 	bl	15800 <conn_cleanup>
	break;
   161d4:	e6a7      	b.n	15f26 <ull_conn_tx_ack+0x52>
		conn->tx_data_last = tx;
   161d6:	f8c6 41c0 	str.w	r4, [r6, #448]	; 0x1c0
   161da:	e775      	b.n	160c8 <ull_conn_tx_ack+0x1f4>
		if (!conn->tx_ctrl) {
   161dc:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   161e0:	2a00      	cmp	r2, #0
   161e2:	f47f af65 	bne.w	160b0 <ull_conn_tx_ack+0x1dc>
			tx->next = conn->tx_head;
   161e6:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   161e8:	e9c6 446c 	strd	r4, r4, [r6, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   161ec:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   161f0:	e766      	b.n	160c0 <ull_conn_tx_ack+0x1ec>
				conn->llcp_length.cache.tx_octets = 0;
   161f2:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   161f4:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   161f8:	f8a6 319e 	strh.w	r3, [r6, #414]	; 0x19e
				conn->llcp_length.tx_time =
   161fc:	f8b6 31a6 	ldrh.w	r3, [r6, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16200:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   16204:	f8a6 11a4 	strh.w	r1, [r6, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   16208:	f8a6 31a2 	strh.w	r3, [r6, #418]	; 0x1a2
				break;
   1620c:	e68b      	b.n	15f26 <ull_conn_tx_ack+0x52>
					conn->llcp_length.state =
   1620e:	2304      	movs	r3, #4
   16210:	f363 0202 	bfi	r2, r3, #0, #3
   16214:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
					break;
   16218:	e685      	b.n	15f26 <ull_conn_tx_ack+0x52>
   1621a:	bf00      	nop
   1621c:	20001214 	.word	0x20001214
   16220:	00022180 	.word	0x00022180
   16224:	000223bc 	.word	0x000223bc
   16228:	00021ce0 	.word	0x00021ce0
   1622c:	000223b0 	.word	0x000223b0
   16230:	2000145c 	.word	0x2000145c
   16234:	000223d4 	.word	0x000223d4
   16238:	200013e0 	.word	0x200013e0
   1623c:	000223c8 	.word	0x000223c8
			tx->next = conn->tx_head->next;
   16240:	681a      	ldr	r2, [r3, #0]
   16242:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   16244:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   16246:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   16248:	e9c6 446d 	strd	r4, r4, [r6, #436]	; 0x1b4
   1624c:	e738      	b.n	160c0 <ull_conn_tx_ack+0x1ec>
   1624e:	bf00      	nop

00016250 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   16250:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
   16254:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   16258:	f3c1 1202 	ubfx	r2, r1, #4, #3
   1625c:	2a02      	cmp	r2, #2
   1625e:	d010      	beq.n	16282 <ull_conn_lll_max_tx_octets_get+0x32>
   16260:	2a04      	cmp	r2, #4
   16262:	d012      	beq.n	1628a <ull_conn_lll_max_tx_octets_get+0x3a>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16264:	08db      	lsrs	r3, r3, #3
   16266:	3b0a      	subs	r3, #10
   16268:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1626a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   1626e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   16272:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   16274:	bf44      	itt	mi
   16276:	3b04      	submi	r3, #4
   16278:	b29b      	uxthmi	r3, r3
}
   1627a:	4298      	cmp	r0, r3
   1627c:	bf28      	it	cs
   1627e:	4618      	movcs	r0, r3
   16280:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   16282:	089b      	lsrs	r3, r3, #2
   16284:	3b0b      	subs	r3, #11
   16286:	b29b      	uxth	r3, r3
		break;
   16288:	e7ef      	b.n	1626a <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   1628a:	0709      	lsls	r1, r1, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   1628c:	bf4b      	itete	mi
   1628e:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   16292:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   16296:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   16298:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   1629a:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   1629c:	b29b      	uxth	r3, r3
   1629e:	e7e4      	b.n	1626a <ull_conn_lll_max_tx_octets_get+0x1a>

000162a0 <ticker_op_cb>:

static void ticker_op_cb(u32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   162a0:	b900      	cbnz	r0, 162a4 <ticker_op_cb+0x4>
   162a2:	4770      	bx	lr
{
   162a4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   162a6:	4a07      	ldr	r2, [pc, #28]	; (162c4 <ticker_op_cb+0x24>)
   162a8:	4907      	ldr	r1, [pc, #28]	; (162c8 <ticker_op_cb+0x28>)
   162aa:	4808      	ldr	r0, [pc, #32]	; (162cc <ticker_op_cb+0x2c>)
   162ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   162b0:	f006 f8ac 	bl	1c40c <printk>
   162b4:	4040      	eors	r0, r0
   162b6:	f380 8811 	msr	BASEPRI, r0
   162ba:	f04f 0003 	mov.w	r0, #3
   162be:	df02      	svc	2
}
   162c0:	bd08      	pop	{r3, pc}
   162c2:	bf00      	nop
   162c4:	000223f4 	.word	0x000223f4
   162c8:	000221f4 	.word	0x000221f4
   162cc:	00021ce0 	.word	0x00021ce0

000162d0 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(u32_t status, void *param)
   162d0:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   162d2:	4a07      	ldr	r2, [pc, #28]	; (162f0 <ticker_op_stop_adv_cb.part.0+0x20>)
   162d4:	4907      	ldr	r1, [pc, #28]	; (162f4 <ticker_op_stop_adv_cb.part.0+0x24>)
   162d6:	4808      	ldr	r0, [pc, #32]	; (162f8 <ticker_op_stop_adv_cb.part.0+0x28>)
   162d8:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   162dc:	f006 f896 	bl	1c40c <printk>
   162e0:	4040      	eors	r0, r0
   162e2:	f380 8811 	msr	BASEPRI, r0
   162e6:	f04f 0003 	mov.w	r0, #3
   162ea:	df02      	svc	2
}
   162ec:	bd08      	pop	{r3, pc}
   162ee:	bf00      	nop
   162f0:	000223f4 	.word	0x000223f4
   162f4:	00022438 	.word	0x00022438
   162f8:	00021ce0 	.word	0x00021ce0

000162fc <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   162fc:	2801      	cmp	r0, #1
   162fe:	d000      	beq.n	16302 <ticker_op_stop_adv_cb+0x6>
   16300:	4770      	bx	lr
{
   16302:	b510      	push	{r4, lr}
   16304:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   16306:	f7fc f8f1 	bl	124ec <ull_disable_mark_get>
   1630a:	4284      	cmp	r4, r0
   1630c:	d003      	beq.n	16316 <ticker_op_stop_adv_cb+0x1a>
}
   1630e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16312:	f7ff bfdd 	b.w	162d0 <ticker_op_stop_adv_cb.part.0>
   16316:	bd10      	pop	{r4, pc}

00016318 <ull_slave_ticker_cb>:
{
   16318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1631c:	4605      	mov	r5, r0
   1631e:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   16320:	4618      	mov	r0, r3
   16322:	4629      	mov	r1, r5
{
   16324:	461c      	mov	r4, r3
   16326:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   16328:	f7ea fe66 	bl	ff8 <ull_conn_llcp>
		if (ret) {
   1632c:	2800      	cmp	r0, #0
   1632e:	d13a      	bne.n	163a6 <ull_slave_ticker_cb+0x8e>
   16330:	7c23      	ldrb	r3, [r4, #16]
   16332:	3301      	adds	r3, #1
   16334:	b2db      	uxtb	r3, r3
   16336:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   16338:	b33b      	cbz	r3, 1638a <ull_slave_ticker_cb+0x72>
	p.ticks_at_expire = ticks_at_expire;
   1633a:	4e1c      	ldr	r6, [pc, #112]	; (163ac <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   1633c:	4b1c      	ldr	r3, [pc, #112]	; (163b0 <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   1633e:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16340:	2200      	movs	r2, #0
	p.param = &conn->lll;
   16342:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16346:	4611      	mov	r1, r2
   16348:	2001      	movs	r0, #1
	mfy.param = &p;
   1634a:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   1634c:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   16350:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   16352:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16356:	f7f8 fc3f 	bl	ebd8 <mayfly_enqueue>
	LL_ASSERT(!err);
   1635a:	b940      	cbnz	r0, 1636e <ull_slave_ticker_cb+0x56>
	ull_conn_tx_demux(UINT8_MAX);
   1635c:	20ff      	movs	r0, #255	; 0xff
   1635e:	f7ff f9ff 	bl	15760 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   16362:	4620      	mov	r0, r4
   16364:	21ff      	movs	r1, #255	; 0xff
}
   16366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1636a:	f7ff bc39 	b.w	15be0 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   1636e:	4a11      	ldr	r2, [pc, #68]	; (163b4 <ull_slave_ticker_cb+0x9c>)
   16370:	4911      	ldr	r1, [pc, #68]	; (163b8 <ull_slave_ticker_cb+0xa0>)
   16372:	4812      	ldr	r0, [pc, #72]	; (163bc <ull_slave_ticker_cb+0xa4>)
   16374:	f44f 73be 	mov.w	r3, #380	; 0x17c
   16378:	f006 f848 	bl	1c40c <printk>
   1637c:	4040      	eors	r0, r0
   1637e:	f380 8811 	msr	BASEPRI, r0
   16382:	f04f 0003 	mov.w	r0, #3
   16386:	df02      	svc	2
   16388:	e7e8      	b.n	1635c <ull_slave_ticker_cb+0x44>
	LL_ASSERT(ref);
   1638a:	4a0a      	ldr	r2, [pc, #40]	; (163b4 <ull_slave_ticker_cb+0x9c>)
   1638c:	490c      	ldr	r1, [pc, #48]	; (163c0 <ull_slave_ticker_cb+0xa8>)
   1638e:	480b      	ldr	r0, [pc, #44]	; (163bc <ull_slave_ticker_cb+0xa4>)
   16390:	f44f 73b8 	mov.w	r3, #368	; 0x170
   16394:	f006 f83a 	bl	1c40c <printk>
   16398:	4040      	eors	r0, r0
   1639a:	f380 8811 	msr	BASEPRI, r0
   1639e:	f04f 0003 	mov.w	r0, #3
   163a2:	df02      	svc	2
   163a4:	e7c9      	b.n	1633a <ull_slave_ticker_cb+0x22>
}
   163a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163aa:	bf00      	nop
   163ac:	20001524 	.word	0x20001524
   163b0:	20005e30 	.word	0x20005e30
   163b4:	000223f4 	.word	0x000223f4
   163b8:	00021f58 	.word	0x00021f58
   163bc:	00021ce0 	.word	0x00021ce0
   163c0:	000220e0 	.word	0x000220e0

000163c4 <ll_start_enc_req_send>:
{
   163c4:	b570      	push	{r4, r5, r6, lr}
   163c6:	460e      	mov	r6, r1
   163c8:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   163ca:	f7fd fa1b 	bl	13804 <ll_connected_get>
	if (!conn) {
   163ce:	2800      	cmp	r0, #0
   163d0:	d040      	beq.n	16454 <ll_start_enc_req_send+0x90>
	if (error_code) {
   163d2:	4604      	mov	r4, r0
   163d4:	b95e      	cbnz	r6, 163ee <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   163d6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   163da:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   163de:	429a      	cmp	r2, r3
   163e0:	d003      	beq.n	163ea <ll_start_enc_req_send+0x26>
   163e2:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   163e6:	2b03      	cmp	r3, #3
   163e8:	d026      	beq.n	16438 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   163ea:	200c      	movs	r0, #12
}
   163ec:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   163ee:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   163f2:	f010 0004 	ands.w	r0, r0, #4
   163f6:	d112      	bne.n	1641e <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   163f8:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   163fc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   16400:	429a      	cmp	r2, r3
   16402:	d0f2      	beq.n	163ea <ll_start_enc_req_send+0x26>
   16404:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16408:	2b03      	cmp	r3, #3
   1640a:	d1ee      	bne.n	163ea <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1640c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   16410:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16414:	f360 0301 	bfi	r3, r0, #0, #2
   16418:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   1641c:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1641e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
			if (conn->llcp_terminate.ack !=
   16422:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   16426:	4293      	cmp	r3, r2
   16428:	d1df      	bne.n	163ea <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1642a:	3301      	adds	r3, #1
   1642c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
			conn->llcp_terminate.reason_own = error_code;
   16430:	f884 612a 	strb.w	r6, [r4, #298]	; 0x12a
	return 0;
   16434:	2000      	movs	r0, #0
}
   16436:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   16438:	4629      	mov	r1, r5
   1643a:	2210      	movs	r2, #16
   1643c:	f200 105d 	addw	r0, r0, #349	; 0x15d
   16440:	f008 f852 	bl	1e4e8 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16444:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16448:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   1644c:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1644e:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   16452:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16454:	2002      	movs	r0, #2
}
   16456:	bd70      	pop	{r4, r5, r6, pc}

00016458 <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   16458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1645c:	4688      	mov	r8, r1
	int i;

	if (free) {
   1645e:	4615      	mov	r5, r2
   16460:	b10a      	cbz	r2, 16466 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   16462:	23ff      	movs	r3, #255	; 0xff
   16464:	7013      	strb	r3, [r2, #0]
   16466:	4e17      	ldr	r6, [pc, #92]	; (164c4 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16468:	f000 0701 	and.w	r7, r0, #1
   1646c:	f106 0902 	add.w	r9, r6, #2
{
   16470:	2400      	movs	r4, #0
   16472:	e004      	b.n	1647e <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16474:	42ba      	cmp	r2, r7
   16476:	d014      	beq.n	164a2 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   16478:	3401      	adds	r4, #1
   1647a:	2c08      	cmp	r4, #8
   1647c:	d00e      	beq.n	1649c <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1647e:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16482:	07d9      	lsls	r1, r3, #31
   16484:	f3c3 0240 	ubfx	r2, r3, #1, #1
   16488:	d4f4      	bmi.n	16474 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1648a:	2d00      	cmp	r5, #0
   1648c:	d0f4      	beq.n	16478 <wl_find+0x20>
   1648e:	782b      	ldrb	r3, [r5, #0]
   16490:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   16492:	bf08      	it	eq
   16494:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   16496:	3401      	adds	r4, #1
   16498:	2c08      	cmp	r4, #8
   1649a:	d1f0      	bne.n	1647e <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   1649c:	20ff      	movs	r0, #255	; 0xff
}
   1649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   164a2:	2206      	movs	r2, #6
   164a4:	4641      	mov	r1, r8
   164a6:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   164aa:	f008 f80d 	bl	1e4c8 <memcmp>
   164ae:	b130      	cbz	r0, 164be <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   164b0:	2d00      	cmp	r5, #0
   164b2:	d0e1      	beq.n	16478 <wl_find+0x20>
   164b4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   164b8:	07db      	lsls	r3, r3, #31
   164ba:	d4dd      	bmi.n	16478 <wl_find+0x20>
   164bc:	e7e7      	b.n	1648e <wl_find+0x36>
			return i;
   164be:	b2e0      	uxtb	r0, r4
   164c0:	e7ed      	b.n	1649e <wl_find+0x46>
   164c2:	bf00      	nop
   164c4:	20001784 	.word	0x20001784

000164c8 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   164c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164cc:	4f21      	ldr	r7, [pc, #132]	; (16554 <wl_update+0x8c>)
   164ce:	4d22      	ldr	r5, [pc, #136]	; (16558 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   164d0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1655c <wl_update+0x94>
   164d4:	f8df a088 	ldr.w	sl, [pc, #136]	; 16560 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   164d8:	f1a7 0802 	sub.w	r8, r7, #2
   164dc:	f1a5 0b02 	sub.w	fp, r5, #2
{
   164e0:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   164e2:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   164e6:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   164e8:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   164ec:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   164ee:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   164f2:	4629      	mov	r1, r5
   164f4:	f107 0706 	add.w	r7, r7, #6
   164f8:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   164fc:	d022      	beq.n	16544 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   164fe:	f899 3000 	ldrb.w	r3, [r9]
   16502:	b163      	cbz	r3, 1651e <wl_update+0x56>
		j = wl[i].rl_idx;
   16504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16508:	2b07      	cmp	r3, #7
   1650a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1650e:	d806      	bhi.n	1651e <wl_update+0x56>
   16510:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   16514:	f013 0f04 	tst.w	r3, #4
   16518:	d001      	beq.n	1651e <wl_update+0x56>
   1651a:	06db      	lsls	r3, r3, #27
   1651c:	d512      	bpl.n	16544 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1651e:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16522:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   16526:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1652a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1652e:	40a3      	lsls	r3, r4
   16530:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   16534:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16538:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1653c:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16540:	f007 ffd2 	bl	1e4e8 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   16544:	3401      	adds	r4, #1
   16546:	2c08      	cmp	r4, #8
   16548:	f105 0508 	add.w	r5, r5, #8
   1654c:	d1c9      	bne.n	164e2 <wl_update+0x1a>
}
   1654e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16552:	bf00      	nop
   16554:	200017c6 	.word	0x200017c6
   16558:	20001786 	.word	0x20001786
   1655c:	20002286 	.word	0x20002286
   16560:	200015ec 	.word	0x200015ec

00016564 <rl_update>:
{
   16564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16568:	f8df 8060 	ldr.w	r8, [pc, #96]	; 165cc <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   1656c:	4d16      	ldr	r5, [pc, #88]	; (165c8 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1656e:	f108 0701 	add.w	r7, r8, #1
   16572:	1cae      	adds	r6, r5, #2
{
   16574:	2400      	movs	r4, #0
   16576:	e002      	b.n	1657e <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16578:	3401      	adds	r4, #1
   1657a:	2c08      	cmp	r4, #8
   1657c:	d021      	beq.n	165c2 <rl_update+0x5e>
		if (rl[i].taken) {
   1657e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16582:	00d9      	lsls	r1, r3, #3
   16584:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   16588:	07da      	lsls	r2, r3, #31
   1658a:	d5f5      	bpl.n	16578 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1658c:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   1658e:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   16592:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   16596:	f04f 0e01 	mov.w	lr, #1
   1659a:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1659e:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   165a0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   165a4:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   165a6:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   165aa:	4439      	add	r1, r7
   165ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   165b0:	2206      	movs	r2, #6
   165b2:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   165b4:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   165b6:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   165ba:	f007 ff95 	bl	1e4e8 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   165be:	2c08      	cmp	r4, #8
   165c0:	d1dd      	bne.n	1657e <rl_update+0x1a>
}
   165c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165c6:	bf00      	nop
   165c8:	2000172c 	.word	0x2000172c
   165cc:	200015ec 	.word	0x200015ec

000165d0 <ll_wl_size_get>:
}
   165d0:	2008      	movs	r0, #8
   165d2:	4770      	bx	lr

000165d4 <ll_wl_clear>:
{
   165d4:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   165d6:	2000      	movs	r0, #0
   165d8:	f7fc fd42 	bl	13060 <ull_adv_filter_pol_get>
   165dc:	b9d8      	cbnz	r0, 16616 <ll_wl_clear+0x42>
   165de:	4a0f      	ldr	r2, [pc, #60]	; (1661c <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   165e0:	4c0f      	ldr	r4, [pc, #60]	; (16620 <ll_wl_clear+0x4c>)
		u8_t j = wl[i].rl_idx;
   165e2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   165e6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   165e8:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   165ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   165ee:	d805      	bhi.n	165fc <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   165f0:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   165f4:	f36f 1345 	bfc	r3, #5, #1
   165f8:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   165fc:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   16600:	f36f 0300 	bfc	r3, #0, #1
   16604:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16608:	3001      	adds	r0, #1
   1660a:	2808      	cmp	r0, #8
   1660c:	d1e9      	bne.n	165e2 <ll_wl_clear+0xe>
	wl_anon = 0U;
   1660e:	4b05      	ldr	r3, [pc, #20]	; (16624 <ll_wl_clear+0x50>)
   16610:	2000      	movs	r0, #0
   16612:	7018      	strb	r0, [r3, #0]
}
   16614:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16616:	200c      	movs	r0, #12
}
   16618:	bd10      	pop	{r4, pc}
   1661a:	bf00      	nop
   1661c:	20001784 	.word	0x20001784
   16620:	200015ec 	.word	0x200015ec
   16624:	20002287 	.word	0x20002287

00016628 <ll_wl_remove>:
{
   16628:	b538      	push	{r3, r4, r5, lr}
   1662a:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   1662c:	2000      	movs	r0, #0
   1662e:	f7fc fd17 	bl	13060 <ull_adv_filter_pol_get>
   16632:	bb30      	cbnz	r0, 16682 <ll_wl_remove+0x5a>
   16634:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   16636:	7828      	ldrb	r0, [r5, #0]
   16638:	28ff      	cmp	r0, #255	; 0xff
   1663a:	d01e      	beq.n	1667a <ll_wl_remove+0x52>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1663c:	1c69      	adds	r1, r5, #1
   1663e:	4622      	mov	r2, r4
   16640:	f7ff ff0a 	bl	16458 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16644:	2807      	cmp	r0, #7
   16646:	d901      	bls.n	1664c <ll_wl_remove+0x24>
   16648:	2002      	movs	r0, #2
}
   1664a:	bd38      	pop	{r3, r4, r5, pc}
		u8_t j = wl[i].rl_idx;
   1664c:	4a0e      	ldr	r2, [pc, #56]	; (16688 <ll_wl_remove+0x60>)
   1664e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   16652:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16654:	2b07      	cmp	r3, #7
   16656:	d808      	bhi.n	1666a <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   16658:	490c      	ldr	r1, [pc, #48]	; (1668c <ll_wl_remove+0x64>)
   1665a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1665e:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   16662:	f364 1545 	bfi	r5, r4, #5, #1
   16666:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   1666a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1666e:	f36f 0300 	bfc	r3, #0, #1
   16672:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   16676:	2000      	movs	r0, #0
}
   16678:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   1667a:	4b05      	ldr	r3, [pc, #20]	; (16690 <ll_wl_remove+0x68>)
   1667c:	701c      	strb	r4, [r3, #0]
		return 0;
   1667e:	4620      	mov	r0, r4
}
   16680:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16682:	200c      	movs	r0, #12
}
   16684:	bd38      	pop	{r3, r4, r5, pc}
   16686:	bf00      	nop
   16688:	20001784 	.word	0x20001784
   1668c:	200015ec 	.word	0x200015ec
   16690:	20002287 	.word	0x20002287

00016694 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16694:	2807      	cmp	r0, #7
{
   16696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1669a:	4604      	mov	r4, r0
   1669c:	460d      	mov	r5, r1
   1669e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   166a0:	d817      	bhi.n	166d2 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   166a2:	4e19      	ldr	r6, [pc, #100]	; (16708 <ll_rl_id_addr_get+0x74>)
   166a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   166a8:	00a7      	lsls	r7, r4, #2
   166aa:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   166ae:	07db      	lsls	r3, r3, #31
   166b0:	d51c      	bpl.n	166ec <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   166b2:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   166b4:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   166b6:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   166ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   166be:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   166c2:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   166c4:	4640      	mov	r0, r8
   166c6:	3101      	adds	r1, #1
}
   166c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   166cc:	2206      	movs	r2, #6
   166ce:	f007 bf0b 	b.w	1e4e8 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   166d2:	4a0e      	ldr	r2, [pc, #56]	; (1670c <ll_rl_id_addr_get+0x78>)
   166d4:	490e      	ldr	r1, [pc, #56]	; (16710 <ll_rl_id_addr_get+0x7c>)
   166d6:	480f      	ldr	r0, [pc, #60]	; (16714 <ll_rl_id_addr_get+0x80>)
   166d8:	23e7      	movs	r3, #231	; 0xe7
   166da:	f005 fe97 	bl	1c40c <printk>
   166de:	4040      	eors	r0, r0
   166e0:	f380 8811 	msr	BASEPRI, r0
   166e4:	f04f 0003 	mov.w	r0, #3
   166e8:	df02      	svc	2
   166ea:	e7da      	b.n	166a2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   166ec:	4a07      	ldr	r2, [pc, #28]	; (1670c <ll_rl_id_addr_get+0x78>)
   166ee:	490a      	ldr	r1, [pc, #40]	; (16718 <ll_rl_id_addr_get+0x84>)
   166f0:	4808      	ldr	r0, [pc, #32]	; (16714 <ll_rl_id_addr_get+0x80>)
   166f2:	23e8      	movs	r3, #232	; 0xe8
   166f4:	f005 fe8a 	bl	1c40c <printk>
   166f8:	4040      	eors	r0, r0
   166fa:	f380 8811 	msr	BASEPRI, r0
   166fe:	f04f 0003 	mov.w	r0, #3
   16702:	df02      	svc	2
   16704:	e7d5      	b.n	166b2 <ll_rl_id_addr_get+0x1e>
   16706:	bf00      	nop
   16708:	200015ec 	.word	0x200015ec
   1670c:	0002247c 	.word	0x0002247c
   16710:	000224c0 	.word	0x000224c0
   16714:	00021ce0 	.word	0x00021ce0
   16718:	000224cc 	.word	0x000224cc

0001671c <ll_rl_size_get>:
   1671c:	2008      	movs	r0, #8
   1671e:	4770      	bx	lr

00016720 <ll_rl_clear>:
{
   16720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16722:	2000      	movs	r0, #0
   16724:	f7fc fc90 	bl	13048 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16728:	bb98      	cbnz	r0, 16792 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   1672a:	4b1b      	ldr	r3, [pc, #108]	; (16798 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   1672c:	491b      	ldr	r1, [pc, #108]	; (1679c <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   1672e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16732:	f893 c000 	ldrb.w	ip, [r3]
   16736:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   1673a:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   1673e:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   16742:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   16746:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   16748:	f360 0200 	bfi	r2, r0, #0, #1
   1674c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   16750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   16754:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   16758:	f360 0c00 	bfi	ip, r0, #0, #1
   1675c:	f360 0700 	bfi	r7, r0, #0, #1
   16760:	f360 0600 	bfi	r6, r0, #0, #1
   16764:	f360 0500 	bfi	r5, r0, #0, #1
   16768:	f360 0400 	bfi	r4, r0, #0, #1
   1676c:	f360 0100 	bfi	r1, r0, #0, #1
   16770:	f360 0200 	bfi	r2, r0, #0, #1
   16774:	f883 c000 	strb.w	ip, [r3]
   16778:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   1677c:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   16780:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   16784:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   16788:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1678c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   16790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16792:	200c      	movs	r0, #12
}
   16794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16796:	bf00      	nop
   16798:	200015ec 	.word	0x200015ec
   1679c:	20002285 	.word	0x20002285

000167a0 <ll_rl_enable>:
{
   167a0:	b510      	push	{r4, lr}
   167a2:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   167a4:	2000      	movs	r0, #0
   167a6:	f7fc fc4f 	bl	13048 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   167aa:	b958      	cbnz	r0, 167c4 <ll_rl_enable+0x24>
	switch (enable) {
   167ac:	b134      	cbz	r4, 167bc <ll_rl_enable+0x1c>
   167ae:	2c01      	cmp	r4, #1
   167b0:	d001      	beq.n	167b6 <ll_rl_enable+0x16>
   167b2:	2012      	movs	r0, #18
}
   167b4:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   167b6:	4b04      	ldr	r3, [pc, #16]	; (167c8 <ll_rl_enable+0x28>)
   167b8:	701c      	strb	r4, [r3, #0]
}
   167ba:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   167bc:	4b02      	ldr	r3, [pc, #8]	; (167c8 <ll_rl_enable+0x28>)
   167be:	701c      	strb	r4, [r3, #0]
	return 0;
   167c0:	4620      	mov	r0, r4
}
   167c2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   167c4:	200c      	movs	r0, #12
}
   167c6:	bd10      	pop	{r4, pc}
   167c8:	20002286 	.word	0x20002286

000167cc <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   167cc:	4a03      	ldr	r2, [pc, #12]	; (167dc <ll_rl_timeout_set+0x10>)
   167ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   167d2:	fb03 f300 	mul.w	r3, r3, r0
   167d6:	6013      	str	r3, [r2, #0]
}
   167d8:	4770      	bx	lr
   167da:	bf00      	nop
   167dc:	20001760 	.word	0x20001760

000167e0 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   167e0:	b128      	cbz	r0, 167ee <ull_filter_adv_scan_state_cb+0xe>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   167e2:	4b04      	ldr	r3, [pc, #16]	; (167f4 <ull_filter_adv_scan_state_cb+0x14>)
   167e4:	4904      	ldr	r1, [pc, #16]	; (167f8 <ull_filter_adv_scan_state_cb+0x18>)
   167e6:	681a      	ldr	r2, [r3, #0]
   167e8:	4804      	ldr	r0, [pc, #16]	; (167fc <ull_filter_adv_scan_state_cb+0x1c>)
   167ea:	f005 b927 	b.w	1ba3c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   167ee:	4802      	ldr	r0, [pc, #8]	; (167f8 <ull_filter_adv_scan_state_cb+0x18>)
   167f0:	f00a b94c 	b.w	20a8c <k_delayed_work_cancel>
   167f4:	20001760 	.word	0x20001760
   167f8:	20001764 	.word	0x20001764
   167fc:	20001c48 	.word	0x20001c48

00016800 <ull_filter_adv_update>:
{
   16800:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   16802:	4b09      	ldr	r3, [pc, #36]	; (16828 <ull_filter_adv_update+0x28>)
   16804:	2200      	movs	r2, #0
   16806:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   16808:	b930      	cbnz	r0, 16818 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1680a:	4b08      	ldr	r3, [pc, #32]	; (1682c <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   1680c:	4a08      	ldr	r2, [pc, #32]	; (16830 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1680e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   16810:	2100      	movs	r1, #0
   16812:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   16814:	b91b      	cbnz	r3, 1681e <ull_filter_adv_update+0x1e>
}
   16816:	bd08      	pop	{r3, pc}
		wl_update();
   16818:	f7ff fe56 	bl	164c8 <wl_update>
   1681c:	e7f5      	b.n	1680a <ull_filter_adv_update+0xa>
}
   1681e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   16822:	f7ff be9f 	b.w	16564 <rl_update>
   16826:	bf00      	nop
   16828:	200017c4 	.word	0x200017c4
   1682c:	20002286 	.word	0x20002286
   16830:	2000172c 	.word	0x2000172c

00016834 <ull_filter_adv_pdu_update>:
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16834:	2907      	cmp	r1, #7
{
   16836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1683a:	4614      	mov	r4, r2
   1683c:	4606      	mov	r6, r0
   1683e:	f102 0702 	add.w	r7, r2, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16842:	d848      	bhi.n	168d6 <ull_filter_adv_pdu_update+0xa2>
   16844:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   16848:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 16944 <ull_filter_adv_pdu_update+0x110>
   1684c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   16850:	460d      	mov	r5, r1
   16852:	ea4f 0981 	mov.w	r9, r1, lsl #2
   16856:	0719      	lsls	r1, r3, #28
   16858:	d529      	bpl.n	168ae <ull_filter_adv_pdu_update+0x7a>
		LL_ASSERT(rl[idx].rpas_ready);
   1685a:	079a      	lsls	r2, r3, #30
   1685c:	d55d      	bpl.n	1691a <ull_filter_adv_pdu_update+0xe6>
		pdu->tx_addr = 1;
   1685e:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16860:	eb09 0305 	add.w	r3, r9, r5
   16864:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
   16868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1686c:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   1686e:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16870:	4638      	mov	r0, r7
   16872:	2206      	movs	r2, #6
   16874:	f007 fe38 	bl	1e4e8 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16878:	7823      	ldrb	r3, [r4, #0]
   1687a:	f003 030f 	and.w	r3, r3, #15
   1687e:	2b01      	cmp	r3, #1
   16880:	d127      	bne.n	168d2 <ull_filter_adv_pdu_update+0x9e>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16882:	44a9      	add	r9, r5
   16884:	f104 0008 	add.w	r0, r4, #8
   16888:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1688c:	075b      	lsls	r3, r3, #29
   1688e:	d437      	bmi.n	16900 <ull_filter_adv_pdu_update+0xcc>
			pdu->rx_addr = adv->id_addr_type;
   16890:	f896 30da 	ldrb.w	r3, [r6, #218]	; 0xda
   16894:	7822      	ldrb	r2, [r4, #0]
   16896:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1689a:	f363 12c7 	bfi	r2, r3, #7, #1
   1689e:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   168a0:	f106 01db 	add.w	r1, r6, #219	; 0xdb
   168a4:	2206      	movs	r2, #6
}
   168a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   168aa:	f007 be1d 	b.w	1e4e8 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   168ae:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   168b2:	7813      	ldrb	r3, [r2, #0]
   168b4:	f000 0003 	and.w	r0, r0, #3
   168b8:	f360 1386 	bfi	r3, r0, #6, #1
   168bc:	7013      	strb	r3, [r2, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   168be:	4639      	mov	r1, r7
   168c0:	f000 0001 	and.w	r0, r0, #1
   168c4:	f7f9 f9ca 	bl	fc5c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   168c8:	7823      	ldrb	r3, [r4, #0]
   168ca:	f003 030f 	and.w	r3, r3, #15
   168ce:	2b01      	cmp	r3, #1
   168d0:	d0d7      	beq.n	16882 <ull_filter_adv_pdu_update+0x4e>
}
   168d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   168d6:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   168da:	7813      	ldrb	r3, [r2, #0]
   168dc:	f000 0003 	and.w	r0, r0, #3
   168e0:	f360 1386 	bfi	r3, r0, #6, #1
   168e4:	7013      	strb	r3, [r2, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
   168e6:	4639      	mov	r1, r7
   168e8:	f000 0001 	and.w	r0, r0, #1
   168ec:	f7f9 f9b6 	bl	fc5c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   168f0:	7823      	ldrb	r3, [r4, #0]
   168f2:	f003 030f 	and.w	r3, r3, #15
   168f6:	2b01      	cmp	r3, #1
   168f8:	d1eb      	bne.n	168d2 <ull_filter_adv_pdu_update+0x9e>
   168fa:	f104 0008 	add.w	r0, r4, #8
   168fe:	e7c7      	b.n	16890 <ull_filter_adv_pdu_update+0x5c>
			pdu->rx_addr = 1;
   16900:	7823      	ldrb	r3, [r4, #0]
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16902:	2128      	movs	r1, #40	; 0x28
			pdu->rx_addr = 1;
   16904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16908:	fb01 8105 	mla	r1, r1, r5, r8
			pdu->rx_addr = 1;
   1690c:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1690e:	311e      	adds	r1, #30
}
   16910:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16914:	2206      	movs	r2, #6
   16916:	f007 bde7 	b.w	1e4e8 <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
   1691a:	4a07      	ldr	r2, [pc, #28]	; (16938 <ull_filter_adv_pdu_update+0x104>)
   1691c:	4907      	ldr	r1, [pc, #28]	; (1693c <ull_filter_adv_pdu_update+0x108>)
   1691e:	4808      	ldr	r0, [pc, #32]	; (16940 <ull_filter_adv_pdu_update+0x10c>)
   16920:	f240 234a 	movw	r3, #586	; 0x24a
   16924:	f005 fd72 	bl	1c40c <printk>
   16928:	4040      	eors	r0, r0
   1692a:	f380 8811 	msr	BASEPRI, r0
   1692e:	f04f 0003 	mov.w	r0, #3
   16932:	df02      	svc	2
   16934:	e793      	b.n	1685e <ull_filter_adv_pdu_update+0x2a>
   16936:	bf00      	nop
   16938:	0002247c 	.word	0x0002247c
   1693c:	000224e0 	.word	0x000224e0
   16940:	00021ce0 	.word	0x00021ce0
   16944:	200015ec 	.word	0x200015ec

00016948 <ull_filter_rl_find>:
{
   16948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1694c:	468b      	mov	fp, r1
	if (free) {
   1694e:	4616      	mov	r6, r2
   16950:	b10a      	cbz	r2, 16956 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   16952:	23ff      	movs	r3, #255	; 0xff
   16954:	7013      	strb	r3, [r2, #0]
   16956:	f8df 8064 	ldr.w	r8, [pc, #100]	; 169bc <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1695a:	f000 0901 	and.w	r9, r0, #1
   1695e:	f108 0a01 	add.w	sl, r8, #1
{
   16962:	2400      	movs	r4, #0
   16964:	e004      	b.n	16970 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16966:	454a      	cmp	r2, r9
   16968:	d019      	beq.n	1699e <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1696a:	3401      	adds	r4, #1
   1696c:	2c08      	cmp	r4, #8
   1696e:	d012      	beq.n	16996 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16970:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   16974:	00e8      	lsls	r0, r5, #3
   16976:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1697a:	07d9      	lsls	r1, r3, #31
   1697c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16980:	b2e7      	uxtb	r7, r4
   16982:	d4f0      	bmi.n	16966 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16984:	2e00      	cmp	r6, #0
   16986:	d0f0      	beq.n	1696a <ull_filter_rl_find+0x22>
   16988:	7833      	ldrb	r3, [r6, #0]
   1698a:	3401      	adds	r4, #1
   1698c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1698e:	bf08      	it	eq
   16990:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16992:	2c08      	cmp	r4, #8
   16994:	d1ec      	bne.n	16970 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   16996:	27ff      	movs	r7, #255	; 0xff
}
   16998:	4638      	mov	r0, r7
   1699a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1699e:	4450      	add	r0, sl
   169a0:	2206      	movs	r2, #6
   169a2:	4659      	mov	r1, fp
   169a4:	f007 fd90 	bl	1e4c8 <memcmp>
   169a8:	2800      	cmp	r0, #0
   169aa:	d0f5      	beq.n	16998 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   169ac:	2e00      	cmp	r6, #0
   169ae:	d0dc      	beq.n	1696a <ull_filter_rl_find+0x22>
   169b0:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   169b4:	07db      	lsls	r3, r3, #31
   169b6:	d4d8      	bmi.n	1696a <ull_filter_rl_find+0x22>
   169b8:	e7e6      	b.n	16988 <ull_filter_rl_find+0x40>
   169ba:	bf00      	nop
   169bc:	200015ec 	.word	0x200015ec

000169c0 <ll_wl_add>:
{
   169c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169c4:	4605      	mov	r5, r0
   169c6:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   169c8:	2000      	movs	r0, #0
   169ca:	f7fc fb49 	bl	13060 <ull_adv_filter_pol_get>
   169ce:	2800      	cmp	r0, #0
   169d0:	d13b      	bne.n	16a4a <ll_wl_add+0x8a>
   169d2:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   169d4:	7828      	ldrb	r0, [r5, #0]
   169d6:	28ff      	cmp	r0, #255	; 0xff
   169d8:	d030      	beq.n	16a3c <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   169da:	f105 0801 	add.w	r8, r5, #1
   169de:	4641      	mov	r1, r8
   169e0:	f10d 0207 	add.w	r2, sp, #7
   169e4:	f7ff fd38 	bl	16458 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   169e8:	2807      	cmp	r0, #7
   169ea:	d923      	bls.n	16a34 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   169ec:	f89d 6007 	ldrb.w	r6, [sp, #7]
   169f0:	2e07      	cmp	r6, #7
   169f2:	d83b      	bhi.n	16a6c <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   169f4:	4f1f      	ldr	r7, [pc, #124]	; (16a74 <ll_wl_add+0xb4>)
   169f6:	782a      	ldrb	r2, [r5, #0]
   169f8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   169fc:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   16a00:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   16a04:	4641      	mov	r1, r8
   16a06:	2206      	movs	r2, #6
   16a08:	3002      	adds	r0, #2
   16a0a:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   16a0e:	f007 fd6b 	bl	1e4e8 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16a12:	7828      	ldrb	r0, [r5, #0]
   16a14:	4622      	mov	r2, r4
   16a16:	4641      	mov	r1, r8
   16a18:	f7ff ff96 	bl	16948 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   16a1c:	2807      	cmp	r0, #7
   16a1e:	d918      	bls.n	16a52 <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   16a20:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   16a24:	22ff      	movs	r2, #255	; 0xff
   16a26:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   16a28:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   16a2c:	f043 0301 	orr.w	r3, r3, #1
   16a30:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   16a34:	2000      	movs	r0, #0
}
   16a36:	b002      	add	sp, #8
   16a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   16a3c:	4b0e      	ldr	r3, [pc, #56]	; (16a78 <ll_wl_add+0xb8>)
   16a3e:	2201      	movs	r2, #1
		return 0;
   16a40:	4620      	mov	r0, r4
		wl_anon = 1U;
   16a42:	701a      	strb	r2, [r3, #0]
}
   16a44:	b002      	add	sp, #8
   16a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16a4a:	200c      	movs	r0, #12
}
   16a4c:	b002      	add	sp, #8
   16a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   16a52:	490a      	ldr	r1, [pc, #40]	; (16a7c <ll_wl_add+0xbc>)
   16a54:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   16a58:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   16a5c:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   16a60:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   16a62:	f043 0320 	orr.w	r3, r3, #32
   16a66:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   16a6a:	e7dd      	b.n	16a28 <ll_wl_add+0x68>
   16a6c:	2007      	movs	r0, #7
}
   16a6e:	b002      	add	sp, #8
   16a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a74:	20001784 	.word	0x20001784
   16a78:	20002287 	.word	0x20002287
   16a7c:	200015ec 	.word	0x200015ec

00016a80 <ll_rl_add>:
{
   16a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a84:	4606      	mov	r6, r0
   16a86:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16a88:	2000      	movs	r0, #0
{
   16a8a:	460d      	mov	r5, r1
   16a8c:	4690      	mov	r8, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16a8e:	f7fc fadb 	bl	13048 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16a92:	2800      	cmp	r0, #0
   16a94:	f040 8085 	bne.w	16ba2 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   16a98:	46b1      	mov	r9, r6
   16a9a:	f10d 020f 	add.w	r2, sp, #15
   16a9e:	f819 0b01 	ldrb.w	r0, [r9], #1
   16aa2:	4649      	mov	r1, r9
   16aa4:	f7ff ff50 	bl	16948 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16aa8:	2807      	cmp	r0, #7
   16aaa:	f240 808b 	bls.w	16bc4 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   16aae:	f89d 700f 	ldrb.w	r7, [sp, #15]
   16ab2:	2f07      	cmp	r7, #7
   16ab4:	d879      	bhi.n	16baa <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16ab6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   16aba:	4c4c      	ldr	r4, [pc, #304]	; (16bec <ll_rl_add+0x16c>)
   16abc:	00db      	lsls	r3, r3, #3
   16abe:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   16ac0:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   16ac4:	2206      	movs	r2, #6
   16ac6:	4649      	mov	r1, r9
   16ac8:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16aca:	9301      	str	r3, [sp, #4]
   16acc:	f007 fd0c 	bl	1e4e8 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   16ad0:	7831      	ldrb	r1, [r6, #0]
   16ad2:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   16ad6:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   16ada:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16ade:	4628      	mov	r0, r5
   16ae0:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   16ae2:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16ae6:	f7f7 ffe9 	bl	eabc <mem_nz>
   16aea:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16aee:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16af0:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16af4:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
   16af6:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16afa:	f7f7 ffdf 	bl	eabc <mem_nz>
   16afe:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   16b02:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16b04:	f000 0001 	and.w	r0, r0, #1
   16b08:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   16b0c:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
   16b10:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   16b14:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   16b18:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   16b1c:	d01a      	beq.n	16b54 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   16b1e:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 16bf8 <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   16b22:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 16bfc <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   16b26:	f89e 1000 	ldrb.w	r1, [lr]
   16b2a:	4a31      	ldr	r2, [pc, #196]	; (16bf0 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   16b2c:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   16b30:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   16b34:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   16b38:	3101      	adds	r1, #1
	psrc += length - 1;
   16b3a:	f105 020f 	add.w	r2, r5, #15
   16b3e:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   16b42:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   16b46:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   16b48:	f812 1901 	ldrb.w	r1, [r2], #-1
   16b4c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   16b50:	42aa      	cmp	r2, r5
   16b52:	d1f9      	bne.n	16b48 <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   16b54:	2800      	cmp	r0, #0
   16b56:	d139      	bne.n	16bcc <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   16b58:	f103 0018 	add.w	r0, r3, #24
   16b5c:	2206      	movs	r2, #6
   16b5e:	2100      	movs	r1, #0
   16b60:	4420      	add	r0, r4
   16b62:	f007 fcec 	bl	1e53e <memset>
	rl[i].dev = 0U;
   16b66:	eb0b 0307 	add.w	r3, fp, r7
   16b6a:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   16b6c:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   16b70:	f023 0312 	bic.w	r3, r3, #18
   16b74:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16b76:	4649      	mov	r1, r9
   16b78:	7830      	ldrb	r0, [r6, #0]
   16b7a:	2200      	movs	r2, #0
   16b7c:	f7ff fc6c 	bl	16458 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   16b80:	2807      	cmp	r0, #7
   16b82:	d916      	bls.n	16bb2 <ll_rl_add+0x132>
		rl[i].wl = 0U;
   16b84:	5d63      	ldrb	r3, [r4, r5]
   16b86:	f36f 1345 	bfc	r3, #5, #1
   16b8a:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   16b8c:	445f      	add	r7, fp
	return 0;
   16b8e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   16b90:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   16b94:	f043 0301 	orr.w	r3, r3, #1
   16b98:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   16b9c:	b005      	add	sp, #20
   16b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16ba2:	200c      	movs	r0, #12
}
   16ba4:	b005      	add	sp, #20
   16ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   16baa:	2007      	movs	r0, #7
}
   16bac:	b005      	add	sp, #20
   16bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   16bb2:	4a10      	ldr	r2, [pc, #64]	; (16bf4 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   16bb4:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   16bb6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   16bba:	f043 0320 	orr.w	r3, r3, #32
   16bbe:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   16bc0:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   16bc2:	e7e3      	b.n	16b8c <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   16bc4:	2012      	movs	r0, #18
}
   16bc6:	b005      	add	sp, #20
   16bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   16bcc:	1dd8      	adds	r0, r3, #7
   16bce:	4641      	mov	r1, r8
   16bd0:	2210      	movs	r2, #16
   16bd2:	4420      	add	r0, r4
   16bd4:	9301      	str	r3, [sp, #4]
   16bd6:	f007 fc87 	bl	1e4e8 <memcpy>
		rl[i].local_rpa = NULL;
   16bda:	eb0b 0207 	add.w	r2, fp, r7
   16bde:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16be2:	2100      	movs	r1, #0
   16be4:	9b01      	ldr	r3, [sp, #4]
   16be6:	6251      	str	r1, [r2, #36]	; 0x24
   16be8:	e7b6      	b.n	16b58 <ll_rl_add+0xd8>
   16bea:	bf00      	nop
   16bec:	200015ec 	.word	0x200015ec
   16bf0:	2000156c 	.word	0x2000156c
   16bf4:	20001784 	.word	0x20001784
   16bf8:	20002285 	.word	0x20002285
   16bfc:	20001564 	.word	0x20001564

00016c00 <ll_rl_remove>:
{
   16c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c04:	4606      	mov	r6, r0
   16c06:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16c08:	2000      	movs	r0, #0
   16c0a:	f7fc fa1d 	bl	13048 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16c0e:	2800      	cmp	r0, #0
   16c10:	d13e      	bne.n	16c90 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16c12:	4637      	mov	r7, r6
   16c14:	4602      	mov	r2, r0
   16c16:	4604      	mov	r4, r0
   16c18:	f817 0b01 	ldrb.w	r0, [r7], #1
   16c1c:	4639      	mov	r1, r7
   16c1e:	f7ff fe93 	bl	16948 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16c22:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16c24:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   16c26:	d903      	bls.n	16c30 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16c28:	2002      	movs	r0, #2
}
   16c2a:	b003      	add	sp, #12
   16c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   16c30:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16cf8 <ll_rl_remove+0xf8>
   16c34:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16c38:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   16c3c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   16c40:	075b      	lsls	r3, r3, #29
   16c42:	ea4f 0980 	mov.w	r9, r0, lsl #2
   16c46:	d50c      	bpl.n	16c62 <ll_rl_remove+0x62>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16c48:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 16cfc <ll_rl_remove+0xfc>
   16c4c:	f89a 2000 	ldrb.w	r2, [sl]
   16c50:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   16c52:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   16c56:	d01f      	beq.n	16c98 <ll_rl_remove+0x98>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16c58:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   16c5a:	455b      	cmp	r3, fp
   16c5c:	d11e      	bne.n	16c9c <ll_rl_remove+0x9c>
			peer_irk_count--;
   16c5e:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16c62:	7830      	ldrb	r0, [r6, #0]
   16c64:	4639      	mov	r1, r7
   16c66:	2200      	movs	r2, #0
   16c68:	f7ff fbf6 	bl	16458 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   16c6c:	2807      	cmp	r0, #7
   16c6e:	d804      	bhi.n	16c7a <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   16c70:	4b1e      	ldr	r3, [pc, #120]	; (16cec <ll_rl_remove+0xec>)
   16c72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16c76:	23ff      	movs	r3, #255	; 0xff
   16c78:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   16c7a:	444d      	add	r5, r9
		return 0;
   16c7c:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   16c7e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   16c82:	f36f 0300 	bfc	r3, #0, #1
   16c86:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
}
   16c8a:	b003      	add	sp, #12
   16c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16c90:	200c      	movs	r0, #12
}
   16c92:	b003      	add	sp, #12
   16c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c98:	465a      	mov	r2, fp
   16c9a:	e7e0      	b.n	16c5e <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   16c9c:	4814      	ldr	r0, [pc, #80]	; (16cf0 <ll_rl_remove+0xf0>)
   16c9e:	9301      	str	r3, [sp, #4]
   16ca0:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   16ca4:	2210      	movs	r2, #16
   16ca6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   16caa:	f007 fc1d 	bl	1e4e8 <memcpy>
   16cae:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   16cb0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   16cb4:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   16cb8:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   16cbc:	f012 0f01 	tst.w	r2, #1
   16cc0:	b2e0      	uxtb	r0, r4
   16cc2:	f104 0401 	add.w	r4, r4, #1
   16cc6:	d004      	beq.n	16cd2 <ll_rl_remove+0xd2>
   16cc8:	0752      	lsls	r2, r2, #29
   16cca:	d502      	bpl.n	16cd2 <ll_rl_remove+0xd2>
   16ccc:	7dca      	ldrb	r2, [r1, #23]
   16cce:	455a      	cmp	r2, fp
   16cd0:	d005      	beq.n	16cde <ll_rl_remove+0xde>
				for (k = 0U;
   16cd2:	2c08      	cmp	r4, #8
   16cd4:	d1ec      	bne.n	16cb0 <ll_rl_remove+0xb0>
   16cd6:	f89a 2000 	ldrb.w	r2, [sl]
   16cda:	3a01      	subs	r2, #1
   16cdc:	e7bf      	b.n	16c5e <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   16cde:	4c05      	ldr	r4, [pc, #20]	; (16cf4 <ll_rl_remove+0xf4>)
   16ce0:	f89a 2000 	ldrb.w	r2, [sl]
   16ce4:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   16ce6:	75cb      	strb	r3, [r1, #23]
						break;
   16ce8:	3a01      	subs	r2, #1
   16cea:	e7b8      	b.n	16c5e <ll_rl_remove+0x5e>
   16cec:	20001784 	.word	0x20001784
   16cf0:	2000156c 	.word	0x2000156c
   16cf4:	20001564 	.word	0x20001564
   16cf8:	200015ec 	.word	0x200015ec
   16cfc:	20002285 	.word	0x20002285

00016d00 <ll_rl_crpa_set>:
{
   16d00:	b538      	push	{r3, r4, r5, lr}
   16d02:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   16d04:	795b      	ldrb	r3, [r3, #5]
   16d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16d0a:	2b40      	cmp	r3, #64	; 0x40
   16d0c:	d000      	beq.n	16d10 <ll_rl_crpa_set+0x10>
}
   16d0e:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   16d10:	b119      	cbz	r1, 16d1a <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   16d12:	2200      	movs	r2, #0
   16d14:	f7ff fe18 	bl	16948 <ull_filter_rl_find>
   16d18:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   16d1a:	2a07      	cmp	r2, #7
   16d1c:	d8f7      	bhi.n	16d0e <ll_rl_crpa_set+0xe>
   16d1e:	4b09      	ldr	r3, [pc, #36]	; (16d44 <ll_rl_crpa_set+0x44>)
   16d20:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   16d24:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   16d28:	07c9      	lsls	r1, r1, #31
   16d2a:	d5f0      	bpl.n	16d0e <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16d2c:	2118      	movs	r1, #24
   16d2e:	2028      	movs	r0, #40	; 0x28
   16d30:	fb10 1002 	smlabb	r0, r0, r2, r1
   16d34:	4418      	add	r0, r3
   16d36:	4621      	mov	r1, r4
   16d38:	2206      	movs	r2, #6
}
   16d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16d3e:	f007 bbd3 	b.w	1e4e8 <memcpy>
   16d42:	bf00      	nop
   16d44:	200015ec 	.word	0x200015ec

00016d48 <ll_rl_crpa_get>:
{
   16d48:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16d4a:	4603      	mov	r3, r0
{
   16d4c:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16d4e:	f813 0b01 	ldrb.w	r0, [r3], #1
   16d52:	2200      	movs	r2, #0
   16d54:	4619      	mov	r1, r3
   16d56:	f7ff fdf7 	bl	16948 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   16d5a:	2807      	cmp	r0, #7
   16d5c:	d901      	bls.n	16d62 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16d5e:	2002      	movs	r0, #2
}
   16d60:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   16d62:	4c09      	ldr	r4, [pc, #36]	; (16d88 <ll_rl_crpa_get+0x40>)
   16d64:	2328      	movs	r3, #40	; 0x28
   16d66:	2218      	movs	r2, #24
   16d68:	fb13 2000 	smlabb	r0, r3, r0, r2
   16d6c:	4404      	add	r4, r0
   16d6e:	4620      	mov	r0, r4
   16d70:	2106      	movs	r1, #6
   16d72:	f7f7 fea3 	bl	eabc <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   16d76:	2800      	cmp	r0, #0
   16d78:	d0f1      	beq.n	16d5e <ll_rl_crpa_get+0x16>
   16d7a:	4621      	mov	r1, r4
   16d7c:	4628      	mov	r0, r5
   16d7e:	2206      	movs	r2, #6
   16d80:	f007 fbb2 	bl	1e4e8 <memcpy>
		return 0;
   16d84:	2000      	movs	r0, #0
}
   16d86:	bd38      	pop	{r3, r4, r5, pc}
   16d88:	200015ec 	.word	0x200015ec

00016d8c <ll_rl_lrpa_get>:
{
   16d8c:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16d8e:	4603      	mov	r3, r0
{
   16d90:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16d92:	f813 0b01 	ldrb.w	r0, [r3], #1
   16d96:	2200      	movs	r2, #0
   16d98:	4619      	mov	r1, r3
   16d9a:	f7ff fdd5 	bl	16948 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16d9e:	2807      	cmp	r0, #7
   16da0:	d901      	bls.n	16da6 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16da2:	2002      	movs	r0, #2
}
   16da4:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   16da6:	4b06      	ldr	r3, [pc, #24]	; (16dc0 <ll_rl_lrpa_get+0x34>)
   16da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16dac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16db0:	2206      	movs	r2, #6
   16db2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   16db4:	4620      	mov	r0, r4
   16db6:	f007 fb97 	bl	1e4e8 <memcpy>
		return 0;
   16dba:	2000      	movs	r0, #0
}
   16dbc:	bd10      	pop	{r4, pc}
   16dbe:	bf00      	nop
   16dc0:	200015ec 	.word	0x200015ec

00016dc4 <ll_priv_mode_set>:
{
   16dc4:	b570      	push	{r4, r5, r6, lr}
   16dc6:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16dc8:	2000      	movs	r0, #0
{
   16dca:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16dcc:	f7fc f93c 	bl	13048 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16dd0:	b968      	cbnz	r0, 16dee <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16dd2:	4629      	mov	r1, r5
   16dd4:	4602      	mov	r2, r0
   16dd6:	4604      	mov	r4, r0
   16dd8:	f811 0b01 	ldrb.w	r0, [r1], #1
   16ddc:	f7ff fdb4 	bl	16948 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16de0:	2807      	cmp	r0, #7
   16de2:	d81c      	bhi.n	16e1e <ll_priv_mode_set+0x5a>
		switch (mode) {
   16de4:	b186      	cbz	r6, 16e08 <ll_priv_mode_set+0x44>
   16de6:	2e01      	cmp	r6, #1
   16de8:	d003      	beq.n	16df2 <ll_priv_mode_set+0x2e>
   16dea:	2012      	movs	r0, #18
}
   16dec:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16dee:	200c      	movs	r0, #12
}
   16df0:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   16df2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16df6:	490b      	ldr	r1, [pc, #44]	; (16e24 <ll_priv_mode_set+0x60>)
   16df8:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   16dfc:	f042 0210 	orr.w	r2, r2, #16
   16e00:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   16e04:	4620      	mov	r0, r4
}
   16e06:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   16e08:	4b06      	ldr	r3, [pc, #24]	; (16e24 <ll_priv_mode_set+0x60>)
   16e0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16e0e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   16e12:	f366 1204 	bfi	r2, r6, #4, #1
   16e16:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   16e1a:	4630      	mov	r0, r6
}
   16e1c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16e1e:	2002      	movs	r0, #2
}
   16e20:	bd70      	pop	{r4, r5, r6, pc}
   16e22:	bf00      	nop
   16e24:	200015ec 	.word	0x200015ec

00016e28 <ull_filter_rpa_update>:
{
   16e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e2c:	4681      	mov	r9, r0
   16e2e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   16e30:	f009 fe85 	bl	20b3e <z_impl_k_uptime_get>
   16e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
	bool all = timeout || (rpa_last_ms == -1) ||
   16e38:	f1b9 0f00 	cmp.w	r9, #0
   16e3c:	d117      	bne.n	16e6e <ull_filter_rpa_update+0x46>
   16e3e:	4b75      	ldr	r3, [pc, #468]	; (17014 <ull_filter_rpa_update+0x1ec>)
   16e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e44:	1c5c      	adds	r4, r3, #1
   16e46:	bf08      	it	eq
   16e48:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   16e4c:	d00f      	beq.n	16e6e <ull_filter_rpa_update+0x46>
   16e4e:	460e      	mov	r6, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16e50:	4971      	ldr	r1, [pc, #452]	; (17018 <ull_filter_rpa_update+0x1f0>)
   16e52:	6809      	ldr	r1, [r1, #0]
   16e54:	1a84      	subs	r4, r0, r2
   16e56:	eb66 0503 	sbc.w	r5, r6, r3
   16e5a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16e5c:	428c      	cmp	r4, r1
   16e5e:	eb75 0303 	sbcs.w	r3, r5, r3
   16e62:	bfac      	ite	ge
   16e64:	f04f 0801 	movge.w	r8, #1
   16e68:	f04f 0800 	movlt.w	r8, #0
   16e6c:	e001      	b.n	16e72 <ull_filter_rpa_update+0x4a>
   16e6e:	f04f 0801 	mov.w	r8, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16e72:	4e6a      	ldr	r6, [pc, #424]	; (1701c <ull_filter_rpa_update+0x1f4>)
				LL_ASSERT(!err);
   16e74:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 1702c <ull_filter_rpa_update+0x204>
   16e78:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 17030 <ull_filter_rpa_update+0x208>
   16e7c:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   16e80:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16e82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16e86:	00a5      	lsls	r5, r4, #2
   16e88:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16e8c:	07da      	lsls	r2, r3, #31
   16e8e:	d515      	bpl.n	16ebc <ull_filter_rpa_update+0x94>
   16e90:	f1b8 0f00 	cmp.w	r8, #0
   16e94:	d101      	bne.n	16e9a <ull_filter_rpa_update+0x72>
   16e96:	0798      	lsls	r0, r3, #30
   16e98:	d410      	bmi.n	16ebc <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   16e9a:	192b      	adds	r3, r5, r4
   16e9c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16ea0:	0759      	lsls	r1, r3, #29
   16ea2:	d434      	bmi.n	16f0e <ull_filter_rpa_update+0xe6>
			if (rl[i].lirk) {
   16ea4:	192b      	adds	r3, r5, r4
   16ea6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16eaa:	071a      	lsls	r2, r3, #28
   16eac:	d419      	bmi.n	16ee2 <ull_filter_rpa_update+0xba>
			rl[i].rpas_ready = 1U;
   16eae:	4425      	add	r5, r4
   16eb0:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   16eb4:	f043 0302 	orr.w	r3, r3, #2
   16eb8:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16ebc:	3401      	adds	r4, #1
   16ebe:	2c08      	cmp	r4, #8
   16ec0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16ec4:	d1dd      	bne.n	16e82 <ull_filter_rpa_update+0x5a>
	if (all) {
   16ec6:	f1b8 0f00 	cmp.w	r8, #0
   16eca:	d004      	beq.n	16ed6 <ull_filter_rpa_update+0xae>
		rpa_last_ms = now;
   16ecc:	4b51      	ldr	r3, [pc, #324]	; (17014 <ull_filter_rpa_update+0x1ec>)
   16ece:	9a02      	ldr	r2, [sp, #8]
   16ed0:	601a      	str	r2, [r3, #0]
   16ed2:	9a03      	ldr	r2, [sp, #12]
   16ed4:	605a      	str	r2, [r3, #4]
	if (timeout) {
   16ed6:	f1b9 0f00 	cmp.w	r9, #0
   16eda:	d13c      	bne.n	16f56 <ull_filter_rpa_update+0x12e>
}
   16edc:	b009      	add	sp, #36	; 0x24
   16ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   16ee2:	a904      	add	r1, sp, #16
   16ee4:	f1a6 001d 	sub.w	r0, r6, #29
   16ee8:	f007 fc04 	bl	1e6f4 <bt_rpa_create>
				LL_ASSERT(!err);
   16eec:	2800      	cmp	r0, #0
   16eee:	d177      	bne.n	16fe0 <ull_filter_rpa_update+0x1b8>
				rl[i].local_rpa = &rpa;
   16ef0:	4a4b      	ldr	r2, [pc, #300]	; (17020 <ull_filter_rpa_update+0x1f8>)
   16ef2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16ef6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   16efa:	a904      	add	r1, sp, #16
   16efc:	4618      	mov	r0, r3
   16efe:	2206      	movs	r2, #6
   16f00:	6031      	str	r1, [r6, #0]
   16f02:	9301      	str	r3, [sp, #4]
   16f04:	f007 faf0 	bl	1e4e8 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   16f08:	9b01      	ldr	r3, [sp, #4]
   16f0a:	6033      	str	r3, [r6, #0]
   16f0c:	e7cf      	b.n	16eae <ull_filter_rpa_update+0x86>
	psrc += length - 1;
   16f0e:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   16f12:	4a44      	ldr	r2, [pc, #272]	; (17024 <ull_filter_rpa_update+0x1fc>)
   16f14:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   16f18:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   16f1a:	f10d 030f 	add.w	r3, sp, #15
   16f1e:	f10d 001f 	add.w	r0, sp, #31
		*pdst++ = *psrc--;
   16f22:	f812 1901 	ldrb.w	r1, [r2], #-1
   16f26:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16f2a:	4283      	cmp	r3, r0
   16f2c:	d1f9      	bne.n	16f22 <ull_filter_rpa_update+0xfa>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16f2e:	1fb1      	subs	r1, r6, #6
   16f30:	a804      	add	r0, sp, #16
   16f32:	f007 fbdf 	bl	1e6f4 <bt_rpa_create>
				LL_ASSERT(!err);
   16f36:	2800      	cmp	r0, #0
   16f38:	d0b4      	beq.n	16ea4 <ull_filter_rpa_update+0x7c>
   16f3a:	483b      	ldr	r0, [pc, #236]	; (17028 <ull_filter_rpa_update+0x200>)
   16f3c:	f44f 7305 	mov.w	r3, #532	; 0x214
   16f40:	465a      	mov	r2, fp
   16f42:	4651      	mov	r1, sl
   16f44:	f005 fa62 	bl	1c40c <printk>
   16f48:	4040      	eors	r0, r0
   16f4a:	f380 8811 	msr	BASEPRI, r0
   16f4e:	f04f 0003 	mov.w	r0, #3
   16f52:	df02      	svc	2
   16f54:	e7a6      	b.n	16ea4 <ull_filter_rpa_update+0x7c>
		adv = ull_adv_is_enabled_get(0);
   16f56:	2000      	movs	r0, #0
   16f58:	f7fc f868 	bl	1302c <ull_adv_is_enabled_get>
		if (adv) {
   16f5c:	4604      	mov	r4, r0
   16f5e:	2800      	cmp	r0, #0
   16f60:	d0bc      	beq.n	16edc <ull_filter_rpa_update+0xb4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16f62:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
   16f66:	0783      	lsls	r3, r0, #30
   16f68:	d5b8      	bpl.n	16edc <ull_filter_rpa_update+0xb4>
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   16f6a:	f104 01db 	add.w	r1, r4, #219	; 0xdb
   16f6e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16f72:	2200      	movs	r2, #0
   16f74:	f7ff fce8 	bl	16948 <ull_filter_rl_find>
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16f78:	2807      	cmp	r0, #7
	rl_idx = ull_filter_rl_find(adv->id_addr_type, adv->id_addr, NULL);
   16f7a:	4601      	mov	r1, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16f7c:	d8ae      	bhi.n	16edc <ull_filter_rpa_update+0xb4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f7e:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
	if (pdu->first == pdu->last) {
   16f82:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   16f86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   16f8a:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f8e:	f103 0211 	add.w	r2, r3, #17
   16f92:	f104 071c 	add.w	r7, r4, #28
	if (pdu->first == pdu->last) {
   16f96:	42a8      	cmp	r0, r5
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f98:	eb07 0602 	add.w	r6, r7, r2
	if (pdu->first == pdu->last) {
   16f9c:	d02e      	beq.n	16ffc <ull_filter_rpa_update+0x1d4>
   16f9e:	3302      	adds	r3, #2
	return (void *)pdu->pdu[last];
   16fa0:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
   16fa4:	5cba      	ldrb	r2, [r7, r2]
	pdu->type = prev->type;
   16fa6:	5cc7      	ldrb	r7, [r0, r3]
		pdu->chan_sel = prev->chan_sel;
   16fa8:	f3c2 1c40 	ubfx	ip, r2, #5, #1
	pdu->type = prev->type;
   16fac:	f3c2 0203 	ubfx	r2, r2, #0, #4
   16fb0:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   16fb4:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
   16fb8:	433a      	orrs	r2, r7
   16fba:	18c7      	adds	r7, r0, r3
   16fbc:	54c2      	strb	r2, [r0, r3]
	ull_filter_adv_pdu_update(adv, rl_idx, pdu);
   16fbe:	463a      	mov	r2, r7
   16fc0:	4620      	mov	r0, r4
   16fc2:	f7ff fc37 	bl	16834 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   16fc6:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   16fc8:	f107 0008 	add.w	r0, r7, #8
   16fcc:	3a06      	subs	r2, #6
   16fce:	f106 0108 	add.w	r1, r6, #8
   16fd2:	f007 fa89 	bl	1e4e8 <memcpy>
	pdu->len = prev->len;
   16fd6:	7873      	ldrb	r3, [r6, #1]
   16fd8:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   16fda:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   16fde:	e77d      	b.n	16edc <ull_filter_rpa_update+0xb4>
				LL_ASSERT(!err);
   16fe0:	4811      	ldr	r0, [pc, #68]	; (17028 <ull_filter_rpa_update+0x200>)
   16fe2:	f240 2321 	movw	r3, #545	; 0x221
   16fe6:	465a      	mov	r2, fp
   16fe8:	4651      	mov	r1, sl
   16fea:	f005 fa0f 	bl	1c40c <printk>
   16fee:	4040      	eors	r0, r0
   16ff0:	f380 8811 	msr	BASEPRI, r0
   16ff4:	f04f 0003 	mov.w	r0, #3
   16ff8:	df02      	svc	2
   16ffa:	e779      	b.n	16ef0 <ull_filter_rpa_update+0xc8>
		last = pdu->last + 1;
   16ffc:	3501      	adds	r5, #1
   16ffe:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   17000:	2d02      	cmp	r5, #2
   17002:	d004      	beq.n	1700e <ull_filter_rpa_update+0x1e6>
   17004:	2027      	movs	r0, #39	; 0x27
   17006:	2302      	movs	r3, #2
   17008:	fb10 3305 	smlabb	r3, r0, r5, r3
   1700c:	e7c8      	b.n	16fa0 <ull_filter_rpa_update+0x178>
   1700e:	462b      	mov	r3, r5
			last = 0U;
   17010:	2500      	movs	r5, #0
   17012:	e7c5      	b.n	16fa0 <ull_filter_rpa_update+0x178>
   17014:	20000008 	.word	0x20000008
   17018:	20001760 	.word	0x20001760
   1701c:	20001610 	.word	0x20001610
   17020:	20001534 	.word	0x20001534
   17024:	2000156c 	.word	0x2000156c
   17028:	00021ce0 	.word	0x00021ce0
   1702c:	0002247c 	.word	0x0002247c
   17030:	00021f58 	.word	0x00021f58

00017034 <rpa_timeout>:
{
   17034:	b508      	push	{r3, lr}
	ull_filter_rpa_update(true);
   17036:	2001      	movs	r0, #1
   17038:	f7ff fef6 	bl	16e28 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1703c:	4b03      	ldr	r3, [pc, #12]	; (1704c <rpa_timeout+0x18>)
   1703e:	4904      	ldr	r1, [pc, #16]	; (17050 <rpa_timeout+0x1c>)
   17040:	681a      	ldr	r2, [r3, #0]
   17042:	4804      	ldr	r0, [pc, #16]	; (17054 <rpa_timeout+0x20>)
}
   17044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17048:	f004 bcf8 	b.w	1ba3c <k_delayed_work_submit_to_queue>
   1704c:	20001760 	.word	0x20001760
   17050:	20001764 	.word	0x20001764
   17054:	20001c48 	.word	0x20001c48

00017058 <ull_filter_reset>:
	wl_anon = 0U;
   17058:	4a31      	ldr	r2, [pc, #196]	; (17120 <ull_filter_reset+0xc8>)
   1705a:	4932      	ldr	r1, [pc, #200]	; (17124 <ull_filter_reset+0xcc>)
{
   1705c:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   1705e:	2300      	movs	r3, #0
   17060:	4c31      	ldr	r4, [pc, #196]	; (17128 <ull_filter_reset+0xd0>)
   17062:	7013      	strb	r3, [r2, #0]
		u8_t j = wl[i].rl_idx;
   17064:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   17068:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1706a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1706c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   17070:	d805      	bhi.n	1707e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   17072:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   17076:	f36f 1245 	bfc	r2, #5, #1
   1707a:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   1707e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   17082:	f36f 0200 	bfc	r2, #0, #1
   17086:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1708a:	3301      	adds	r3, #1
   1708c:	2b08      	cmp	r3, #8
   1708e:	d1e9      	bne.n	17064 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   17090:	780f      	ldrb	r7, [r1, #0]
   17092:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   17096:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1709a:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1709e:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   170a2:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   170a4:	f363 0700 	bfi	r7, r3, #0, #1
   170a8:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   170aa:	4f20      	ldr	r7, [pc, #128]	; (1712c <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   170ac:	f363 0500 	bfi	r5, r3, #0, #1
   170b0:	f363 0400 	bfi	r4, r3, #0, #1
   170b4:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   170b8:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   170ba:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   170be:	4f1c      	ldr	r7, [pc, #112]	; (17130 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   170c0:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   170c4:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   170c8:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   170cc:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   170d0:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   170d4:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   170d6:	f363 0600 	bfi	r6, r3, #0, #1
   170da:	f363 0500 	bfi	r5, r3, #0, #1
   170de:	f363 0400 	bfi	r4, r3, #0, #1
   170e2:	f363 0200 	bfi	r2, r3, #0, #1
   170e6:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   170ea:	4b12      	ldr	r3, [pc, #72]	; (17134 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   170ec:	4e12      	ldr	r6, [pc, #72]	; (17138 <ull_filter_reset+0xe0>)
   170ee:	4f13      	ldr	r7, [pc, #76]	; (1713c <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   170f0:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   170f4:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   170f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   170fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17100:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   17104:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   17108:	6037      	str	r7, [r6, #0]
	if (init) {
   1710a:	b120      	cbz	r0, 17116 <ull_filter_reset+0xbe>
}
   1710c:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1710e:	490c      	ldr	r1, [pc, #48]	; (17140 <ull_filter_reset+0xe8>)
   17110:	480c      	ldr	r0, [pc, #48]	; (17144 <ull_filter_reset+0xec>)
   17112:	f009 bcb3 	b.w	20a7c <k_delayed_work_init>
}
   17116:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   17118:	480a      	ldr	r0, [pc, #40]	; (17144 <ull_filter_reset+0xec>)
   1711a:	f009 bcb7 	b.w	20a8c <k_delayed_work_cancel>
   1711e:	bf00      	nop
   17120:	20002287 	.word	0x20002287
   17124:	200015ec 	.word	0x200015ec
   17128:	20001784 	.word	0x20001784
   1712c:	20002286 	.word	0x20002286
   17130:	20002285 	.word	0x20002285
   17134:	20000008 	.word	0x20000008
   17138:	20001760 	.word	0x20001760
   1713c:	000dbba0 	.word	0x000dbba0
   17140:	00017035 	.word	0x00017035
   17144:	20001764 	.word	0x20001764

00017148 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   17148:	4b02      	ldr	r3, [pc, #8]	; (17154 <ull_filter_lll_irks_get+0xc>)
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	7003      	strb	r3, [r0, #0]
}
   1714e:	4802      	ldr	r0, [pc, #8]	; (17158 <ull_filter_lll_irks_get+0x10>)
   17150:	4770      	bx	lr
   17152:	bf00      	nop
   17154:	20002285 	.word	0x20002285
   17158:	2000156c 	.word	0x2000156c

0001715c <ull_filter_lll_rl_irk_idx>:
{
   1715c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1715e:	4b20      	ldr	r3, [pc, #128]	; (171e0 <ull_filter_lll_rl_irk_idx+0x84>)
   17160:	781b      	ldrb	r3, [r3, #0]
   17162:	4283      	cmp	r3, r0
{
   17164:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17166:	d90c      	bls.n	17182 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   17168:	4b1e      	ldr	r3, [pc, #120]	; (171e4 <ull_filter_lll_rl_irk_idx+0x88>)
   1716a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1716c:	2c07      	cmp	r4, #7
   1716e:	d819      	bhi.n	171a4 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   17170:	4b1d      	ldr	r3, [pc, #116]	; (171e8 <ull_filter_lll_rl_irk_idx+0x8c>)
   17172:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   17176:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1717a:	07db      	lsls	r3, r3, #31
   1717c:	d520      	bpl.n	171c0 <ull_filter_lll_rl_irk_idx+0x64>
}
   1717e:	4620      	mov	r0, r4
   17180:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17182:	4a1a      	ldr	r2, [pc, #104]	; (171ec <ull_filter_lll_rl_irk_idx+0x90>)
   17184:	491a      	ldr	r1, [pc, #104]	; (171f0 <ull_filter_lll_rl_irk_idx+0x94>)
   17186:	481b      	ldr	r0, [pc, #108]	; (171f4 <ull_filter_lll_rl_irk_idx+0x98>)
   17188:	f240 23b7 	movw	r3, #695	; 0x2b7
   1718c:	f005 f93e 	bl	1c40c <printk>
   17190:	4040      	eors	r0, r0
   17192:	f380 8811 	msr	BASEPRI, r0
   17196:	f04f 0003 	mov.w	r0, #3
   1719a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1719c:	4b11      	ldr	r3, [pc, #68]	; (171e4 <ull_filter_lll_rl_irk_idx+0x88>)
   1719e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   171a0:	2c07      	cmp	r4, #7
   171a2:	d9e5      	bls.n	17170 <ull_filter_lll_rl_irk_idx+0x14>
   171a4:	4a11      	ldr	r2, [pc, #68]	; (171ec <ull_filter_lll_rl_irk_idx+0x90>)
   171a6:	4914      	ldr	r1, [pc, #80]	; (171f8 <ull_filter_lll_rl_irk_idx+0x9c>)
   171a8:	4812      	ldr	r0, [pc, #72]	; (171f4 <ull_filter_lll_rl_irk_idx+0x98>)
   171aa:	f240 23b9 	movw	r3, #697	; 0x2b9
   171ae:	f005 f92d 	bl	1c40c <printk>
   171b2:	4040      	eors	r0, r0
   171b4:	f380 8811 	msr	BASEPRI, r0
   171b8:	f04f 0003 	mov.w	r0, #3
   171bc:	df02      	svc	2
   171be:	e7d7      	b.n	17170 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   171c0:	4a0a      	ldr	r2, [pc, #40]	; (171ec <ull_filter_lll_rl_irk_idx+0x90>)
   171c2:	490e      	ldr	r1, [pc, #56]	; (171fc <ull_filter_lll_rl_irk_idx+0xa0>)
   171c4:	480b      	ldr	r0, [pc, #44]	; (171f4 <ull_filter_lll_rl_irk_idx+0x98>)
   171c6:	f240 23ba 	movw	r3, #698	; 0x2ba
   171ca:	f005 f91f 	bl	1c40c <printk>
   171ce:	4040      	eors	r0, r0
   171d0:	f380 8811 	msr	BASEPRI, r0
   171d4:	f04f 0003 	mov.w	r0, #3
   171d8:	df02      	svc	2
}
   171da:	4620      	mov	r0, r4
   171dc:	bd10      	pop	{r4, pc}
   171de:	bf00      	nop
   171e0:	20002285 	.word	0x20002285
   171e4:	20001564 	.word	0x20001564
   171e8:	200015ec 	.word	0x200015ec
   171ec:	0002247c 	.word	0x0002247c
   171f0:	00022660 	.word	0x00022660
   171f4:	00021ce0 	.word	0x00021ce0
   171f8:	00022680 	.word	0x00022680
   171fc:	00022654 	.word	0x00022654

00017200 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   17200:	2807      	cmp	r0, #7
   17202:	d823      	bhi.n	1724c <ull_filter_lll_irk_whitelisted+0x4c>
{
   17204:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   17206:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1720a:	4e11      	ldr	r6, [pc, #68]	; (17250 <ull_filter_lll_irk_whitelisted+0x50>)
   1720c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   17210:	07db      	lsls	r3, r3, #31
   17212:	4604      	mov	r4, r0
   17214:	ea4f 0580 	mov.w	r5, r0, lsl #2
   17218:	d505      	bpl.n	17226 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1721a:	442c      	add	r4, r5
   1721c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   17220:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   17224:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   17226:	4a0b      	ldr	r2, [pc, #44]	; (17254 <ull_filter_lll_irk_whitelisted+0x54>)
   17228:	490b      	ldr	r1, [pc, #44]	; (17258 <ull_filter_lll_irk_whitelisted+0x58>)
   1722a:	480c      	ldr	r0, [pc, #48]	; (1725c <ull_filter_lll_irk_whitelisted+0x5c>)
   1722c:	f240 23c5 	movw	r3, #709	; 0x2c5
   17230:	f005 f8ec 	bl	1c40c <printk>
   17234:	4040      	eors	r0, r0
   17236:	f380 8811 	msr	BASEPRI, r0
   1723a:	f04f 0003 	mov.w	r0, #3
   1723e:	df02      	svc	2
	return rl[rl_idx].wl;
   17240:	442c      	add	r4, r5
   17242:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   17246:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1724a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1724c:	2000      	movs	r0, #0
}
   1724e:	4770      	bx	lr
   17250:	200015ec 	.word	0x200015ec
   17254:	0002247c 	.word	0x0002247c
   17258:	000224cc 	.word	0x000224cc
   1725c:	00021ce0 	.word	0x00021ce0

00017260 <ull_filter_lll_get>:
		return &wl_filter;
   17260:	4a03      	ldr	r2, [pc, #12]	; (17270 <ull_filter_lll_get+0x10>)
   17262:	4b04      	ldr	r3, [pc, #16]	; (17274 <ull_filter_lll_get+0x14>)
}
   17264:	2800      	cmp	r0, #0
   17266:	bf0c      	ite	eq
   17268:	4610      	moveq	r0, r2
   1726a:	4618      	movne	r0, r3
   1726c:	4770      	bx	lr
   1726e:	bf00      	nop
   17270:	2000172c 	.word	0x2000172c
   17274:	200017c4 	.word	0x200017c4

00017278 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   17278:	4b1c      	ldr	r3, [pc, #112]	; (172ec <ull_filter_lll_rl_addr_allowed+0x74>)
   1727a:	781b      	ldrb	r3, [r3, #0]
   1727c:	b1fb      	cbz	r3, 172be <ull_filter_lll_rl_addr_allowed+0x46>
   1727e:	7813      	ldrb	r3, [r2, #0]
   17280:	2bff      	cmp	r3, #255	; 0xff
   17282:	d11c      	bne.n	172be <ull_filter_lll_rl_addr_allowed+0x46>
{
   17284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17288:	4d19      	ldr	r5, [pc, #100]	; (172f0 <ull_filter_lll_rl_addr_allowed+0x78>)
   1728a:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1728c:	2300      	movs	r3, #0
   1728e:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   17290:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   17294:	fa5f fe83 	uxtb.w	lr, r3
   17298:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   1729c:	f014 0001 	ands.w	r0, r4, #1
   172a0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   172a4:	d003      	beq.n	172ae <ull_filter_lll_rl_addr_allowed+0x36>
   172a6:	f3c4 1480 	ubfx	r4, r4, #6, #1
   172aa:	42b4      	cmp	r4, r6
   172ac:	d009      	beq.n	172c2 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   172ae:	3301      	adds	r3, #1
   172b0:	2b08      	cmp	r3, #8
   172b2:	f105 0528 	add.w	r5, r5, #40	; 0x28
   172b6:	d1eb      	bne.n	17290 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   172b8:	2001      	movs	r0, #1
}
   172ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   172be:	2001      	movs	r0, #1
}
   172c0:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   172c2:	1fac      	subs	r4, r5, #6
   172c4:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   172c8:	f814 af01 	ldrb.w	sl, [r4, #1]!
   172cc:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   172d0:	45ca      	cmp	sl, r9
   172d2:	d1ec      	bne.n	172ae <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   172d4:	42ac      	cmp	r4, r5
   172d6:	d1f7      	bne.n	172c8 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   172d8:	4463      	add	r3, ip
				*rl_idx = i;
   172da:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   172de:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   172e2:	075a      	lsls	r2, r3, #29
   172e4:	d5e9      	bpl.n	172ba <ull_filter_lll_rl_addr_allowed+0x42>
   172e6:	f3c3 1000 	ubfx	r0, r3, #4, #1
   172ea:	e7e6      	b.n	172ba <ull_filter_lll_rl_addr_allowed+0x42>
   172ec:	20002286 	.word	0x20002286
   172f0:	200015f2 	.word	0x200015f2

000172f4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   172f4:	4b02      	ldr	r3, [pc, #8]	; (17300 <ull_filter_lll_rl_enabled+0xc>)
   172f6:	7818      	ldrb	r0, [r3, #0]
}
   172f8:	3800      	subs	r0, #0
   172fa:	bf18      	it	ne
   172fc:	2001      	movne	r0, #1
   172fe:	4770      	bx	lr
   17300:	20002286 	.word	0x20002286

00017304 <radio_nrf5_isr>:
#if (CONFIG_BT_CTLR_LLL_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
static void ticker_op_job_disable(u32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   17304:	4668      	mov	r0, sp
   17306:	f020 0107 	bic.w	r1, r0, #7
   1730a:	468d      	mov	sp, r1
   1730c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   1730e:	f001 fecf 	bl	190b0 <isr_radio>

	ISR_DIRECT_PM();
   17312:	f7ee fbfb 	bl	5b0c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   17316:	f7ee fb53 	bl	59c0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1731a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1731e:	4685      	mov	sp, r0
   17320:	4770      	bx	lr
   17322:	bf00      	nop

00017324 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   17324:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   17326:	4b09      	ldr	r3, [pc, #36]	; (1734c <rtc0_nrf5_isr+0x28>)
   17328:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1732c:	b93a      	cbnz	r2, 1733e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1732e:	2001      	movs	r0, #1
   17330:	f7f7 fca6 	bl	ec80 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   17334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   17338:	2002      	movs	r0, #2
   1733a:	f7f7 bca1 	b.w	ec80 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1733e:	2000      	movs	r0, #0
   17340:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   17344:	f7f8 fb84 	bl	fa50 <ticker_trigger>
   17348:	e7f1      	b.n	1732e <rtc0_nrf5_isr+0xa>
   1734a:	bf00      	nop
   1734c:	4000b000 	.word	0x4000b000

00017350 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   17350:	2000      	movs	r0, #0
   17352:	f7f7 bc95 	b.w	ec80 <mayfly_run>
   17356:	bf00      	nop

00017358 <prepare>:
}

static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		   lll_prepare_cb_t prepare_cb, int prio,
		   struct lll_prepare_param *prepare_param, u8_t is_resume)
{
   17358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1735c:	b08d      	sub	sp, #52	; 0x34
	u8_t idx = UINT8_MAX;
   1735e:	24ff      	movs	r4, #255	; 0xff
{
   17360:	4605      	mov	r5, r0
	struct lll_event *p;
	int ret, err;

	/* Find the ready prepare in the pipeline */
	p = ull_prepare_dequeue_iter(&idx);
   17362:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
	u8_t idx = UINT8_MAX;
   17366:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
{
   1736a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1736e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
   17372:	460e      	mov	r6, r1
   17374:	4617      	mov	r7, r2
   17376:	4698      	mov	r8, r3
	p = ull_prepare_dequeue_iter(&idx);
   17378:	f7fb f9ac 	bl	126d4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1737c:	b918      	cbnz	r0, 17386 <prepare+0x2e>
   1737e:	e01f      	b.n	173c0 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   17380:	f7fb f9a8 	bl	126d4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17384:	b1e0      	cbz	r0, 173c0 <prepare+0x68>
   17386:	f890 3020 	ldrb.w	r3, [r0, #32]
   1738a:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1738c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
	while (p && (p->is_aborted || p->is_resume)) {
   17390:	d1f6      	bne.n	17380 <prepare+0x28>
	}

	/* Current event active or another prepare is ready in the pipeline */
	if (event.curr.abort_cb || (p && is_resume)) {
   17392:	4b42      	ldr	r3, [pc, #264]	; (1749c <prepare+0x144>)
   17394:	689a      	ldr	r2, [r3, #8]
   17396:	b9ba      	cbnz	r2, 173c8 <prepare+0x70>
   17398:	2c00      	cmp	r4, #0
   1739a:	d05f      	beq.n	1745c <prepare+0x104>
			/* early abort */
			event.curr.abort_cb(NULL, event.curr.param);
		}

		/* Store the next prepare for deferred call */
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1739c:	2201      	movs	r2, #1
   1739e:	9201      	str	r2, [sp, #4]
   173a0:	f8cd 8000 	str.w	r8, [sp]
   173a4:	463b      	mov	r3, r7
   173a6:	4631      	mov	r1, r6
   173a8:	4628      	mov	r0, r5
   173aa:	464a      	mov	r2, r9
   173ac:	f7fb f94c 	bl	12648 <ull_prepare_enqueue>
					  prepare_cb, prio, is_resume);
		LL_ASSERT(!ret);
   173b0:	2800      	cmp	r0, #0
   173b2:	d143      	bne.n	1743c <prepare+0xe4>
				LL_ASSERT(ret == -ECANCELED);
			}
		}
#endif /* CONFIG_BT_CTLR_LOW_LAT */

		return -EINPROGRESS;
   173b4:	f06f 0443 	mvn.w	r4, #67	; 0x43
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));

	return err;
}
   173b8:	4620      	mov	r0, r4
   173ba:	b00d      	add	sp, #52	; 0x34
   173bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   173c0:	4b36      	ldr	r3, [pc, #216]	; (1749c <prepare+0x144>)
   173c2:	689a      	ldr	r2, [r3, #8]
   173c4:	2a00      	cmp	r2, #0
   173c6:	d049      	beq.n	1745c <prepare+0x104>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   173c8:	e9cd 8400 	strd	r8, r4, [sp]
   173cc:	463b      	mov	r3, r7
   173ce:	4631      	mov	r1, r6
   173d0:	4628      	mov	r0, r5
   173d2:	464a      	mov	r2, r9
   173d4:	f7fb f938 	bl	12648 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   173d8:	2800      	cmp	r0, #0
   173da:	d12f      	bne.n	1743c <prepare+0xe4>
		if (is_resume) {
   173dc:	2c00      	cmp	r4, #0
   173de:	d1e9      	bne.n	173b4 <prepare+0x5c>
		evt = HDR_LLL2EVT(prepare_param->param);
   173e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   173e4:	492e      	ldr	r1, [pc, #184]	; (174a0 <prepare+0x148>)
		evt = HDR_LLL2EVT(prepare_param->param);
   173e6:	681b      	ldr	r3, [r3, #0]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   173e8:	4a2e      	ldr	r2, [pc, #184]	; (174a4 <prepare+0x14c>)
   173ea:	9408      	str	r4, [sp, #32]
   173ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
   173f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   173f4:	9406      	str	r4, [sp, #24]
   173f6:	9107      	str	r1, [sp, #28]
   173f8:	9205      	str	r2, [sp, #20]
		preempt_to = MAX(evt->ticks_active_to_start,
   173fa:	e9d3 0100 	ldrd	r0, r1, [r3]
   173fe:	689a      	ldr	r2, [r3, #8]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17400:	f8d9 3000 	ldr.w	r3, [r9]
		preempt_to = MAX(evt->ticks_active_to_start,
   17404:	4288      	cmp	r0, r1
   17406:	bf2c      	ite	cs
   17408:	ebc2 0200 	rsbcs	r2, r2, r0
   1740c:	ebc2 0201 	rsbcc	r2, r2, r1
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17410:	9200      	str	r2, [sp, #0]
   17412:	4621      	mov	r1, r4
   17414:	4622      	mov	r2, r4
   17416:	4620      	mov	r0, r4
   17418:	f7f8 fb32 	bl	fa80 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1741c:	2802      	cmp	r0, #2
   1741e:	d9c9      	bls.n	173b4 <prepare+0x5c>
   17420:	4a21      	ldr	r2, [pc, #132]	; (174a8 <prepare+0x150>)
   17422:	4922      	ldr	r1, [pc, #136]	; (174ac <prepare+0x154>)
   17424:	4822      	ldr	r0, [pc, #136]	; (174b0 <prepare+0x158>)
   17426:	f240 13ff 	movw	r3, #511	; 0x1ff
   1742a:	f004 ffef 	bl	1c40c <printk>
   1742e:	4040      	eors	r0, r0
   17430:	f380 8811 	msr	BASEPRI, r0
   17434:	f04f 0003 	mov.w	r0, #3
   17438:	df02      	svc	2
   1743a:	e7bb      	b.n	173b4 <prepare+0x5c>
		LL_ASSERT(!ret);
   1743c:	4a1a      	ldr	r2, [pc, #104]	; (174a8 <prepare+0x150>)
   1743e:	491d      	ldr	r1, [pc, #116]	; (174b4 <prepare+0x15c>)
   17440:	481b      	ldr	r0, [pc, #108]	; (174b0 <prepare+0x158>)
   17442:	f240 13e5 	movw	r3, #485	; 0x1e5
   17446:	f004 ffe1 	bl	1c40c <printk>
   1744a:	4040      	eors	r0, r0
   1744c:	f380 8811 	msr	BASEPRI, r0
   17450:	f04f 0003 	mov.w	r0, #3
   17454:	df02      	svc	2
		if (is_resume) {
   17456:	2c00      	cmp	r4, #0
   17458:	d1ac      	bne.n	173b4 <prepare+0x5c>
   1745a:	e7c1      	b.n	173e0 <prepare+0x88>
	event.curr.param = prepare_param->param;
   1745c:	f8d9 200c 	ldr.w	r2, [r9, #12]
   17460:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   17462:	e9c3 5601 	strd	r5, r6, [r3, #4]
	err = prepare_cb(prepare_param);
   17466:	4648      	mov	r0, r9
   17468:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1746a:	2300      	movs	r3, #0
	err = prepare_cb(prepare_param);
   1746c:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1746e:	9300      	str	r3, [sp, #0]
   17470:	461a      	mov	r2, r3
   17472:	4619      	mov	r1, r3
   17474:	4618      	mov	r0, r3
   17476:	f7f8 fba9 	bl	fbcc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1747a:	2802      	cmp	r0, #2
   1747c:	d99c      	bls.n	173b8 <prepare+0x60>
   1747e:	4a0a      	ldr	r2, [pc, #40]	; (174a8 <prepare+0x150>)
   17480:	490a      	ldr	r1, [pc, #40]	; (174ac <prepare+0x154>)
   17482:	480b      	ldr	r0, [pc, #44]	; (174b0 <prepare+0x158>)
   17484:	f240 232f 	movw	r3, #559	; 0x22f
   17488:	f004 ffc0 	bl	1c40c <printk>
   1748c:	4040      	eors	r0, r0
   1748e:	f380 8811 	msr	BASEPRI, r0
   17492:	f04f 0003 	mov.w	r0, #3
   17496:	df02      	svc	2
   17498:	e78e      	b.n	173b8 <prepare+0x60>
   1749a:	bf00      	nop
   1749c:	200017fc 	.word	0x200017fc
   174a0:	000175e1 	.word	0x000175e1
   174a4:	00017611 	.word	0x00017611
   174a8:	0002269c 	.word	0x0002269c
   174ac:	000226e4 	.word	0x000226e4
   174b0:	00021ce0 	.word	0x00021ce0
   174b4:	00021f64 	.word	0x00021f64

000174b8 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   174b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   174ba:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   174bc:	f7fb f8fc 	bl	126b8 <ull_prepare_dequeue_get>
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
   174c0:	23ff      	movs	r3, #255	; 0xff
	int resume_prio;
	int ret;

	next = ull_prepare_dequeue_iter(&idx);
   174c2:	f10d 000e 	add.w	r0, sp, #14
	u8_t idx = UINT8_MAX;
   174c6:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   174ca:	f7fb f903 	bl	126d4 <ull_prepare_dequeue_iter>
	if (!next || !event.curr.abort_cb || !event.curr.param) {
   174ce:	b188      	cbz	r0, 174f4 <preempt+0x3c>
   174d0:	4e3e      	ldr	r6, [pc, #248]	; (175cc <preempt+0x114>)
   174d2:	68b3      	ldr	r3, [r6, #8]
   174d4:	b173      	cbz	r3, 174f4 <preempt+0x3c>
   174d6:	6833      	ldr	r3, [r6, #0]
   174d8:	4604      	mov	r4, r0
   174da:	b15b      	cbz	r3, 174f4 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   174dc:	f894 3020 	ldrb.w	r3, [r4, #32]
   174e0:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   174e4:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   174e8:	d006      	beq.n	174f8 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   174ea:	f7fb f8f3 	bl	126d4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   174ee:	4604      	mov	r4, r0
   174f0:	2800      	cmp	r0, #0
   174f2:	d1f3      	bne.n	174dc <preempt+0x24>
		ret = resume_enqueue(resume_cb, resume_prio);
		LL_ASSERT(!ret);
	} else {
		LL_ASSERT(ret == -ECANCELED);
	}
}
   174f4:	b00b      	add	sp, #44	; 0x2c
   174f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   174f8:	ab05      	add	r3, sp, #20
   174fa:	e9d6 2700 	ldrd	r2, r7, [r6]
   174fe:	69e1      	ldr	r1, [r4, #28]
   17500:	68e0      	ldr	r0, [r4, #12]
   17502:	9300      	str	r3, [sp, #0]
   17504:	ab04      	add	r3, sp, #16
   17506:	47b8      	blx	r7
	if (!ret) {
   17508:	4607      	mov	r7, r0
   1750a:	b1b8      	cbz	r0, 1753c <preempt+0x84>
	event.curr.abort_cb(NULL, event.curr.param);
   1750c:	68b3      	ldr	r3, [r6, #8]
   1750e:	6831      	ldr	r1, [r6, #0]
   17510:	4628      	mov	r0, r5
   17512:	4798      	blx	r3
	if (ret == -EAGAIN) {
   17514:	f117 0f0b 	cmn.w	r7, #11
   17518:	d01c      	beq.n	17554 <preempt+0x9c>
		LL_ASSERT(ret == -ECANCELED);
   1751a:	3748      	adds	r7, #72	; 0x48
   1751c:	d0ea      	beq.n	174f4 <preempt+0x3c>
   1751e:	4a2c      	ldr	r2, [pc, #176]	; (175d0 <preempt+0x118>)
   17520:	492c      	ldr	r1, [pc, #176]	; (175d4 <preempt+0x11c>)
   17522:	482d      	ldr	r0, [pc, #180]	; (175d8 <preempt+0x120>)
   17524:	f240 238e 	movw	r3, #654	; 0x28e
   17528:	f004 ff70 	bl	1c40c <printk>
   1752c:	4040      	eors	r0, r0
   1752e:	f380 8811 	msr	BASEPRI, r0
   17532:	f04f 0003 	mov.w	r0, #3
   17536:	df02      	svc	2
}
   17538:	b00b      	add	sp, #44	; 0x2c
   1753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1753c:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17540:	69a2      	ldr	r2, [r4, #24]
   17542:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   17544:	f043 0302 	orr.w	r3, r3, #2
   17548:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1754c:	4620      	mov	r0, r4
   1754e:	4790      	blx	r2
}
   17550:	b00b      	add	sp, #44	; 0x2c
   17552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8_t idx = UINT8_MAX;
   17554:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&idx);
   17556:	f10d 000f 	add.w	r0, sp, #15
		u8_t idx = UINT8_MAX;
   1755a:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&idx);
   1755e:	f7fb f8b9 	bl	126d4 <ull_prepare_dequeue_iter>
		while (iter) {
   17562:	b928      	cbnz	r0, 17570 <preempt+0xb8>
   17564:	e013      	b.n	1758e <preempt+0xd6>
			iter = ull_prepare_dequeue_iter(&idx);
   17566:	f10d 000f 	add.w	r0, sp, #15
   1756a:	f7fb f8b3 	bl	126d4 <ull_prepare_dequeue_iter>
		while (iter) {
   1756e:	b170      	cbz	r0, 1758e <preempt+0xd6>
			if (!iter->is_aborted &&
   17570:	f890 3020 	ldrb.w	r3, [r0, #32]
   17574:	079a      	lsls	r2, r3, #30
   17576:	d4f6      	bmi.n	17566 <preempt+0xae>
			    event.curr.param == iter->prepare_param.param) {
   17578:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1757a:	6831      	ldr	r1, [r6, #0]
   1757c:	4291      	cmp	r1, r2
   1757e:	d1f2      	bne.n	17566 <preempt+0xae>
				iter->is_aborted = 1;
   17580:	f043 0302 	orr.w	r3, r3, #2
   17584:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   17588:	6983      	ldr	r3, [r0, #24]
   1758a:	4798      	blx	r3
   1758c:	e7eb      	b.n	17566 <preempt+0xae>
		ret = resume_enqueue(resume_cb, resume_prio);
   1758e:	9b05      	ldr	r3, [sp, #20]
	prepare_param.param = event.curr.param;
   17590:	6832      	ldr	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17592:	9300      	str	r3, [sp, #0]
   17594:	2301      	movs	r3, #1
   17596:	9301      	str	r3, [sp, #4]
	prepare_param.param = event.curr.param;
   17598:	9209      	str	r2, [sp, #36]	; 0x24
	event.curr.param = NULL;
   1759a:	2400      	movs	r4, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1759c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   175a0:	9b04      	ldr	r3, [sp, #16]
	event.curr.param = NULL;
   175a2:	6034      	str	r4, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   175a4:	aa06      	add	r2, sp, #24
   175a6:	f7fb f84f 	bl	12648 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   175aa:	2800      	cmp	r0, #0
   175ac:	d0a2      	beq.n	174f4 <preempt+0x3c>
   175ae:	4a08      	ldr	r2, [pc, #32]	; (175d0 <preempt+0x118>)
   175b0:	490a      	ldr	r1, [pc, #40]	; (175dc <preempt+0x124>)
   175b2:	4809      	ldr	r0, [pc, #36]	; (175d8 <preempt+0x120>)
   175b4:	f44f 7323 	mov.w	r3, #652	; 0x28c
   175b8:	f004 ff28 	bl	1c40c <printk>
   175bc:	4040      	eors	r0, r0
   175be:	f380 8811 	msr	BASEPRI, r0
   175c2:	f04f 0003 	mov.w	r0, #3
   175c6:	df02      	svc	2
   175c8:	e794      	b.n	174f4 <preempt+0x3c>
   175ca:	bf00      	nop
   175cc:	200017fc 	.word	0x200017fc
   175d0:	0002269c 	.word	0x0002269c
   175d4:	0002270c 	.word	0x0002270c
   175d8:	00021ce0 	.word	0x00021ce0
   175dc:	00021f64 	.word	0x00021f64

000175e0 <ticker_start_op_cb>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   175e0:	2801      	cmp	r0, #1
   175e2:	d800      	bhi.n	175e6 <ticker_start_op_cb+0x6>
   175e4:	4770      	bx	lr
{
   175e6:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   175e8:	4a06      	ldr	r2, [pc, #24]	; (17604 <ticker_start_op_cb+0x24>)
   175ea:	4907      	ldr	r1, [pc, #28]	; (17608 <ticker_start_op_cb+0x28>)
   175ec:	4807      	ldr	r0, [pc, #28]	; (1760c <ticker_start_op_cb+0x2c>)
   175ee:	f240 2349 	movw	r3, #585	; 0x249
   175f2:	f004 ff0b 	bl	1c40c <printk>
   175f6:	4040      	eors	r0, r0
   175f8:	f380 8811 	msr	BASEPRI, r0
   175fc:	f04f 0003 	mov.w	r0, #3
   17600:	df02      	svc	2
}
   17602:	bd08      	pop	{r3, pc}
   17604:	0002269c 	.word	0x0002269c
   17608:	00022718 	.word	0x00022718
   1760c:	00021ce0 	.word	0x00021ce0

00017610 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17610:	2200      	movs	r2, #0
{
   17612:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17614:	4611      	mov	r1, r2
   17616:	4b0a      	ldr	r3, [pc, #40]	; (17640 <preempt_ticker_cb+0x30>)
   17618:	2001      	movs	r0, #1
   1761a:	f7f7 fadd 	bl	ebd8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1761e:	b900      	cbnz	r0, 17622 <preempt_ticker_cb+0x12>
}
   17620:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   17622:	4a08      	ldr	r2, [pc, #32]	; (17644 <preempt_ticker_cb+0x34>)
   17624:	4908      	ldr	r1, [pc, #32]	; (17648 <preempt_ticker_cb+0x38>)
   17626:	4809      	ldr	r0, [pc, #36]	; (1764c <preempt_ticker_cb+0x3c>)
   17628:	f240 2356 	movw	r3, #598	; 0x256
   1762c:	f004 feee 	bl	1c40c <printk>
   17630:	4040      	eors	r0, r0
   17632:	f380 8811 	msr	BASEPRI, r0
   17636:	f04f 0003 	mov.w	r0, #3
   1763a:	df02      	svc	2
}
   1763c:	bd08      	pop	{r3, pc}
   1763e:	bf00      	nop
   17640:	20005e40 	.word	0x20005e40
   17644:	0002269c 	.word	0x0002269c
   17648:	00021f64 	.word	0x00021f64
   1764c:	00021ce0 	.word	0x00021ce0

00017650 <lll_init>:
{
   17650:	b538      	push	{r3, r4, r5, lr}
   17652:	4818      	ldr	r0, [pc, #96]	; (176b4 <lll_init+0x64>)
   17654:	f003 f9c6 	bl	1a9e4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   17658:	4b17      	ldr	r3, [pc, #92]	; (176b8 <lll_init+0x68>)
   1765a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1765c:	b338      	cbz	r0, 176ae <lll_init+0x5e>
	event.curr.abort_cb = NULL;
   1765e:	4b17      	ldr	r3, [pc, #92]	; (176bc <lll_init+0x6c>)
   17660:	2400      	movs	r4, #0
   17662:	609c      	str	r4, [r3, #8]
   17664:	4816      	ldr	r0, [pc, #88]	; (176c0 <lll_init+0x70>)
   17666:	f003 f9bd 	bl	1a9e4 <z_impl_device_get_binding>
	if (!clk) {
   1766a:	4605      	mov	r5, r0
   1766c:	b1f8      	cbz	r0, 176ae <lll_init+0x5e>
   1766e:	6843      	ldr	r3, [r0, #4]
   17670:	2101      	movs	r1, #1
   17672:	681b      	ldr	r3, [r3, #0]
   17674:	4798      	blx	r3
	lll.clk = clk;
   17676:	4b13      	ldr	r3, [pc, #76]	; (176c4 <lll_init+0x74>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   17678:	4622      	mov	r2, r4
   1767a:	4621      	mov	r1, r4
   1767c:	2001      	movs	r0, #1
	lll.clk = clk;
   1767e:	601d      	str	r5, [r3, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   17680:	f7ee fa2c 	bl	5adc <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   17684:	4622      	mov	r2, r4
   17686:	4621      	mov	r1, r4
   17688:	200b      	movs	r0, #11
   1768a:	f7ee fa27 	bl	5adc <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1768e:	4622      	mov	r2, r4
   17690:	4621      	mov	r1, r4
   17692:	2018      	movs	r0, #24
   17694:	f7ee fa22 	bl	5adc <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   17698:	2001      	movs	r0, #1
   1769a:	f7ee f9ed 	bl	5a78 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1769e:	200b      	movs	r0, #11
   176a0:	f7ee f9ea 	bl	5a78 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   176a4:	2018      	movs	r0, #24
   176a6:	f7ee f9e7 	bl	5a78 <arch_irq_enable>
	return 0;
   176aa:	4620      	mov	r0, r4
}
   176ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   176ae:	f06f 0012 	mvn.w	r0, #18
}
   176b2:	bd38      	pop	{r3, r4, r5, pc}
   176b4:	00021c7c 	.word	0x00021c7c
   176b8:	200017f8 	.word	0x200017f8
   176bc:	200017fc 	.word	0x200017fc
   176c0:	00022738 	.word	0x00022738
   176c4:	20001810 	.word	0x20001810

000176c8 <lll_entropy_get>:
	return entropy_get_entropy_isr(dev_entropy, rand, len, 0);
   176c8:	4b06      	ldr	r3, [pc, #24]	; (176e4 <lll_entropy_get+0x1c>)
   176ca:	681b      	ldr	r3, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   176cc:	685a      	ldr	r2, [r3, #4]
{
   176ce:	b510      	push	{r4, lr}
   176d0:	6854      	ldr	r4, [r2, #4]
   176d2:	b12c      	cbz	r4, 176e0 <lll_entropy_get+0x18>
	return api->get_entropy_isr(dev, buffer, length, flags);
   176d4:	4602      	mov	r2, r0
   176d6:	4618      	mov	r0, r3
   176d8:	2300      	movs	r3, #0
   176da:	47a0      	blx	r4
   176dc:	b2c0      	uxtb	r0, r0
}
   176de:	bd10      	pop	{r4, pc}
   176e0:	20dd      	movs	r0, #221	; 0xdd
   176e2:	bd10      	pop	{r4, pc}
   176e4:	200017f8 	.word	0x200017f8

000176e8 <lll_reset>:
}
   176e8:	2000      	movs	r0, #0
   176ea:	4770      	bx	lr

000176ec <lll_prepare>:
{
   176ec:	b510      	push	{r4, lr}
   176ee:	b082      	sub	sp, #8
   176f0:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   176f2:	9400      	str	r4, [sp, #0]
   176f4:	2400      	movs	r4, #0
   176f6:	9401      	str	r4, [sp, #4]
   176f8:	f7ff fe2e 	bl	17358 <prepare>
}
   176fc:	b002      	add	sp, #8
   176fe:	bd10      	pop	{r4, pc}

00017700 <lll_resume>:
{
   17700:	b510      	push	{r4, lr}
   17702:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   17704:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   17706:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1770a:	69c3      	ldr	r3, [r0, #28]
   1770c:	6902      	ldr	r2, [r0, #16]
   1770e:	f004 0401 	and.w	r4, r4, #1
   17712:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   17716:	9401      	str	r4, [sp, #4]
   17718:	f7ff fe1e 	bl	17358 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1771c:	b108      	cbz	r0, 17722 <lll_resume+0x22>
   1771e:	3044      	adds	r0, #68	; 0x44
   17720:	d101      	bne.n	17726 <lll_resume+0x26>
}
   17722:	b002      	add	sp, #8
   17724:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17726:	4a07      	ldr	r2, [pc, #28]	; (17744 <lll_resume+0x44>)
   17728:	4907      	ldr	r1, [pc, #28]	; (17748 <lll_resume+0x48>)
   1772a:	4808      	ldr	r0, [pc, #32]	; (1774c <lll_resume+0x4c>)
   1772c:	23da      	movs	r3, #218	; 0xda
   1772e:	f004 fe6d 	bl	1c40c <printk>
   17732:	4040      	eors	r0, r0
   17734:	f380 8811 	msr	BASEPRI, r0
   17738:	f04f 0003 	mov.w	r0, #3
   1773c:	df02      	svc	2
}
   1773e:	b002      	add	sp, #8
   17740:	bd10      	pop	{r4, pc}
   17742:	bf00      	nop
   17744:	0002269c 	.word	0x0002269c
   17748:	00022740 	.word	0x00022740
   1774c:	00021ce0 	.word	0x00021ce0

00017750 <lll_disable>:
{
   17750:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   17752:	4604      	mov	r4, r0
{
   17754:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   17756:	2800      	cmp	r0, #0
   17758:	d035      	beq.n	177c6 <lll_disable+0x76>
   1775a:	4b26      	ldr	r3, [pc, #152]	; (177f4 <lll_disable+0xa4>)
   1775c:	681a      	ldr	r2, [r3, #0]
   1775e:	4282      	cmp	r2, r0
   17760:	d02b      	beq.n	177ba <lll_disable+0x6a>
		u8_t idx = UINT8_MAX;
   17762:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   17764:	f10d 0007 	add.w	r0, sp, #7
		u8_t idx = UINT8_MAX;
   17768:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1776c:	f7fa ffb2 	bl	126d4 <ull_prepare_dequeue_iter>
		while (next) {
   17770:	4603      	mov	r3, r0
   17772:	b940      	cbnz	r0, 17786 <lll_disable+0x36>
   17774:	e01f      	b.n	177b6 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   17776:	4294      	cmp	r4, r2
   17778:	d00e      	beq.n	17798 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   1777a:	f10d 0007 	add.w	r0, sp, #7
   1777e:	f7fa ffa9 	bl	126d4 <ull_prepare_dequeue_iter>
		while (next) {
   17782:	4603      	mov	r3, r0
   17784:	b1b8      	cbz	r0, 177b6 <lll_disable+0x66>
			if (!next->is_aborted &&
   17786:	f893 2020 	ldrb.w	r2, [r3, #32]
   1778a:	0792      	lsls	r2, r2, #30
   1778c:	d4f5      	bmi.n	1777a <lll_disable+0x2a>
				next->is_aborted = 1;
   1778e:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   17790:	4618      	mov	r0, r3
   17792:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   17794:	2c00      	cmp	r4, #0
   17796:	d1ee      	bne.n	17776 <lll_disable+0x26>
				next->is_aborted = 1;
   17798:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   1779c:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   1779e:	f042 0202 	orr.w	r2, r2, #2
   177a2:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   177a6:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   177a8:	f10d 0007 	add.w	r0, sp, #7
   177ac:	f7fa ff92 	bl	126d4 <ull_prepare_dequeue_iter>
		while (next) {
   177b0:	4603      	mov	r3, r0
   177b2:	2800      	cmp	r0, #0
   177b4:	d1e7      	bne.n	17786 <lll_disable+0x36>
}
   177b6:	b003      	add	sp, #12
   177b8:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   177ba:	689b      	ldr	r3, [r3, #8]
   177bc:	b16b      	cbz	r3, 177da <lll_disable+0x8a>
   177be:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   177c0:	2000      	movs	r0, #0
   177c2:	4798      	blx	r3
   177c4:	e7cd      	b.n	17762 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   177c6:	4a0b      	ldr	r2, [pc, #44]	; (177f4 <lll_disable+0xa4>)
   177c8:	6893      	ldr	r3, [r2, #8]
   177ca:	2b00      	cmp	r3, #0
   177cc:	d0c9      	beq.n	17762 <lll_disable+0x12>
   177ce:	6811      	ldr	r1, [r2, #0]
   177d0:	2900      	cmp	r1, #0
   177d2:	d0c6      	beq.n	17762 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   177d4:	2000      	movs	r0, #0
   177d6:	4798      	blx	r3
   177d8:	e7c3      	b.n	17762 <lll_disable+0x12>
			LL_ASSERT(!param);
   177da:	4a07      	ldr	r2, [pc, #28]	; (177f8 <lll_disable+0xa8>)
   177dc:	4907      	ldr	r1, [pc, #28]	; (177fc <lll_disable+0xac>)
   177de:	4808      	ldr	r0, [pc, #32]	; (17800 <lll_disable+0xb0>)
   177e0:	23e4      	movs	r3, #228	; 0xe4
   177e2:	f004 fe13 	bl	1c40c <printk>
   177e6:	4040      	eors	r0, r0
   177e8:	f380 8811 	msr	BASEPRI, r0
   177ec:	f04f 0003 	mov.w	r0, #3
   177f0:	df02      	svc	2
   177f2:	e7b6      	b.n	17762 <lll_disable+0x12>
   177f4:	200017fc 	.word	0x200017fc
   177f8:	0002269c 	.word	0x0002269c
   177fc:	00022754 	.word	0x00022754
   17800:	00021ce0 	.word	0x00021ce0

00017804 <lll_prepare_done>:
}
   17804:	2000      	movs	r0, #0
   17806:	4770      	bx	lr

00017808 <lll_done>:
{
   17808:	b510      	push	{r4, lr}
   1780a:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   1780c:	f7fa ff54 	bl	126b8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   17810:	b13c      	cbz	r4, 17822 <lll_done+0x1a>
   17812:	b320      	cbz	r0, 1785e <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   17814:	6820      	ldr	r0, [r4, #0]
   17816:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   17818:	f7fa ff8a 	bl	12730 <ull_event_done>
	LL_ASSERT(evdone);
   1781c:	b180      	cbz	r0, 17840 <lll_done+0x38>
}
   1781e:	2000      	movs	r0, #0
   17820:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   17822:	4c1d      	ldr	r4, [pc, #116]	; (17898 <lll_done+0x90>)
   17824:	68a3      	ldr	r3, [r4, #8]
   17826:	b343      	cbz	r3, 1787a <lll_done+0x72>
		param = event.curr.param;
   17828:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1782a:	2300      	movs	r3, #0
   1782c:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1782e:	6023      	str	r3, [r4, #0]
		if (param) {
   17830:	2800      	cmp	r0, #0
   17832:	d0f1      	beq.n	17818 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   17834:	6800      	ldr	r0, [r0, #0]
   17836:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   17838:	f7fa ff7a 	bl	12730 <ull_event_done>
	LL_ASSERT(evdone);
   1783c:	2800      	cmp	r0, #0
   1783e:	d1ee      	bne.n	1781e <lll_done+0x16>
   17840:	4a16      	ldr	r2, [pc, #88]	; (1789c <lll_done+0x94>)
   17842:	4917      	ldr	r1, [pc, #92]	; (178a0 <lll_done+0x98>)
   17844:	4817      	ldr	r0, [pc, #92]	; (178a4 <lll_done+0x9c>)
   17846:	f44f 7398 	mov.w	r3, #304	; 0x130
   1784a:	f004 fddf 	bl	1c40c <printk>
   1784e:	4040      	eors	r0, r0
   17850:	f380 8811 	msr	BASEPRI, r0
   17854:	f04f 0003 	mov.w	r0, #3
   17858:	df02      	svc	2
}
   1785a:	2000      	movs	r0, #0
   1785c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1785e:	4a0f      	ldr	r2, [pc, #60]	; (1789c <lll_done+0x94>)
   17860:	4911      	ldr	r1, [pc, #68]	; (178a8 <lll_done+0xa0>)
   17862:	4810      	ldr	r0, [pc, #64]	; (178a4 <lll_done+0x9c>)
   17864:	f240 1313 	movw	r3, #275	; 0x113
   17868:	f004 fdd0 	bl	1c40c <printk>
   1786c:	4040      	eors	r0, r0
   1786e:	f380 8811 	msr	BASEPRI, r0
   17872:	f04f 0003 	mov.w	r0, #3
   17876:	df02      	svc	2
   17878:	e7cc      	b.n	17814 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1787a:	4a08      	ldr	r2, [pc, #32]	; (1789c <lll_done+0x94>)
   1787c:	490b      	ldr	r1, [pc, #44]	; (178ac <lll_done+0xa4>)
   1787e:	4809      	ldr	r0, [pc, #36]	; (178a4 <lll_done+0x9c>)
   17880:	f44f 738c 	mov.w	r3, #280	; 0x118
   17884:	f004 fdc2 	bl	1c40c <printk>
   17888:	4040      	eors	r0, r0
   1788a:	f380 8811 	msr	BASEPRI, r0
   1788e:	f04f 0003 	mov.w	r0, #3
   17892:	df02      	svc	2
   17894:	e7c8      	b.n	17828 <lll_done+0x20>
   17896:	bf00      	nop
   17898:	200017fc 	.word	0x200017fc
   1789c:	0002269c 	.word	0x0002269c
   178a0:	00022780 	.word	0x00022780
   178a4:	00021ce0 	.word	0x00021ce0
   178a8:	0002275c 	.word	0x0002275c
   178ac:	0002276c 	.word	0x0002276c

000178b0 <lll_clk_on>:
	err = clock_control_on(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
   178b0:	4b02      	ldr	r3, [pc, #8]	; (178bc <lll_clk_on+0xc>)
   178b2:	6818      	ldr	r0, [r3, #0]
   178b4:	6843      	ldr	r3, [r0, #4]
   178b6:	2100      	movs	r1, #0
   178b8:	681b      	ldr	r3, [r3, #0]
   178ba:	4718      	bx	r3
   178bc:	20001810 	.word	0x20001810

000178c0 <lll_clk_off>:
	err = clock_control_off(lll.clk, CLOCK_CONTROL_NRF_SUBSYS_HF);
   178c0:	4b02      	ldr	r3, [pc, #8]	; (178cc <lll_clk_off+0xc>)
   178c2:	6818      	ldr	r0, [r3, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
   178c4:	6843      	ldr	r3, [r0, #4]
   178c6:	2100      	movs	r1, #0
   178c8:	685b      	ldr	r3, [r3, #4]
   178ca:	4718      	bx	r3
   178cc:	20001810 	.word	0x20001810

000178d0 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   178d0:	e9d0 2300 	ldrd	r2, r3, [r0]
   178d4:	2a00      	cmp	r2, #0
   178d6:	db04      	blt.n	178e2 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   178d8:	429a      	cmp	r2, r3
   178da:	bf38      	it	cc
   178dc:	461a      	movcc	r2, r3
   178de:	4610      	mov	r0, r2
}
   178e0:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   178e2:	6880      	ldr	r0, [r0, #8]
   178e4:	4298      	cmp	r0, r3
   178e6:	bf38      	it	cc
   178e8:	4618      	movcc	r0, r3
   178ea:	4770      	bx	lr

000178ec <lll_preempt_calc>:
{
   178ec:	b510      	push	{r4, lr}
   178ee:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
   178f0:	f7f8 f9ae 	bl	fc50 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   178f4:	4621      	mov	r1, r4
   178f6:	f7f8 f9ad 	bl	fc54 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   178fa:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   178fc:	0203      	lsls	r3, r0, #8
   178fe:	d404      	bmi.n	1790a <lll_preempt_calc+0x1e>
   17900:	2809      	cmp	r0, #9
   17902:	bf94      	ite	ls
   17904:	2000      	movls	r0, #0
   17906:	2001      	movhi	r0, #1
}
   17908:	bd10      	pop	{r4, pc}
	return 0;
   1790a:	2000      	movs	r0, #0
}
   1790c:	bd10      	pop	{r4, pc}
   1790e:	bf00      	nop

00017910 <lll_chan_set>:
	switch (chan) {
   17910:	2826      	cmp	r0, #38	; 0x26
{
   17912:	b510      	push	{r4, lr}
   17914:	4604      	mov	r4, r0
	switch (chan) {
   17916:	d01c      	beq.n	17952 <lll_chan_set+0x42>
   17918:	2827      	cmp	r0, #39	; 0x27
   1791a:	d012      	beq.n	17942 <lll_chan_set+0x32>
   1791c:	2825      	cmp	r0, #37	; 0x25
   1791e:	d008      	beq.n	17932 <lll_chan_set+0x22>
		if (chan < 11) {
   17920:	280a      	cmp	r0, #10
   17922:	d91e      	bls.n	17962 <lll_chan_set+0x52>
		} else if (chan < 40) {
   17924:	2827      	cmp	r0, #39	; 0x27
   17926:	d821      	bhi.n	1796c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   17928:	3003      	adds	r0, #3
   1792a:	0040      	lsls	r0, r0, #1
   1792c:	f001 fc48 	bl	191c0 <radio_freq_chan_set>
   17930:	e002      	b.n	17938 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   17932:	2002      	movs	r0, #2
   17934:	f001 fc44 	bl	191c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17938:	4620      	mov	r0, r4
}
   1793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1793e:	f001 bc45 	b.w	191cc <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   17942:	2050      	movs	r0, #80	; 0x50
   17944:	f001 fc3c 	bl	191c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17948:	4620      	mov	r0, r4
}
   1794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1794e:	f001 bc3d 	b.w	191cc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   17952:	201a      	movs	r0, #26
   17954:	f001 fc34 	bl	191c0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17958:	4620      	mov	r0, r4
}
   1795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1795e:	f001 bc35 	b.w	191cc <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   17962:	3002      	adds	r0, #2
   17964:	0040      	lsls	r0, r0, #1
   17966:	f001 fc2b 	bl	191c0 <radio_freq_chan_set>
   1796a:	e7e5      	b.n	17938 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1796c:	4a06      	ldr	r2, [pc, #24]	; (17988 <lll_chan_set+0x78>)
   1796e:	4907      	ldr	r1, [pc, #28]	; (1798c <lll_chan_set+0x7c>)
   17970:	4807      	ldr	r0, [pc, #28]	; (17990 <lll_chan_set+0x80>)
   17972:	f240 13a1 	movw	r3, #417	; 0x1a1
   17976:	f004 fd49 	bl	1c40c <printk>
   1797a:	4040      	eors	r0, r0
   1797c:	f380 8811 	msr	BASEPRI, r0
   17980:	f04f 0003 	mov.w	r0, #3
   17984:	df02      	svc	2
   17986:	e7d7      	b.n	17938 <lll_chan_set+0x28>
   17988:	0002269c 	.word	0x0002269c
   1798c:	00021c84 	.word	0x00021c84
   17990:	00021ce0 	.word	0x00021ce0

00017994 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   17994:	f001 bcb8 	b.w	19308 <radio_status_reset>

00017998 <isr_cleanup>:
{
   17998:	b508      	push	{r3, lr}
   1799a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1799c:	4813      	ldr	r0, [pc, #76]	; (179ec <isr_cleanup+0x54>)
   1799e:	f001 fb97 	bl	190d0 <radio_isr_set>
	if (!radio_is_idle()) {
   179a2:	f001 fcd1 	bl	19348 <radio_is_idle>
   179a6:	b1e8      	cbz	r0, 179e4 <isr_cleanup+0x4c>
	radio_tmr_stop();
   179a8:	f001 fdfc 	bl	195a4 <radio_tmr_stop>
	err = lll_clk_off();
   179ac:	f7ff ff88 	bl	178c0 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   179b0:	b108      	cbz	r0, 179b6 <isr_cleanup+0x1e>
   179b2:	3010      	adds	r0, #16
   179b4:	d104      	bne.n	179c0 <isr_cleanup+0x28>
}
   179b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   179ba:	2000      	movs	r0, #0
   179bc:	f7ff bf24 	b.w	17808 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   179c0:	4a0b      	ldr	r2, [pc, #44]	; (179f0 <isr_cleanup+0x58>)
   179c2:	490c      	ldr	r1, [pc, #48]	; (179f4 <isr_cleanup+0x5c>)
   179c4:	480c      	ldr	r0, [pc, #48]	; (179f8 <isr_cleanup+0x60>)
   179c6:	f44f 7312 	mov.w	r3, #584	; 0x248
   179ca:	f004 fd1f 	bl	1c40c <printk>
   179ce:	4040      	eors	r0, r0
   179d0:	f380 8811 	msr	BASEPRI, r0
   179d4:	f04f 0003 	mov.w	r0, #3
   179d8:	df02      	svc	2
	lll_done(NULL);
   179da:	2000      	movs	r0, #0
}
   179dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   179e0:	f7ff bf12 	b.w	17808 <lll_done>
		radio_disable();
   179e4:	f001 fc78 	bl	192d8 <radio_disable>
   179e8:	e7de      	b.n	179a8 <isr_cleanup+0x10>
   179ea:	bf00      	nop
   179ec:	00017995 	.word	0x00017995
   179f0:	00022794 	.word	0x00022794
   179f4:	000227e0 	.word	0x000227e0
   179f8:	00021ce0 	.word	0x00021ce0

000179fc <isr_abort>:
{
   179fc:	b510      	push	{r4, lr}
   179fe:	4604      	mov	r4, r0
	radio_status_reset();
   17a00:	f001 fc82 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   17a04:	f001 fd40 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17a08:	f001 fd26 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   17a0c:	f001 ff0c 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17a10:	f001 fcea 	bl	193e8 <radio_rssi_status_reset>
	radio_filter_disable();
   17a14:	f001 fd16 	bl	19444 <radio_filter_disable>
	isr_cleanup(param);
   17a18:	4620      	mov	r0, r4
}
   17a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   17a1e:	f7ff bfbb 	b.w	17998 <isr_cleanup>
   17a22:	bf00      	nop

00017a24 <isr_tx>:
{
   17a24:	b530      	push	{r4, r5, lr}
   17a26:	b083      	sub	sp, #12
   17a28:	4604      	mov	r4, r0
	radio_status_reset();
   17a2a:	f001 fc6d 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   17a2e:	f001 fd2b 	bl	19488 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17a32:	2096      	movs	r0, #150	; 0x96
   17a34:	f001 fd38 	bl	194a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   17a38:	2300      	movs	r3, #0
   17a3a:	461a      	mov	r2, r3
   17a3c:	4619      	mov	r1, r3
   17a3e:	4618      	mov	r0, r3
   17a40:	f001 fcb8 	bl	193b4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   17a44:	f001 fca4 	bl	19390 <radio_pkt_scratch_get>
   17a48:	f001 fc22 	bl	19290 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   17a4c:	f001 fc68 	bl	19320 <radio_is_ready>
   17a50:	b9d8      	cbnz	r0, 17a8a <isr_tx+0x66>
	radio_isr_set(isr_rx, param);
   17a52:	481d      	ldr	r0, [pc, #116]	; (17ac8 <isr_tx+0xa4>)
   17a54:	4621      	mov	r1, r4
   17a56:	f001 fb3b 	bl	190d0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17a5a:	f7ff fc4b 	bl	172f4 <ull_filter_lll_rl_enabled>
   17a5e:	bb48      	cbnz	r0, 17ab4 <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17a60:	f001 fdfc 	bl	1965c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   17a64:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17a66:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   17a68:	4608      	mov	r0, r1
   17a6a:	f001 fc21 	bl	192b0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   17a6e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   17a70:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   17a72:	4608      	mov	r0, r1
   17a74:	f001 fc18 	bl	192a8 <radio_tx_chain_delay_get>
   17a78:	442c      	add	r4, r5
   17a7a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   17a7c:	1a20      	subs	r0, r4, r0
   17a7e:	f001 fda5 	bl	195cc <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   17a82:	f001 fddd 	bl	19640 <radio_tmr_end_capture>
}
   17a86:	b003      	add	sp, #12
   17a88:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   17a8a:	4a10      	ldr	r2, [pc, #64]	; (17acc <isr_tx+0xa8>)
   17a8c:	4910      	ldr	r1, [pc, #64]	; (17ad0 <isr_tx+0xac>)
   17a8e:	4811      	ldr	r0, [pc, #68]	; (17ad4 <isr_tx+0xb0>)
   17a90:	f44f 73ab 	mov.w	r3, #342	; 0x156
   17a94:	f004 fcba 	bl	1c40c <printk>
   17a98:	4040      	eors	r0, r0
   17a9a:	f380 8811 	msr	BASEPRI, r0
   17a9e:	f04f 0003 	mov.w	r0, #3
   17aa2:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   17aa4:	4808      	ldr	r0, [pc, #32]	; (17ac8 <isr_tx+0xa4>)
   17aa6:	4621      	mov	r1, r4
   17aa8:	f001 fb12 	bl	190d0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17aac:	f7ff fc22 	bl	172f4 <ull_filter_lll_rl_enabled>
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d0d5      	beq.n	17a60 <isr_tx+0x3c>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
   17ab4:	f10d 0007 	add.w	r0, sp, #7
   17ab8:	f7ff fb46 	bl	17148 <ull_filter_lll_irks_get>
   17abc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   17abe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17ac2:	f001 fe77 	bl	197b4 <radio_ar_configure>
   17ac6:	e7cb      	b.n	17a60 <isr_tx+0x3c>
   17ac8:	00017e79 	.word	0x00017e79
   17acc:	00022794 	.word	0x00022794
   17ad0:	000227f4 	.word	0x000227f4
   17ad4:	00021ce0 	.word	0x00021ce0

00017ad8 <chan_prepare>:
}

static void chan_prepare(struct lll_adv *lll)
{
   17ad8:	b570      	push	{r4, r5, r6, lr}
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     u8_t *is_modified)
{
	u8_t first;

	first = pdu->first;
   17ada:	7bc2      	ldrb	r2, [r0, #15]
	if (first != pdu->last) {
   17adc:	7c01      	ldrb	r1, [r0, #16]
   17ade:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
   17ae2:	f890 6060 	ldrb.w	r6, [r0, #96]	; 0x60
   17ae6:	4291      	cmp	r1, r2
   17ae8:	4604      	mov	r4, r0
   17aea:	f100 050f 	add.w	r5, r0, #15
   17aee:	d056      	beq.n	17b9e <chan_prepare+0xc6>
		first += 1U;
   17af0:	3201      	adds	r2, #1
   17af2:	b2d2      	uxtb	r2, r2
		if (first == DOUBLE_BUFFER_SIZE) {
   17af4:	2a02      	cmp	r2, #2
   17af6:	d044      	beq.n	17b82 <chan_prepare+0xaa>
   17af8:	2027      	movs	r0, #39	; 0x27
   17afa:	2102      	movs	r1, #2
   17afc:	fb10 1002 	smlabb	r0, r0, r2, r1
	if (first != pdu->last) {
   17b00:	42b3      	cmp	r3, r6
		}
		pdu->first = first;
		*is_modified = 1U;
	}

	return (void *)pdu->pdu[first];
   17b02:	4405      	add	r5, r0
		pdu->first = first;
   17b04:	73e2      	strb	r2, [r4, #15]
	if (first != pdu->last) {
   17b06:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   17b0a:	d043      	beq.n	17b94 <chan_prepare+0xbc>
		first += 1U;
   17b0c:	3301      	adds	r3, #1
   17b0e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   17b10:	2b02      	cmp	r3, #2
   17b12:	d051      	beq.n	17bb8 <chan_prepare+0xe0>
   17b14:	2227      	movs	r2, #39	; 0x27
   17b16:	2102      	movs	r1, #2
   17b18:	fb12 1203 	smlabb	r2, r2, r3, r1
		pdu->first = first;
   17b1c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   17b20:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (upd) {
		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->scan_rsp.addr[0],
   17b22:	3002      	adds	r0, #2
   17b24:	2206      	movs	r2, #6
   17b26:	1ca9      	adds	r1, r5, #2
   17b28:	f006 fcde 	bl	1e4e8 <memcpy>
#else
	ARG_UNUSED(scan_pdu);
	ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

	radio_pkt_tx_set(pdu);
   17b2c:	4628      	mov	r0, r5
   17b2e:	f001 fbb5 	bl	1929c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   17b32:	782b      	ldrb	r3, [r5, #0]
   17b34:	f003 030f 	and.w	r3, r3, #15
   17b38:	2b02      	cmp	r3, #2
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		radio_isr_set(isr_tx, lll);
   17b3a:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   17b3c:	d03f      	beq.n	17bbe <chan_prepare+0xe6>
		radio_isr_set(isr_tx, lll);
   17b3e:	482b      	ldr	r0, [pc, #172]	; (17bec <chan_prepare+0x114>)
   17b40:	f001 fac6 	bl	190d0 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   17b44:	2096      	movs	r0, #150	; 0x96
   17b46:	f001 fcaf 	bl	194a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   17b4a:	2000      	movs	r0, #0
   17b4c:	f001 fc24 	bl	19398 <radio_switch_complete_and_rx>
	} else {
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	chan = find_lsb_set(lll->chan_map_curr);
   17b50:	7b23      	ldrb	r3, [r4, #12]
   17b52:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17b56:	2b00      	cmp	r3, #0
   17b58:	fa93 f0a3 	rbit	r0, r3
   17b5c:	fab0 f080 	clz	r0, r0
   17b60:	bf08      	it	eq
   17b62:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   17b66:	1c45      	adds	r5, r0, #1
   17b68:	d02f      	beq.n	17bca <chan_prepare+0xf2>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17b6a:	7b22      	ldrb	r2, [r4, #12]
   17b6c:	1e59      	subs	r1, r3, #1
   17b6e:	400b      	ands	r3, r1
   17b70:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   17b74:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17b78:	7322      	strb	r2, [r4, #12]
}
   17b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_chan_set(36 + chan);
   17b7e:	f7ff bec7 	b.w	17910 <lll_chan_set>
   17b82:	4610      	mov	r0, r2
	if (first != pdu->last) {
   17b84:	42b3      	cmp	r3, r6
			first = 0U;
   17b86:	f04f 0200 	mov.w	r2, #0
	return (void *)pdu->pdu[first];
   17b8a:	4405      	add	r5, r0
		pdu->first = first;
   17b8c:	73e2      	strb	r2, [r4, #15]
	if (first != pdu->last) {
   17b8e:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   17b92:	d1bb      	bne.n	17b0c <chan_prepare+0x34>
	return (void *)pdu->pdu[first];
   17b94:	2227      	movs	r2, #39	; 0x27
   17b96:	fb02 0003 	mla	r0, r2, r3, r0
   17b9a:	3002      	adds	r0, #2
	if (upd) {
   17b9c:	e7c1      	b.n	17b22 <chan_prepare+0x4a>
   17b9e:	2227      	movs	r2, #39	; 0x27
   17ba0:	fb02 5501 	mla	r5, r2, r1, r5
	if (first != pdu->last) {
   17ba4:	42b3      	cmp	r3, r6
	return (void *)pdu->pdu[first];
   17ba6:	f105 0502 	add.w	r5, r5, #2
	if (first != pdu->last) {
   17baa:	d0bf      	beq.n	17b2c <chan_prepare+0x54>
		first += 1U;
   17bac:	3301      	adds	r3, #1
   17bae:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   17bb0:	2b02      	cmp	r3, #2
   17bb2:	f100 005f 	add.w	r0, r0, #95	; 0x5f
   17bb6:	d1ad      	bne.n	17b14 <chan_prepare+0x3c>
   17bb8:	461a      	mov	r2, r3
			first = 0U;
   17bba:	2300      	movs	r3, #0
   17bbc:	e7ae      	b.n	17b1c <chan_prepare+0x44>
		radio_isr_set(isr_done, lll);
   17bbe:	480c      	ldr	r0, [pc, #48]	; (17bf0 <chan_prepare+0x118>)
   17bc0:	f001 fa86 	bl	190d0 <radio_isr_set>
		radio_switch_complete_and_disable();
   17bc4:	f001 fc02 	bl	193cc <radio_switch_complete_and_disable>
   17bc8:	e7c2      	b.n	17b50 <chan_prepare+0x78>
	LL_ASSERT(chan);
   17bca:	4a0a      	ldr	r2, [pc, #40]	; (17bf4 <chan_prepare+0x11c>)
   17bcc:	490a      	ldr	r1, [pc, #40]	; (17bf8 <chan_prepare+0x120>)
   17bce:	480b      	ldr	r0, [pc, #44]	; (17bfc <chan_prepare+0x124>)
   17bd0:	f44f 731e 	mov.w	r3, #632	; 0x278
   17bd4:	f004 fc1a 	bl	1c40c <printk>
   17bd8:	4040      	eors	r0, r0
   17bda:	f380 8811 	msr	BASEPRI, r0
   17bde:	f04f 0003 	mov.w	r0, #3
   17be2:	df02      	svc	2
   17be4:	7b23      	ldrb	r3, [r4, #12]
   17be6:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17bea:	e7be      	b.n	17b6a <chan_prepare+0x92>
   17bec:	00017a25 	.word	0x00017a25
   17bf0:	00017e25 	.word	0x00017e25
   17bf4:	00022794 	.word	0x00022794
   17bf8:	0002206c 	.word	0x0002206c
   17bfc:	00021ce0 	.word	0x00021ce0

00017c00 <prepare_cb>:
{
   17c00:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   17c02:	68c5      	ldr	r5, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17c04:	4b43      	ldr	r3, [pc, #268]	; (17d14 <prepare_cb+0x114>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   17c06:	792c      	ldrb	r4, [r5, #4]
{
   17c08:	b083      	sub	sp, #12
	if (lll_is_stop(lll)) {
   17c0a:	f014 0401 	ands.w	r4, r4, #1
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17c0e:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   17c10:	d153      	bne.n	17cba <prepare_cb+0xba>
	radio_reset();
   17c12:	4606      	mov	r6, r0
   17c14:	f001 fa7c 	bl	19110 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   17c18:	4620      	mov	r0, r4
   17c1a:	f001 facb 	bl	191b4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   17c1e:	4621      	mov	r1, r4
   17c20:	4620      	mov	r0, r4
   17c22:	f001 fa9b 	bl	1915c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   17c26:	4622      	mov	r2, r4
   17c28:	2125      	movs	r1, #37	; 0x25
   17c2a:	2008      	movs	r0, #8
   17c2c:	f001 fafa 	bl	19224 <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
   17c30:	a801      	add	r0, sp, #4
   17c32:	f001 fadd 	bl	191f0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   17c36:	4938      	ldr	r1, [pc, #224]	; (17d18 <prepare_cb+0x118>)
   17c38:	f240 605b 	movw	r0, #1627	; 0x65b
   17c3c:	f001 fb8e 	bl	1935c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   17c40:	7b2b      	ldrb	r3, [r5, #12]
   17c42:	f3c3 0242 	ubfx	r2, r3, #1, #3
   17c46:	f362 1306 	bfi	r3, r2, #4, #3
   17c4a:	732b      	strb	r3, [r5, #12]
	chan_prepare(lll);
   17c4c:	4628      	mov	r0, r5
   17c4e:	f7ff ff43 	bl	17ad8 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   17c52:	f7ff fb4f 	bl	172f4 <ull_filter_lll_rl_enabled>
   17c56:	bb18      	cbnz	r0, 17ca0 <prepare_cb+0xa0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   17c58:	7b6b      	ldrb	r3, [r5, #13]
   17c5a:	079b      	lsls	r3, r3, #30
   17c5c:	d158      	bne.n	17d10 <prepare_cb+0x110>
	evt = HDR_LLL2EVT(lll);
   17c5e:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   17c60:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   17c62:	4638      	mov	r0, r7
   17c64:	f7ff fe34 	bl	178d0 <lll_evt_offset_get>
   17c68:	4404      	add	r4, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   17c6a:	6872      	ldr	r2, [r6, #4]
   17c6c:	f104 0109 	add.w	r1, r4, #9
   17c70:	2001      	movs	r0, #1
   17c72:	f001 fc25 	bl	194c0 <radio_tmr_start>
	radio_tmr_end_capture();
   17c76:	f001 fce3 	bl	19640 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   17c7a:	4628      	mov	r0, r5
   17c7c:	f7fb f9c8 	bl	13010 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   17c80:	1c81      	adds	r1, r0, #2
   17c82:	4622      	mov	r2, r4
   17c84:	b2c9      	uxtb	r1, r1
   17c86:	4638      	mov	r0, r7
   17c88:	f7ff fe30 	bl	178ec <lll_preempt_calc>
   17c8c:	b360      	cbz	r0, 17ce8 <prepare_cb+0xe8>
		radio_isr_set(isr_abort, lll);
   17c8e:	4823      	ldr	r0, [pc, #140]	; (17d1c <prepare_cb+0x11c>)
   17c90:	4629      	mov	r1, r5
   17c92:	f001 fa1d 	bl	190d0 <radio_isr_set>
		radio_disable();
   17c96:	f001 fb1f 	bl	192d8 <radio_disable>
}
   17c9a:	2000      	movs	r0, #0
   17c9c:	b003      	add	sp, #12
   17c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   17ca0:	7b68      	ldrb	r0, [r5, #13]
   17ca2:	f010 0003 	ands.w	r0, r0, #3
   17ca6:	bf18      	it	ne
   17ca8:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   17caa:	f7ff fad9 	bl	17260 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   17cae:	7841      	ldrb	r1, [r0, #1]
   17cb0:	1c82      	adds	r2, r0, #2
   17cb2:	7800      	ldrb	r0, [r0, #0]
   17cb4:	f001 fbaa 	bl	1940c <radio_filter_configure>
   17cb8:	e7d1      	b.n	17c5e <prepare_cb+0x5e>
		err = lll_clk_off();
   17cba:	f7ff fe01 	bl	178c0 <lll_clk_off>
		LL_ASSERT(!err || err == -EBUSY);
   17cbe:	b168      	cbz	r0, 17cdc <prepare_cb+0xdc>
   17cc0:	3010      	adds	r0, #16
   17cc2:	d00b      	beq.n	17cdc <prepare_cb+0xdc>
   17cc4:	4a16      	ldr	r2, [pc, #88]	; (17d20 <prepare_cb+0x120>)
   17cc6:	4917      	ldr	r1, [pc, #92]	; (17d24 <prepare_cb+0x124>)
   17cc8:	4817      	ldr	r0, [pc, #92]	; (17d28 <prepare_cb+0x128>)
   17cca:	238a      	movs	r3, #138	; 0x8a
   17ccc:	f004 fb9e 	bl	1c40c <printk>
   17cd0:	4040      	eors	r0, r0
   17cd2:	f380 8811 	msr	BASEPRI, r0
   17cd6:	f04f 0003 	mov.w	r0, #3
   17cda:	df02      	svc	2
		lll_done(NULL);
   17cdc:	2000      	movs	r0, #0
   17cde:	f7ff fd93 	bl	17808 <lll_done>
}
   17ce2:	2000      	movs	r0, #0
   17ce4:	b003      	add	sp, #12
   17ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   17ce8:	4628      	mov	r0, r5
   17cea:	f7ff fd8b 	bl	17804 <lll_prepare_done>
		LL_ASSERT(!ret);
   17cee:	2800      	cmp	r0, #0
   17cf0:	d0d3      	beq.n	17c9a <prepare_cb+0x9a>
   17cf2:	4a0b      	ldr	r2, [pc, #44]	; (17d20 <prepare_cb+0x120>)
   17cf4:	490d      	ldr	r1, [pc, #52]	; (17d2c <prepare_cb+0x12c>)
   17cf6:	480c      	ldr	r0, [pc, #48]	; (17d28 <prepare_cb+0x128>)
   17cf8:	23e8      	movs	r3, #232	; 0xe8
   17cfa:	f004 fb87 	bl	1c40c <printk>
   17cfe:	4040      	eors	r0, r0
   17d00:	f380 8811 	msr	BASEPRI, r0
   17d04:	f04f 0003 	mov.w	r0, #3
   17d08:	df02      	svc	2
}
   17d0a:	2000      	movs	r0, #0
   17d0c:	b003      	add	sp, #12
   17d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   17d10:	2001      	movs	r0, #1
   17d12:	e7ca      	b.n	17caa <prepare_cb+0xaa>
   17d14:	8e89bed6 	.word	0x8e89bed6
   17d18:	00555555 	.word	0x00555555
   17d1c:	000179fd 	.word	0x000179fd
   17d20:	00022794 	.word	0x00022794
   17d24:	000227e0 	.word	0x000227e0
   17d28:	00021ce0 	.word	0x00021ce0
   17d2c:	00021f64 	.word	0x00021f64

00017d30 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   17d30:	68c3      	ldr	r3, [r0, #12]
{
   17d32:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   17d34:	681e      	ldr	r6, [r3, #0]
{
   17d36:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   17d38:	f7f7 ff8a 	bl	fc50 <ticker_ticks_now_get>
   17d3c:	4605      	mov	r5, r0
   17d3e:	4630      	mov	r0, r6
   17d40:	f7ff fdc6 	bl	178d0 <lll_evt_offset_get>
	p->remainder = 0;
   17d44:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   17d46:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   17d48:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   17d4c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   17d4e:	4620      	mov	r0, r4
}
   17d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   17d54:	f7ff bf54 	b.w	17c00 <prepare_cb>

00017d58 <is_abort_cb>:
	if (next != curr) {
   17d58:	4282      	cmp	r2, r0
{
   17d5a:	b508      	push	{r3, lr}
	if (next != curr) {
   17d5c:	d01f      	beq.n	17d9e <is_abort_cb+0x46>
		} else if (lll->is_hdcd) {
   17d5e:	7b12      	ldrb	r2, [r2, #12]
   17d60:	07d2      	lsls	r2, r2, #31
   17d62:	d402      	bmi.n	17d6a <is_abort_cb+0x12>
			return -ECANCELED;
   17d64:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   17d68:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   17d6a:	4a15      	ldr	r2, [pc, #84]	; (17dc0 <is_abort_cb+0x68>)
   17d6c:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   17d6e:	9a02      	ldr	r2, [sp, #8]
   17d70:	2300      	movs	r3, #0
   17d72:	6013      	str	r3, [r2, #0]
			err = lll_clk_on();
   17d74:	f7ff fd9c 	bl	178b0 <lll_clk_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
   17d78:	b1f0      	cbz	r0, 17db8 <is_abort_cb+0x60>
   17d7a:	3044      	adds	r0, #68	; 0x44
   17d7c:	d01c      	beq.n	17db8 <is_abort_cb+0x60>
   17d7e:	4a11      	ldr	r2, [pc, #68]	; (17dc4 <is_abort_cb+0x6c>)
   17d80:	4911      	ldr	r1, [pc, #68]	; (17dc8 <is_abort_cb+0x70>)
   17d82:	4812      	ldr	r0, [pc, #72]	; (17dcc <is_abort_cb+0x74>)
   17d84:	f44f 7389 	mov.w	r3, #274	; 0x112
   17d88:	f004 fb40 	bl	1c40c <printk>
   17d8c:	4040      	eors	r0, r0
   17d8e:	f380 8811 	msr	BASEPRI, r0
   17d92:	f04f 0003 	mov.w	r0, #3
   17d96:	df02      	svc	2
   17d98:	f06f 000a 	mvn.w	r0, #10
}
   17d9c:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   17d9e:	7bd3      	ldrb	r3, [r2, #15]
   17da0:	2127      	movs	r1, #39	; 0x27
   17da2:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17da6:	7c53      	ldrb	r3, [r2, #17]
   17da8:	f003 030f 	and.w	r3, r3, #15
   17dac:	2b01      	cmp	r3, #1
		return 0;
   17dae:	bf14      	ite	ne
   17db0:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   17db4:	2000      	moveq	r0, #0
}
   17db6:	bd08      	pop	{r3, pc}
   17db8:	f06f 000a 	mvn.w	r0, #10
   17dbc:	bd08      	pop	{r3, pc}
   17dbe:	bf00      	nop
   17dc0:	00017d31 	.word	0x00017d31
   17dc4:	00022794 	.word	0x00022794
   17dc8:	00022808 	.word	0x00022808
   17dcc:	00021ce0 	.word	0x00021ce0

00017dd0 <abort_cb>:
{
   17dd0:	b510      	push	{r4, lr}
	if (!prepare_param) {
   17dd2:	b1b8      	cbz	r0, 17e04 <abort_cb+0x34>
	err = lll_clk_off();
   17dd4:	460c      	mov	r4, r1
   17dd6:	f7ff fd73 	bl	178c0 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   17dda:	b170      	cbz	r0, 17dfa <abort_cb+0x2a>
   17ddc:	3010      	adds	r0, #16
   17dde:	d00c      	beq.n	17dfa <abort_cb+0x2a>
   17de0:	4a0c      	ldr	r2, [pc, #48]	; (17e14 <abort_cb+0x44>)
   17de2:	490d      	ldr	r1, [pc, #52]	; (17e18 <abort_cb+0x48>)
   17de4:	480d      	ldr	r0, [pc, #52]	; (17e1c <abort_cb+0x4c>)
   17de6:	f44f 739c 	mov.w	r3, #312	; 0x138
   17dea:	f004 fb0f 	bl	1c40c <printk>
   17dee:	4040      	eors	r0, r0
   17df0:	f380 8811 	msr	BASEPRI, r0
   17df4:	f04f 0003 	mov.w	r0, #3
   17df8:	df02      	svc	2
	lll_done(param);
   17dfa:	4620      	mov	r0, r4
}
   17dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17e00:	f7ff bd02 	b.w	17808 <lll_done>
		radio_isr_set(isr_abort, param);
   17e04:	4806      	ldr	r0, [pc, #24]	; (17e20 <abort_cb+0x50>)
   17e06:	f001 f963 	bl	190d0 <radio_isr_set>
}
   17e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   17e0e:	f001 ba63 	b.w	192d8 <radio_disable>
   17e12:	bf00      	nop
   17e14:	00022794 	.word	0x00022794
   17e18:	000227e0 	.word	0x000227e0
   17e1c:	00021ce0 	.word	0x00021ce0
   17e20:	000179fd 	.word	0x000179fd

00017e24 <isr_done>:
{
   17e24:	b510      	push	{r4, lr}
   17e26:	4604      	mov	r4, r0
	radio_status_reset();
   17e28:	f001 fa6e 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   17e2c:	f001 fb2c 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17e30:	f001 fb12 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   17e34:	f001 fcf8 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17e38:	f001 fad6 	bl	193e8 <radio_rssi_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   17e3c:	7b23      	ldrb	r3, [r4, #12]
   17e3e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   17e42:	2a01      	cmp	r2, #1
   17e44:	d105      	bne.n	17e52 <isr_done+0x2e>
		lll->chan_map_curr = lll->chan_map;
   17e46:	f3c3 0242 	ubfx	r2, r3, #1, #3
   17e4a:	f362 1306 	bfi	r3, r2, #4, #3
   17e4e:	7323      	strb	r3, [r4, #12]
   17e50:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   17e52:	f013 0f70 	tst.w	r3, #112	; 0x70
   17e56:	d106      	bne.n	17e66 <isr_done+0x42>
	radio_filter_disable();
   17e58:	f001 faf4 	bl	19444 <radio_filter_disable>
	isr_cleanup(param);
   17e5c:	4620      	mov	r0, r4
}
   17e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   17e62:	f7ff bd99 	b.w	17998 <isr_cleanup>
		chan_prepare(lll);
   17e66:	4620      	mov	r0, r4
   17e68:	f7ff fe36 	bl	17ad8 <chan_prepare>
		radio_tx_enable();
   17e6c:	f001 fa2e 	bl	192cc <radio_tx_enable>
}
   17e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   17e74:	f001 bbe4 	b.w	19640 <radio_tmr_end_capture>

00017e78 <isr_rx>:
{
   17e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e7c:	b083      	sub	sp, #12
   17e7e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   17e80:	f001 fa58 	bl	19334 <radio_is_done>
	if (trx_done) {
   17e84:	f010 0fff 	tst.w	r0, #255	; 0xff
   17e88:	d112      	bne.n	17eb0 <isr_rx+0x38>
	radio_status_reset();
   17e8a:	f001 fa3d 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   17e8e:	f001 fafb 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17e92:	f001 fae1 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   17e96:	f001 fcc7 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17e9a:	f001 faa5 	bl	193e8 <radio_rssi_status_reset>
	radio_isr_set(isr_done, param);
   17e9e:	48c6      	ldr	r0, [pc, #792]	; (181b8 <isr_rx+0x340>)
   17ea0:	4621      	mov	r1, r4
   17ea2:	f001 f915 	bl	190d0 <radio_isr_set>
	radio_disable();
   17ea6:	f001 fa17 	bl	192d8 <radio_disable>
}
   17eaa:	b003      	add	sp, #12
   17eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   17eb0:	f001 fa60 	bl	19374 <radio_crc_is_valid>
   17eb4:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   17eb6:	f001 fad7 	bl	19468 <radio_filter_has_match>
   17eba:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   17ebc:	f001 fade 	bl	1947c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   17ec0:	f001 fcbe 	bl	19840 <radio_ar_has_match>
   17ec4:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   17ec6:	f001 fca9 	bl	1981c <radio_ar_match_get>
   17eca:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   17ecc:	f001 fa94 	bl	193f8 <radio_rssi_is_ready>
	radio_status_reset();
   17ed0:	f001 fa1a 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   17ed4:	f001 fad8 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17ed8:	f001 fabe 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   17edc:	f001 fca4 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17ee0:	f001 fa82 	bl	193e8 <radio_rssi_status_reset>
	if (crc_ok) {
   17ee4:	f015 0fff 	tst.w	r5, #255	; 0xff
   17ee8:	d0d9      	beq.n	17e9e <isr_rx+0x26>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   17eea:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   17eee:	f040 808a 	bne.w	18006 <isr_rx+0x18e>
   17ef2:	20ff      	movs	r0, #255	; 0xff
   17ef4:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   17ef8:	f001 fa4a 	bl	19390 <radio_pkt_scratch_get>
   17efc:	4680      	mov	r8, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17efe:	7800      	ldrb	r0, [r0, #0]
   17f00:	7be1      	ldrb	r1, [r4, #15]
   17f02:	2527      	movs	r5, #39	; 0x27
   17f04:	2211      	movs	r2, #17
   17f06:	f000 030f 	and.w	r3, r0, #15
   17f0a:	fb15 2501 	smlabb	r5, r5, r1, r2
   17f0e:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
   17f10:	b2ff      	uxtb	r7, r7
   17f12:	eb04 0905 	add.w	r9, r4, r5
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17f16:	f000 808a 	beq.w	1802e <isr_rx+0x1b6>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17f1a:	2b05      	cmp	r3, #5
   17f1c:	d1bf      	bne.n	17e9e <isr_rx+0x26>
   17f1e:	f898 3001 	ldrb.w	r3, [r8, #1]
   17f22:	2b22      	cmp	r3, #34	; 0x22
   17f24:	d1bb      	bne.n	17e9e <isr_rx+0x26>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17f26:	5d63      	ldrb	r3, [r4, r5]
   17f28:	f003 030f 	and.w	r3, r3, #15
   17f2c:	2b01      	cmp	r3, #1
   17f2e:	f000 80cf 	beq.w	180d0 <isr_rx+0x258>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   17f32:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   17f34:	0799      	lsls	r1, r3, #30
   17f36:	d56b      	bpl.n	18010 <isr_rx+0x198>
		(((lll->filter_policy & 0x02) != 0) &&
   17f38:	2f00      	cmp	r7, #0
   17f3a:	f000 80c1 	beq.w	180c0 <isr_rx+0x248>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   17f3e:	5d63      	ldrb	r3, [r4, r5]
   17f40:	f898 1000 	ldrb.w	r1, [r8]
   17f44:	f3c3 1280 	ubfx	r2, r3, #6, #1
   17f48:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   17f4c:	d1a7      	bne.n	17e9e <isr_rx+0x26>
   17f4e:	f003 030f 	and.w	r3, r3, #15
   17f52:	2b01      	cmp	r3, #1
   17f54:	f109 0902 	add.w	r9, r9, #2
   17f58:	f108 0508 	add.w	r5, r8, #8
   17f5c:	f000 80e7 	beq.w	1812e <isr_rx+0x2b6>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   17f60:	4629      	mov	r1, r5
   17f62:	4648      	mov	r0, r9
   17f64:	2206      	movs	r2, #6
   17f66:	f006 faaf 	bl	1e4c8 <memcmp>
			 BDADDR_SIZE)) ||
   17f6a:	fab0 f080 	clz	r0, r0
   17f6e:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   17f70:	2800      	cmp	r0, #0
   17f72:	d094      	beq.n	17e9e <isr_rx+0x26>
				   &rl_idx) &&
   17f74:	68a3      	ldr	r3, [r4, #8]
   17f76:	2b00      	cmp	r3, #0
   17f78:	d091      	beq.n	17e9e <isr_rx+0x26>
			rx = ull_pdu_rx_alloc_peek(4);
   17f7a:	2004      	movs	r0, #4
   17f7c:	f7fa fb16 	bl	125ac <ull_pdu_rx_alloc_peek>
		if (!rx) {
   17f80:	2800      	cmp	r0, #0
   17f82:	d08c      	beq.n	17e9e <isr_rx+0x26>
		radio_isr_set(isr_abort, lll);
   17f84:	488d      	ldr	r0, [pc, #564]	; (181bc <isr_rx+0x344>)
   17f86:	4621      	mov	r1, r4
   17f88:	f001 f8a2 	bl	190d0 <radio_isr_set>
		radio_disable();
   17f8c:	f001 f9a4 	bl	192d8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   17f90:	f001 f9c6 	bl	19320 <radio_is_ready>
   17f94:	2800      	cmp	r0, #0
   17f96:	f040 8085 	bne.w	180a4 <isr_rx+0x22c>
	int ret = !!hdr->is_stop;
   17f9a:	7923      	ldrb	r3, [r4, #4]
	hdr->is_stop = 1U;
   17f9c:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   17fa0:	07db      	lsls	r3, r3, #31
   17fa2:	7122      	strb	r2, [r4, #4]
   17fa4:	d470      	bmi.n	18088 <isr_rx+0x210>
		rx = ull_pdu_rx_alloc();
   17fa6:	f7fa fb1f 	bl	125e8 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   17faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   17fae:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17fb0:	2208      	movs	r2, #8
		rx->hdr.handle = 0xffff;
   17fb2:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   17fb4:	4641      	mov	r1, r8
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17fb6:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   17fb8:	2224      	movs	r2, #36	; 0x24
   17fba:	3020      	adds	r0, #32
   17fbc:	f006 fa94 	bl	1e4e8 <memcpy>
		ftr->param = lll;
   17fc0:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   17fc2:	f001 fae9 	bl	19598 <radio_tmr_start_get>
   17fc6:	6128      	str	r0, [r5, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
   17fc8:	f001 fb42 	bl	19650 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   17fcc:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   17fce:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   17fd0:	4608      	mov	r0, r1
   17fd2:	f001 f969 	bl	192a8 <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   17fd6:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
   17fd8:	1a24      	subs	r4, r4, r0
   17fda:	616c      	str	r4, [r5, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
   17fdc:	4608      	mov	r0, r1
   17fde:	f001 f965 	bl	192ac <radio_rx_ready_delay_get>
   17fe2:	61a8      	str	r0, [r5, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   17fe4:	2e00      	cmp	r6, #0
   17fe6:	d04d      	beq.n	18084 <isr_rx+0x20c>
   17fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17fec:	776b      	strb	r3, [r5, #29]
			ftr->extra = ull_pdu_rx_alloc();
   17fee:	f7fa fafb 	bl	125e8 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   17ff2:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   17ff4:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   17ff6:	6828      	ldr	r0, [r5, #0]
   17ff8:	f7fa fb0e 	bl	12618 <ull_rx_put>
		ull_rx_sched();
   17ffc:	f7fa fb1c 	bl	12638 <ull_rx_sched>
}
   18000:	b003      	add	sp, #12
   18002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18006:	fa5f f088 	uxtb.w	r0, r8
   1800a:	f7ff f8a7 	bl	1715c <ull_filter_lll_rl_irk_idx>
   1800e:	e771      	b.n	17ef4 <isr_rx+0x7c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   18010:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18014:	f10d 0207 	add.w	r2, sp, #7
   18018:	f108 0102 	add.w	r1, r8, #2
   1801c:	f7ff f92c 	bl	17278 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   18020:	2800      	cmp	r0, #0
   18022:	d18c      	bne.n	17f3e <isr_rx+0xc6>
		(((lll->filter_policy & 0x02) != 0) &&
   18024:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   18026:	079a      	lsls	r2, r3, #30
   18028:	f57f af39 	bpl.w	17e9e <isr_rx+0x26>
   1802c:	e784      	b.n	17f38 <isr_rx+0xc0>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1802e:	f898 3001 	ldrb.w	r3, [r8, #1]
   18032:	2b0c      	cmp	r3, #12
   18034:	f47f af33 	bne.w	17e9e <isr_rx+0x26>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   18038:	5d63      	ldrb	r3, [r4, r5]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1803a:	f003 030f 	and.w	r3, r3, #15
   1803e:	2b01      	cmp	r3, #1
   18040:	f43f af2d 	beq.w	17e9e <isr_rx+0x26>
	return ((((lll->filter_policy & 0x01) == 0) &&
   18044:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18046:	07db      	lsls	r3, r3, #31
   18048:	d50c      	bpl.n	18064 <isr_rx+0x1ec>
		(((lll->filter_policy & 0x01) != 0) &&
   1804a:	2f00      	cmp	r7, #0
   1804c:	d078      	beq.n	18140 <isr_rx+0x2c8>
	return (adv->tx_addr == sr->rx_addr) &&
   1804e:	5d63      	ldrb	r3, [r4, r5]
   18050:	f898 0000 	ldrb.w	r0, [r8]
   18054:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18058:	ebb3 1fd0 	cmp.w	r3, r0, lsr #7
   1805c:	d077      	beq.n	1814e <isr_rx+0x2d6>
   1805e:	f000 030f 	and.w	r3, r0, #15
   18062:	e75a      	b.n	17f1a <isr_rx+0xa2>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   18064:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18068:	f10d 0207 	add.w	r2, sp, #7
   1806c:	f108 0102 	add.w	r1, r8, #2
   18070:	f7ff f902 	bl	17278 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   18074:	2800      	cmp	r0, #0
   18076:	d1ea      	bne.n	1804e <isr_rx+0x1d6>
		(((lll->filter_policy & 0x01) != 0) &&
   18078:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1807a:	07d8      	lsls	r0, r3, #31
   1807c:	d4e5      	bmi.n	1804a <isr_rx+0x1d2>
   1807e:	f898 0000 	ldrb.w	r0, [r8]
   18082:	e7ec      	b.n	1805e <isr_rx+0x1e6>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   18084:	23ff      	movs	r3, #255	; 0xff
   18086:	e7b1      	b.n	17fec <isr_rx+0x174>
		LL_ASSERT(!ret);
   18088:	4a4d      	ldr	r2, [pc, #308]	; (181c0 <isr_rx+0x348>)
   1808a:	494e      	ldr	r1, [pc, #312]	; (181c4 <isr_rx+0x34c>)
   1808c:	484e      	ldr	r0, [pc, #312]	; (181c8 <isr_rx+0x350>)
   1808e:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   18092:	f004 f9bb 	bl	1c40c <printk>
   18096:	4040      	eors	r0, r0
   18098:	f380 8811 	msr	BASEPRI, r0
   1809c:	f04f 0003 	mov.w	r0, #3
   180a0:	df02      	svc	2
   180a2:	e780      	b.n	17fa6 <isr_rx+0x12e>
		LL_ASSERT(!radio_is_ready());
   180a4:	4a46      	ldr	r2, [pc, #280]	; (181c0 <isr_rx+0x348>)
   180a6:	4949      	ldr	r1, [pc, #292]	; (181cc <isr_rx+0x354>)
   180a8:	4847      	ldr	r0, [pc, #284]	; (181c8 <isr_rx+0x350>)
   180aa:	f240 23d6 	movw	r3, #726	; 0x2d6
   180ae:	f004 f9ad 	bl	1c40c <printk>
   180b2:	4040      	eors	r0, r0
   180b4:	f380 8811 	msr	BASEPRI, r0
   180b8:	f04f 0003 	mov.w	r0, #3
   180bc:	df02      	svc	2
   180be:	e76c      	b.n	17f9a <isr_rx+0x122>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   180c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   180c4:	f7ff f89c 	bl	17200 <ull_filter_lll_irk_whitelisted>
   180c8:	2800      	cmp	r0, #0
   180ca:	f47f af38 	bne.w	17f3e <isr_rx+0xc6>
   180ce:	e6e6      	b.n	17e9e <isr_rx+0x26>
						      ci->connect_ind.init_addr,
   180d0:	f108 0702 	add.w	r7, r8, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   180d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   180d8:	4639      	mov	r1, r7
   180da:	f10d 0207 	add.w	r2, sp, #7
   180de:	f7ff f8cb 	bl	17278 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   180e2:	2800      	cmp	r0, #0
   180e4:	f43f aedb 	beq.w	17e9e <isr_rx+0x26>
	return (adv->tx_addr == ci->rx_addr) &&
   180e8:	5d63      	ldrb	r3, [r4, r5]
   180ea:	f898 1000 	ldrb.w	r1, [r8]
   180ee:	f3c3 1280 	ubfx	r2, r3, #6, #1
   180f2:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   180f6:	f47f aed2 	bne.w	17e9e <isr_rx+0x26>
   180fa:	f003 030f 	and.w	r3, r3, #15
   180fe:	2b01      	cmp	r3, #1
   18100:	f109 0b02 	add.w	fp, r9, #2
   18104:	f108 0a08 	add.w	sl, r8, #8
   18108:	d062      	beq.n	181d0 <isr_rx+0x358>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1810a:	4651      	mov	r1, sl
   1810c:	4658      	mov	r0, fp
   1810e:	2206      	movs	r2, #6
   18110:	f006 f9da 	bl	1e4c8 <memcmp>
			 BDADDR_SIZE)) ||
   18114:	2800      	cmp	r0, #0
   18116:	f47f aec2 	bne.w	17e9e <isr_rx+0x26>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   1811a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (rl_idx != FILTER_IDX_NONE) {
   1811e:	2bff      	cmp	r3, #255	; 0xff
   18120:	d03f      	beq.n	181a2 <isr_rx+0x32a>
		return rl_idx == lll->rl_idx;
   18122:	7ba0      	ldrb	r0, [r4, #14]
   18124:	1ac0      	subs	r0, r0, r3
   18126:	fab0 f080 	clz	r0, r0
   1812a:	0940      	lsrs	r0, r0, #5
   1812c:	e720      	b.n	17f70 <isr_rx+0xf8>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1812e:	2206      	movs	r2, #6
   18130:	4629      	mov	r1, r5
   18132:	4648      	mov	r0, r9
   18134:	f006 f9c8 	bl	1e4c8 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18138:	2800      	cmp	r0, #0
   1813a:	f43f af1b 	beq.w	17f74 <isr_rx+0xfc>
   1813e:	e70f      	b.n	17f60 <isr_rx+0xe8>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18140:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18144:	f7ff f85c 	bl	17200 <ull_filter_lll_irk_whitelisted>
   18148:	2800      	cmp	r0, #0
   1814a:	d180      	bne.n	1804e <isr_rx+0x1d6>
   1814c:	e797      	b.n	1807e <isr_rx+0x206>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1814e:	2206      	movs	r2, #6
   18150:	f108 0108 	add.w	r1, r8, #8
   18154:	f109 0002 	add.w	r0, r9, #2
   18158:	f006 f9b6 	bl	1e4c8 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   1815c:	2800      	cmp	r0, #0
   1815e:	d18e      	bne.n	1807e <isr_rx+0x206>
		radio_isr_set(isr_done, lll);
   18160:	4815      	ldr	r0, [pc, #84]	; (181b8 <isr_rx+0x340>)
   18162:	4621      	mov	r1, r4
   18164:	f000 ffb4 	bl	190d0 <radio_isr_set>
		radio_switch_complete_and_disable();
   18168:	f001 f930 	bl	193cc <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1816c:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   18170:	2327      	movs	r3, #39	; 0x27
   18172:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   18176:	3061      	adds	r0, #97	; 0x61
   18178:	f001 f890 	bl	1929c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1817c:	f001 f8d0 	bl	19320 <radio_is_ready>
   18180:	2800      	cmp	r0, #0
   18182:	f43f ae92 	beq.w	17eaa <isr_rx+0x32>
   18186:	4a0e      	ldr	r2, [pc, #56]	; (181c0 <isr_rx+0x348>)
   18188:	4910      	ldr	r1, [pc, #64]	; (181cc <isr_rx+0x354>)
   1818a:	480f      	ldr	r0, [pc, #60]	; (181c8 <isr_rx+0x350>)
   1818c:	f240 239a 	movw	r3, #666	; 0x29a
   18190:	f004 f93c 	bl	1c40c <printk>
   18194:	4040      	eors	r0, r0
   18196:	f380 8811 	msr	BASEPRI, r0
   1819a:	f04f 0003 	mov.w	r0, #3
   1819e:	df02      	svc	2
		if (!err) {
   181a0:	e683      	b.n	17eaa <isr_rx+0x32>
	return (adv->rx_addr == ci->tx_addr) &&
   181a2:	f898 3000 	ldrb.w	r3, [r8]
   181a6:	5d62      	ldrb	r2, [r4, r5]
   181a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   181ac:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   181b0:	d016      	beq.n	181e0 <isr_rx+0x368>
   181b2:	2000      	movs	r0, #0
		       isr_rx_ci_adva_check(adv, ci) &&
   181b4:	e6dc      	b.n	17f70 <isr_rx+0xf8>
   181b6:	bf00      	nop
   181b8:	00017e25 	.word	0x00017e25
   181bc:	000179fd 	.word	0x000179fd
   181c0:	00022794 	.word	0x00022794
   181c4:	00021f64 	.word	0x00021f64
   181c8:	00021ce0 	.word	0x00021ce0
   181cc:	000227f4 	.word	0x000227f4
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   181d0:	2206      	movs	r2, #6
   181d2:	4651      	mov	r1, sl
   181d4:	4658      	mov	r0, fp
   181d6:	f006 f977 	bl	1e4c8 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   181da:	2800      	cmp	r0, #0
   181dc:	d09d      	beq.n	1811a <isr_rx+0x2a2>
   181de:	e794      	b.n	1810a <isr_rx+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   181e0:	4639      	mov	r1, r7
   181e2:	f109 0008 	add.w	r0, r9, #8
   181e6:	2206      	movs	r2, #6
   181e8:	f006 f96e 	bl	1e4c8 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   181ec:	fab0 f080 	clz	r0, r0
   181f0:	0940      	lsrs	r0, r0, #5
   181f2:	e6bd      	b.n	17f70 <isr_rx+0xf8>

000181f4 <lll_adv_init>:
}
   181f4:	2000      	movs	r0, #0
   181f6:	4770      	bx	lr

000181f8 <lll_adv_reset>:
   181f8:	2000      	movs	r0, #0
   181fa:	4770      	bx	lr

000181fc <lll_adv_prepare>:
{
   181fc:	b510      	push	{r4, lr}
   181fe:	b082      	sub	sp, #8
   18200:	4604      	mov	r4, r0
	err = lll_clk_on();
   18202:	f7ff fb55 	bl	178b0 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18206:	b108      	cbz	r0, 1820c <lll_adv_prepare+0x10>
   18208:	3044      	adds	r0, #68	; 0x44
   1820a:	d119      	bne.n	18240 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1820c:	4a13      	ldr	r2, [pc, #76]	; (1825c <lll_adv_prepare+0x60>)
   1820e:	4914      	ldr	r1, [pc, #80]	; (18260 <lll_adv_prepare+0x64>)
   18210:	4814      	ldr	r0, [pc, #80]	; (18264 <lll_adv_prepare+0x68>)
   18212:	9400      	str	r4, [sp, #0]
   18214:	2300      	movs	r3, #0
   18216:	f7ff fa69 	bl	176ec <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1821a:	b108      	cbz	r0, 18220 <lll_adv_prepare+0x24>
   1821c:	3044      	adds	r0, #68	; 0x44
   1821e:	d101      	bne.n	18224 <lll_adv_prepare+0x28>
}
   18220:	b002      	add	sp, #8
   18222:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18224:	4a10      	ldr	r2, [pc, #64]	; (18268 <lll_adv_prepare+0x6c>)
   18226:	4911      	ldr	r1, [pc, #68]	; (1826c <lll_adv_prepare+0x70>)
   18228:	4811      	ldr	r0, [pc, #68]	; (18270 <lll_adv_prepare+0x74>)
   1822a:	2370      	movs	r3, #112	; 0x70
   1822c:	f004 f8ee 	bl	1c40c <printk>
   18230:	4040      	eors	r0, r0
   18232:	f380 8811 	msr	BASEPRI, r0
   18236:	f04f 0003 	mov.w	r0, #3
   1823a:	df02      	svc	2
}
   1823c:	b002      	add	sp, #8
   1823e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18240:	4a09      	ldr	r2, [pc, #36]	; (18268 <lll_adv_prepare+0x6c>)
   18242:	490a      	ldr	r1, [pc, #40]	; (1826c <lll_adv_prepare+0x70>)
   18244:	480a      	ldr	r0, [pc, #40]	; (18270 <lll_adv_prepare+0x74>)
   18246:	236d      	movs	r3, #109	; 0x6d
   18248:	f004 f8e0 	bl	1c40c <printk>
   1824c:	4040      	eors	r0, r0
   1824e:	f380 8811 	msr	BASEPRI, r0
   18252:	f04f 0003 	mov.w	r0, #3
   18256:	df02      	svc	2
   18258:	e7d8      	b.n	1820c <lll_adv_prepare+0x10>
   1825a:	bf00      	nop
   1825c:	00017c01 	.word	0x00017c01
   18260:	00017dd1 	.word	0x00017dd1
   18264:	00017d59 	.word	0x00017d59
   18268:	00022794 	.word	0x00022794
   1826c:	00022808 	.word	0x00022808
   18270:	00021ce0 	.word	0x00021ce0

00018274 <lll_clock_wait>:

void lll_clock_wait(void)
{
	static bool done;

	if (done) {
   18274:	4b15      	ldr	r3, [pc, #84]	; (182cc <lll_clock_wait+0x58>)
   18276:	781a      	ldrb	r2, [r3, #0]
   18278:	b102      	cbz	r2, 1827c <lll_clock_wait+0x8>
   1827a:	4770      	bx	lr
		return;
	}
	done = true;
   1827c:	2201      	movs	r2, #1
{
   1827e:	b510      	push	{r4, lr}
	done = true;
   18280:	701a      	strb	r2, [r3, #0]
   18282:	4813      	ldr	r0, [pc, #76]	; (182d0 <lll_clock_wait+0x5c>)
   18284:	f002 fbae 	bl	1a9e4 <z_impl_device_get_binding>

	struct device *clock =
			device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);

	LL_ASSERT(clock);
   18288:	4604      	mov	r4, r0
   1828a:	b188      	cbz	r0, 182b0 <lll_clock_wait+0x3c>
	return api->on(dev, sys);
   1828c:	6863      	ldr	r3, [r4, #4]
   1828e:	2101      	movs	r1, #1
   18290:	681b      	ldr	r3, [r3, #0]
   18292:	4620      	mov	r0, r4
   18294:	4798      	blx	r3
   18296:	e001      	b.n	1829c <lll_clock_wait+0x28>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   18298:	f7ed fc8a 	bl	5bb0 <arch_cpu_idle>
						clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->get_status) {
   1829c:	6863      	ldr	r3, [r4, #4]
   1829e:	691b      	ldr	r3, [r3, #16]
		return CLOCK_CONTROL_STATUS_UNKNOWN;
	}

	return api->get_status(dev, sys);
   182a0:	2101      	movs	r1, #1
   182a2:	4620      	mov	r0, r4
	if (!api->get_status) {
   182a4:	2b00      	cmp	r3, #0
   182a6:	d0f7      	beq.n	18298 <lll_clock_wait+0x24>
	return api->get_status(dev, sys);
   182a8:	4798      	blx	r3

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);
	while (clock_control_get_status(clock, CLOCK_CONTROL_NRF_SUBSYS_LF) !=
   182aa:	2802      	cmp	r0, #2
   182ac:	d1f4      	bne.n	18298 <lll_clock_wait+0x24>
			CLOCK_CONTROL_STATUS_ON) {
		DEBUG_CPU_SLEEP(1);
		k_cpu_idle();
		DEBUG_CPU_SLEEP(0);
	}
}
   182ae:	bd10      	pop	{r4, pc}
	LL_ASSERT(clock);
   182b0:	4a08      	ldr	r2, [pc, #32]	; (182d4 <lll_clock_wait+0x60>)
   182b2:	4909      	ldr	r1, [pc, #36]	; (182d8 <lll_clock_wait+0x64>)
   182b4:	4809      	ldr	r0, [pc, #36]	; (182dc <lll_clock_wait+0x68>)
   182b6:	231e      	movs	r3, #30
   182b8:	f004 f8a8 	bl	1c40c <printk>
   182bc:	4040      	eors	r0, r0
   182be:	f380 8811 	msr	BASEPRI, r0
   182c2:	f04f 0003 	mov.w	r0, #3
   182c6:	df02      	svc	2
   182c8:	e7e0      	b.n	1828c <lll_clock_wait+0x18>
   182ca:	bf00      	nop
   182cc:	20002288 	.word	0x20002288
   182d0:	00022738 	.word	0x00022738
   182d4:	0002282c 	.word	0x0002282c
   182d8:	00022884 	.word	0x00022884
   182dc:	00021ce0 	.word	0x00021ce0

000182e0 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   182e0:	f001 b812 	b.w	19308 <radio_status_reset>

000182e4 <isr_cleanup>:
{
   182e4:	b508      	push	{r3, lr}
   182e6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   182e8:	4813      	ldr	r0, [pc, #76]	; (18338 <isr_cleanup+0x54>)
   182ea:	f000 fef1 	bl	190d0 <radio_isr_set>
	if (!radio_is_idle()) {
   182ee:	f001 f82b 	bl	19348 <radio_is_idle>
   182f2:	b1e8      	cbz	r0, 18330 <isr_cleanup+0x4c>
	radio_tmr_stop();
   182f4:	f001 f956 	bl	195a4 <radio_tmr_stop>
	err = lll_clk_off();
   182f8:	f7ff fae2 	bl	178c0 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   182fc:	b108      	cbz	r0, 18302 <isr_cleanup+0x1e>
   182fe:	3010      	adds	r0, #16
   18300:	d104      	bne.n	1830c <isr_cleanup+0x28>
}
   18302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18306:	2000      	movs	r0, #0
   18308:	f7ff ba7e 	b.w	17808 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   1830c:	4a0b      	ldr	r2, [pc, #44]	; (1833c <isr_cleanup+0x58>)
   1830e:	490c      	ldr	r1, [pc, #48]	; (18340 <isr_cleanup+0x5c>)
   18310:	480c      	ldr	r0, [pc, #48]	; (18344 <isr_cleanup+0x60>)
   18312:	f240 2382 	movw	r3, #642	; 0x282
   18316:	f004 f879 	bl	1c40c <printk>
   1831a:	4040      	eors	r0, r0
   1831c:	f380 8811 	msr	BASEPRI, r0
   18320:	f04f 0003 	mov.w	r0, #3
   18324:	df02      	svc	2
	lll_done(NULL);
   18326:	2000      	movs	r0, #0
}
   18328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1832c:	f7ff ba6c 	b.w	17808 <lll_done>
		radio_disable();
   18330:	f000 ffd2 	bl	192d8 <radio_disable>
   18334:	e7de      	b.n	182f4 <isr_cleanup+0x10>
   18336:	bf00      	nop
   18338:	000182e1 	.word	0x000182e1
   1833c:	0002288c 	.word	0x0002288c
   18340:	000227e0 	.word	0x000227e0
   18344:	00021ce0 	.word	0x00021ce0

00018348 <isr_done>:
{
   18348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1834a:	4605      	mov	r5, r0
	radio_status_reset();
   1834c:	f000 ffdc 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   18350:	f001 f89a 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   18354:	f001 f880 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   18358:	f001 fa66 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1835c:	f001 f844 	bl	193e8 <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   18360:	f7fa f9d6 	bl	12710 <ull_event_done_extra_get>
	LL_ASSERT(e);
   18364:	4604      	mov	r4, r0
   18366:	2800      	cmp	r0, #0
   18368:	d033      	beq.n	183d2 <isr_done+0x8a>
	e->trx_cnt = trx_cnt;
   1836a:	4b21      	ldr	r3, [pc, #132]	; (183f0 <isr_done+0xa8>)
	e->crc_valid = crc_valid;
   1836c:	4921      	ldr	r1, [pc, #132]	; (183f4 <isr_done+0xac>)
	e->mic_state = mic_state;
   1836e:	4a22      	ldr	r2, [pc, #136]	; (183f8 <isr_done+0xb0>)
	e->trx_cnt = trx_cnt;
   18370:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   18372:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   18374:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   18376:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   18378:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1837a:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1837c:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1837e:	7022      	strb	r2, [r4, #0]
	if (trx_cnt) {
   18380:	b11b      	cbz	r3, 1838a <isr_done+0x42>
		if (lll->role) {
   18382:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   18386:	2b00      	cmp	r3, #0
   18388:	db04      	blt.n	18394 <isr_done+0x4c>
	isr_cleanup(param);
   1838a:	4628      	mov	r0, r5
}
   1838c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   18390:	f7ff bfa8 	b.w	182e4 <isr_cleanup>
				addr_us_get(lll->phy_rx);
   18394:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   18398:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   1839c:	2b02      	cmp	r3, #2
   1839e:	d016      	beq.n	183ce <isr_done+0x86>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   183a0:	2b04      	cmp	r3, #4
   183a2:	bf14      	ite	ne
   183a4:	2728      	movne	r7, #40	; 0x28
   183a6:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   183aa:	f001 f93d 	bl	19628 <radio_tmr_aa_restore>
   183ae:	4606      	mov	r6, r0
   183b0:	f001 f940 	bl	19634 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   183b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   183b6:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   183b8:	2300      	movs	r3, #0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   183ba:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->slave.start_to_address_actual_us =
   183be:	60a6      	str	r6, [r4, #8]
	isr_cleanup(param);
   183c0:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   183c2:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   183c4:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   183c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   183ca:	f7ff bf8b 	b.w	182e4 <isr_cleanup>
	switch (phy) {
   183ce:	2718      	movs	r7, #24
   183d0:	e7eb      	b.n	183aa <isr_done+0x62>
	LL_ASSERT(e);
   183d2:	4a0a      	ldr	r2, [pc, #40]	; (183fc <isr_done+0xb4>)
   183d4:	490a      	ldr	r1, [pc, #40]	; (18400 <isr_done+0xb8>)
   183d6:	480b      	ldr	r0, [pc, #44]	; (18404 <isr_done+0xbc>)
   183d8:	f240 234d 	movw	r3, #589	; 0x24d
   183dc:	f004 f816 	bl	1c40c <printk>
   183e0:	4040      	eors	r0, r0
   183e2:	f380 8811 	msr	BASEPRI, r0
   183e6:	f04f 0003 	mov.w	r0, #3
   183ea:	df02      	svc	2
   183ec:	e7bd      	b.n	1836a <isr_done+0x22>
   183ee:	bf00      	nop
   183f0:	20001ce8 	.word	0x20001ce8
   183f4:	2000228a 	.word	0x2000228a
   183f8:	2000228b 	.word	0x2000228b
   183fc:	0002288c 	.word	0x0002288c
   18400:	000220c4 	.word	0x000220c4
   18404:	00021ce0 	.word	0x00021ce0

00018408 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   18408:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1840a:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1840e:	f043 0304 	orr.w	r3, r3, #4
   18412:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   18416:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   18418:	f000 ffb6 	bl	19388 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1841c:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   1841e:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18420:	2101      	movs	r1, #1
   18422:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   18426:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   18428:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1842a:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1842c:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   18430:	f7f6 fb66 	bl	eb00 <memq_peek>
   18434:	7823      	ldrb	r3, [r4, #0]
   18436:	3800      	subs	r0, #0
   18438:	bf18      	it	ne
   1843a:	2001      	movne	r0, #1
   1843c:	f360 1304 	bfi	r3, r0, #4, #1
   18440:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   18442:	4620      	mov	r0, r4
   18444:	bd38      	pop	{r3, r4, r5, pc}
   18446:	bf00      	nop

00018448 <lll_conn_init>:
}
   18448:	2000      	movs	r0, #0
   1844a:	4770      	bx	lr

0001844c <lll_conn_reset>:
   1844c:	2000      	movs	r0, #0
   1844e:	4770      	bx	lr

00018450 <lll_conn_ppm_local_get>:
}
   18450:	2014      	movs	r0, #20
   18452:	4770      	bx	lr

00018454 <lll_conn_ppm_get>:
	return sca_ppm_lut[sca];
   18454:	4b01      	ldr	r3, [pc, #4]	; (1845c <lll_conn_ppm_get+0x8>)
}
   18456:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1845a:	4770      	bx	lr
   1845c:	00022914 	.word	0x00022914

00018460 <lll_conn_prepare_reset>:
	crc_expire = 0U;
   18460:	4805      	ldr	r0, [pc, #20]	; (18478 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   18462:	4906      	ldr	r1, [pc, #24]	; (1847c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   18464:	4a06      	ldr	r2, [pc, #24]	; (18480 <lll_conn_prepare_reset+0x20>)
{
   18466:	b410      	push	{r4}
	trx_cnt = 0U;
   18468:	2300      	movs	r3, #0
   1846a:	4c06      	ldr	r4, [pc, #24]	; (18484 <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   1846c:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   1846e:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   18470:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   18472:	8023      	strh	r3, [r4, #0]
}
   18474:	bc10      	pop	{r4}
   18476:	4770      	bx	lr
   18478:	20002289 	.word	0x20002289
   1847c:	2000228a 	.word	0x2000228a
   18480:	2000228b 	.word	0x2000228b
   18484:	20001ce8 	.word	0x20001ce8

00018488 <lll_conn_is_abort_cb>:
}
   18488:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1848c:	4770      	bx	lr
   1848e:	bf00      	nop

00018490 <lll_conn_abort_cb>:
{
   18490:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18492:	b1b0      	cbz	r0, 184c2 <lll_conn_abort_cb+0x32>
	err = lll_clk_off();
   18494:	460c      	mov	r4, r1
   18496:	f7ff fa13 	bl	178c0 <lll_clk_off>
	LL_ASSERT(!err || err == -EBUSY);
   1849a:	b168      	cbz	r0, 184b8 <lll_conn_abort_cb+0x28>
   1849c:	3010      	adds	r0, #16
   1849e:	d00b      	beq.n	184b8 <lll_conn_abort_cb+0x28>
   184a0:	4a0b      	ldr	r2, [pc, #44]	; (184d0 <lll_conn_abort_cb+0x40>)
   184a2:	490c      	ldr	r1, [pc, #48]	; (184d4 <lll_conn_abort_cb+0x44>)
   184a4:	480c      	ldr	r0, [pc, #48]	; (184d8 <lll_conn_abort_cb+0x48>)
   184a6:	2381      	movs	r3, #129	; 0x81
   184a8:	f003 ffb0 	bl	1c40c <printk>
   184ac:	4040      	eors	r0, r0
   184ae:	f380 8811 	msr	BASEPRI, r0
   184b2:	f04f 0003 	mov.w	r0, #3
   184b6:	df02      	svc	2
	lll_done(param);
   184b8:	4620      	mov	r0, r4
}
   184ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   184be:	f7ff b9a3 	b.w	17808 <lll_done>
		radio_isr_set(isr_done, param);
   184c2:	4806      	ldr	r0, [pc, #24]	; (184dc <lll_conn_abort_cb+0x4c>)
   184c4:	f000 fe04 	bl	190d0 <radio_isr_set>
}
   184c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   184cc:	f000 bf04 	b.w	192d8 <radio_disable>
   184d0:	0002288c 	.word	0x0002288c
   184d4:	000227e0 	.word	0x000227e0
   184d8:	00021ce0 	.word	0x00021ce0
   184dc:	00018349 	.word	0x00018349

000184e0 <lll_conn_isr_abort>:
{
   184e0:	b510      	push	{r4, lr}
   184e2:	4604      	mov	r4, r0
	radio_status_reset();
   184e4:	f000 ff10 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   184e8:	f000 ffce 	bl	19488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   184ec:	f000 ffb4 	bl	19458 <radio_filter_status_reset>
	radio_ar_status_reset();
   184f0:	f001 f99a 	bl	19828 <radio_ar_status_reset>
	radio_rssi_status_reset();
   184f4:	f000 ff78 	bl	193e8 <radio_rssi_status_reset>
	isr_cleanup(param);
   184f8:	4620      	mov	r0, r4
}
   184fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   184fe:	f7ff bef1 	b.w	182e4 <isr_cleanup>
   18502:	bf00      	nop

00018504 <lll_conn_rx_pkt_set>:
{
   18504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18506:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   18508:	2001      	movs	r0, #1
   1850a:	f7fa f84f 	bl	125ac <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1850e:	4604      	mov	r4, r0
   18510:	b350      	cbz	r0, 18568 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   18512:	f895 6049 	ldrb.w	r6, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   18516:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1851a:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1851e:	4630      	mov	r0, r6
   18520:	2100      	movs	r1, #0
   18522:	f000 fe1b 	bl	1915c <radio_phy_set>
	} else if (lll->enc_rx) {
   18526:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1852a:	0072      	lsls	r2, r6, #1
   1852c:	071b      	lsls	r3, r3, #28
   1852e:	f104 0420 	add.w	r4, r4, #32
   18532:	f042 0201 	orr.w	r2, r2, #1
   18536:	d50e      	bpl.n	18556 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   18538:	1d39      	adds	r1, r7, #4
   1853a:	b2c9      	uxtb	r1, r1
   1853c:	2008      	movs	r0, #8
   1853e:	f000 fe71 	bl	19224 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18542:	4622      	mov	r2, r4
   18544:	4631      	mov	r1, r6
   18546:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1854a:	f001 f88d 	bl	19668 <radio_ccm_rx_pkt_set>
}
   1854e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18552:	f000 be9d 	b.w	19290 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   18556:	b2f9      	uxtb	r1, r7
   18558:	2008      	movs	r0, #8
   1855a:	f000 fe63 	bl	19224 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1855e:	4620      	mov	r0, r4
}
   18560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   18564:	f000 be94 	b.w	19290 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   18568:	4a06      	ldr	r2, [pc, #24]	; (18584 <lll_conn_rx_pkt_set+0x80>)
   1856a:	4907      	ldr	r1, [pc, #28]	; (18588 <lll_conn_rx_pkt_set+0x84>)
   1856c:	4807      	ldr	r0, [pc, #28]	; (1858c <lll_conn_rx_pkt_set+0x88>)
   1856e:	f44f 73df 	mov.w	r3, #446	; 0x1be
   18572:	f003 ff4b 	bl	1c40c <printk>
   18576:	4040      	eors	r0, r0
   18578:	f380 8811 	msr	BASEPRI, r0
   1857c:	f04f 0003 	mov.w	r0, #3
   18580:	df02      	svc	2
   18582:	e7c6      	b.n	18512 <lll_conn_rx_pkt_set+0xe>
   18584:	0002288c 	.word	0x0002288c
   18588:	000228d8 	.word	0x000228d8
   1858c:	00021ce0 	.word	0x00021ce0

00018590 <lll_conn_isr_tx>:
{
   18590:	b538      	push	{r3, r4, r5, lr}
   18592:	4604      	mov	r4, r0
	radio_status_reset();
   18594:	f000 feb8 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   18598:	f000 ff76 	bl	19488 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1859c:	2096      	movs	r0, #150	; 0x96
   1859e:	f000 ff83 	bl	194a8 <radio_tmr_tifs_set>
				     lll->phy_flags);
   185a2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   185a6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   185aa:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   185ae:	f000 0007 	and.w	r0, r0, #7
   185b2:	f002 0207 	and.w	r2, r2, #7
   185b6:	2100      	movs	r1, #0
   185b8:	f000 fefc 	bl	193b4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   185bc:	4620      	mov	r0, r4
   185be:	f7ff ffa1 	bl	18504 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   185c2:	f000 fead 	bl	19320 <radio_is_ready>
   185c6:	bb58      	cbnz	r0, 18620 <lll_conn_isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   185c8:	f001 f848 	bl	1965c <radio_tmr_tifs_base_get>
   185cc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   185ce:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   185d2:	2101      	movs	r1, #1
   185d4:	f000 0007 	and.w	r0, r0, #7
   185d8:	f000 fe6a 	bl	192b0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   185dc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   185e0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   185e4:	4405      	add	r5, r0
   185e6:	2b02      	cmp	r3, #2
   185e8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   185ec:	d016      	beq.n	1861c <lll_conn_isr_tx+0x8c>
		return 376;
   185ee:	2b04      	cmp	r3, #4
   185f0:	bf14      	ite	ne
   185f2:	2328      	movne	r3, #40	; 0x28
   185f4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   185f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   185fc:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   18600:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18604:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18606:	f000 fe4f 	bl	192a8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1860a:	1a28      	subs	r0, r5, r0
   1860c:	f000 ffde 	bl	195cc <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   18610:	4621      	mov	r1, r4
   18612:	480a      	ldr	r0, [pc, #40]	; (1863c <lll_conn_isr_tx+0xac>)
}
   18614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   18618:	f000 bd5a 	b.w	190d0 <radio_isr_set>
	switch (phy) {
   1861c:	2318      	movs	r3, #24
   1861e:	e7eb      	b.n	185f8 <lll_conn_isr_tx+0x68>
	LL_ASSERT(!radio_is_ready());
   18620:	4a07      	ldr	r2, [pc, #28]	; (18640 <lll_conn_isr_tx+0xb0>)
   18622:	4908      	ldr	r1, [pc, #32]	; (18644 <lll_conn_isr_tx+0xb4>)
   18624:	4808      	ldr	r0, [pc, #32]	; (18648 <lll_conn_isr_tx+0xb8>)
   18626:	f240 1379 	movw	r3, #377	; 0x179
   1862a:	f003 feef 	bl	1c40c <printk>
   1862e:	4040      	eors	r0, r0
   18630:	f380 8811 	msr	BASEPRI, r0
   18634:	f04f 0003 	mov.w	r0, #3
   18638:	df02      	svc	2
   1863a:	e7c5      	b.n	185c8 <lll_conn_isr_tx+0x38>
   1863c:	0001874d 	.word	0x0001874d
   18640:	0002288c 	.word	0x0002288c
   18644:	000227f4 	.word	0x000227f4
   18648:	00021ce0 	.word	0x00021ce0

0001864c <lll_conn_tx_pkt_set>:
{
   1864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1864e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   18650:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   18654:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   18658:	f001 0407 	and.w	r4, r1, #7
{
   1865c:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1865e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   18662:	4620      	mov	r0, r4
   18664:	f000 fd7a 	bl	1915c <radio_phy_set>
	} else if (lll->enc_tx) {
   18668:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1866c:	0062      	lsls	r2, r4, #1
   1866e:	06db      	lsls	r3, r3, #27
   18670:	f042 0201 	orr.w	r2, r2, #1
   18674:	b2f1      	uxtb	r1, r6
   18676:	d50d      	bpl.n	18694 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   18678:	3104      	adds	r1, #4
   1867a:	b2c9      	uxtb	r1, r1
   1867c:	2008      	movs	r0, #8
   1867e:	f000 fdd1 	bl	19224 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18682:	4639      	mov	r1, r7
   18684:	f105 0084 	add.w	r0, r5, #132	; 0x84
   18688:	f001 f83e 	bl	19708 <radio_ccm_tx_pkt_set>
}
   1868c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18690:	f000 be04 	b.w	1929c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   18694:	2008      	movs	r0, #8
   18696:	f000 fdc5 	bl	19224 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1869a:	4638      	mov	r0, r7
}
   1869c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   186a0:	f000 bdfc 	b.w	1929c <radio_pkt_tx_set>

000186a4 <lll_conn_pdu_tx_prep>:
{
   186a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   186a8:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   186ac:	075b      	lsls	r3, r3, #29
{
   186ae:	b083      	sub	sp, #12
   186b0:	4688      	mov	r8, r1
	if (lll->empty) {
   186b2:	d43e      	bmi.n	18732 <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   186b4:	4604      	mov	r4, r0
   186b6:	aa01      	add	r2, sp, #4
   186b8:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   186bc:	f7f6 fa20 	bl	eb00 <memq_peek>
	if (!link) {
   186c0:	4681      	mov	r9, r0
   186c2:	2800      	cmp	r0, #0
   186c4:	d03c      	beq.n	18740 <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   186c6:	9f01      	ldr	r7, [sp, #4]
   186c8:	f894 6061 	ldrb.w	r6, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   186cc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   186d0:	3704      	adds	r7, #4
   186d2:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   186d4:	b913      	cbnz	r3, 186dc <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   186d6:	786b      	ldrb	r3, [r5, #1]
   186d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   186dc:	b126      	cbz	r6, 186e8 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   186de:	5dba      	ldrb	r2, [r7, r6]
   186e0:	2101      	movs	r1, #1
   186e2:	f361 0201 	bfi	r2, r1, #0, #2
   186e6:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   186e8:	1b9b      	subs	r3, r3, r6
   186ea:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   186ec:	5dbb      	ldrb	r3, [r7, r6]
   186ee:	f36f 1304 	bfc	r3, #4, #1
   186f2:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   186f4:	4620      	mov	r0, r4
   186f6:	f7fd fdab 	bl	16250 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   186fa:	786b      	ldrb	r3, [r5, #1]
   186fc:	4283      	cmp	r3, r0
   186fe:	d904      	bls.n	1870a <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   18700:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   18702:	5dbb      	ldrb	r3, [r7, r6]
   18704:	f043 0310 	orr.w	r3, r3, #16
   18708:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1870a:	f8d9 2000 	ldr.w	r2, [r9]
   1870e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18710:	429a      	cmp	r2, r3
   18712:	d003      	beq.n	1871c <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   18714:	5dbb      	ldrb	r3, [r7, r6]
   18716:	f043 0310 	orr.w	r3, r3, #16
   1871a:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   1871c:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   1871e:	2200      	movs	r2, #0
	p->rfu = 0U;
   18720:	f36f 1347 	bfc	r3, #5, #3
   18724:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   18726:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   18728:	f8c8 5000 	str.w	r5, [r8]
}
   1872c:	b003      	add	sp, #12
   1872e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   18732:	f7ff fe69 	bl	18408 <empty_tx_enqueue>
   18736:	f8c8 0000 	str.w	r0, [r8]
}
   1873a:	b003      	add	sp, #12
   1873c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   18740:	4620      	mov	r0, r4
   18742:	f7ff fe61 	bl	18408 <empty_tx_enqueue>
   18746:	4605      	mov	r5, r0
   18748:	e7e8      	b.n	1871c <lll_conn_pdu_tx_prep+0x78>
   1874a:	bf00      	nop

0001874c <lll_conn_isr_rx>:
{
   1874c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1874e:	b083      	sub	sp, #12
   18750:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   18752:	f000 fdef 	bl	19334 <radio_is_done>
	if (trx_done) {
   18756:	f010 0fff 	tst.w	r0, #255	; 0xff
   1875a:	d10d      	bne.n	18778 <lll_conn_isr_rx+0x2c>
	radio_status_reset();
   1875c:	f000 fdd4 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   18760:	f000 fe92 	bl	19488 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   18764:	f000 fe40 	bl	193e8 <radio_rssi_status_reset>
		radio_isr_set(isr_done, param);
   18768:	48ac      	ldr	r0, [pc, #688]	; (18a1c <lll_conn_isr_rx+0x2d0>)
   1876a:	4621      	mov	r1, r4
   1876c:	f000 fcb0 	bl	190d0 <radio_isr_set>
		radio_disable();
   18770:	f000 fdb2 	bl	192d8 <radio_disable>
}
   18774:	b003      	add	sp, #12
   18776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   18778:	f000 fdfc 	bl	19374 <radio_crc_is_valid>
   1877c:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1877e:	f000 fe3b 	bl	193f8 <radio_rssi_is_ready>
	radio_status_reset();
   18782:	f000 fdc1 	bl	19308 <radio_status_reset>
	radio_tmr_status_reset();
   18786:	f000 fe7f 	bl	19488 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   1878a:	f000 fe2d 	bl	193e8 <radio_rssi_status_reset>
	trx_cnt++;
   1878e:	4aa4      	ldr	r2, [pc, #656]	; (18a20 <lll_conn_isr_rx+0x2d4>)
   18790:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18792:	2001      	movs	r0, #1
	trx_cnt++;
   18794:	4403      	add	r3, r0
   18796:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18798:	f7f9 ff08 	bl	125ac <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1879c:	4607      	mov	r7, r0
   1879e:	2800      	cmp	r0, #0
   187a0:	f000 80a7 	beq.w	188f2 <lll_conn_isr_rx+0x1a6>
	if (crc_ok) {
   187a4:	2d00      	cmp	r5, #0
   187a6:	d155      	bne.n	18854 <lll_conn_isr_rx+0x108>
		if (crc_expire == 0U) {
   187a8:	4b9e      	ldr	r3, [pc, #632]	; (18a24 <lll_conn_isr_rx+0x2d8>)
   187aa:	781e      	ldrb	r6, [r3, #0]
   187ac:	2e00      	cmp	r6, #0
   187ae:	f040 808f 	bne.w	188d0 <lll_conn_isr_rx+0x184>
		crc_expire--;
   187b2:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   187b4:	a901      	add	r1, sp, #4
   187b6:	4620      	mov	r0, r4
		crc_expire--;
   187b8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   187ba:	f7ff ff73 	bl	186a4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   187be:	2096      	movs	r0, #150	; 0x96
   187c0:	f000 fe72 	bl	194a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   187c4:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   187c8:	f000 0007 	and.w	r0, r0, #7
   187cc:	f000 fde4 	bl	19398 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   187d0:	4895      	ldr	r0, [pc, #596]	; (18a28 <lll_conn_isr_rx+0x2dc>)
   187d2:	4621      	mov	r1, r4
   187d4:	f000 fc7c 	bl	190d0 <radio_isr_set>
		radio_tmr_end_capture();
   187d8:	f000 ff32 	bl	19640 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   187dc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   187e0:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   187e2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   187e6:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   187e8:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   187ec:	009b      	lsls	r3, r3, #2
   187ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   187f2:	f020 020c 	bic.w	r2, r0, #12
   187f6:	4313      	orrs	r3, r2
   187f8:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   187fa:	4620      	mov	r0, r4
   187fc:	f7ff ff26 	bl	1864c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18800:	f000 fd8e 	bl	19320 <radio_is_ready>
   18804:	2800      	cmp	r0, #0
   18806:	f040 8086 	bne.w	18916 <lll_conn_isr_rx+0x1ca>
	if (!radio_tmr_aa_restore()) {
   1880a:	f000 ff0d 	bl	19628 <radio_tmr_aa_restore>
   1880e:	b170      	cbz	r0, 1882e <lll_conn_isr_rx+0xe2>
	if (tx_release) {
   18810:	b19d      	cbz	r5, 1883a <lll_conn_isr_rx+0xee>
		LL_ASSERT(lll->handle != 0xFFFF);
   18812:	8a20      	ldrh	r0, [r4, #16]
   18814:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18818:	4298      	cmp	r0, r3
   1881a:	f000 808a 	beq.w	18932 <lll_conn_isr_rx+0x1e6>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1881e:	4629      	mov	r1, r5
   18820:	f7fd fb28 	bl	15e74 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   18824:	b95e      	cbnz	r6, 1883e <lll_conn_isr_rx+0xf2>
		ull_rx_sched();
   18826:	f7f9 ff07 	bl	12638 <ull_rx_sched>
}
   1882a:	b003      	add	sp, #12
   1882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1882e:	f000 feef 	bl	19610 <radio_tmr_aa_get>
   18832:	f000 fef3 	bl	1961c <radio_tmr_aa_save>
	if (tx_release) {
   18836:	2d00      	cmp	r5, #0
   18838:	d1eb      	bne.n	18812 <lll_conn_isr_rx+0xc6>
	if (is_rx_enqueue) {
   1883a:	2e00      	cmp	r6, #0
   1883c:	d09a      	beq.n	18774 <lll_conn_isr_rx+0x28>
		ull_pdu_rx_alloc();
   1883e:	f7f9 fed3 	bl	125e8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18842:	2302      	movs	r3, #2
   18844:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   18846:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18848:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   1884a:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1884c:	4639      	mov	r1, r7
   1884e:	f7f9 fee3 	bl	12618 <ull_rx_put>
	if (is_ull_rx) {
   18852:	e7e8      	b.n	18826 <lll_conn_isr_rx+0xda>
	if (pdu_data_rx->nesn != lll->sn) {
   18854:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18858:	f897 2020 	ldrb.w	r2, [r7, #32]
   1885c:	f003 0101 	and.w	r1, r3, #1
   18860:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18864:	4288      	cmp	r0, r1
   18866:	d054      	beq.n	18912 <lll_conn_isr_rx+0x1c6>
		if (lll->role) {
   18868:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
		lll->sn++;
   1886c:	f081 0101 	eor.w	r1, r1, #1
   18870:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   18874:	2800      	cmp	r0, #0
		lll->sn++;
   18876:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1887a:	da05      	bge.n	18888 <lll_conn_isr_rx+0x13c>
			lll->slave.latency_enabled = 1;
   1887c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   18880:	f043 0301 	orr.w	r3, r3, #1
   18884:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   18888:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1888c:	075d      	lsls	r5, r3, #29
   1888e:	d55f      	bpl.n	18950 <lll_conn_isr_rx+0x204>
			lll->empty = 0;
   18890:	f36f 0382 	bfc	r3, #2, #1
   18894:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   18898:	2500      	movs	r5, #0
   1889a:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1889c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   188a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   188a4:	429a      	cmp	r2, r3
   188a6:	d079      	beq.n	1899c <lll_conn_isr_rx+0x250>
	u8_t is_rx_enqueue = 0U;
   188a8:	2600      	movs	r6, #0
		crc_expire = 0U;
   188aa:	4a5e      	ldr	r2, [pc, #376]	; (18a24 <lll_conn_isr_rx+0x2d8>)
		crc_valid = 1U;
   188ac:	4b5f      	ldr	r3, [pc, #380]	; (18a2c <lll_conn_isr_rx+0x2e0>)
		crc_expire = 0U;
   188ae:	2100      	movs	r1, #0
   188b0:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   188b2:	4620      	mov	r0, r4
		crc_valid = 1U;
   188b4:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   188b6:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   188b8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   188ba:	f7ff fef3 	bl	186a4 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   188be:	f897 3020 	ldrb.w	r3, [r7, #32]
   188c2:	06db      	lsls	r3, r3, #27
   188c4:	f53f af7b 	bmi.w	187be <lll_conn_isr_rx+0x72>
				     (pdu_data_tx->len == 0));
   188c8:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   188ca:	785b      	ldrb	r3, [r3, #1]
   188cc:	b153      	cbz	r3, 188e4 <lll_conn_isr_rx+0x198>
   188ce:	e776      	b.n	187be <lll_conn_isr_rx+0x72>
		crc_expire--;
   188d0:	3e01      	subs	r6, #1
   188d2:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   188d4:	a901      	add	r1, sp, #4
   188d6:	4620      	mov	r0, r4
		crc_expire--;
   188d8:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   188da:	f7ff fee3 	bl	186a4 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   188de:	2e00      	cmp	r6, #0
   188e0:	f040 80e7 	bne.w	18ab2 <lll_conn_isr_rx+0x366>
		radio_isr_set(isr_done, param);
   188e4:	484d      	ldr	r0, [pc, #308]	; (18a1c <lll_conn_isr_rx+0x2d0>)
   188e6:	4621      	mov	r1, r4
   188e8:	f000 fbf2 	bl	190d0 <radio_isr_set>
			radio_switch_complete_and_disable();
   188ec:	f000 fd6e 	bl	193cc <radio_switch_complete_and_disable>
   188f0:	e774      	b.n	187dc <lll_conn_isr_rx+0x90>
	LL_ASSERT(node_rx);
   188f2:	4a4f      	ldr	r2, [pc, #316]	; (18a30 <lll_conn_isr_rx+0x2e4>)
   188f4:	494f      	ldr	r1, [pc, #316]	; (18a34 <lll_conn_isr_rx+0x2e8>)
   188f6:	4850      	ldr	r0, [pc, #320]	; (18a38 <lll_conn_isr_rx+0x2ec>)
   188f8:	23b7      	movs	r3, #183	; 0xb7
   188fa:	f003 fd87 	bl	1c40c <printk>
   188fe:	4040      	eors	r0, r0
   18900:	f380 8811 	msr	BASEPRI, r0
   18904:	f04f 0003 	mov.w	r0, #3
   18908:	df02      	svc	2
	if (crc_ok) {
   1890a:	2d00      	cmp	r5, #0
   1890c:	f43f af4c 	beq.w	187a8 <lll_conn_isr_rx+0x5c>
   18910:	e7a0      	b.n	18854 <lll_conn_isr_rx+0x108>
	struct node_tx *tx_release = NULL;
   18912:	2500      	movs	r5, #0
   18914:	e7c2      	b.n	1889c <lll_conn_isr_rx+0x150>
	LL_ASSERT(!radio_is_ready());
   18916:	4a46      	ldr	r2, [pc, #280]	; (18a30 <lll_conn_isr_rx+0x2e4>)
   18918:	4948      	ldr	r1, [pc, #288]	; (18a3c <lll_conn_isr_rx+0x2f0>)
   1891a:	4847      	ldr	r0, [pc, #284]	; (18a38 <lll_conn_isr_rx+0x2ec>)
   1891c:	f240 1321 	movw	r3, #289	; 0x121
   18920:	f003 fd74 	bl	1c40c <printk>
   18924:	4040      	eors	r0, r0
   18926:	f380 8811 	msr	BASEPRI, r0
   1892a:	f04f 0003 	mov.w	r0, #3
   1892e:	df02      	svc	2
   18930:	e76b      	b.n	1880a <lll_conn_isr_rx+0xbe>
		LL_ASSERT(lll->handle != 0xFFFF);
   18932:	4a3f      	ldr	r2, [pc, #252]	; (18a30 <lll_conn_isr_rx+0x2e4>)
   18934:	4942      	ldr	r1, [pc, #264]	; (18a40 <lll_conn_isr_rx+0x2f4>)
   18936:	4840      	ldr	r0, [pc, #256]	; (18a38 <lll_conn_isr_rx+0x2ec>)
   18938:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1893c:	f003 fd66 	bl	1c40c <printk>
   18940:	4040      	eors	r0, r0
   18942:	f380 8811 	msr	BASEPRI, r0
   18946:	f04f 0003 	mov.w	r0, #3
   1894a:	df02      	svc	2
   1894c:	8a20      	ldrh	r0, [r4, #16]
   1894e:	e766      	b.n	1881e <lll_conn_isr_rx+0xd2>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   18950:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   18954:	aa01      	add	r2, sp, #4
   18956:	f7f6 f8d3 	bl	eb00 <memq_peek>
		if (link) {
   1895a:	4606      	mov	r6, r0
   1895c:	b1c0      	cbz	r0, 18990 <lll_conn_isr_rx+0x244>
					       lll->packet_tx_head_offset);
   1895e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   18962:	9b01      	ldr	r3, [sp, #4]
   18964:	4413      	add	r3, r2
   18966:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   18968:	b151      	cbz	r1, 18980 <lll_conn_isr_rx+0x234>
				if (lll->enc_tx) {
   1896a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1896e:	06d8      	lsls	r0, r3, #27
   18970:	d506      	bpl.n	18980 <lll_conn_isr_rx+0x234>
					lll->ccm_tx.counter++;
   18972:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   18976:	3301      	adds	r3, #1
   18978:	f140 0000 	adc.w	r0, r0, #0
   1897c:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			lll->packet_tx_head_offset += pdu_data_tx_len;
   18980:	1853      	adds	r3, r2, r1
			if (lll->packet_tx_head_offset ==
   18982:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			lll->packet_tx_head_offset += pdu_data_tx_len;
   18986:	b2db      	uxtb	r3, r3
			if (lll->packet_tx_head_offset ==
   18988:	429a      	cmp	r2, r3
			lll->packet_tx_head_offset += pdu_data_tx_len;
   1898a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			if (lll->packet_tx_head_offset ==
   1898e:	d01b      	beq.n	189c8 <lll_conn_isr_rx+0x27c>
   18990:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18994:	f897 2020 	ldrb.w	r2, [r7, #32]
	struct node_tx *tx_release = NULL;
   18998:	2500      	movs	r5, #0
   1899a:	e77f      	b.n	1889c <lll_conn_isr_rx+0x150>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1899c:	2003      	movs	r0, #3
   1899e:	f7f9 fe05 	bl	125ac <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   189a2:	2800      	cmp	r0, #0
   189a4:	d080      	beq.n	188a8 <lll_conn_isr_rx+0x15c>
		lll->nesn++;
   189a6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   189aa:	f083 0302 	eor.w	r3, r3, #2
   189ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   189b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   189b6:	2b00      	cmp	r3, #0
   189b8:	f43f af76 	beq.w	188a8 <lll_conn_isr_rx+0x15c>
			if (lll->enc_rx) {
   189bc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   189c0:	071a      	lsls	r2, r3, #28
   189c2:	d412      	bmi.n	189ea <lll_conn_isr_rx+0x29e>
			*is_rx_enqueue = 1U;
   189c4:	2601      	movs	r6, #1
   189c6:	e770      	b.n	188aa <lll_conn_isr_rx+0x15e>
				lll->packet_tx_head_len = 0;
   189c8:	2200      	movs	r2, #0
   189ca:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   189ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
   189d0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   189d4:	f7f6 f89c 	bl	eb10 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   189d8:	9d01      	ldr	r5, [sp, #4]
   189da:	f897 2020 	ldrb.w	r2, [r7, #32]
   189de:	682b      	ldr	r3, [r5, #0]
   189e0:	6033      	str	r3, [r6, #0]
				tx->next = link;
   189e2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   189e6:	602e      	str	r6, [r5, #0]
				*tx_release = tx;
   189e8:	e758      	b.n	1889c <lll_conn_isr_rx+0x150>
				done = radio_ccm_is_done();
   189ea:	f000 feb7 	bl	1975c <radio_ccm_is_done>
				LL_ASSERT(done);
   189ee:	2800      	cmp	r0, #0
   189f0:	d051      	beq.n	18a96 <lll_conn_isr_rx+0x34a>
				bool mic_failure = !radio_ccm_mic_is_valid();
   189f2:	f000 fed5 	bl	197a0 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   189f6:	2800      	cmp	r0, #0
   189f8:	d13d      	bne.n	18a76 <lll_conn_isr_rx+0x32a>
				    lll->ccm_rx.counter == 0 &&
   189fa:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   189fe:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   18a02:	4313      	orrs	r3, r2
   18a04:	d105      	bne.n	18a12 <lll_conn_isr_rx+0x2c6>
				    (pdu_data_rx->ll_id ==
   18a06:	f897 3020 	ldrb.w	r3, [r7, #32]
				    lll->ccm_rx.counter == 0 &&
   18a0a:	f003 0303 	and.w	r3, r3, #3
   18a0e:	2b03      	cmp	r3, #3
   18a10:	d01a      	beq.n	18a48 <lll_conn_isr_rx+0x2fc>
					mic_state = LLL_CONN_MIC_FAIL;
   18a12:	4b0c      	ldr	r3, [pc, #48]	; (18a44 <lll_conn_isr_rx+0x2f8>)
   18a14:	2202      	movs	r2, #2
   18a16:	701a      	strb	r2, [r3, #0]
	u8_t is_rx_enqueue = 0U;
   18a18:	2600      	movs	r6, #0
   18a1a:	e6f6      	b.n	1880a <lll_conn_isr_rx+0xbe>
   18a1c:	00018349 	.word	0x00018349
   18a20:	20001ce8 	.word	0x20001ce8
   18a24:	20002289 	.word	0x20002289
   18a28:	00018591 	.word	0x00018591
   18a2c:	2000228a 	.word	0x2000228a
   18a30:	0002288c 	.word	0x0002288c
   18a34:	000228d8 	.word	0x000228d8
   18a38:	00021ce0 	.word	0x00021ce0
   18a3c:	000227f4 	.word	0x000227f4
   18a40:	000228e8 	.word	0x000228e8
   18a44:	2000228b 	.word	0x2000228b
						radio_pkt_scratch_get();
   18a48:	f000 fca2 	bl	19390 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   18a4c:	7842      	ldrb	r2, [r0, #1]
   18a4e:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   18a50:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   18a52:	d8de      	bhi.n	18a12 <lll_conn_isr_rx+0x2c6>
						memcpy(pdu_data_rx,
   18a54:	3203      	adds	r2, #3
   18a56:	f107 0020 	add.w	r0, r7, #32
   18a5a:	f005 fd45 	bl	1e4e8 <memcpy>
						lll->ccm_rx.counter--;
   18a5e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   18a62:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   18a66:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   18a6a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   18a6e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   18a72:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   18a76:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   18a7a:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   18a7e:	490e      	ldr	r1, [pc, #56]	; (18ab8 <lll_conn_isr_rx+0x36c>)
				lll->ccm_rx.counter++;
   18a80:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   18a82:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   18a86:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   18a8a:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   18a8c:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   18a90:	700e      	strb	r6, [r1, #0]
				lll->ccm_rx.counter++;
   18a92:	6042      	str	r2, [r0, #4]
		if (err) {
   18a94:	e709      	b.n	188aa <lll_conn_isr_rx+0x15e>
				LL_ASSERT(done);
   18a96:	4a09      	ldr	r2, [pc, #36]	; (18abc <lll_conn_isr_rx+0x370>)
   18a98:	4909      	ldr	r1, [pc, #36]	; (18ac0 <lll_conn_isr_rx+0x374>)
   18a9a:	480a      	ldr	r0, [pc, #40]	; (18ac4 <lll_conn_isr_rx+0x378>)
   18a9c:	f240 23e6 	movw	r3, #742	; 0x2e6
   18aa0:	f003 fcb4 	bl	1c40c <printk>
   18aa4:	4040      	eors	r0, r0
   18aa6:	f380 8811 	msr	BASEPRI, r0
   18aaa:	f04f 0003 	mov.w	r0, #3
   18aae:	df02      	svc	2
   18ab0:	e79f      	b.n	189f2 <lll_conn_isr_rx+0x2a6>
	u8_t is_rx_enqueue = 0U;
   18ab2:	462e      	mov	r6, r5
   18ab4:	e683      	b.n	187be <lll_conn_isr_rx+0x72>
   18ab6:	bf00      	nop
   18ab8:	2000228b 	.word	0x2000228b
   18abc:	0002288c 	.word	0x0002288c
   18ac0:	000228e0 	.word	0x000228e0
   18ac4:	00021ce0 	.word	0x00021ce0

00018ac8 <lll_conn_flush>:

void lll_conn_flush(u16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   18ac8:	4770      	bx	lr
   18aca:	bf00      	nop

00018acc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   18acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = prepare_param->param;
   18ad0:	68c4      	ldr	r4, [r0, #12]

	DEBUG_RADIO_START_S(1);

	/* TODO: Do the below in ULL ?  */

	lazy = prepare_param->lazy;
   18ad2:	8903      	ldrh	r3, [r0, #8]

	/* Calc window widening */
	if (lll->role) {
   18ad4:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
   18ad8:	2a00      	cmp	r2, #0
{
   18ada:	b082      	sub	sp, #8
   18adc:	4680      	mov	r8, r0
	if (lll->role) {
   18ade:	da09      	bge.n	18af4 <prepare_cb+0x28>
		lll->slave.window_widening_prepare_us +=
		    lll->slave.window_widening_periodic_us * (lazy + 1);
		if (lll->slave.window_widening_prepare_us >
		    lll->slave.window_widening_max_us) {
   18ae0:	e9d4 050b 	ldrd	r0, r5, [r4, #44]	; 0x2c
		    lll->slave.window_widening_periodic_us * (lazy + 1);
   18ae4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   18ae6:	fb03 1101 	mla	r1, r3, r1, r1
		lll->slave.window_widening_prepare_us +=
   18aea:	194a      	adds	r2, r1, r5
			lll->slave.window_widening_prepare_us =
   18aec:	4282      	cmp	r2, r0
   18aee:	bf28      	it	cs
   18af0:	4602      	movcs	r2, r0
   18af2:	6322      	str	r2, [r4, #48]	; 0x30
				lll->slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	lll->latency_prepare += lazy;
   18af4:	8ae1      	ldrh	r1, [r4, #22]

	/* calc current event counter value */
	event_counter = lll->event_counter + lll->latency_prepare;
   18af6:	8b62      	ldrh	r2, [r4, #26]
	lll->latency_prepare += lazy;
   18af8:	440b      	add	r3, r1
   18afa:	b29b      	uxth	r3, r3
	event_counter = lll->event_counter + lll->latency_prepare;
   18afc:	441a      	add	r2, r3

	/* store the next event counter value */
	lll->event_counter = event_counter + 1;
   18afe:	3201      	adds	r2, #1
	lll->latency_prepare += lazy;
   18b00:	82e3      	strh	r3, [r4, #22]
	lll->event_counter = event_counter + 1;
   18b02:	8362      	strh	r2, [r4, #26]

	/* TODO: Do the above in ULL ?  */

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   18b04:	f7ff fcac 	bl	18460 <lll_conn_prepare_reset>

	/* TODO: can we do something in ULL? */
	lll->latency_event = lll->latency_prepare;
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   18b08:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare;
   18b0c:	8ae2      	ldrh	r2, [r4, #22]
   18b0e:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   18b10:	2100      	movs	r1, #0
   18b12:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   18b14:	0659      	lsls	r1, r3, #25
   18b16:	f104 051c 	add.w	r5, r4, #28
   18b1a:	f140 808d 	bpl.w	18c38 <prepare_cb+0x16c>
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(lll->event_counter - 1,
   18b1e:	8b60      	ldrh	r0, [r4, #26]
   18b20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   18b22:	3801      	subs	r0, #1
   18b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18b28:	462a      	mov	r2, r5
   18b2a:	b280      	uxth	r0, r0
   18b2c:	f7f9 fe6c 	bl	12808 <lll_chan_sel_2>
   18b30:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   18b32:	e9d4 510c 	ldrd	r5, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   18b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   18b38:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   18b3c:	4429      	add	r1, r5
		lll->slave.window_widening_event_us =
   18b3e:	428a      	cmp	r2, r1
   18b40:	bf28      	it	cs
   18b42:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   18b44:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   18b46:	2500      	movs	r5, #0
		lll->slave.window_widening_event_us =
   18b48:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   18b4a:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   18b4c:	6325      	str	r5, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   18b4e:	63a5      	str	r5, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   18b50:	f000 fade 	bl	19110 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18b54:	4628      	mov	r0, r5
   18b56:	f000 fb2d 	bl	191b4 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   18b5a:	4620      	mov	r0, r4
   18b5c:	f7ff fcd2 	bl	18504 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   18b60:	f104 0008 	add.w	r0, r4, #8
   18b64:	f000 fb44 	bl	191f0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   18b68:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   18b6a:	7ba2      	ldrb	r2, [r4, #14]
			     ((u32_t)lll->crc_init[0])));
   18b6c:	7b21      	ldrb	r1, [r4, #12]
			     ((u32_t)lll->crc_init[1] << 8) |
   18b6e:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   18b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18b74:	4319      	orrs	r1, r3
   18b76:	f240 605b 	movw	r0, #1627	; 0x65b
   18b7a:	f000 fbef 	bl	1935c <radio_crc_configure>

	lll_chan_set(data_chan_use);
   18b7e:	4630      	mov	r0, r6
   18b80:	f7fe fec6 	bl	17910 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   18b84:	4621      	mov	r1, r4
   18b86:	4840      	ldr	r0, [pc, #256]	; (18c88 <prepare_cb+0x1bc>)
   18b88:	f000 faa2 	bl	190d0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   18b8c:	2096      	movs	r0, #150	; 0x96
   18b8e:	f000 fc8b 	bl	194a8 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   18b92:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   18b96:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   18b9a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18b9e:	4629      	mov	r1, r5
   18ba0:	f002 0207 	and.w	r2, r2, #7
   18ba4:	f000 0007 	and.w	r0, r0, #7
   18ba8:	f000 fc04 	bl	193b4 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   18bac:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   18bae:	f8d8 6000 	ldr.w	r6, [r8]
	ticks_at_event += lll_evt_offset_get(evt);
   18bb2:	4638      	mov	r0, r7
   18bb4:	f7fe fe8c 	bl	178d0 <lll_evt_offset_get>
   18bb8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   18bba:	f8d8 2004 	ldr.w	r2, [r8, #4]
   18bbe:	f106 0109 	add.w	r1, r6, #9
   18bc2:	4628      	mov	r0, r5
   18bc4:	f000 fc7c 	bl	194c0 <radio_tmr_start>
   18bc8:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   18bca:	f000 fd0d 	bl	195e8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   18bce:	4628      	mov	r0, r5
   18bd0:	f000 fd24 	bl	1961c <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   18bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18bd6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       (lll->slave.window_widening_event_us << 1) +
   18bda:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   18bdc:	f103 0550 	add.w	r5, r3, #80	; 0x50
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18be0:	f000 0007 	and.w	r0, r0, #7
   18be4:	2101      	movs	r1, #1
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   18be6:	eb05 0542 	add.w	r5, r5, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18bea:	f000 fb5f 	bl	192ac <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18bee:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   18bf2:	f003 0307 	and.w	r3, r3, #7
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   18bf6:	4445      	add	r5, r8
   18bf8:	2b02      	cmp	r3, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18bfa:	4405      	add	r5, r0
   18bfc:	d032      	beq.n	18c64 <prepare_cb+0x198>
		return 40;
   18bfe:	2b04      	cmp	r3, #4
   18c00:	bf0c      	ite	eq
   18c02:	f44f 72bc 	moveq.w	r2, #376	; 0x178
   18c06:	2228      	movne	r2, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18c08:	2101      	movs	r1, #1
   18c0a:	4618      	mov	r0, r3
	hcto += addr_us_get(lll->phy_rx);
   18c0c:	4415      	add	r5, r2
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18c0e:	f000 fb4f 	bl	192b0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   18c12:	4428      	add	r0, r5
   18c14:	f000 fcda 	bl	195cc <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   18c18:	7c21      	ldrb	r1, [r4, #16]
   18c1a:	3103      	adds	r1, #3
   18c1c:	4632      	mov	r2, r6
   18c1e:	4638      	mov	r0, r7
   18c20:	b2c9      	uxtb	r1, r1
   18c22:	f7fe fe63 	bl	178ec <lll_preempt_calc>
   18c26:	b998      	cbnz	r0, 18c50 <prepare_cb+0x184>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		u32_t ret;

		ret = lll_prepare_done(lll);
   18c28:	4620      	mov	r0, r4
   18c2a:	f7fe fdeb 	bl	17804 <lll_prepare_done>
		LL_ASSERT(!ret);
   18c2e:	b9d8      	cbnz	r0, 18c68 <prepare_cb+0x19c>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   18c30:	2000      	movs	r0, #0
   18c32:	b002      	add	sp, #8
   18c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   18c38:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   18c3c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   18c40:	9000      	str	r0, [sp, #0]
   18c42:	462b      	mov	r3, r5
   18c44:	f104 0023 	add.w	r0, r4, #35	; 0x23
   18c48:	f7f9 fda2 	bl	12790 <lll_chan_sel_1>
   18c4c:	4606      	mov	r6, r0
   18c4e:	e770      	b.n	18b32 <prepare_cb+0x66>
		radio_isr_set(lll_conn_isr_abort, lll);
   18c50:	480e      	ldr	r0, [pc, #56]	; (18c8c <prepare_cb+0x1c0>)
   18c52:	4621      	mov	r1, r4
   18c54:	f000 fa3c 	bl	190d0 <radio_isr_set>
		radio_disable();
   18c58:	f000 fb3e 	bl	192d8 <radio_disable>
}
   18c5c:	2000      	movs	r0, #0
   18c5e:	b002      	add	sp, #8
   18c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   18c64:	2218      	movs	r2, #24
   18c66:	e7cf      	b.n	18c08 <prepare_cb+0x13c>
		LL_ASSERT(!ret);
   18c68:	4a09      	ldr	r2, [pc, #36]	; (18c90 <prepare_cb+0x1c4>)
   18c6a:	490a      	ldr	r1, [pc, #40]	; (18c94 <prepare_cb+0x1c8>)
   18c6c:	480a      	ldr	r0, [pc, #40]	; (18c98 <prepare_cb+0x1cc>)
   18c6e:	23ff      	movs	r3, #255	; 0xff
   18c70:	f003 fbcc 	bl	1c40c <printk>
   18c74:	4040      	eors	r0, r0
   18c76:	f380 8811 	msr	BASEPRI, r0
   18c7a:	f04f 0003 	mov.w	r0, #3
   18c7e:	df02      	svc	2
}
   18c80:	2000      	movs	r0, #0
   18c82:	b002      	add	sp, #8
   18c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c88:	0001874d 	.word	0x0001874d
   18c8c:	000184e1 	.word	0x000184e1
   18c90:	00022924 	.word	0x00022924
   18c94:	00021f64 	.word	0x00021f64
   18c98:	00021ce0 	.word	0x00021ce0

00018c9c <lll_slave_prepare>:
{
   18c9c:	b510      	push	{r4, lr}
   18c9e:	b082      	sub	sp, #8
   18ca0:	4604      	mov	r4, r0
	err = lll_clk_on();
   18ca2:	f7fe fe05 	bl	178b0 <lll_clk_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18ca6:	b108      	cbz	r0, 18cac <lll_slave_prepare+0x10>
   18ca8:	3044      	adds	r0, #68	; 0x44
   18caa:	d119      	bne.n	18ce0 <lll_slave_prepare+0x44>
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   18cac:	4a13      	ldr	r2, [pc, #76]	; (18cfc <lll_slave_prepare+0x60>)
   18cae:	4914      	ldr	r1, [pc, #80]	; (18d00 <lll_slave_prepare+0x64>)
   18cb0:	4814      	ldr	r0, [pc, #80]	; (18d04 <lll_slave_prepare+0x68>)
   18cb2:	9400      	str	r4, [sp, #0]
   18cb4:	2300      	movs	r3, #0
   18cb6:	f7fe fd19 	bl	176ec <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18cba:	b108      	cbz	r0, 18cc0 <lll_slave_prepare+0x24>
   18cbc:	3044      	adds	r0, #68	; 0x44
   18cbe:	d101      	bne.n	18cc4 <lll_slave_prepare+0x28>
}
   18cc0:	b002      	add	sp, #8
   18cc2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18cc4:	4a10      	ldr	r2, [pc, #64]	; (18d08 <lll_slave_prepare+0x6c>)
   18cc6:	4911      	ldr	r1, [pc, #68]	; (18d0c <lll_slave_prepare+0x70>)
   18cc8:	4811      	ldr	r0, [pc, #68]	; (18d10 <lll_slave_prepare+0x74>)
   18cca:	2349      	movs	r3, #73	; 0x49
   18ccc:	f003 fb9e 	bl	1c40c <printk>
   18cd0:	4040      	eors	r0, r0
   18cd2:	f380 8811 	msr	BASEPRI, r0
   18cd6:	f04f 0003 	mov.w	r0, #3
   18cda:	df02      	svc	2
}
   18cdc:	b002      	add	sp, #8
   18cde:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18ce0:	4a09      	ldr	r2, [pc, #36]	; (18d08 <lll_slave_prepare+0x6c>)
   18ce2:	490a      	ldr	r1, [pc, #40]	; (18d0c <lll_slave_prepare+0x70>)
   18ce4:	480a      	ldr	r0, [pc, #40]	; (18d10 <lll_slave_prepare+0x74>)
   18ce6:	2345      	movs	r3, #69	; 0x45
   18ce8:	f003 fb90 	bl	1c40c <printk>
   18cec:	4040      	eors	r0, r0
   18cee:	f380 8811 	msr	BASEPRI, r0
   18cf2:	f04f 0003 	mov.w	r0, #3
   18cf6:	df02      	svc	2
   18cf8:	e7d8      	b.n	18cac <lll_slave_prepare+0x10>
   18cfa:	bf00      	nop
   18cfc:	00018acd 	.word	0x00018acd
   18d00:	00018491 	.word	0x00018491
   18d04:	00018489 	.word	0x00018489
   18d08:	00022924 	.word	0x00022924
   18d0c:	00022808 	.word	0x00022808
   18d10:	00021ce0 	.word	0x00021ce0

00018d14 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   18d14:	4b05      	ldr	r3, [pc, #20]	; (18d2c <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   18d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18d1a:	2100      	movs	r1, #0
   18d1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   18d20:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   18d24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   18d28:	4770      	bx	lr
   18d2a:	bf00      	nop
   18d2c:	4000b000 	.word	0x4000b000

00018d30 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   18d30:	4b05      	ldr	r3, [pc, #20]	; (18d48 <cntr_start+0x18>)
   18d32:	7818      	ldrb	r0, [r3, #0]
   18d34:	1c42      	adds	r2, r0, #1
   18d36:	701a      	strb	r2, [r3, #0]
   18d38:	b918      	cbnz	r0, 18d42 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18d3a:	4b04      	ldr	r3, [pc, #16]	; (18d4c <cntr_start+0x1c>)
   18d3c:	2201      	movs	r2, #1
   18d3e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   18d40:	4770      	bx	lr
		return 1;
   18d42:	2001      	movs	r0, #1
}
   18d44:	4770      	bx	lr
   18d46:	bf00      	nop
   18d48:	2000228c 	.word	0x2000228c
   18d4c:	4000b000 	.word	0x4000b000

00018d50 <cntr_stop>:

u32_t cntr_stop(void)
{
   18d50:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   18d52:	4c0d      	ldr	r4, [pc, #52]	; (18d88 <cntr_stop+0x38>)
   18d54:	7820      	ldrb	r0, [r4, #0]
   18d56:	b148      	cbz	r0, 18d6c <cntr_stop+0x1c>

	if (--_refcount) {
   18d58:	3801      	subs	r0, #1
   18d5a:	b2c0      	uxtb	r0, r0
   18d5c:	7020      	strb	r0, [r4, #0]
   18d5e:	b918      	cbnz	r0, 18d68 <cntr_stop+0x18>
   18d60:	4b0a      	ldr	r3, [pc, #40]	; (18d8c <cntr_stop+0x3c>)
   18d62:	2201      	movs	r2, #1
   18d64:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   18d66:	bd10      	pop	{r4, pc}
		return 1;
   18d68:	2001      	movs	r0, #1
}
   18d6a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   18d6c:	4a08      	ldr	r2, [pc, #32]	; (18d90 <cntr_stop+0x40>)
   18d6e:	4909      	ldr	r1, [pc, #36]	; (18d94 <cntr_stop+0x44>)
   18d70:	4809      	ldr	r0, [pc, #36]	; (18d98 <cntr_stop+0x48>)
   18d72:	232e      	movs	r3, #46	; 0x2e
   18d74:	f003 fb4a 	bl	1c40c <printk>
   18d78:	4040      	eors	r0, r0
   18d7a:	f380 8811 	msr	BASEPRI, r0
   18d7e:	f04f 0003 	mov.w	r0, #3
   18d82:	df02      	svc	2
   18d84:	7820      	ldrb	r0, [r4, #0]
   18d86:	e7e7      	b.n	18d58 <cntr_stop+0x8>
   18d88:	2000228c 	.word	0x2000228c
   18d8c:	4000b004 	.word	0x4000b004
   18d90:	00022984 	.word	0x00022984
   18d94:	000229d0 	.word	0x000229d0
   18d98:	00021ce0 	.word	0x00021ce0

00018d9c <cntr_cnt_get>:
     return p_reg->COUNTER;
   18d9c:	4b01      	ldr	r3, [pc, #4]	; (18da4 <cntr_cnt_get+0x8>)
   18d9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   18da2:	4770      	bx	lr
   18da4:	4000b000 	.word	0x4000b000

00018da8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   18da8:	4b02      	ldr	r3, [pc, #8]	; (18db4 <cntr_cmp_set+0xc>)
   18daa:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   18dae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   18db2:	4770      	bx	lr
   18db4:	4000b000 	.word	0x4000b000

00018db8 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   18db8:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   18dba:	4b12      	ldr	r3, [pc, #72]	; (18e04 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18dbc:	4d12      	ldr	r5, [pc, #72]	; (18e08 <do_ecb+0x50>)
   18dbe:	2601      	movs	r6, #1
   18dc0:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   18dc2:	2100      	movs	r1, #0
   18dc4:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   18dc6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   18dca:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   18dce:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   18dd2:	601c      	str	r4, [r3, #0]
}
   18dd4:	e005      	b.n	18de2 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   18dd6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18dda:	b932      	cbnz	r2, 18dea <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   18ddc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   18de0:	b11a      	cbz	r2, 18dea <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18de2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   18de6:	2a00      	cmp	r2, #0
   18de8:	d0f5      	beq.n	18dd6 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18dea:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   18dec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   18df0:	2a00      	cmp	r2, #0
   18df2:	d1e7      	bne.n	18dc4 <do_ecb+0xc>
   18df4:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   18df8:	2f00      	cmp	r7, #0
   18dfa:	d0e3      	beq.n	18dc4 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   18dfc:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   18dfe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   18e02:	4770      	bx	lr
   18e04:	4000e000 	.word	0x4000e000
   18e08:	4000e004 	.word	0x4000e004

00018e0c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   18e0c:	b570      	push	{r4, r5, r6, lr}
   18e0e:	b08c      	sub	sp, #48	; 0x30
   18e10:	460e      	mov	r6, r1
   18e12:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18e14:	4601      	mov	r1, r0
   18e16:	2210      	movs	r2, #16
   18e18:	4668      	mov	r0, sp
{
   18e1a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18e1c:	f7f5 fe40 	bl	eaa0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   18e20:	2210      	movs	r2, #16
   18e22:	eb0d 0002 	add.w	r0, sp, r2
   18e26:	4631      	mov	r1, r6
   18e28:	f7f5 fe3a 	bl	eaa0 <mem_rcopy>

	do_ecb(&ecb);
   18e2c:	4668      	mov	r0, sp
   18e2e:	f7ff ffc3 	bl	18db8 <do_ecb>

	if (cipher_text_le) {
   18e32:	b125      	cbz	r5, 18e3e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   18e34:	4628      	mov	r0, r5
   18e36:	2210      	movs	r2, #16
   18e38:	a908      	add	r1, sp, #32
   18e3a:	f7f5 fe31 	bl	eaa0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   18e3e:	b124      	cbz	r4, 18e4a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   18e40:	4620      	mov	r0, r4
   18e42:	2210      	movs	r2, #16
   18e44:	a908      	add	r1, sp, #32
   18e46:	f005 fb4f 	bl	1e4e8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   18e4a:	b00c      	add	sp, #48	; 0x30
   18e4c:	bd70      	pop	{r4, r5, r6, pc}
   18e4e:	bf00      	nop

00018e50 <sw_switch.isra.0>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   18e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18e54:	f8df 824c 	ldr.w	r8, [pc, #588]	; 190a4 <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18e58:	f8df a23c 	ldr.w	sl, [pc, #572]	; 19098 <sw_switch.isra.0+0x248>
   18e5c:	f998 7000 	ldrsb.w	r7, [r8]
   18e60:	4b88      	ldr	r3, [pc, #544]	; (19084 <sw_switch.isra.0+0x234>)
   18e62:	f898 6000 	ldrb.w	r6, [r8]
   18e66:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   18e6a:	f107 030b 	add.w	r3, r7, #11
   18e6e:	b2db      	uxtb	r3, r3
   18e70:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18e72:	4c85      	ldr	r4, [pc, #532]	; (19088 <sw_switch.isra.0+0x238>)
   18e74:	f8df e230 	ldr.w	lr, [pc, #560]	; 190a8 <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18e78:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   18e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18e80:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   18e84:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   18e88:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18e8c:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   18e90:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18e94:	f107 0410 	add.w	r4, r7, #16
   18e98:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18e9c:	44ce      	add	lr, r9
   18e9e:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   18ea2:	b2e4      	uxtb	r4, r4
   18ea4:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18ea6:	fa0f fc86 	sxth.w	ip, r6
   18eaa:	b1e8      	cbz	r0, 18ee8 <sw_switch.isra.0+0x98>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   18eac:	2a02      	cmp	r2, #2
   18eae:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   18eb2:	d04d      	beq.n	18f50 <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   18eb4:	f24a 593c 	movw	r9, #42300	; 0xa53c
   18eb8:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   18ebc:	2a04      	cmp	r2, #4
   18ebe:	bf18      	it	ne
   18ec0:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   18ec2:	2902      	cmp	r1, #2
   18ec4:	f000 80b1 	beq.w	1902a <sw_switch.isra.0+0x1da>
   18ec8:	2904      	cmp	r1, #4
   18eca:	f040 80a4 	bne.w	19016 <sw_switch.isra.0+0x1c6>
   18ece:	486f      	ldr	r0, [pc, #444]	; (1908c <sw_switch.isra.0+0x23c>)
   18ed0:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   18ed4:	f109 0914 	add.w	r9, r9, #20
   18ed8:	fba0 0909 	umull	r0, r9, r0, r9
   18edc:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18ee0:	486b      	ldr	r0, [pc, #428]	; (19090 <sw_switch.isra.0+0x240>)
   18ee2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		u8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   18ee6:	e040      	b.n	18f6a <sw_switch.isra.0+0x11a>
   18ee8:	00e4      	lsls	r4, r4, #3
   18eea:	00ed      	lsls	r5, r5, #3
   18eec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   18ef0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   18ef4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   18ef8:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   18efc:	4a65      	ldr	r2, [pc, #404]	; (19094 <sw_switch.isra.0+0x244>)
   18efe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   18f02:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(u8_t ppi_en,
	u8_t ppi_dis, u8_t cc_reg, u8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   18f06:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   18f0a:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   18f0e:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   18f12:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   18f16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   18f1a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   18f1e:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   18f22:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   18f24:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   18f28:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   18f2a:	bf8a      	itet	hi
   18f2c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   18f30:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   18f32:	eba3 0309 	subhi.w	r3, r3, r9
   18f36:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   18f3a:	4b57      	ldr	r3, [pc, #348]	; (19098 <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   18f3c:	f006 0601 	and.w	r6, r6, #1
   18f40:	f44f 6290 	mov.w	r2, #1152	; 0x480
   18f44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18f48:	f888 6000 	strb.w	r6, [r8]
}
   18f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f50:	2902      	cmp	r1, #2
   18f52:	f000 8090 	beq.w	19076 <sw_switch.isra.0+0x226>
   18f56:	2904      	cmp	r1, #4
   18f58:	f000 808a 	beq.w	19070 <sw_switch.isra.0+0x220>
   18f5c:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18f60:	484b      	ldr	r0, [pc, #300]	; (19090 <sw_switch.isra.0+0x240>)
   18f62:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   18f66:	074b      	lsls	r3, r1, #29
   18f68:	d56b      	bpl.n	19042 <sw_switch.isra.0+0x1f2>
	switch (phy) {
   18f6a:	2a02      	cmp	r2, #2
   18f6c:	d07d      	beq.n	1906a <sw_switch.isra.0+0x21a>
   18f6e:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   18f72:	f24a 7330 	movw	r3, #42800	; 0xa730
   18f76:	2a04      	cmp	r2, #4
   18f78:	bf14      	ite	ne
   18f7a:	4602      	movne	r2, r0
   18f7c:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   18f7e:	3702      	adds	r7, #2
   18f80:	b2ff      	uxtb	r7, r7
   18f82:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   18f84:	f8df b124 	ldr.w	fp, [pc, #292]	; 190ac <sw_switch.isra.0+0x25c>
   18f88:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   18f8c:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   18f90:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   18f94:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   18f98:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   18f9c:	f246 0b18 	movw	fp, #24600	; 0x6018
   18fa0:	f242 43b8 	movw	r3, #9400	; 0x24b8
   18fa4:	2904      	cmp	r1, #4
   18fa6:	bf14      	ite	ne
   18fa8:	4619      	movne	r1, r3
   18faa:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   18fac:	440a      	add	r2, r1
   18fae:	4937      	ldr	r1, [pc, #220]	; (1908c <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   18fb0:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   18fb4:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   18fb8:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18fbc:	bf88      	it	hi
   18fbe:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   18fc2:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18fc6:	bf8c      	ite	hi
   18fc8:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   18fca:	2301      	movls	r3, #1
   18fcc:	00e4      	lsls	r4, r4, #3
   18fce:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   18fd2:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   18fd4:	4b2c      	ldr	r3, [pc, #176]	; (19088 <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   18fd6:	4931      	ldr	r1, [pc, #196]	; (1909c <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   18fd8:	4a2f      	ldr	r2, [pc, #188]	; (19098 <sw_switch.isra.0+0x248>)
   18fda:	4831      	ldr	r0, [pc, #196]	; (190a0 <sw_switch.isra.0+0x250>)
   18fdc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   18fe0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   18fe4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   18fe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   18fec:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   18ff0:	4b27      	ldr	r3, [pc, #156]	; (19090 <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   18ff2:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   18ff6:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   18ff8:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   18ffc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   19000:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   19004:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   19008:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1900c:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   19010:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   19014:	e77f      	b.n	18f16 <sw_switch.isra.0+0xc6>
   19016:	481d      	ldr	r0, [pc, #116]	; (1908c <sw_switch.isra.0+0x23c>)
   19018:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1901c:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   19020:	fba0 0909 	umull	r0, r9, r0, r9
   19024:	ea4f 1999 	mov.w	r9, r9, lsr #6
   19028:	e79a      	b.n	18f60 <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1902a:	4a18      	ldr	r2, [pc, #96]	; (1908c <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1902c:	4918      	ldr	r1, [pc, #96]	; (19090 <sw_switch.isra.0+0x240>)
   1902e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   19032:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   19036:	f109 091c 	add.w	r9, r9, #28
   1903a:	fba2 3909 	umull	r3, r9, r2, r9
   1903e:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   19042:	00e4      	lsls	r4, r4, #3
   19044:	00ed      	lsls	r5, r5, #3
   19046:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1904a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1904e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   19052:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   19056:	2300      	movs	r3, #0
   19058:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1905c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   19060:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   19064:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   19068:	e755      	b.n	18f16 <sw_switch.isra.0+0xc6>
	switch (phy) {
   1906a:	f649 6234 	movw	r2, #40500	; 0x9e34
   1906e:	e786      	b.n	18f7e <sw_switch.isra.0+0x12e>
	switch (phy) {
   19070:	f04f 0946 	mov.w	r9, #70	; 0x46
   19074:	e734      	b.n	18ee0 <sw_switch.isra.0+0x90>
   19076:	4a06      	ldr	r2, [pc, #24]	; (19090 <sw_switch.isra.0+0x240>)
   19078:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1907c:	f04f 092d 	mov.w	r9, #45	; 0x2d
   19080:	e7df      	b.n	19042 <sw_switch.isra.0+0x1f2>
   19082:	bf00      	nop
   19084:	4000110c 	.word	0x4000110c
   19088:	40009140 	.word	0x40009140
   1908c:	10624dd3 	.word	0x10624dd3
   19090:	40001000 	.word	0x40001000
   19094:	40001004 	.word	0x40001004
   19098:	4001f000 	.word	0x4001f000
   1909c:	40009040 	.word	0x40009040
   190a0:	40001150 	.word	0x40001150
   190a4:	2000228d 	.word	0x2000228d
   190a8:	4001f004 	.word	0x4001f004
   190ac:	40009000 	.word	0x40009000

000190b0 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   190b0:	4b04      	ldr	r3, [pc, #16]	; (190c4 <isr_radio+0x14>)
   190b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   190b6:	b123      	cbz	r3, 190c2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   190b8:	4a03      	ldr	r2, [pc, #12]	; (190c8 <isr_radio+0x18>)
   190ba:	4b04      	ldr	r3, [pc, #16]	; (190cc <isr_radio+0x1c>)
   190bc:	6810      	ldr	r0, [r2, #0]
   190be:	681b      	ldr	r3, [r3, #0]
   190c0:	4718      	bx	r3
}
   190c2:	4770      	bx	lr
   190c4:	40001000 	.word	0x40001000
   190c8:	20001a30 	.word	0x20001a30
   190cc:	20001a2c 	.word	0x20001a2c

000190d0 <radio_isr_set>:
{
   190d0:	b538      	push	{r3, r4, r5, lr}
   190d2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   190d4:	2001      	movs	r0, #1
{
   190d6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   190d8:	f7ec fcde 	bl	5a98 <arch_irq_disable>
	isr_cb_param = param;
   190dc:	4a08      	ldr	r2, [pc, #32]	; (19100 <radio_isr_set+0x30>)
	isr_cb = cb;
   190de:	4809      	ldr	r0, [pc, #36]	; (19104 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   190e0:	4b09      	ldr	r3, [pc, #36]	; (19108 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   190e2:	490a      	ldr	r1, [pc, #40]	; (1910c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   190e4:	6015      	str	r5, [r2, #0]
   190e6:	2510      	movs	r5, #16
   190e8:	2202      	movs	r2, #2
	isr_cb = cb;
   190ea:	6004      	str	r4, [r0, #0]
   190ec:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   190f0:	2001      	movs	r0, #1
   190f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   190f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   190fa:	f7ec bcbd 	b.w	5a78 <arch_irq_enable>
   190fe:	bf00      	nop
   19100:	20001a30 	.word	0x20001a30
   19104:	20001a2c 	.word	0x20001a2c
   19108:	e000e100 	.word	0xe000e100
   1910c:	40001000 	.word	0x40001000

00019110 <radio_reset>:
{
   19110:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   19112:	2001      	movs	r0, #1
   19114:	f7ec fcc0 	bl	5a98 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   19118:	4b0b      	ldr	r3, [pc, #44]	; (19148 <radio_reset+0x38>)
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1911a:	490c      	ldr	r1, [pc, #48]	; (1914c <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1911c:	4a0c      	ldr	r2, [pc, #48]	; (19150 <radio_reset+0x40>)
   1911e:	4c0d      	ldr	r4, [pc, #52]	; (19154 <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19120:	480d      	ldr	r0, [pc, #52]	; (19158 <radio_reset+0x48>)
   19122:	2500      	movs	r5, #0
   19124:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   19128:	2501      	movs	r5, #1
   1912a:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1912e:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   19130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19134:	f023 0301 	bic.w	r3, r3, #1
   19138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1913c:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1913e:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19142:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   19146:	bd38      	pop	{r3, r4, r5, pc}
   19148:	40001000 	.word	0x40001000
   1914c:	40001774 	.word	0x40001774
   19150:	4001f000 	.word	0x4001f000
   19154:	00010900 	.word	0x00010900
   19158:	00021200 	.word	0x00021200

0001915c <radio_phy_set>:
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   1915c:	4a13      	ldr	r2, [pc, #76]	; (191ac <radio_phy_set+0x50>)
	switch (phy) {
   1915e:	2802      	cmp	r0, #2
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   19160:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   19162:	d00f      	beq.n	19184 <radio_phy_set+0x28>
   19164:	2804      	cmp	r0, #4
   19166:	d012      	beq.n	1918e <radio_phy_set+0x32>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   19168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1916c:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1916e:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   19170:	4b0f      	ldr	r3, [pc, #60]	; (191b0 <radio_phy_set+0x54>)
   19172:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   19176:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1917a:	f042 0201 	orr.w	r2, r2, #1
   1917e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   19182:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   19184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   19188:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1918a:	2104      	movs	r1, #4
		break;
   1918c:	e7f0      	b.n	19170 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   1918e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19192:	6013      	str	r3, [r2, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   19194:	6813      	ldr	r3, [r2, #0]
   19196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1919a:	f001 0101 	and.w	r1, r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   1919e:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   191a2:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile u32_t *)0x4000173c =
   191a6:	6013      	str	r3, [r2, #0]
		break;
   191a8:	e7e2      	b.n	19170 <radio_phy_set+0x14>
   191aa:	bf00      	nop
   191ac:	4000173c 	.word	0x4000173c
   191b0:	40001000 	.word	0x40001000

000191b4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
   191b4:	4b01      	ldr	r3, [pc, #4]	; (191bc <radio_tx_power_set+0x8>)
   191b6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   191ba:	4770      	bx	lr
   191bc:	40001000 	.word	0x40001000

000191c0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   191c0:	4b01      	ldr	r3, [pc, #4]	; (191c8 <radio_freq_chan_set+0x8>)
   191c2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   191c6:	4770      	bx	lr
   191c8:	40001000 	.word	0x40001000

000191cc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   191cc:	4b07      	ldr	r3, [pc, #28]	; (191ec <radio_whiten_iv_set+0x20>)
   191ce:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   191d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   191d6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   191da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   191de:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   191e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   191e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   191ea:	4770      	bx	lr
   191ec:	40001000 	.word	0x40001000

000191f0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   191f0:	4a0b      	ldr	r2, [pc, #44]	; (19220 <radio_aa_set+0x30>)
   191f2:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   191f4:	2301      	movs	r3, #1
{
   191f6:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   191f8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   191fc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   19200:	78c3      	ldrb	r3, [r0, #3]
   19202:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19206:	7843      	ldrb	r3, [r0, #1]
   19208:	7884      	ldrb	r4, [r0, #2]
   1920a:	7801      	ldrb	r1, [r0, #0]
   1920c:	041b      	lsls	r3, r3, #16
   1920e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   19212:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   19216:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19218:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1921c:	4770      	bx	lr
   1921e:	bf00      	nop
   19220:	40001000 	.word	0x40001000

00019224 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   19224:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   19228:	2b02      	cmp	r3, #2
{
   1922a:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   1922c:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   19230:	d024      	beq.n	1927c <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   19232:	2b04      	cmp	r3, #4
   19234:	bf14      	ite	ne
   19236:	2400      	movne	r4, #0
   19238:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1923c:	b10a      	cbz	r2, 19242 <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1923e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19242:	f1c0 0308 	rsb	r3, r0, #8
   19246:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   19248:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1924c:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1924e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   19252:	4a0d      	ldr	r2, [pc, #52]	; (19288 <radio_pkt_configure+0x64>)
}
   19254:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   19256:	4303      	orrs	r3, r0
   19258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1925c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   19260:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   19264:	4809      	ldr	r0, [pc, #36]	; (1928c <radio_pkt_configure+0x68>)
   19266:	4018      	ands	r0, r3
   19268:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1926c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   19270:	4319      	orrs	r1, r3
   19272:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   19276:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1927a:	4770      	bx	lr
	switch (phy) {
   1927c:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   19280:	2a00      	cmp	r2, #0
   19282:	d0de      	beq.n	19242 <radio_pkt_configure+0x1e>
   19284:	e7db      	b.n	1923e <radio_pkt_configure+0x1a>
   19286:	bf00      	nop
   19288:	40001000 	.word	0x40001000
   1928c:	fef80000 	.word	0xfef80000

00019290 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   19290:	4b01      	ldr	r3, [pc, #4]	; (19298 <radio_pkt_rx_set+0x8>)
   19292:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   19296:	4770      	bx	lr
   19298:	40001000 	.word	0x40001000

0001929c <radio_pkt_tx_set>:
   1929c:	4b01      	ldr	r3, [pc, #4]	; (192a4 <radio_pkt_tx_set+0x8>)
   1929e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   192a2:	4770      	bx	lr
   192a4:	40001000 	.word	0x40001000

000192a8 <radio_tx_chain_delay_get>:
}
   192a8:	2001      	movs	r0, #1
   192aa:	4770      	bx	lr

000192ac <radio_rx_ready_delay_get>:
}
   192ac:	2029      	movs	r0, #41	; 0x29
   192ae:	4770      	bx	lr

000192b0 <radio_rx_chain_delay_get>:
	switch (phy) {
   192b0:	2802      	cmp	r0, #2
   192b2:	d009      	beq.n	192c8 <radio_rx_chain_delay_get+0x18>
   192b4:	2804      	cmp	r0, #4
   192b6:	d105      	bne.n	192c4 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   192b8:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   192bc:	bf14      	ite	ne
   192be:	201e      	movne	r0, #30
   192c0:	2019      	moveq	r0, #25
   192c2:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   192c4:	200a      	movs	r0, #10
}
   192c6:	4770      	bx	lr
	switch (phy) {
   192c8:	2005      	movs	r0, #5
   192ca:	4770      	bx	lr

000192cc <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192cc:	4b01      	ldr	r3, [pc, #4]	; (192d4 <radio_tx_enable+0x8>)
   192ce:	2201      	movs	r2, #1
   192d0:	601a      	str	r2, [r3, #0]
}
   192d2:	4770      	bx	lr
   192d4:	40001000 	.word	0x40001000

000192d8 <radio_disable>:
{
   192d8:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   192da:	4a08      	ldr	r2, [pc, #32]	; (192fc <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   192dc:	4808      	ldr	r0, [pc, #32]	; (19300 <radio_disable+0x28>)
   192de:	4909      	ldr	r1, [pc, #36]	; (19304 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   192e0:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   192e2:	f44f 6590 	mov.w	r5, #1152	; 0x480
   192e6:	2400      	movs	r4, #0
   192e8:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   192ec:	6053      	str	r3, [r2, #4]
   192ee:	60d3      	str	r3, [r2, #12]
   192f0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   192f4:	bc30      	pop	{r4, r5}
   192f6:	600b      	str	r3, [r1, #0]
   192f8:	4770      	bx	lr
   192fa:	bf00      	nop
   192fc:	4001f000 	.word	0x4001f000
   19300:	40001000 	.word	0x40001000
   19304:	40001010 	.word	0x40001010

00019308 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   19308:	4b04      	ldr	r3, [pc, #16]	; (1931c <radio_status_reset+0x14>)
   1930a:	2200      	movs	r2, #0
   1930c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   19310:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   19314:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   19318:	4770      	bx	lr
   1931a:	bf00      	nop
   1931c:	40001000 	.word	0x40001000

00019320 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   19320:	4b03      	ldr	r3, [pc, #12]	; (19330 <radio_is_ready+0x10>)
   19322:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   19326:	3800      	subs	r0, #0
   19328:	bf18      	it	ne
   1932a:	2001      	movne	r0, #1
   1932c:	4770      	bx	lr
   1932e:	bf00      	nop
   19330:	40001000 	.word	0x40001000

00019334 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   19334:	4b03      	ldr	r3, [pc, #12]	; (19344 <radio_is_done+0x10>)
   19336:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1933a:	3800      	subs	r0, #0
   1933c:	bf18      	it	ne
   1933e:	2001      	movne	r0, #1
   19340:	4770      	bx	lr
   19342:	bf00      	nop
   19344:	40001000 	.word	0x40001000

00019348 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   19348:	4b03      	ldr	r3, [pc, #12]	; (19358 <radio_is_idle+0x10>)
   1934a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1934e:	fab0 f080 	clz	r0, r0
   19352:	0940      	lsrs	r0, r0, #5
   19354:	4770      	bx	lr
   19356:	bf00      	nop
   19358:	40001000 	.word	0x40001000

0001935c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1935c:	4b04      	ldr	r3, [pc, #16]	; (19370 <radio_crc_configure+0x14>)
   1935e:	f240 1203 	movw	r2, #259	; 0x103
   19362:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   19366:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1936a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1936e:	4770      	bx	lr
   19370:	40001000 	.word	0x40001000

00019374 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   19374:	4b03      	ldr	r3, [pc, #12]	; (19384 <radio_crc_is_valid+0x10>)
   19376:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1937a:	3800      	subs	r0, #0
   1937c:	bf18      	it	ne
   1937e:	2001      	movne	r0, #1
   19380:	4770      	bx	lr
   19382:	bf00      	nop
   19384:	40001000 	.word	0x40001000

00019388 <radio_pkt_empty_get>:
}
   19388:	4800      	ldr	r0, [pc, #0]	; (1938c <radio_pkt_empty_get+0x4>)
   1938a:	4770      	bx	lr
   1938c:	20001924 	.word	0x20001924

00019390 <radio_pkt_scratch_get>:
}
   19390:	4800      	ldr	r0, [pc, #0]	; (19394 <radio_pkt_scratch_get+0x4>)
   19392:	4770      	bx	lr
   19394:	20001928 	.word	0x20001928

00019398 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19398:	4b05      	ldr	r3, [pc, #20]	; (193b0 <radio_switch_complete_and_rx+0x18>)
{
   1939a:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1939c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1939e:	2403      	movs	r4, #3
{
   193a0:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   193a2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   193a6:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   193a8:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   193aa:	f7ff bd51 	b.w	18e50 <sw_switch.isra.0>
   193ae:	bf00      	nop
   193b0:	40001000 	.word	0x40001000

000193b4 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   193b4:	4b04      	ldr	r3, [pc, #16]	; (193c8 <radio_switch_complete_and_tx+0x14>)
{
   193b6:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   193b8:	2403      	movs	r4, #3
{
   193ba:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   193bc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   193c0:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   193c2:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   193c4:	f7ff bd44 	b.w	18e50 <sw_switch.isra.0>
   193c8:	40001000 	.word	0x40001000

000193cc <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   193cc:	4904      	ldr	r1, [pc, #16]	; (193e0 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   193ce:	4b05      	ldr	r3, [pc, #20]	; (193e4 <radio_switch_complete_and_disable+0x18>)
   193d0:	2003      	movs	r0, #3
   193d2:	f44f 6290 	mov.w	r2, #1152	; 0x480
   193d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   193da:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   193de:	4770      	bx	lr
   193e0:	40001000 	.word	0x40001000
   193e4:	4001f000 	.word	0x4001f000

000193e8 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   193e8:	4b02      	ldr	r3, [pc, #8]	; (193f4 <radio_rssi_status_reset+0xc>)
   193ea:	2200      	movs	r2, #0
   193ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   193f0:	4770      	bx	lr
   193f2:	bf00      	nop
   193f4:	40001000 	.word	0x40001000

000193f8 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   193f8:	4b03      	ldr	r3, [pc, #12]	; (19408 <radio_rssi_is_ready+0x10>)
   193fa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   193fe:	3800      	subs	r0, #0
   19400:	bf18      	it	ne
   19402:	2001      	movne	r0, #1
   19404:	4770      	bx	lr
   19406:	bf00      	nop
   19408:	40001000 	.word	0x40001000

0001940c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1940c:	b430      	push	{r4, r5}
   1940e:	2400      	movs	r4, #0
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   19410:	00a3      	lsls	r3, r4, #2
   19412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1941a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1941c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   19420:	3401      	adds	r4, #1
   19422:	8895      	ldrh	r5, [r2, #4]
   19424:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   19428:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1942a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1942e:	d1ef      	bne.n	19410 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   19430:	4b03      	ldr	r3, [pc, #12]	; (19440 <radio_filter_configure+0x34>)
   19432:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   19436:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   19438:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1943c:	4770      	bx	lr
   1943e:	bf00      	nop
   19440:	40001000 	.word	0x40001000

00019444 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   19444:	4a03      	ldr	r2, [pc, #12]	; (19454 <radio_filter_disable+0x10>)
   19446:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1944a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1944e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   19452:	4770      	bx	lr
   19454:	40001000 	.word	0x40001000

00019458 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   19458:	4b02      	ldr	r3, [pc, #8]	; (19464 <radio_filter_status_reset+0xc>)
   1945a:	2200      	movs	r2, #0
   1945c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   19460:	4770      	bx	lr
   19462:	bf00      	nop
   19464:	40001000 	.word	0x40001000

00019468 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   19468:	4b03      	ldr	r3, [pc, #12]	; (19478 <radio_filter_has_match+0x10>)
   1946a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1946e:	3800      	subs	r0, #0
   19470:	bf18      	it	ne
   19472:	2001      	movne	r0, #1
   19474:	4770      	bx	lr
   19476:	bf00      	nop
   19478:	40001000 	.word	0x40001000

0001947c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1947c:	4b01      	ldr	r3, [pc, #4]	; (19484 <radio_filter_match_get+0x8>)
   1947e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   19482:	4770      	bx	lr
   19484:	40001000 	.word	0x40001000

00019488 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19488:	4904      	ldr	r1, [pc, #16]	; (1949c <radio_tmr_status_reset+0x14>)
   1948a:	4b05      	ldr	r3, [pc, #20]	; (194a0 <radio_tmr_status_reset+0x18>)
   1948c:	4a05      	ldr	r2, [pc, #20]	; (194a4 <radio_tmr_status_reset+0x1c>)
   1948e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   19492:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   19496:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1949a:	4770      	bx	lr
   1949c:	4000b000 	.word	0x4000b000
   194a0:	4001f000 	.word	0x4001f000
   194a4:	0e742060 	.word	0x0e742060

000194a8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   194a8:	4b03      	ldr	r3, [pc, #12]	; (194b8 <radio_tmr_tifs_set+0x10>)
   194aa:	4a04      	ldr	r2, [pc, #16]	; (194bc <radio_tmr_tifs_set+0x14>)
   194ac:	781b      	ldrb	r3, [r3, #0]
   194ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   194b2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   194b6:	4770      	bx	lr
   194b8:	2000228d 	.word	0x2000228d
   194bc:	40009000 	.word	0x40009000

000194c0 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   194c0:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   194c2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   194c6:	4d2a      	ldr	r5, [pc, #168]	; (19570 <radio_tmr_start+0xb0>)
   194c8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   194cc:	42ab      	cmp	r3, r5
{
   194ce:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   194d0:	d906      	bls.n	194e0 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   194d2:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   194d6:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   194da:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   194de:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194e0:	4d24      	ldr	r5, [pc, #144]	; (19574 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   194e2:	4b25      	ldr	r3, [pc, #148]	; (19578 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   194e4:	4825      	ldr	r0, [pc, #148]	; (1957c <radio_tmr_start+0xbc>)
   194e6:	2601      	movs	r6, #1
   194e8:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   194ea:	2600      	movs	r6, #0
   194ec:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   194f0:	4d23      	ldr	r5, [pc, #140]	; (19580 <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   194f2:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   194f6:	2604      	movs	r6, #4
   194f8:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   194fc:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   194fe:	2602      	movs	r6, #2
   19500:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19504:	4a1f      	ldr	r2, [pc, #124]	; (19584 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   19506:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1950a:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1950e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19512:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   19516:	491c      	ldr	r1, [pc, #112]	; (19588 <radio_tmr_start+0xc8>)
   19518:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1951c:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1951e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   19522:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   19526:	b1e4      	cbz	r4, 19562 <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   19528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1952c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19530:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   19534:	4a13      	ldr	r2, [pc, #76]	; (19584 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   19536:	4b15      	ldr	r3, [pc, #84]	; (1958c <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19538:	4915      	ldr	r1, [pc, #84]	; (19590 <radio_tmr_start+0xd0>)
   1953a:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1953e:	2500      	movs	r5, #0
   19540:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19542:	4e14      	ldr	r6, [pc, #80]	; (19594 <radio_tmr_start+0xd4>)
   19544:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   19546:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   19548:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1954c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   19550:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   19554:	601c      	str	r4, [r3, #0]
   19556:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1955a:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1955c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   19560:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   19562:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19566:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1956a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1956e:	e7e1      	b.n	19534 <radio_tmr_start+0x74>
   19570:	7ff0bdbf 	.word	0x7ff0bdbf
   19574:	4000800c 	.word	0x4000800c
   19578:	40008000 	.word	0x40008000
   1957c:	431bde83 	.word	0x431bde83
   19580:	4000b000 	.word	0x4000b000
   19584:	4001f000 	.word	0x4001f000
   19588:	4000b148 	.word	0x4000b148
   1958c:	40009000 	.word	0x40009000
   19590:	4000900c 	.word	0x4000900c
   19594:	4000110c 	.word	0x4000110c

00019598 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   19598:	4b01      	ldr	r3, [pc, #4]	; (195a0 <radio_tmr_start_get+0x8>)
   1959a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1959e:	4770      	bx	lr
   195a0:	4000b000 	.word	0x4000b000

000195a4 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   195a4:	b410      	push	{r4}
   195a6:	4805      	ldr	r0, [pc, #20]	; (195bc <radio_tmr_stop+0x18>)
   195a8:	4c05      	ldr	r4, [pc, #20]	; (195c0 <radio_tmr_stop+0x1c>)
   195aa:	4906      	ldr	r1, [pc, #24]	; (195c4 <radio_tmr_stop+0x20>)
   195ac:	4a06      	ldr	r2, [pc, #24]	; (195c8 <radio_tmr_stop+0x24>)
   195ae:	2301      	movs	r3, #1
   195b0:	6023      	str	r3, [r4, #0]
   195b2:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   195b4:	bc10      	pop	{r4}
   195b6:	600b      	str	r3, [r1, #0]
   195b8:	6013      	str	r3, [r2, #0]
   195ba:	4770      	bx	lr
   195bc:	40008010 	.word	0x40008010
   195c0:	40008004 	.word	0x40008004
   195c4:	40009004 	.word	0x40009004
   195c8:	40009010 	.word	0x40009010

000195cc <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   195cc:	4904      	ldr	r1, [pc, #16]	; (195e0 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   195ce:	4b05      	ldr	r3, [pc, #20]	; (195e4 <radio_tmr_hcto_configure+0x18>)
   195d0:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   195d4:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   195d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   195dc:	4770      	bx	lr
   195de:	bf00      	nop
   195e0:	40008000 	.word	0x40008000
   195e4:	4001f000 	.word	0x4001f000

000195e8 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   195e8:	4b05      	ldr	r3, [pc, #20]	; (19600 <radio_tmr_aa_capture+0x18>)
   195ea:	4806      	ldr	r0, [pc, #24]	; (19604 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   195ec:	4906      	ldr	r1, [pc, #24]	; (19608 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   195ee:	4a07      	ldr	r2, [pc, #28]	; (1960c <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   195f0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   195f4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   195f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   195fc:	4770      	bx	lr
   195fe:	bf00      	nop
   19600:	4001f000 	.word	0x4001f000
   19604:	40001100 	.word	0x40001100
   19608:	40008040 	.word	0x40008040
   1960c:	04000040 	.word	0x04000040

00019610 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   19610:	4b01      	ldr	r3, [pc, #4]	; (19618 <radio_tmr_aa_get+0x8>)
   19612:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   19616:	4770      	bx	lr
   19618:	40008000 	.word	0x40008000

0001961c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1961c:	4b01      	ldr	r3, [pc, #4]	; (19624 <radio_tmr_aa_save+0x8>)
   1961e:	6018      	str	r0, [r3, #0]
}
   19620:	4770      	bx	lr
   19622:	bf00      	nop
   19624:	20001a34 	.word	0x20001a34

00019628 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   19628:	4b01      	ldr	r3, [pc, #4]	; (19630 <radio_tmr_aa_restore+0x8>)
}
   1962a:	6818      	ldr	r0, [r3, #0]
   1962c:	4770      	bx	lr
   1962e:	bf00      	nop
   19630:	20001a34 	.word	0x20001a34

00019634 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   19634:	4b01      	ldr	r3, [pc, #4]	; (1963c <radio_tmr_ready_get+0x8>)
   19636:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1963a:	4770      	bx	lr
   1963c:	40008000 	.word	0x40008000

00019640 <radio_tmr_end_capture>:
   19640:	4b02      	ldr	r3, [pc, #8]	; (1964c <radio_tmr_end_capture+0xc>)
   19642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   19646:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1964a:	4770      	bx	lr
   1964c:	4001f000 	.word	0x4001f000

00019650 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19650:	4b01      	ldr	r3, [pc, #4]	; (19658 <radio_tmr_end_get+0x8>)
   19652:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   19656:	4770      	bx	lr
   19658:	40008000 	.word	0x40008000

0001965c <radio_tmr_tifs_base_get>:
   1965c:	4b01      	ldr	r3, [pc, #4]	; (19664 <radio_tmr_tifs_base_get+0x8>)
   1965e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19662:	4770      	bx	lr
   19664:	40008000 	.word	0x40008000

00019668 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
   19668:	b4f0      	push	{r4, r5, r6, r7}

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1966a:	4b1e      	ldr	r3, [pc, #120]	; (196e4 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1966c:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1966e:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   19670:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19672:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   19676:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19678:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1967c:	d02f      	beq.n	196de <radio_ccm_rx_pkt_set+0x76>
   1967e:	2904      	cmp	r1, #4
   19680:	d12b      	bne.n	196da <radio_ccm_rx_pkt_set+0x72>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19682:	4819      	ldr	r0, [pc, #100]	; (196e8 <radio_ccm_rx_pkt_set+0x80>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19684:	4919      	ldr	r1, [pc, #100]	; (196ec <radio_ccm_rx_pkt_set+0x84>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19686:	4c1a      	ldr	r4, [pc, #104]	; (196f0 <radio_ccm_rx_pkt_set+0x88>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   19688:	2503      	movs	r5, #3
   1968a:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
   1968e:	f8c0 4578 	str.w	r4, [r0, #1400]	; 0x578
    p_reg->CHENSET = mask;
   19692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19696:	f8c0 157c 	str.w	r1, [r0, #1404]	; 0x57c
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1969a:	4916      	ldr	r1, [pc, #88]	; (196f4 <radio_ccm_rx_pkt_set+0x8c>)
    p_reg->CHENSET = mask;
   1969c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   196a0:	4b10      	ldr	r3, [pc, #64]	; (196e4 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   196a2:	4815      	ldr	r0, [pc, #84]	; (196f8 <radio_ccm_rx_pkt_set+0x90>)
   196a4:	4c10      	ldr	r4, [pc, #64]	; (196e8 <radio_ccm_rx_pkt_set+0x80>)
	NRF_CCM->MODE = mode;
   196a6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (u32_t)pkt;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   196aa:	4f14      	ldr	r7, [pc, #80]	; (196fc <radio_ccm_rx_pkt_set+0x94>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
   196ac:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
	NRF_CCM->SHORTS = 0;
   196b0:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   196b2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   196b6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
	NRF_CCM->OUTPTR = (u32_t)pkt;
   196ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   196be:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   196c0:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   196c4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   196c8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   196cc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   196d0:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   196d4:	bcf0      	pop	{r4, r5, r6, r7}
   196d6:	601a      	str	r2, [r3, #0]
   196d8:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   196da:	4909      	ldr	r1, [pc, #36]	; (19700 <radio_ccm_rx_pkt_set+0x98>)
   196dc:	e7e0      	b.n	196a0 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   196de:	4909      	ldr	r1, [pc, #36]	; (19704 <radio_ccm_rx_pkt_set+0x9c>)
   196e0:	e7de      	b.n	196a0 <radio_ccm_rx_pkt_set+0x38>
   196e2:	bf00      	nop
   196e4:	4000f000 	.word	0x4000f000
   196e8:	4001f000 	.word	0x4001f000
   196ec:	4000f00c 	.word	0x4000f00c
   196f0:	40001150 	.word	0x40001150
   196f4:	01020001 	.word	0x01020001
   196f8:	20001928 	.word	0x20001928
   196fc:	20001818 	.word	0x20001818
   19700:	01000001 	.word	0x01000001
   19704:	01010001 	.word	0x01010001

00019708 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   19708:	b470      	push	{r4, r5, r6}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1970a:	4b10      	ldr	r3, [pc, #64]	; (1974c <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1970c:	4d10      	ldr	r5, [pc, #64]	; (19750 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1970e:	4e11      	ldr	r6, [pc, #68]	; (19754 <radio_ccm_tx_pkt_set+0x4c>)
{
   19710:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19712:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19714:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19716:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1971a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1971e:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   19722:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   19726:	4e0c      	ldr	r6, [pc, #48]	; (19758 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (u32_t)pkt;
   19728:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1972c:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1972e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19732:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   19734:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19738:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1973c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19740:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19744:	601c      	str	r4, [r3, #0]
}
   19746:	bc70      	pop	{r4, r5, r6}
   19748:	4770      	bx	lr
   1974a:	bf00      	nop
   1974c:	4000f000 	.word	0x4000f000
   19750:	20001928 	.word	0x20001928
   19754:	01010000 	.word	0x01010000
   19758:	20001818 	.word	0x20001818

0001975c <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1975c:	4a0e      	ldr	r2, [pc, #56]	; (19798 <radio_ccm_is_done+0x3c>)
   1975e:	2302      	movs	r3, #2
   19760:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19764:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19768:	b933      	cbnz	r3, 19778 <radio_ccm_is_done+0x1c>
		__WFE();
   1976a:	bf20      	wfe
		__SEV();
   1976c:	bf40      	sev
		__WFE();
   1976e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19770:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19774:	2b00      	cmp	r3, #0
   19776:	d0f8      	beq.n	1976a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19778:	4b07      	ldr	r3, [pc, #28]	; (19798 <radio_ccm_is_done+0x3c>)
   1977a:	4a08      	ldr	r2, [pc, #32]	; (1979c <radio_ccm_is_done+0x40>)
   1977c:	2002      	movs	r0, #2
   1977e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19782:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19786:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1978a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1978e:	fab0 f080 	clz	r0, r0
   19792:	0940      	lsrs	r0, r0, #5
   19794:	4770      	bx	lr
   19796:	bf00      	nop
   19798:	4000f000 	.word	0x4000f000
   1979c:	e000e100 	.word	0xe000e100

000197a0 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   197a0:	4b03      	ldr	r3, [pc, #12]	; (197b0 <radio_ccm_mic_is_valid+0x10>)
   197a2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   197a6:	3800      	subs	r0, #0
   197a8:	bf18      	it	ne
   197aa:	2001      	movne	r0, #1
   197ac:	4770      	bx	lr
   197ae:	bf00      	nop
   197b0:	4000f000 	.word	0x4000f000

000197b4 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   197b4:	4b15      	ldr	r3, [pc, #84]	; (1980c <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   197b6:	4a16      	ldr	r2, [pc, #88]	; (19810 <radio_ar_configure+0x5c>)
{
   197b8:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   197ba:	2403      	movs	r4, #3
   197bc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   197c0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   197c4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   197c8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   197cc:	4d11      	ldr	r5, [pc, #68]	; (19814 <radio_ar_configure+0x60>)
   197ce:	4c12      	ldr	r4, [pc, #72]	; (19818 <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   197d0:	3801      	subs	r0, #1
   197d2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   197d6:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   197d8:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   197da:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   197de:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   197e2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   197e6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   197ea:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   197ee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   197f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   197f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   197fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   197fe:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   19802:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19806:	bc30      	pop	{r4, r5}
   19808:	4770      	bx	lr
   1980a:	bf00      	nop
   1980c:	4000f000 	.word	0x4000f000
   19810:	40001000 	.word	0x40001000
   19814:	20001814 	.word	0x20001814
   19818:	4001f000 	.word	0x4001f000

0001981c <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1981c:	4b01      	ldr	r3, [pc, #4]	; (19824 <radio_ar_match_get+0x8>)
   1981e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19822:	4770      	bx	lr
   19824:	4000f000 	.word	0x4000f000

00019828 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19828:	4903      	ldr	r1, [pc, #12]	; (19838 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1982a:	4a04      	ldr	r2, [pc, #16]	; (1983c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1982c:	2300      	movs	r3, #0
   1982e:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19832:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   19836:	4770      	bx	lr
   19838:	40001000 	.word	0x40001000
   1983c:	4000f000 	.word	0x4000f000

00019840 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19840:	4b08      	ldr	r3, [pc, #32]	; (19864 <radio_ar_has_match+0x24>)
   19842:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19846:	b160      	cbz	r0, 19862 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19848:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1984c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19850:	b138      	cbz	r0, 19862 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19852:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19856:	b120      	cbz	r0, 19862 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19858:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1985c:	fab0 f080 	clz	r0, r0
   19860:	0940      	lsrs	r0, r0, #5
}
   19862:	4770      	bx	lr
   19864:	40001000 	.word	0x40001000

00019868 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19868:	2902      	cmp	r1, #2
{
   1986a:	b510      	push	{r4, lr}
   1986c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1986e:	d00b      	beq.n	19888 <mayfly_enable_cb+0x20>
   19870:	4a0a      	ldr	r2, [pc, #40]	; (1989c <mayfly_enable_cb+0x34>)
   19872:	490b      	ldr	r1, [pc, #44]	; (198a0 <mayfly_enable_cb+0x38>)
   19874:	480b      	ldr	r0, [pc, #44]	; (198a4 <mayfly_enable_cb+0x3c>)
   19876:	2325      	movs	r3, #37	; 0x25
   19878:	f002 fdc8 	bl	1c40c <printk>
   1987c:	4040      	eors	r0, r0
   1987e:	f380 8811 	msr	BASEPRI, r0
   19882:	f04f 0003 	mov.w	r0, #3
   19886:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19888:	200b      	movs	r0, #11
	if (enable) {
   1988a:	b11c      	cbz	r4, 19894 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19890:	f7ec b8f2 	b.w	5a78 <arch_irq_enable>
}
   19894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19898:	f7ec b8fe 	b.w	5a98 <arch_irq_disable>
   1989c:	00022a00 	.word	0x00022a00
   198a0:	00022a50 	.word	0x00022a50
   198a4:	00021ce0 	.word	0x00021ce0

000198a8 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   198a8:	b129      	cbz	r1, 198b6 <mayfly_is_enabled+0xe>
   198aa:	3901      	subs	r1, #1
   198ac:	2901      	cmp	r1, #1
   198ae:	d805      	bhi.n	198bc <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   198b0:	200b      	movs	r0, #11
   198b2:	f7ec b905 	b.w	5ac0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   198b6:	2018      	movs	r0, #24
   198b8:	f7ec b902 	b.w	5ac0 <arch_irq_is_enabled>
{
   198bc:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   198be:	4a07      	ldr	r2, [pc, #28]	; (198dc <mayfly_is_enabled+0x34>)
   198c0:	4907      	ldr	r1, [pc, #28]	; (198e0 <mayfly_is_enabled+0x38>)
   198c2:	4808      	ldr	r0, [pc, #32]	; (198e4 <mayfly_is_enabled+0x3c>)
   198c4:	233f      	movs	r3, #63	; 0x3f
   198c6:	f002 fda1 	bl	1c40c <printk>
   198ca:	4040      	eors	r0, r0
   198cc:	f380 8811 	msr	BASEPRI, r0
   198d0:	f04f 0003 	mov.w	r0, #3
   198d4:	df02      	svc	2
		break;
	}

	return 0;
}
   198d6:	2000      	movs	r0, #0
   198d8:	bd08      	pop	{r3, pc}
   198da:	bf00      	nop
   198dc:	00022a00 	.word	0x00022a00
   198e0:	00021c84 	.word	0x00021c84
   198e4:	00021ce0 	.word	0x00021ce0

000198e8 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   198e8:	4288      	cmp	r0, r1
   198ea:	d013      	beq.n	19914 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   198ec:	b928      	cbnz	r0, 198fa <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   198ee:	1e48      	subs	r0, r1, #1
   198f0:	2801      	cmp	r0, #1
   198f2:	bf8c      	ite	hi
   198f4:	2000      	movhi	r0, #0
   198f6:	2001      	movls	r0, #1
   198f8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   198fa:	2801      	cmp	r0, #1
   198fc:	d106      	bne.n	1990c <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   198fe:	b159      	cbz	r1, 19918 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19900:	f1a1 0002 	sub.w	r0, r1, #2
   19904:	fab0 f080 	clz	r0, r0
   19908:	0940      	lsrs	r0, r0, #5
   1990a:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1990c:	2802      	cmp	r0, #2
   1990e:	d004      	beq.n	1991a <mayfly_prio_is_equal+0x32>
   19910:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19912:	4770      	bx	lr
   19914:	2001      	movs	r0, #1
   19916:	4770      	bx	lr
#endif
#endif
	       0;
}
   19918:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1991a:	2901      	cmp	r1, #1
   1991c:	bf8c      	ite	hi
   1991e:	2000      	movhi	r0, #0
   19920:	2001      	movls	r0, #1
   19922:	4770      	bx	lr

00019924 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19924:	2901      	cmp	r1, #1
{
   19926:	b508      	push	{r3, lr}
	switch (callee_id) {
   19928:	d00f      	beq.n	1994a <mayfly_pend+0x26>
   1992a:	2902      	cmp	r1, #2
   1992c:	d00d      	beq.n	1994a <mayfly_pend+0x26>
   1992e:	b191      	cbz	r1, 19956 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19930:	4a0c      	ldr	r2, [pc, #48]	; (19964 <mayfly_pend+0x40>)
   19932:	490d      	ldr	r1, [pc, #52]	; (19968 <mayfly_pend+0x44>)
   19934:	480d      	ldr	r0, [pc, #52]	; (1996c <mayfly_pend+0x48>)
   19936:	237b      	movs	r3, #123	; 0x7b
   19938:	f002 fd68 	bl	1c40c <printk>
   1993c:	4040      	eors	r0, r0
   1993e:	f380 8811 	msr	BASEPRI, r0
   19942:	f04f 0003 	mov.w	r0, #3
   19946:	df02      	svc	2
		break;
	}
}
   19948:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1994a:	4b09      	ldr	r3, [pc, #36]	; (19970 <mayfly_pend+0x4c>)
   1994c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19954:	bd08      	pop	{r3, pc}
   19956:	4b06      	ldr	r3, [pc, #24]	; (19970 <mayfly_pend+0x4c>)
   19958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1995c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19960:	bd08      	pop	{r3, pc}
   19962:	bf00      	nop
   19964:	00022a00 	.word	0x00022a00
   19968:	00021c84 	.word	0x00021c84
   1996c:	00021ce0 	.word	0x00021ce0
   19970:	e000e100 	.word	0xe000e100

00019974 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19974:	2803      	cmp	r0, #3
{
   19976:	b510      	push	{r4, lr}
   19978:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1997a:	d804      	bhi.n	19986 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1997c:	4b11      	ldr	r3, [pc, #68]	; (199c4 <hal_ticker_instance0_caller_id_get+0x50>)
   1997e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19980:	b18c      	cbz	r4, 199a6 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19982:	4620      	mov	r0, r4
   19984:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19986:	4a10      	ldr	r2, [pc, #64]	; (199c8 <hal_ticker_instance0_caller_id_get+0x54>)
   19988:	4910      	ldr	r1, [pc, #64]	; (199cc <hal_ticker_instance0_caller_id_get+0x58>)
   1998a:	4811      	ldr	r0, [pc, #68]	; (199d0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1998c:	2338      	movs	r3, #56	; 0x38
   1998e:	f002 fd3d 	bl	1c40c <printk>
   19992:	4040      	eors	r0, r0
   19994:	f380 8811 	msr	BASEPRI, r0
   19998:	f04f 0003 	mov.w	r0, #3
   1999c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1999e:	4b09      	ldr	r3, [pc, #36]	; (199c4 <hal_ticker_instance0_caller_id_get+0x50>)
   199a0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   199a2:	2c00      	cmp	r4, #0
   199a4:	d1ed      	bne.n	19982 <hal_ticker_instance0_caller_id_get+0xe>
   199a6:	4a08      	ldr	r2, [pc, #32]	; (199c8 <hal_ticker_instance0_caller_id_get+0x54>)
   199a8:	490a      	ldr	r1, [pc, #40]	; (199d4 <hal_ticker_instance0_caller_id_get+0x60>)
   199aa:	4809      	ldr	r0, [pc, #36]	; (199d0 <hal_ticker_instance0_caller_id_get+0x5c>)
   199ac:	233b      	movs	r3, #59	; 0x3b
   199ae:	f002 fd2d 	bl	1c40c <printk>
   199b2:	4040      	eors	r0, r0
   199b4:	f380 8811 	msr	BASEPRI, r0
   199b8:	f04f 0003 	mov.w	r0, #3
   199bc:	df02      	svc	2
}
   199be:	4620      	mov	r0, r4
   199c0:	bd10      	pop	{r4, pc}
   199c2:	bf00      	nop
   199c4:	00022b08 	.word	0x00022b08
   199c8:	00022a74 	.word	0x00022a74
   199cc:	00022ac4 	.word	0x00022ac4
   199d0:	00021ce0 	.word	0x00021ce0
   199d4:	00022ae4 	.word	0x00022ae4

000199d8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   199d8:	3801      	subs	r0, #1
{
   199da:	b510      	push	{r4, lr}
   199dc:	461c      	mov	r4, r3
   199de:	2804      	cmp	r0, #4
   199e0:	d855      	bhi.n	19a8e <hal_ticker_instance0_sched+0xb6>
   199e2:	e8df f000 	tbb	[pc, r0]
   199e6:	1a12      	.short	0x1a12
   199e8:	1e16      	.short	0x1e16
   199ea:	03          	.byte	0x03
   199eb:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   199ec:	2904      	cmp	r1, #4
   199ee:	d01e      	beq.n	19a2e <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   199f0:	23c9      	movs	r3, #201	; 0xc9
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   199f2:	4a28      	ldr	r2, [pc, #160]	; (19a94 <hal_ticker_instance0_sched+0xbc>)
   199f4:	4928      	ldr	r1, [pc, #160]	; (19a98 <hal_ticker_instance0_sched+0xc0>)
   199f6:	4829      	ldr	r0, [pc, #164]	; (19a9c <hal_ticker_instance0_sched+0xc4>)
   199f8:	f002 fd08 	bl	1c40c <printk>
   199fc:	4040      	eors	r0, r0
   199fe:	f380 8811 	msr	BASEPRI, r0
   19a02:	f04f 0003 	mov.w	r0, #3
   19a06:	df02      	svc	2
		break;
	}
}
   19a08:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19a0a:	2904      	cmp	r1, #4
   19a0c:	d01f      	beq.n	19a4e <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   19a0e:	235c      	movs	r3, #92	; 0x5c
   19a10:	e7ef      	b.n	199f2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19a12:	2904      	cmp	r1, #4
   19a14:	d013      	beq.n	19a3e <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   19a16:	238b      	movs	r3, #139	; 0x8b
   19a18:	e7eb      	b.n	199f2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19a1a:	2903      	cmp	r1, #3
   19a1c:	d01f      	beq.n	19a5e <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   19a1e:	2374      	movs	r3, #116	; 0x74
   19a20:	e7e7      	b.n	199f2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19a22:	2903      	cmp	r1, #3
   19a24:	d02b      	beq.n	19a7e <hal_ticker_instance0_sched+0xa6>
   19a26:	2904      	cmp	r1, #4
   19a28:	d021      	beq.n	19a6e <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   19a2a:	23b1      	movs	r3, #177	; 0xb1
   19a2c:	e7e1      	b.n	199f2 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   19a2e:	4b1c      	ldr	r3, [pc, #112]	; (19aa0 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19a30:	2102      	movs	r1, #2
			m.param = instance;
   19a32:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19a34:	2003      	movs	r0, #3
}
   19a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19a3a:	f7f5 b8cd 	b.w	ebd8 <mayfly_enqueue>
			m.param = instance;
   19a3e:	4b19      	ldr	r3, [pc, #100]	; (19aa4 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19a40:	2102      	movs	r1, #2
			m.param = instance;
   19a42:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19a44:	2001      	movs	r0, #1
}
   19a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19a4a:	f7f5 b8c5 	b.w	ebd8 <mayfly_enqueue>
			m.param = instance;
   19a4e:	4b16      	ldr	r3, [pc, #88]	; (19aa8 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19a50:	2102      	movs	r1, #2
			m.param = instance;
   19a52:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19a54:	2000      	movs	r0, #0
}
   19a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19a5a:	f7f5 b8bd 	b.w	ebd8 <mayfly_enqueue>
			m.param = instance;
   19a5e:	4b13      	ldr	r3, [pc, #76]	; (19aac <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19a60:	2101      	movs	r1, #1
			m.param = instance;
   19a62:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19a64:	4608      	mov	r0, r1
}
   19a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19a6a:	f7f5 b8b5 	b.w	ebd8 <mayfly_enqueue>
			m.param = instance;
   19a6e:	4b10      	ldr	r3, [pc, #64]	; (19ab0 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a70:	2102      	movs	r1, #2
			m.param = instance;
   19a72:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a74:	4608      	mov	r0, r1
}
   19a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a7a:	f7f5 b8ad 	b.w	ebd8 <mayfly_enqueue>
			m.param = instance;
   19a7e:	4b0d      	ldr	r3, [pc, #52]	; (19ab4 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a80:	2101      	movs	r1, #1
			m.param = instance;
   19a82:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a84:	2002      	movs	r0, #2
}
   19a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19a8a:	f7f5 b8a5 	b.w	ebd8 <mayfly_enqueue>
		LL_ASSERT(0);
   19a8e:	23cf      	movs	r3, #207	; 0xcf
   19a90:	e7af      	b.n	199f2 <hal_ticker_instance0_sched+0x1a>
   19a92:	bf00      	nop
   19a94:	00022a74 	.word	0x00022a74
   19a98:	00021c84 	.word	0x00021c84
   19a9c:	00021ce0 	.word	0x00021ce0
   19aa0:	20005ea0 	.word	0x20005ea0
   19aa4:	20005e70 	.word	0x20005e70
   19aa8:	20005e50 	.word	0x20005e50
   19aac:	20005e60 	.word	0x20005e60
   19ab0:	20005e90 	.word	0x20005e90
   19ab4:	20005e80 	.word	0x20005e80

00019ab8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
   19ab8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   19aba:	2000      	movs	r0, #0
   19abc:	f7ff b974 	b.w	18da8 <cntr_cmp_set>

00019ac0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19ac0:	4b01      	ldr	r3, [pc, #4]	; (19ac8 <net_buf_pool_get+0x8>)
   19ac2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19ac6:	4770      	bx	lr
   19ac8:	20006240 	.word	0x20006240

00019acc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19acc:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   19ace:	4b04      	ldr	r3, [pc, #16]	; (19ae0 <net_buf_id+0x14>)
   19ad0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   19ad4:	69db      	ldr	r3, [r3, #28]
   19ad6:	1ac0      	subs	r0, r0, r3
}
   19ad8:	4b02      	ldr	r3, [pc, #8]	; (19ae4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   19ada:	10c0      	asrs	r0, r0, #3
}
   19adc:	4358      	muls	r0, r3
   19ade:	4770      	bx	lr
   19ae0:	20006240 	.word	0x20006240
   19ae4:	aaaaaaab 	.word	0xaaaaaaab

00019ae8 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   19ae8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19aea:	4b09      	ldr	r3, [pc, #36]	; (19b10 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19aec:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19aee:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   19af2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19af4:	699b      	ldr	r3, [r3, #24]
   19af6:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19af8:	6823      	ldr	r3, [r4, #0]
   19afa:	429a      	cmp	r2, r3
   19afc:	bf94      	ite	ls
   19afe:	600a      	strls	r2, [r1, #0]
   19b00:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19b02:	f7ff ffe3 	bl	19acc <net_buf_id>
   19b06:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19b0a:	fb02 3000 	mla	r0, r2, r0, r3
   19b0e:	bd10      	pop	{r4, pc}
   19b10:	20006240 	.word	0x20006240

00019b14 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   19b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19b18:	4605      	mov	r5, r0
   19b1a:	9101      	str	r1, [sp, #4]
   19b1c:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
   19b1e:	f006 fad8 	bl	200d2 <k_uptime_get_32>
   19b22:	4607      	mov	r7, r0
	__asm__ volatile(
   19b24:	f04f 0320 	mov.w	r3, #32
   19b28:	f3ef 8811 	mrs	r8, BASEPRI
   19b2c:	f383 8811 	msr	BASEPRI, r3
   19b30:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19b34:	8a6b      	ldrh	r3, [r5, #18]
   19b36:	2b00      	cmp	r3, #0
   19b38:	d041      	beq.n	19bbe <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19b3a:	8a2a      	ldrh	r2, [r5, #16]
   19b3c:	429a      	cmp	r2, r3
   19b3e:	d92c      	bls.n	19b9a <net_buf_alloc_len+0x86>
	return z_impl_k_queue_get(queue, timeout);
   19b40:	2100      	movs	r1, #0
   19b42:	4628      	mov	r0, r5
   19b44:	f006 fda1 	bl	2068a <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19b48:	4604      	mov	r4, r0
   19b4a:	b330      	cbz	r0, 19b9a <net_buf_alloc_len+0x86>
	__asm__ volatile(
   19b4c:	f388 8811 	msr	BASEPRI, r8
   19b50:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19b54:	9b01      	ldr	r3, [sp, #4]
   19b56:	2b00      	cmp	r3, #0
   19b58:	d040      	beq.n	19bdc <net_buf_alloc_len+0xc8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   19b5a:	1c73      	adds	r3, r6, #1
   19b5c:	2b01      	cmp	r3, #1
   19b5e:	d906      	bls.n	19b6e <net_buf_alloc_len+0x5a>
			u32_t diff = k_uptime_get_32() - alloc_start;
   19b60:	f006 fab7 	bl	200d2 <k_uptime_get_32>
   19b64:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   19b66:	42b0      	cmp	r0, r6
   19b68:	bf94      	ite	ls
   19b6a:	1a36      	subls	r6, r6, r0
   19b6c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19b6e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19b70:	4f20      	ldr	r7, [pc, #128]	; (19bf4 <net_buf_alloc_len+0xe0>)
   19b72:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   19b76:	4632      	mov	r2, r6
   19b78:	699b      	ldr	r3, [r3, #24]
   19b7a:	681b      	ldr	r3, [r3, #0]
   19b7c:	a901      	add	r1, sp, #4
   19b7e:	681b      	ldr	r3, [r3, #0]
   19b80:	4620      	mov	r0, r4
   19b82:	4798      	blx	r3
   19b84:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19b86:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19b88:	bb48      	cbnz	r0, 19bde <net_buf_alloc_len+0xca>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   19b8a:	79a0      	ldrb	r0, [r4, #6]
   19b8c:	4621      	mov	r1, r4
   19b8e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   19b92:	f006 fd50 	bl	20636 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19b96:	462c      	mov	r4, r5
}
   19b98:	e01c      	b.n	19bd4 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
   19b9a:	8a68      	ldrh	r0, [r5, #18]
   19b9c:	1e43      	subs	r3, r0, #1
   19b9e:	826b      	strh	r3, [r5, #18]
   19ba0:	f388 8811 	msr	BASEPRI, r8
   19ba4:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19ba8:	8a2c      	ldrh	r4, [r5, #16]
   19baa:	1a24      	subs	r4, r4, r0
   19bac:	69e8      	ldr	r0, [r5, #28]
   19bae:	2318      	movs	r3, #24
   19bb0:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   19bb4:	4b0f      	ldr	r3, [pc, #60]	; (19bf4 <net_buf_alloc_len+0xe0>)
   19bb6:	1aed      	subs	r5, r5, r3
   19bb8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   19bba:	71a5      	strb	r5, [r4, #6]
		goto success;
   19bbc:	e7ca      	b.n	19b54 <net_buf_alloc_len+0x40>
   19bbe:	f388 8811 	msr	BASEPRI, r8
   19bc2:	f3bf 8f6f 	isb	sy
   19bc6:	4631      	mov	r1, r6
   19bc8:	4628      	mov	r0, r5
   19bca:	f006 fd5e 	bl	2068a <z_impl_k_queue_get>
	if (!buf) {
   19bce:	4604      	mov	r4, r0
   19bd0:	2800      	cmp	r0, #0
   19bd2:	d1bf      	bne.n	19b54 <net_buf_alloc_len+0x40>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   19bd4:	4620      	mov	r0, r4
   19bd6:	b002      	add	sp, #8
   19bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   19bdc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19bde:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19be0:	2201      	movs	r2, #1
	buf->frags = NULL;
   19be2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   19be4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   19be6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   19be8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19bea:	6923      	ldr	r3, [r4, #16]
   19bec:	81e2      	strh	r2, [r4, #14]
   19bee:	60a3      	str	r3, [r4, #8]
	return buf;
   19bf0:	e7f0      	b.n	19bd4 <net_buf_alloc_len+0xc0>
   19bf2:	bf00      	nop
   19bf4:	20006240 	.word	0x20006240

00019bf8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bfa:	4d15      	ldr	r5, [pc, #84]	; (19c50 <net_buf_unref+0x58>)
   19bfc:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19bfe:	2600      	movs	r6, #0
	while (buf) {
   19c00:	b904      	cbnz	r4, 19c04 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   19c04:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19c06:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   19c08:	3b01      	subs	r3, #1
   19c0a:	b2db      	uxtb	r3, r3
   19c0c:	7123      	strb	r3, [r4, #4]
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d1f7      	bne.n	19c02 <net_buf_unref+0xa>
		if (buf->__buf) {
   19c12:	6921      	ldr	r1, [r4, #16]
   19c14:	b159      	cbz	r1, 19c2e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19c16:	7963      	ldrb	r3, [r4, #5]
   19c18:	079b      	lsls	r3, r3, #30
   19c1a:	d407      	bmi.n	19c2c <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   19c1c:	79a3      	ldrb	r3, [r4, #6]
   19c1e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   19c22:	4620      	mov	r0, r4
   19c24:	699b      	ldr	r3, [r3, #24]
   19c26:	681b      	ldr	r3, [r3, #0]
   19c28:	689b      	ldr	r3, [r3, #8]
   19c2a:	4798      	blx	r3
			buf->__buf = NULL;
   19c2c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   19c2e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19c30:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   19c32:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   19c36:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19c38:	695b      	ldr	r3, [r3, #20]
   19c3a:	b11b      	cbz	r3, 19c44 <net_buf_unref+0x4c>
			pool->destroy(buf);
   19c3c:	4620      	mov	r0, r4
   19c3e:	4798      	blx	r3
{
   19c40:	463c      	mov	r4, r7
   19c42:	e7dd      	b.n	19c00 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   19c44:	4621      	mov	r1, r4
   19c46:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   19c4a:	f006 fcf4 	bl	20636 <k_queue_prepend>
}
   19c4e:	e7f7      	b.n	19c40 <net_buf_unref+0x48>
   19c50:	20006240 	.word	0x20006240

00019c54 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   19c54:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   19c56:	4b09      	ldr	r3, [pc, #36]	; (19c7c <gpio_nrfx_init+0x28>)
   19c58:	781a      	ldrb	r2, [r3, #0]
   19c5a:	b96a      	cbnz	r2, 19c78 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   19c5c:	2101      	movs	r1, #1
   19c5e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   19c60:	2006      	movs	r0, #6
   19c62:	2105      	movs	r1, #5
   19c64:	f7eb ff3a 	bl	5adc <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   19c68:	2006      	movs	r0, #6
   19c6a:	f7eb ff05 	bl	5a78 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19c6e:	4b04      	ldr	r3, [pc, #16]	; (19c80 <gpio_nrfx_init+0x2c>)
   19c70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19c74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   19c78:	2000      	movs	r0, #0
   19c7a:	bd08      	pop	{r3, pc}
   19c7c:	2000228e 	.word	0x2000228e
   19c80:	40006000 	.word	0x40006000

00019c84 <gpio_nrfx_config>:
	return port->config->config_info;
   19c84:	6803      	ldr	r3, [r0, #0]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c86:	482e      	ldr	r0, [pc, #184]	; (19d40 <gpio_nrfx_config+0xbc>)
{
   19c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config->config_info;
   19c8a:	689e      	ldr	r6, [r3, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c8c:	4b2d      	ldr	r3, [pc, #180]	; (19d44 <gpio_nrfx_config+0xc0>)
   19c8e:	4013      	ands	r3, r2
   19c90:	4283      	cmp	r3, r0
   19c92:	d045      	beq.n	19d20 <gpio_nrfx_config+0x9c>
   19c94:	d80d      	bhi.n	19cb2 <gpio_nrfx_config+0x2e>
   19c96:	2b06      	cmp	r3, #6
   19c98:	d015      	beq.n	19cc6 <gpio_nrfx_config+0x42>
   19c9a:	d805      	bhi.n	19ca8 <gpio_nrfx_config+0x24>
   19c9c:	b19b      	cbz	r3, 19cc6 <gpio_nrfx_config+0x42>
   19c9e:	2b02      	cmp	r3, #2
   19ca0:	d040      	beq.n	19d24 <gpio_nrfx_config+0xa0>
   19ca2:	f06f 0015 	mvn.w	r0, #21
   19ca6:	e03a      	b.n	19d1e <gpio_nrfx_config+0x9a>
   19ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19cac:	d1f9      	bne.n	19ca2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   19cae:	2301      	movs	r3, #1
   19cb0:	e009      	b.n	19cc6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19cb2:	4825      	ldr	r0, [pc, #148]	; (19d48 <gpio_nrfx_config+0xc4>)
   19cb4:	4283      	cmp	r3, r0
   19cb6:	d037      	beq.n	19d28 <gpio_nrfx_config+0xa4>
   19cb8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   19cbc:	d036      	beq.n	19d2c <gpio_nrfx_config+0xa8>
   19cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   19cc2:	d1ee      	bne.n	19ca2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   19cc4:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   19cc6:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   19cc8:	bf54      	ite	pl
   19cca:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   19cce:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   19cd0:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   19cd4:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   19cd6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   19cda:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   19cde:	d507      	bpl.n	19cf0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19ce0:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19ce4:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19ce6:	d023      	beq.n	19d30 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   19ce8:	2201      	movs	r2, #1
   19cea:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   19cec:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   19cf0:	7a32      	ldrb	r2, [r6, #8]
   19cf2:	f001 011f 	and.w	r1, r1, #31
   19cf6:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
   19cfa:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   19cfc:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   19d00:	bfc6      	itte	gt
   19d02:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
   19d06:	4e11      	ldrgt	r6, [pc, #68]	; (19d4c <gpio_nrfx_config+0xc8>)
        return NRF_P0;
   19d08:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   19d0c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19d10:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   19d14:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19d18:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
   19d1c:	2000      	movs	r0, #0
}
   19d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   19d20:	2307      	movs	r3, #7
   19d22:	e7d0      	b.n	19cc6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   19d24:	2304      	movs	r3, #4
   19d26:	e7ce      	b.n	19cc6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   19d28:	2305      	movs	r3, #5
   19d2a:	e7cc      	b.n	19cc6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   19d2c:	2303      	movs	r3, #3
   19d2e:	e7ca      	b.n	19cc6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19d30:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   19d32:	bf42      	ittt	mi
   19d34:	2201      	movmi	r2, #1
   19d36:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   19d38:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   19d3c:	e7d8      	b.n	19cf0 <gpio_nrfx_config+0x6c>
   19d3e:	bf00      	nop
   19d40:	00100006 	.word	0x00100006
   19d44:	00f00006 	.word	0x00f00006
   19d48:	00400002 	.word	0x00400002
   19d4c:	50000300 	.word	0x50000300

00019d50 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
   19d50:	281f      	cmp	r0, #31
        return NRF_P1;
   19d52:	bf8a      	itet	hi
   19d54:	4b07      	ldrhi	r3, [pc, #28]	; (19d74 <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
   19d56:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   19d5a:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19d5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19d62:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   19d66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   19d6e:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   19d72:	4770      	bx	lr
   19d74:	50000300 	.word	0x50000300

00019d78 <gpiote_pin_int_cfg>:
{
   19d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
   19d7a:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   19d7c:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19d7e:	689b      	ldr	r3, [r3, #8]
   19d80:	f001 041f 	and.w	r4, r1, #31
{
   19d84:	460d      	mov	r5, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   19d86:	494a      	ldr	r1, [pc, #296]	; (19eb0 <gpiote_pin_int_cfg+0x138>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19d88:	7a18      	ldrb	r0, [r3, #8]
   19d8a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   19d8e:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
   19d92:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19d94:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19d96:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   19d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   19d9e:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   19da2:	4284      	cmp	r4, r0
   19da4:	d16d      	bne.n	19e82 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   19da6:	fa22 f003 	lsr.w	r0, r2, r3
   19daa:	07c0      	lsls	r0, r0, #31
   19dac:	d569      	bpl.n	19e82 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   19dae:	009a      	lsls	r2, r3, #2
   19db0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19db4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   19db8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19dbc:	f020 0001 	bic.w	r0, r0, #1
   19dc0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   19dc4:	2201      	movs	r2, #1
   19dc6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   19dca:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   19dce:	4620      	mov	r0, r4
   19dd0:	2100      	movs	r1, #0
   19dd2:	f7ff ffbd 	bl	19d50 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   19dd6:	68f3      	ldr	r3, [r6, #12]
   19dd8:	40eb      	lsrs	r3, r5
   19dda:	f013 0001 	ands.w	r0, r3, #1
   19dde:	d04e      	beq.n	19e7e <gpiote_pin_int_cfg+0x106>
   19de0:	6933      	ldr	r3, [r6, #16]
   19de2:	40eb      	lsrs	r3, r5
   19de4:	f013 0001 	ands.w	r0, r3, #1
   19de8:	d049      	beq.n	19e7e <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   19dea:	69b3      	ldr	r3, [r6, #24]
   19dec:	40eb      	lsrs	r3, r5
   19dee:	f013 0201 	ands.w	r2, r3, #1
   19df2:	d050      	beq.n	19e96 <gpiote_pin_int_cfg+0x11e>
			if (data->double_edge & BIT(pin)) {
   19df4:	69f3      	ldr	r3, [r6, #28]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   19df6:	4f2e      	ldr	r7, [pc, #184]	; (19eb0 <gpiote_pin_int_cfg+0x138>)
   19df8:	40eb      	lsrs	r3, r5
   19dfa:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   19dfc:	bf5f      	itttt	pl
   19dfe:	6971      	ldrpl	r1, [r6, #20]
   19e00:	fa21 f505 	lsrpl.w	r5, r1, r5
   19e04:	f005 0501 	andpl.w	r5, r5, #1
   19e08:	f1c5 0502 	rsbpl	r5, r5, #2
   19e0c:	bf54      	ite	pl
   19e0e:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   19e10:	2503      	movmi	r5, #3
   19e12:	2600      	movs	r6, #0
   19e14:	f506 73a2 	add.w	r3, r6, #324	; 0x144
   19e18:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   19e1c:	f010 0003 	ands.w	r0, r0, #3
   19e20:	d133      	bne.n	19e8a <gpiote_pin_int_cfg+0x112>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19e22:	00b2      	lsls	r2, r6, #2
   19e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19e28:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19e2c:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19e2e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   19e32:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   19e36:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   19e3a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19e3e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   19e42:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   19e46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   19e4a:	430d      	orrs	r5, r1
			nrf_gpiote_event_t evt =
   19e4c:	f106 0140 	add.w	r1, r6, #64	; 0x40
   19e50:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
   19e52:	b289      	uxth	r1, r1
   19e54:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19e58:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19e5c:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19e60:	6008      	str	r0, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   19e62:	6809      	ldr	r1, [r1, #0]
   19e64:	9101      	str	r1, [sp, #4]
    (void)dummy;
   19e66:	9901      	ldr	r1, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19e68:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   19e6c:	f041 0101 	orr.w	r1, r1, #1
   19e70:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   19e74:	2201      	movs	r2, #1
   19e76:	fa02 f606 	lsl.w	r6, r2, r6
    p_reg->INTENSET = mask;
   19e7a:	f8c7 6304 	str.w	r6, [r7, #772]	; 0x304
}
   19e7e:	b003      	add	sp, #12
   19e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19e82:	3301      	adds	r3, #1
   19e84:	2b08      	cmp	r3, #8
   19e86:	d186      	bne.n	19d96 <gpiote_pin_int_cfg+0x1e>
   19e88:	e7a1      	b.n	19dce <gpiote_pin_int_cfg+0x56>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   19e8a:	3601      	adds	r6, #1
   19e8c:	2e08      	cmp	r6, #8
   19e8e:	d1c1      	bne.n	19e14 <gpiote_pin_int_cfg+0x9c>
	return -ENODEV;
   19e90:	f06f 0012 	mvn.w	r0, #18
   19e94:	e7f3      	b.n	19e7e <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19e96:	6971      	ldr	r1, [r6, #20]
   19e98:	40e9      	lsrs	r1, r5
   19e9a:	f001 0101 	and.w	r1, r1, #1
   19e9e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   19ea2:	4620      	mov	r0, r4
   19ea4:	b2c9      	uxtb	r1, r1
   19ea6:	f7ff ff53 	bl	19d50 <nrf_gpio_cfg_sense_set>
	int res = 0;
   19eaa:	4610      	mov	r0, r2
   19eac:	e7e7      	b.n	19e7e <gpiote_pin_int_cfg+0x106>
   19eae:	bf00      	nop
   19eb0:	40006000 	.word	0x40006000

00019eb4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   19eb4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   19eb8:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   19eba:	6884      	ldr	r4, [r0, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   19ebc:	d117      	bne.n	19eee <gpio_nrfx_pin_interrupt_configure+0x3a>
	return port->config->config_info;
   19ebe:	6805      	ldr	r5, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19ec0:	68ad      	ldr	r5, [r5, #8]
   19ec2:	7a2e      	ldrb	r6, [r5, #8]
   19ec4:	f001 051f 	and.w	r5, r1, #31
   19ec8:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    if (*p_pin < P0_PIN_NUM)
   19ecc:	2d1f      	cmp	r5, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   19ece:	bfc6      	itte	gt
   19ed0:	f005 051f 	andgt.w	r5, r5, #31
        return NRF_P1;
   19ed4:	4e1e      	ldrgt	r6, [pc, #120]	; (19f50 <gpio_nrfx_pin_interrupt_configure+0x9c>)
        return NRF_P0;
   19ed6:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19eda:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   19ede:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   19ee2:	07ed      	lsls	r5, r5, #31
   19ee4:	d507      	bpl.n	19ef6 <gpio_nrfx_pin_interrupt_configure+0x42>
}
   19ee6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19eea:	bc70      	pop	{r4, r5, r6}
   19eec:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19eee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   19ef2:	68e5      	ldr	r5, [r4, #12]
   19ef4:	d026      	beq.n	19f44 <gpio_nrfx_pin_interrupt_configure+0x90>
   19ef6:	68e6      	ldr	r6, [r4, #12]
   19ef8:	2501      	movs	r5, #1
   19efa:	408d      	lsls	r5, r1
   19efc:	4335      	orrs	r5, r6
   19efe:	6926      	ldr	r6, [r4, #16]
   19f00:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19f02:	2501      	movs	r5, #1
   19f04:	408d      	lsls	r5, r1
   19f06:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   19f0a:	bf14      	ite	ne
   19f0c:	432e      	orrne	r6, r5
   19f0e:	43ae      	biceq	r6, r5
   19f10:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19f12:	69a6      	ldr	r6, [r4, #24]
   19f14:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   19f18:	69e2      	ldr	r2, [r4, #28]
   19f1a:	bf0c      	ite	eq
   19f1c:	432e      	orreq	r6, r5
   19f1e:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   19f20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   19f24:	bf0c      	ite	eq
   19f26:	432a      	orreq	r2, r5
   19f28:	43aa      	bicne	r2, r5
   19f2a:	61e2      	str	r2, [r4, #28]
   19f2c:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19f2e:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   19f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   19f34:	bf0c      	ite	eq
   19f36:	4315      	orreq	r5, r2
   19f38:	ea22 0505 	bicne.w	r5, r2, r5
   19f3c:	6165      	str	r5, [r4, #20]
}
   19f3e:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   19f40:	f7ff bf1a 	b.w	19d78 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19f44:	2601      	movs	r6, #1
   19f46:	408e      	lsls	r6, r1
   19f48:	ea25 0506 	bic.w	r5, r5, r6
   19f4c:	e7d7      	b.n	19efe <gpio_nrfx_pin_interrupt_configure+0x4a>
   19f4e:	bf00      	nop
   19f50:	50000300 	.word	0x50000300

00019f54 <gpiote_event_handler>:
{
   19f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
   19f56:	2600      	movs	r6, #0
{
   19f58:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
   19f5a:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f5e:	4d28      	ldr	r5, [pc, #160]	; (1a000 <gpiote_event_handler+0xac>)
   19f60:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   19f62:	b15c      	cbz	r4, 19f7c <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   19f64:	4827      	ldr	r0, [pc, #156]	; (1a004 <gpiote_event_handler+0xb0>)
   19f66:	f006 f9a2 	bl	202ae <check_level_trigger_pins>
		fired_triggers[0] =
   19f6a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   19f6c:	4826      	ldr	r0, [pc, #152]	; (1a008 <gpiote_event_handler+0xb4>)
   19f6e:	f006 f99e 	bl	202ae <check_level_trigger_pins>
		fired_triggers[1] =
   19f72:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19f74:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   19f76:	682b      	ldr	r3, [r5, #0]
   19f78:	9300      	str	r3, [sp, #0]
    (void)dummy;
   19f7a:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   19f7c:	4d23      	ldr	r5, [pc, #140]	; (1a00c <gpiote_event_handler+0xb8>)
{
   19f7e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   19f80:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19f82:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   19f84:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   19f88:	fa06 f102 	lsl.w	r1, r6, r2
   19f8c:	4219      	tst	r1, r3
   19f8e:	d01d      	beq.n	19fcc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f90:	0091      	lsls	r1, r2, #2
   19f92:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19f96:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   19f9a:	680b      	ldr	r3, [r1, #0]
   19f9c:	b1b3      	cbz	r3, 19fcc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19f9e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   19fa2:	af04      	add	r7, sp, #16
   19fa4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19fa8:	f8c1 c000 	str.w	ip, [r1]
   19fac:	f3c3 3040 	ubfx	r0, r3, #13, #1
   19fb0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   19fb4:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19fb8:	f850 7c08 	ldr.w	r7, [r0, #-8]
   19fbc:	fa06 f303 	lsl.w	r3, r6, r3
   19fc0:	433b      	orrs	r3, r7
   19fc2:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   19fc6:	680b      	ldr	r3, [r1, #0]
   19fc8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   19fca:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19fcc:	3201      	adds	r2, #1
   19fce:	2a08      	cmp	r2, #8
   19fd0:	d1d8      	bne.n	19f84 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
   19fd2:	9902      	ldr	r1, [sp, #8]
   19fd4:	b111      	cbz	r1, 19fdc <gpiote_event_handler+0x88>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
   19fd6:	480b      	ldr	r0, [pc, #44]	; (1a004 <gpiote_event_handler+0xb0>)
   19fd8:	f006 f94d 	bl	20276 <fire_callbacks>
	if (fired_triggers[1]) {
   19fdc:	9903      	ldr	r1, [sp, #12]
   19fde:	b111      	cbz	r1, 19fe6 <gpiote_event_handler+0x92>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
   19fe0:	4809      	ldr	r0, [pc, #36]	; (1a008 <gpiote_event_handler+0xb4>)
   19fe2:	f006 f948 	bl	20276 <fire_callbacks>
	if (port_event) {
   19fe6:	b144      	cbz	r4, 19ffa <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   19fe8:	4806      	ldr	r0, [pc, #24]	; (1a004 <gpiote_event_handler+0xb0>)
   19fea:	f006 f993 	bl	20314 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   19fee:	4806      	ldr	r0, [pc, #24]	; (1a008 <gpiote_event_handler+0xb4>)
}
   19ff0:	b005      	add	sp, #20
   19ff2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   19ff6:	f006 b98d 	b.w	20314 <cfg_level_pins>
}
   19ffa:	b005      	add	sp, #20
   19ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ffe:	bf00      	nop
   1a000:	4000617c 	.word	0x4000617c
   1a004:	200060f8 	.word	0x200060f8
   1a008:	20006104 	.word	0x20006104
   1a00c:	40006000 	.word	0x40006000

0001a010 <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   1a010:	4b02      	ldr	r3, [pc, #8]	; (1a01c <flash_nrf_pages_layout+0xc>)
   1a012:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1a014:	2301      	movs	r3, #1
   1a016:	6013      	str	r3, [r2, #0]
}
   1a018:	4770      	bx	lr
   1a01a:	bf00      	nop
   1a01c:	20001aa8 	.word	0x20001aa8

0001a020 <time_slot_callback_helper>:
{
   1a020:	b570      	push	{r4, r5, r6, lr}
   1a022:	b08c      	sub	sp, #48	; 0x30
   1a024:	461d      	mov	r5, r3
   1a026:	4606      	mov	r6, r0
	ll_radio_state_abort();
   1a028:	f7f8 fa16 	bl	12458 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1a02c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   1a030:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1a034:	f7f8 fa0a 	bl	1244c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   1a038:	4b13      	ldr	r3, [pc, #76]	; (1a088 <time_slot_callback_helper+0x68>)
   1a03a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1a03e:	9506      	str	r5, [sp, #24]
   1a040:	2400      	movs	r4, #0
   1a042:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1a046:	2310      	movs	r3, #16
   1a048:	9300      	str	r3, [sp, #0]
   1a04a:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1a04e:	4633      	mov	r3, r6
   1a050:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1a054:	9401      	str	r4, [sp, #4]
   1a056:	4622      	mov	r2, r4
   1a058:	4621      	mov	r1, r4
   1a05a:	f7f5 fd11 	bl	fa80 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1a05e:	f030 0302 	bics.w	r3, r0, #2
   1a062:	d00e      	beq.n	1a082 <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1a064:	f06f 0347 	mvn.w	r3, #71	; 0x47
   1a068:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
   1a06a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1a06e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1a072:	9400      	str	r4, [sp, #0]
   1a074:	4623      	mov	r3, r4
   1a076:	4621      	mov	r1, r4
   1a078:	f7f5 fda8 	bl	fbcc <ticker_stop>
	z_impl_k_sem_give(sem);
   1a07c:	4803      	ldr	r0, [pc, #12]	; (1a08c <time_slot_callback_helper+0x6c>)
   1a07e:	f001 fb97 	bl	1b7b0 <z_impl_k_sem_give>
}
   1a082:	b00c      	add	sp, #48	; 0x30
   1a084:	bd70      	pop	{r4, r5, r6, pc}
   1a086:	bf00      	nop
   1a088:	0001a091 	.word	0x0001a091
   1a08c:	20001ac8 	.word	0x20001ac8

0001a090 <time_slot_callback_work>:
{
   1a090:	b530      	push	{r4, r5, lr}
   1a092:	461d      	mov	r5, r3
   1a094:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1a096:	e9d3 3000 	ldrd	r3, r0, [r3]
   1a09a:	4798      	blx	r3
   1a09c:	4604      	mov	r4, r0
   1a09e:	b990      	cbnz	r0, 1a0c6 <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1a0a0:	f10d 010f 	add.w	r1, sp, #15
   1a0a4:	f10d 000e 	add.w	r0, sp, #14
   1a0a8:	f7f8 f9d0 	bl	1244c <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
   1a0ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1a0b0:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1a0b4:	9400      	str	r4, [sp, #0]
   1a0b6:	4623      	mov	r3, r4
   1a0b8:	4621      	mov	r1, r4
   1a0ba:	f7f5 fd87 	bl	fbcc <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   1a0be:	60ac      	str	r4, [r5, #8]
   1a0c0:	4802      	ldr	r0, [pc, #8]	; (1a0cc <time_slot_callback_work+0x3c>)
   1a0c2:	f001 fb75 	bl	1b7b0 <z_impl_k_sem_give>
}
   1a0c6:	b005      	add	sp, #20
   1a0c8:	bd30      	pop	{r4, r5, pc}
   1a0ca:	bf00      	nop
   1a0cc:	20001ac8 	.word	0x20001ac8

0001a0d0 <nrf_flash_init>:
{
   1a0d0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a0d2:	2201      	movs	r2, #1
   1a0d4:	4611      	mov	r1, r2
   1a0d6:	4808      	ldr	r0, [pc, #32]	; (1a0f8 <nrf_flash_init+0x28>)
   1a0d8:	f006 fc3e 	bl	20958 <z_impl_k_sem_init>
   1a0dc:	2201      	movs	r2, #1
   1a0de:	2100      	movs	r1, #0
   1a0e0:	4806      	ldr	r0, [pc, #24]	; (1a0fc <nrf_flash_init+0x2c>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1a0e2:	4c07      	ldr	r4, [pc, #28]	; (1a100 <nrf_flash_init+0x30>)
   1a0e4:	f006 fc38 	bl	20958 <z_impl_k_sem_init>
   1a0e8:	f006 f9f1 	bl	204ce <nrfx_nvmc_flash_page_count_get>
   1a0ec:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1a0ee:	f006 f9ea 	bl	204c6 <nrfx_nvmc_flash_page_size_get>
   1a0f2:	6060      	str	r0, [r4, #4]
}
   1a0f4:	2000      	movs	r0, #0
   1a0f6:	bd10      	pop	{r4, pc}
   1a0f8:	20001ab0 	.word	0x20001ab0
   1a0fc:	20001ac8 	.word	0x20001ac8
   1a100:	20001aa8 	.word	0x20001aa8

0001a104 <flash_nrf_erase>:
{
   1a104:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a106:	b08b      	sub	sp, #44	; 0x2c
   1a108:	460e      	mov	r6, r1
   1a10a:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a10c:	f006 f9db 	bl	204c6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1a110:	4629      	mov	r1, r5
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a112:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1a114:	4630      	mov	r0, r6
   1a116:	f006 f92f 	bl	20378 <is_regular_addr_valid>
   1a11a:	2800      	cmp	r0, #0
   1a11c:	d03a      	beq.n	1a194 <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1a11e:	fbb6 f3f7 	udiv	r3, r6, r7
   1a122:	fb07 6313 	mls	r3, r7, r3, r6
   1a126:	bbab      	cbnz	r3, 1a194 <flash_nrf_erase+0x90>
   1a128:	fbb5 f4f7 	udiv	r4, r5, r7
   1a12c:	fb07 5414 	mls	r4, r7, r4, r5
   1a130:	bb84      	cbnz	r4, 1a194 <flash_nrf_erase+0x90>
		if (!n_pages) {
   1a132:	42af      	cmp	r7, r5
   1a134:	d822      	bhi.n	1a17c <flash_nrf_erase+0x78>
	return z_impl_k_sem_take(sem, timeout);
   1a136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a13a:	4818      	ldr	r0, [pc, #96]	; (1a19c <flash_nrf_erase+0x98>)
   1a13c:	f001 fb5e 	bl	1b7fc <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1a140:	4620      	mov	r0, r4
   1a142:	f7f5 fc79 	bl	fa38 <ticker_is_initialized>
   1a146:	ab04      	add	r3, sp, #16
   1a148:	4601      	mov	r1, r0
   1a14a:	b1d0      	cbz	r0, 1a182 <flash_nrf_erase+0x7e>
	struct flash_context context = {
   1a14c:	2210      	movs	r2, #16
   1a14e:	4621      	mov	r1, r4
   1a150:	4618      	mov	r0, r3
   1a152:	f004 f9f4 	bl	1e53e <memset>
   1a156:	2201      	movs	r2, #1
   1a158:	f88d 201c 	strb.w	r2, [sp, #28]
   1a15c:	4a10      	ldr	r2, [pc, #64]	; (1a1a0 <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   1a15e:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   1a160:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1a164:	4a0f      	ldr	r2, [pc, #60]	; (1a1a4 <flash_nrf_erase+0xa0>)
   1a166:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   1a16a:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1a16c:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   1a170:	f7e9 f80a 	bl	3188 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   1a174:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1a176:	4809      	ldr	r0, [pc, #36]	; (1a19c <flash_nrf_erase+0x98>)
   1a178:	f001 fb1a 	bl	1b7b0 <z_impl_k_sem_give>
}
   1a17c:	4620      	mov	r0, r4
   1a17e:	b00b      	add	sp, #44	; 0x2c
   1a180:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1a182:	2218      	movs	r2, #24
   1a184:	4618      	mov	r0, r3
   1a186:	f004 f9da 	bl	1e53e <memset>
   1a18a:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   1a18e:	f7e8 ffb3 	bl	30f8 <erase_op>
   1a192:	e7ef      	b.n	1a174 <flash_nrf_erase+0x70>
		return -EINVAL;
   1a194:	f06f 0415 	mvn.w	r4, #21
   1a198:	e7f0      	b.n	1a17c <flash_nrf_erase+0x78>
   1a19a:	bf00      	nop
   1a19c:	20001ab0 	.word	0x20001ab0
   1a1a0:	00015e64 	.word	0x00015e64
   1a1a4:	000030f9 	.word	0x000030f9

0001a1a8 <flash_nrf_write>:
{
   1a1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a1aa:	460d      	mov	r5, r1
   1a1ac:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, len)) {
   1a1ae:	4619      	mov	r1, r3
   1a1b0:	4628      	mov	r0, r5
{
   1a1b2:	4617      	mov	r7, r2
   1a1b4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1a1b6:	f006 f8df 	bl	20378 <is_regular_addr_valid>
   1a1ba:	b388      	cbz	r0, 1a220 <flash_nrf_write+0x78>
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   1a1bc:	ea45 0604 	orr.w	r6, r5, r4
   1a1c0:	f016 0603 	ands.w	r6, r6, #3
   1a1c4:	d12c      	bne.n	1a220 <flash_nrf_write+0x78>
	if (!len) {
   1a1c6:	b1fc      	cbz	r4, 1a208 <flash_nrf_write+0x60>
	return z_impl_k_sem_take(sem, timeout);
   1a1c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a1cc:	4816      	ldr	r0, [pc, #88]	; (1a228 <flash_nrf_write+0x80>)
   1a1ce:	f001 fb15 	bl	1b7fc <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1a1d2:	4630      	mov	r0, r6
   1a1d4:	f7f5 fc30 	bl	fa38 <ticker_is_initialized>
   1a1d8:	4603      	mov	r3, r0
   1a1da:	a804      	add	r0, sp, #16
   1a1dc:	b1bb      	cbz	r3, 1a20e <flash_nrf_write+0x66>
	struct flash_context context = {
   1a1de:	2301      	movs	r3, #1
   1a1e0:	f88d 301c 	strb.w	r3, [sp, #28]
   1a1e4:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1a1e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1a1ec:	4b0f      	ldr	r3, [pc, #60]	; (1a22c <flash_nrf_write+0x84>)
	struct flash_context context = {
   1a1ee:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1a1f0:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1a1f4:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1a1f6:	e9cd 7504 	strd	r7, r5, [sp, #16]
	struct flash_op_desc flash_op_desc = {
   1a1fa:	9603      	str	r6, [sp, #12]
	return  work_in_time_slice(&flash_op_desc);
   1a1fc:	f7e8 ffc4 	bl	3188 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   1a200:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1a202:	4809      	ldr	r0, [pc, #36]	; (1a228 <flash_nrf_write+0x80>)
   1a204:	f001 fad4 	bl	1b7b0 <z_impl_k_sem_give>
}
   1a208:	4620      	mov	r0, r4
   1a20a:	b00b      	add	sp, #44	; 0x2c
   1a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1a20e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1a212:	e9cd 7504 	strd	r7, r5, [sp, #16]
   1a216:	9309      	str	r3, [sp, #36]	; 0x24
   1a218:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   1a21a:	f7e9 f825 	bl	3268 <write_op>
   1a21e:	e7ef      	b.n	1a200 <flash_nrf_write+0x58>
		return -EINVAL;
   1a220:	f06f 0415 	mvn.w	r4, #21
   1a224:	e7f0      	b.n	1a208 <flash_nrf_write+0x60>
   1a226:	bf00      	nop
   1a228:	20001ab0 	.word	0x20001ab0
   1a22c:	00003269 	.word	0x00003269

0001a230 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a230:	4b02      	ldr	r3, [pc, #8]	; (1a23c <uart_nrfx_err_check+0xc>)
   1a232:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a236:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1a23a:	4770      	bx	lr
   1a23c:	40002000 	.word	0x40002000

0001a240 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   1a240:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1a242:	794b      	ldrb	r3, [r1, #5]
   1a244:	2b01      	cmp	r3, #1
   1a246:	d028      	beq.n	1a29a <uart_nrfx_configure+0x5a>
   1a248:	2b03      	cmp	r3, #3
   1a24a:	d123      	bne.n	1a294 <uart_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1a24c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a24e:	798b      	ldrb	r3, [r1, #6]
   1a250:	2b03      	cmp	r3, #3
   1a252:	d11f      	bne.n	1a294 <uart_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a254:	79cc      	ldrb	r4, [r1, #7]
   1a256:	b12c      	cbz	r4, 1a264 <uart_nrfx_configure+0x24>
   1a258:	2c01      	cmp	r4, #1
   1a25a:	d11b      	bne.n	1a294 <uart_nrfx_configure+0x54>
	return dev->config->config_info;
   1a25c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1a25e:	689b      	ldr	r3, [r3, #8]
   1a260:	781b      	ldrb	r3, [r3, #0]
   1a262:	b1bb      	cbz	r3, 1a294 <uart_nrfx_configure+0x54>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a264:	790a      	ldrb	r2, [r1, #4]
   1a266:	b112      	cbz	r2, 1a26e <uart_nrfx_configure+0x2e>
   1a268:	2a02      	cmp	r2, #2
   1a26a:	d113      	bne.n	1a294 <uart_nrfx_configure+0x54>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1a26c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a26e:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1a270:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1a274:	d062      	beq.n	1a33c <uart_nrfx_configure+0xfc>
   1a276:	d82d      	bhi.n	1a2d4 <uart_nrfx_configure+0x94>
   1a278:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a27c:	d060      	beq.n	1a340 <uart_nrfx_configure+0x100>
   1a27e:	d816      	bhi.n	1a2ae <uart_nrfx_configure+0x6e>
   1a280:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a284:	d05e      	beq.n	1a344 <uart_nrfx_configure+0x104>
   1a286:	d80a      	bhi.n	1a29e <uart_nrfx_configure+0x5e>
   1a288:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a28c:	d05d      	beq.n	1a34a <uart_nrfx_configure+0x10a>
   1a28e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a292:	d05d      	beq.n	1a350 <uart_nrfx_configure+0x110>
   1a294:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a298:	e04f      	b.n	1a33a <uart_nrfx_configure+0xfa>
	switch (cfg->stop_bits) {
   1a29a:	2600      	movs	r6, #0
   1a29c:	e7d7      	b.n	1a24e <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1a29e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a2a2:	d058      	beq.n	1a356 <uart_nrfx_configure+0x116>
   1a2a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a2a8:	d1f4      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1a2aa:	4b35      	ldr	r3, [pc, #212]	; (1a380 <uart_nrfx_configure+0x140>)
   1a2ac:	e039      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a2ae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a2b2:	d053      	beq.n	1a35c <uart_nrfx_configure+0x11c>
   1a2b4:	d807      	bhi.n	1a2c6 <uart_nrfx_configure+0x86>
   1a2b6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a2ba:	d051      	beq.n	1a360 <uart_nrfx_configure+0x120>
   1a2bc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a2c0:	d1e8      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1a2c2:	4b30      	ldr	r3, [pc, #192]	; (1a384 <uart_nrfx_configure+0x144>)
   1a2c4:	e02d      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a2c6:	f647 2512 	movw	r5, #31250	; 0x7a12
   1a2ca:	42ab      	cmp	r3, r5
   1a2cc:	d1e2      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1a2ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a2d2:	e026      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a2d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a2d8:	d045      	beq.n	1a366 <uart_nrfx_configure+0x126>
   1a2da:	d811      	bhi.n	1a300 <uart_nrfx_configure+0xc0>
   1a2dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a2e0:	d043      	beq.n	1a36a <uart_nrfx_configure+0x12a>
   1a2e2:	d808      	bhi.n	1a2f6 <uart_nrfx_configure+0xb6>
   1a2e4:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1a2e8:	42ab      	cmp	r3, r5
   1a2ea:	d040      	beq.n	1a36e <uart_nrfx_configure+0x12e>
   1a2ec:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a2f0:	d1d0      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1a2f2:	4b25      	ldr	r3, [pc, #148]	; (1a388 <uart_nrfx_configure+0x148>)
   1a2f4:	e015      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a2f6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a2fa:	d1cb      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1a2fc:	4b23      	ldr	r3, [pc, #140]	; (1a38c <uart_nrfx_configure+0x14c>)
   1a2fe:	e010      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a300:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a304:	d036      	beq.n	1a374 <uart_nrfx_configure+0x134>
   1a306:	d807      	bhi.n	1a318 <uart_nrfx_configure+0xd8>
   1a308:	4d21      	ldr	r5, [pc, #132]	; (1a390 <uart_nrfx_configure+0x150>)
   1a30a:	42ab      	cmp	r3, r5
   1a30c:	d034      	beq.n	1a378 <uart_nrfx_configure+0x138>
   1a30e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a312:	d1bf      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1a314:	4b1f      	ldr	r3, [pc, #124]	; (1a394 <uart_nrfx_configure+0x154>)
   1a316:	e004      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a318:	4d1f      	ldr	r5, [pc, #124]	; (1a398 <uart_nrfx_configure+0x158>)
   1a31a:	42ab      	cmp	r3, r5
   1a31c:	d1ba      	bne.n	1a294 <uart_nrfx_configure+0x54>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1a31e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a322:	4d1e      	ldr	r5, [pc, #120]	; (1a39c <uart_nrfx_configure+0x15c>)
                    | (uint32_t)p_cfg->hwfc;
   1a324:	4334      	orrs	r4, r6
   1a326:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1a328:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a32c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a330:	6883      	ldr	r3, [r0, #8]
   1a332:	c903      	ldmia	r1, {r0, r1}
   1a334:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a338:	2000      	movs	r0, #0
}
   1a33a:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1a33c:	4b18      	ldr	r3, [pc, #96]	; (1a3a0 <uart_nrfx_configure+0x160>)
   1a33e:	e7f0      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1a340:	4b18      	ldr	r3, [pc, #96]	; (1a3a4 <uart_nrfx_configure+0x164>)
   1a342:	e7ee      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1a344:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a348:	e7eb      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   1a34a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a34e:	e7e8      	b.n	1a322 <uart_nrfx_configure+0xe2>
	switch (baudrate) {
   1a350:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a354:	e7e5      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1a356:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a35a:	e7e2      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1a35c:	4b12      	ldr	r3, [pc, #72]	; (1a3a8 <uart_nrfx_configure+0x168>)
   1a35e:	e7e0      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1a360:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1a364:	e7dd      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1a366:	4b11      	ldr	r3, [pc, #68]	; (1a3ac <uart_nrfx_configure+0x16c>)
   1a368:	e7db      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1a36a:	4b11      	ldr	r3, [pc, #68]	; (1a3b0 <uart_nrfx_configure+0x170>)
   1a36c:	e7d9      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1a36e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a372:	e7d6      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1a374:	4b0f      	ldr	r3, [pc, #60]	; (1a3b4 <uart_nrfx_configure+0x174>)
   1a376:	e7d4      	b.n	1a322 <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1a378:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a37c:	e7d1      	b.n	1a322 <uart_nrfx_configure+0xe2>
   1a37e:	bf00      	nop
   1a380:	0013b000 	.word	0x0013b000
   1a384:	004ea000 	.word	0x004ea000
   1a388:	00ebf000 	.word	0x00ebf000
   1a38c:	01d7e000 	.word	0x01d7e000
   1a390:	0003d090 	.word	0x0003d090
   1a394:	075f7000 	.word	0x075f7000
   1a398:	000f4240 	.word	0x000f4240
   1a39c:	40002000 	.word	0x40002000
   1a3a0:	009d5000 	.word	0x009d5000
   1a3a4:	00275000 	.word	0x00275000
   1a3a8:	0075f000 	.word	0x0075f000
   1a3ac:	03afb000 	.word	0x03afb000
   1a3b0:	013a9000 	.word	0x013a9000
   1a3b4:	0ebed000 	.word	0x0ebed000

0001a3b8 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a3b8:	4b08      	ldr	r3, [pc, #32]	; (1a3dc <uart_nrfx_poll_in+0x24>)
   1a3ba:	681a      	ldr	r2, [r3, #0]
{
   1a3bc:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1a3be:	b152      	cbz	r2, 1a3d6 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a3c0:	2000      	movs	r0, #0
   1a3c2:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1a3c4:	681b      	ldr	r3, [r3, #0]
   1a3c6:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1a3c8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1a3ca:	4b05      	ldr	r3, [pc, #20]	; (1a3e0 <uart_nrfx_poll_in+0x28>)
   1a3cc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1a3d0:	700b      	strb	r3, [r1, #0]
}
   1a3d2:	b002      	add	sp, #8
   1a3d4:	4770      	bx	lr
		return -1;
   1a3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3da:	e7fa      	b.n	1a3d2 <uart_nrfx_poll_in+0x1a>
   1a3dc:	40002108 	.word	0x40002108
   1a3e0:	40002000 	.word	0x40002000

0001a3e4 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a3e4:	4b09      	ldr	r3, [pc, #36]	; (1a40c <uart_nrfx_poll_out+0x28>)
   1a3e6:	2200      	movs	r2, #0
   1a3e8:	601a      	str	r2, [r3, #0]
{
   1a3ea:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1a3ec:	681a      	ldr	r2, [r3, #0]
   1a3ee:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1a3f0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a3f2:	4a07      	ldr	r2, [pc, #28]	; (1a410 <uart_nrfx_poll_out+0x2c>)
   1a3f4:	2001      	movs	r0, #1
   1a3f6:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   1a3f8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a3fc:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   1a3fe:	2a00      	cmp	r2, #0
   1a400:	d0fc      	beq.n	1a3fc <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a402:	4b04      	ldr	r3, [pc, #16]	; (1a414 <uart_nrfx_poll_out+0x30>)
   1a404:	2201      	movs	r2, #1
   1a406:	601a      	str	r2, [r3, #0]
}
   1a408:	b002      	add	sp, #8
   1a40a:	4770      	bx	lr
   1a40c:	4000211c 	.word	0x4000211c
   1a410:	40002008 	.word	0x40002008
   1a414:	4000200c 	.word	0x4000200c

0001a418 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   1a418:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1a41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
   1a41e:	4c16      	ldr	r4, [pc, #88]	; (1a478 <uart_nrfx_init+0x60>)
   1a420:	2240      	movs	r2, #64	; 0x40
   1a422:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a426:	2103      	movs	r1, #3
   1a428:	2200      	movs	r2, #0
   1a42a:	2508      	movs	r5, #8
   1a42c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1a430:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1a434:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1a438:	2506      	movs	r5, #6
   1a43a:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1a43e:	2520      	movs	r5, #32
   1a440:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a444:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1a448:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   1a44c:	2305      	movs	r3, #5
   1a44e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1a452:	2307      	movs	r3, #7
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1a454:	6881      	ldr	r1, [r0, #8]
   1a456:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1a45a:	f7ff fef1 	bl	1a240 <uart_nrfx_configure>
	if (err) {
   1a45e:	b948      	cbnz	r0, 1a474 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1a460:	2304      	movs	r3, #4
   1a462:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a466:	4b05      	ldr	r3, [pc, #20]	; (1a47c <uart_nrfx_init+0x64>)
   1a468:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1a46a:	681b      	ldr	r3, [r3, #0]
   1a46c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1a46e:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a470:	2301      	movs	r3, #1
   1a472:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1a474:	b003      	add	sp, #12
   1a476:	bd30      	pop	{r4, r5, pc}
   1a478:	40002000 	.word	0x40002000
   1a47c:	40002108 	.word	0x40002108

0001a480 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   1a480:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a482:	4603      	mov	r3, r0
	u32_t last  = rngp->last;
   1a484:	7884      	ldrb	r4, [r0, #2]
	u32_t mask  = rngp->mask;
   1a486:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1a488:	f04f 0520 	mov.w	r5, #32
   1a48c:	f3ef 8011 	mrs	r0, BASEPRI
   1a490:	f385 8811 	msr	BASEPRI, r5
   1a494:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1a498:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1a49a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1a49e:	1ba4      	subs	r4, r4, r6
   1a4a0:	403c      	ands	r4, r7
	if (available < len) {
   1a4a2:	42a2      	cmp	r2, r4
		len = available;
   1a4a4:	bf88      	it	hi
   1a4a6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1a4a8:	eb06 0c02 	add.w	ip, r6, r2
   1a4ac:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1a4b0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1a4b2:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1a4b6:	f380 8811 	msr	BASEPRI, r0
   1a4ba:	f3bf 8f6f 	isb	sy
   1a4be:	440a      	add	r2, r1
	u8_t *dst   = buf;
   1a4c0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1a4c2:	4282      	cmp	r2, r0
   1a4c4:	d119      	bne.n	1a4fa <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1a4c6:	4576      	cmp	r6, lr
   1a4c8:	d10d      	bne.n	1a4e6 <rng_pool_get+0x66>
	__asm__ volatile(
   1a4ca:	f04f 0520 	mov.w	r5, #32
   1a4ce:	f3ef 8211 	mrs	r2, BASEPRI
   1a4d2:	f385 8811 	msr	BASEPRI, r5
   1a4d6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1a4da:	781d      	ldrb	r5, [r3, #0]
   1a4dc:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1a4de:	f382 8811 	msr	BASEPRI, r2
   1a4e2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1a4e6:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1a4e8:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1a4ea:	b288      	uxth	r0, r1
	available = available - len;
   1a4ec:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1a4ee:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a4f0:	bf22      	ittt	cs
   1a4f2:	4b06      	ldrcs	r3, [pc, #24]	; (1a50c <rng_pool_get+0x8c>)
   1a4f4:	2201      	movcs	r2, #1
   1a4f6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1a4fa:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1a4fe:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1a500:	f89c c005 	ldrb.w	ip, [ip, #5]
   1a504:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1a508:	403d      	ands	r5, r7
   1a50a:	e7da      	b.n	1a4c2 <rng_pool_get+0x42>
   1a50c:	4000d000 	.word	0x4000d000

0001a510 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   1a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1a514:	4f11      	ldr	r7, [pc, #68]	; (1a55c <entropy_nrf5_get_entropy+0x4c>)
   1a516:	460d      	mov	r5, r1
   1a518:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1a51a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1a51e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1a522:	b914      	cbnz	r4, 1a52a <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1a524:	4620      	mov	r0, r4
   1a526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a52a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a52e:	4638      	mov	r0, r7
   1a530:	f001 f964 	bl	1b7fc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1a534:	4622      	mov	r2, r4
   1a536:	4629      	mov	r1, r5
   1a538:	4640      	mov	r0, r8
   1a53a:	f7ff ffa1 	bl	1a480 <rng_pool_get>
   1a53e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1a540:	4638      	mov	r0, r7
   1a542:	f001 f935 	bl	1b7b0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1a546:	b92e      	cbnz	r6, 1a554 <entropy_nrf5_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1a548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a54c:	4648      	mov	r0, r9
   1a54e:	f001 f955 	bl	1b7fc <z_impl_k_sem_take>
			continue;
   1a552:	e7e6      	b.n	1a522 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1a554:	1ba4      	subs	r4, r4, r6
   1a556:	b2a4      	uxth	r4, r4
		buf += bytes;
   1a558:	4435      	add	r5, r6
   1a55a:	e7e2      	b.n	1a522 <entropy_nrf5_get_entropy+0x12>
   1a55c:	20001ae0 	.word	0x20001ae0

0001a560 <random_byte_get>:
{
   1a560:	b082      	sub	sp, #8
	__asm__ volatile(
   1a562:	f04f 0320 	mov.w	r3, #32
   1a566:	f3ef 8211 	mrs	r2, BASEPRI
   1a56a:	f383 8811 	msr	BASEPRI, r3
   1a56e:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a572:	4b0a      	ldr	r3, [pc, #40]	; (1a59c <random_byte_get+0x3c>)
   1a574:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1a576:	b171      	cbz	r1, 1a596 <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1a578:	4909      	ldr	r1, [pc, #36]	; (1a5a0 <random_byte_get+0x40>)
   1a57a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a57e:	2100      	movs	r1, #0
   1a580:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a582:	681b      	ldr	r3, [r3, #0]
   1a584:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1a586:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1a588:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1a58a:	f382 8811 	msr	BASEPRI, r2
   1a58e:	f3bf 8f6f 	isb	sy
}
   1a592:	b002      	add	sp, #8
   1a594:	4770      	bx	lr
	int retval = -EAGAIN;
   1a596:	f06f 000a 	mvn.w	r0, #10
   1a59a:	e7f6      	b.n	1a58a <random_byte_get+0x2a>
   1a59c:	4000d100 	.word	0x4000d100
   1a5a0:	4000d000 	.word	0x4000d000

0001a5a4 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a5a4:	43db      	mvns	r3, r3
{
   1a5a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a5aa:	f013 0501 	ands.w	r5, r3, #1
{
   1a5ae:	460e      	mov	r6, r1
   1a5b0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a5b2:	d005      	beq.n	1a5c0 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1a5b4:	4820      	ldr	r0, [pc, #128]	; (1a638 <entropy_nrf5_get_entropy_isr+0x94>)
   1a5b6:	f7ff ff63 	bl	1a480 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1a5ba:	b002      	add	sp, #8
   1a5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1a5c0:	2a00      	cmp	r2, #0
   1a5c2:	d032      	beq.n	1a62a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1a5c4:	f04f 0320 	mov.w	r3, #32
   1a5c8:	f3ef 8711 	mrs	r7, BASEPRI
   1a5cc:	f383 8811 	msr	BASEPRI, r3
   1a5d0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1a5d4:	200d      	movs	r0, #13
   1a5d6:	f7eb fa73 	bl	5ac0 <arch_irq_is_enabled>
   1a5da:	4680      	mov	r8, r0
		irq_disable(RNG_IRQn);
   1a5dc:	200d      	movs	r0, #13
   1a5de:	f7eb fa5b 	bl	5a98 <arch_irq_disable>
	__asm__ volatile(
   1a5e2:	f387 8811 	msr	BASEPRI, r7
   1a5e6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a5ea:	4f14      	ldr	r7, [pc, #80]	; (1a63c <entropy_nrf5_get_entropy_isr+0x98>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a5ec:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1a644 <entropy_nrf5_get_entropy_isr+0xa0>
   1a5f0:	603d      	str	r5, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a5f2:	683a      	ldr	r2, [r7, #0]
   1a5f4:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1a5f6:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a5f8:	4a11      	ldr	r2, [pc, #68]	; (1a640 <entropy_nrf5_get_entropy_isr+0x9c>)
   1a5fa:	2101      	movs	r1, #1
   1a5fc:	6011      	str	r1, [r2, #0]
}
   1a5fe:	4625      	mov	r5, r4
   1a600:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a604:	683b      	ldr	r3, [r7, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1a606:	b193      	cbz	r3, 1a62e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1a608:	f7ff ffaa 	bl	1a560 <random_byte_get>
			if (byte < 0) {
   1a60c:	2800      	cmp	r0, #0
   1a60e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1a612:	dbf7      	blt.n	1a604 <entropy_nrf5_get_entropy_isr+0x60>
   1a614:	3d01      	subs	r5, #1
   1a616:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1a618:	5570      	strb	r0, [r6, r5]
		} while (len);
   1a61a:	2d00      	cmp	r5, #0
   1a61c:	d1f2      	bne.n	1a604 <entropy_nrf5_get_entropy_isr+0x60>
		if (irq_enabled) {
   1a61e:	f1b8 0f00 	cmp.w	r8, #0
   1a622:	d002      	beq.n	1a62a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(RNG_IRQn);
   1a624:	200d      	movs	r0, #13
   1a626:	f7eb fa27 	bl	5a78 <arch_irq_enable>
	return cnt;
   1a62a:	4620      	mov	r0, r4
   1a62c:	e7c5      	b.n	1a5ba <entropy_nrf5_get_entropy_isr+0x16>
				__WFE();
   1a62e:	bf20      	wfe
				__SEV();
   1a630:	bf40      	sev
				__WFE();
   1a632:	bf20      	wfe
   1a634:	e7e6      	b.n	1a604 <entropy_nrf5_get_entropy_isr+0x60>
   1a636:	bf00      	nop
   1a638:	20001b10 	.word	0x20001b10
   1a63c:	4000d100 	.word	0x4000d100
   1a640:	4000d000 	.word	0x4000d000
   1a644:	e000e100 	.word	0xe000e100

0001a648 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1a648:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a64a:	4c1b      	ldr	r4, [pc, #108]	; (1a6b8 <entropy_nrf5_init+0x70>)
   1a64c:	2201      	movs	r2, #1
   1a64e:	4611      	mov	r1, r2
   1a650:	4620      	mov	r0, r4
   1a652:	f006 f981 	bl	20958 <z_impl_k_sem_init>
   1a656:	2201      	movs	r2, #1
   1a658:	2100      	movs	r1, #0
   1a65a:	f104 0018 	add.w	r0, r4, #24
   1a65e:	f006 f97b 	bl	20958 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1a662:	f240 4307 	movw	r3, #1031	; 0x407
   1a666:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1a66a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a66e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1a670:	230c      	movs	r3, #12
   1a672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1a676:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1a678:	4b10      	ldr	r3, [pc, #64]	; (1a6bc <entropy_nrf5_init+0x74>)
   1a67a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1a67e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1a682:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1a686:	f042 0201 	orr.w	r2, r2, #1
   1a68a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a68e:	4a0c      	ldr	r2, [pc, #48]	; (1a6c0 <entropy_nrf5_init+0x78>)
   1a690:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a692:	6812      	ldr	r2, [r2, #0]
   1a694:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1a696:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1a698:	2201      	movs	r2, #1
   1a69a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   1a69e:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a6a0:	601a      	str	r2, [r3, #0]
   1a6a2:	200d      	movs	r0, #13
   1a6a4:	462a      	mov	r2, r5
   1a6a6:	f7eb fa19 	bl	5adc <z_arm_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1a6aa:	200d      	movs	r0, #13
   1a6ac:	f7eb f9e4 	bl	5a78 <arch_irq_enable>

	return 0;
}
   1a6b0:	4628      	mov	r0, r5
   1a6b2:	b003      	add	sp, #12
   1a6b4:	bd30      	pop	{r4, r5, pc}
   1a6b6:	bf00      	nop
   1a6b8:	20001ae0 	.word	0x20001ae0
   1a6bc:	4000d000 	.word	0x4000d000
   1a6c0:	4000d100 	.word	0x4000d100

0001a6c4 <isr>:
{
   1a6c4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1a6c6:	f7ff ff4b 	bl	1a560 <random_byte_get>
	if (byte < 0) {
   1a6ca:	2800      	cmp	r0, #0
   1a6cc:	db20      	blt.n	1a710 <isr+0x4c>
	u8_t last  = rngp->last;
   1a6ce:	4b17      	ldr	r3, [pc, #92]	; (1a72c <isr+0x68>)
   1a6d0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1a6d4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   1a6d8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1a6dc:	1a51      	subs	r1, r2, r1
   1a6de:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1a6e2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1a6e4:	d10d      	bne.n	1a702 <isr+0x3e>
	u8_t last  = rngp->last;
   1a6e6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1a6ea:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   1a6ee:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1a6f2:	1a51      	subs	r1, r2, r1
   1a6f4:	ea34 0101 	bics.w	r1, r4, r1
   1a6f8:	d10b      	bne.n	1a712 <isr+0x4e>
   1a6fa:	4b0d      	ldr	r3, [pc, #52]	; (1a730 <isr+0x6c>)
   1a6fc:	2201      	movs	r2, #1
   1a6fe:	601a      	str	r2, [r3, #0]
}
   1a700:	e00e      	b.n	1a720 <isr+0x5c>
	rngp->buffer[last] = byte;
   1a702:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1a704:	3201      	adds	r2, #1
   1a706:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1a708:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1a70c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1a710:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1a712:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1a714:	3201      	adds	r2, #1
   1a716:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1a718:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1a71c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1a720:	4804      	ldr	r0, [pc, #16]	; (1a734 <isr+0x70>)
}
   1a722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a726:	f001 b843 	b.w	1b7b0 <z_impl_k_sem_give>
   1a72a:	bf00      	nop
   1a72c:	20001ae0 	.word	0x20001ae0
   1a730:	4000d004 	.word	0x4000d004
   1a734:	20001af8 	.word	0x20001af8

0001a738 <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a738:	4b0a      	ldr	r3, [pc, #40]	; (1a764 <nrf52_errata_136+0x2c>)
   1a73a:	681b      	ldr	r3, [r3, #0]
   1a73c:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a73e:	bf05      	ittet	eq
   1a740:	4b09      	ldreq	r3, [pc, #36]	; (1a768 <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a742:	4a0a      	ldreq	r2, [pc, #40]	; (1a76c <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1a744:	4a0a      	ldrne	r2, [pc, #40]	; (1a770 <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a746:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a748:	bf0a      	itet	eq
   1a74a:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1a74c:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a74e:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a752:	2b08      	cmp	r3, #8
   1a754:	d104      	bne.n	1a760 <nrf52_errata_136+0x28>
            {
                switch(var2)
   1a756:	2803      	cmp	r0, #3
   1a758:	bf8c      	ite	hi
   1a75a:	2000      	movhi	r0, #0
   1a75c:	2001      	movls	r0, #1
   1a75e:	4770      	bx	lr
                    case 0x00ul:
                        return true;
                }
            }
        #endif
        return false;
   1a760:	2000      	movs	r0, #0
    #endif
}
   1a762:	4770      	bx	lr
   1a764:	10000130 	.word	0x10000130
   1a768:	f0000fe0 	.word	0xf0000fe0
   1a76c:	f0000fe8 	.word	0xf0000fe8
   1a770:	10000134 	.word	0x10000134

0001a774 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a774:	4b06      	ldr	r3, [pc, #24]	; (1a790 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a776:	681b      	ldr	r3, [r3, #0]
   1a778:	2b08      	cmp	r3, #8
   1a77a:	d106      	bne.n	1a78a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a77c:	4b05      	ldr	r3, [pc, #20]	; (1a794 <nrf52_errata_103+0x20>)
   1a77e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1a780:	2b03      	cmp	r3, #3
   1a782:	d802      	bhi.n	1a78a <nrf52_errata_103+0x16>
   1a784:	4a04      	ldr	r2, [pc, #16]	; (1a798 <nrf52_errata_103+0x24>)
   1a786:	5cd0      	ldrb	r0, [r2, r3]
   1a788:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
   1a78a:	2000      	movs	r0, #0
    #endif
}
   1a78c:	4770      	bx	lr
   1a78e:	bf00      	nop
   1a790:	10000130 	.word	0x10000130
   1a794:	10000134 	.word	0x10000134
   1a798:	00024d82 	.word	0x00024d82

0001a79c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1a79c:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1a79e:	f7ff ffcb 	bl	1a738 <nrf52_errata_136>
   1a7a2:	b140      	cbz	r0, 1a7b6 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1a7a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a7a8:	2200      	movs	r2, #0
   1a7aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1a7ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1a7b2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1a7b6:	f7ff ffbf 	bl	1a738 <nrf52_errata_136>
   1a7ba:	2800      	cmp	r0, #0
   1a7bc:	d046      	beq.n	1a84c <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a7c2:	4b58      	ldr	r3, [pc, #352]	; (1a924 <SystemInit+0x188>)
   1a7c4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a7c8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a7cc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a7d0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a7d4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a7d8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a7dc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1a7e0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a7e4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1a7e8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a7ec:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1a7f0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a7f4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1a7f8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a7fc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1a800:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a804:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1a808:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a80c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1a810:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a814:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1a818:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a81c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1a820:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a824:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1a828:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a82c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1a830:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a834:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1a838:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a83c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1a840:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a844:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1a848:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   1a84c:	f7ff ff92 	bl	1a774 <nrf52_errata_103>
   1a850:	b110      	cbz	r0, 1a858 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1a852:	4b35      	ldr	r3, [pc, #212]	; (1a928 <SystemInit+0x18c>)
   1a854:	4a35      	ldr	r2, [pc, #212]	; (1a92c <SystemInit+0x190>)
   1a856:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   1a858:	f7ff ff8c 	bl	1a774 <nrf52_errata_103>
   1a85c:	b118      	cbz	r0, 1a866 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1a85e:	4b34      	ldr	r3, [pc, #208]	; (1a930 <SystemInit+0x194>)
   1a860:	22fb      	movs	r2, #251	; 0xfb
   1a862:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   1a866:	f7ff ff85 	bl	1a774 <nrf52_errata_103>
   1a86a:	b148      	cbz	r0, 1a880 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   1a86c:	4931      	ldr	r1, [pc, #196]	; (1a934 <SystemInit+0x198>)
   1a86e:	4b32      	ldr	r3, [pc, #200]	; (1a938 <SystemInit+0x19c>)
   1a870:	680a      	ldr	r2, [r1, #0]
   1a872:	681b      	ldr	r3, [r3, #0]
   1a874:	f022 020f 	bic.w	r2, r2, #15
   1a878:	f003 030f 	and.w	r3, r3, #15
   1a87c:	4313      	orrs	r3, r2
   1a87e:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   1a880:	f7ff ff78 	bl	1a774 <nrf52_errata_103>
   1a884:	b118      	cbz	r0, 1a88e <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a886:	4b2d      	ldr	r3, [pc, #180]	; (1a93c <SystemInit+0x1a0>)
   1a888:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a88c:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1a88e:	f7ff ff53 	bl	1a738 <nrf52_errata_136>
   1a892:	b148      	cbz	r0, 1a8a8 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a898:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a89c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a89e:	bf44      	itt	mi
   1a8a0:	f06f 0201 	mvnmi.w	r2, #1
   1a8a4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a8a8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a8ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a8b0:	2a00      	cmp	r2, #0
   1a8b2:	db03      	blt.n	1a8bc <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a8b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a8b8:	2b00      	cmp	r3, #0
   1a8ba:	da2f      	bge.n	1a91c <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1a8bc:	4b20      	ldr	r3, [pc, #128]	; (1a940 <SystemInit+0x1a4>)
   1a8be:	2201      	movs	r2, #1
   1a8c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a8c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a8c8:	2a00      	cmp	r2, #0
   1a8ca:	d0fb      	beq.n	1a8c4 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   1a8cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1a8d0:	2112      	movs	r1, #18
   1a8d2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a8d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a8da:	2a00      	cmp	r2, #0
   1a8dc:	d0fb      	beq.n	1a8d6 <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   1a8de:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a8e2:	2212      	movs	r2, #18
   1a8e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a8e8:	4b15      	ldr	r3, [pc, #84]	; (1a940 <SystemInit+0x1a4>)
   1a8ea:	461a      	mov	r2, r3
   1a8ec:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1a8f0:	2900      	cmp	r1, #0
   1a8f2:	d0fb      	beq.n	1a8ec <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1a8f4:	2100      	movs	r1, #0
   1a8f6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a8fa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d0fb      	beq.n	1a8fa <SystemInit+0x15e>
  __ASM volatile ("dsb 0xF":::"memory");
   1a902:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a906:	490f      	ldr	r1, [pc, #60]	; (1a944 <SystemInit+0x1a8>)
   1a908:	4b0f      	ldr	r3, [pc, #60]	; (1a948 <SystemInit+0x1ac>)
   1a90a:	68ca      	ldr	r2, [r1, #12]
   1a90c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a910:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a912:	60cb      	str	r3, [r1, #12]
   1a914:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1a918:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a91a:	e7fd      	b.n	1a918 <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a91c:	4b0b      	ldr	r3, [pc, #44]	; (1a94c <SystemInit+0x1b0>)
   1a91e:	4a0c      	ldr	r2, [pc, #48]	; (1a950 <SystemInit+0x1b4>)
   1a920:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1a922:	bd08      	pop	{r3, pc}
   1a924:	4000c000 	.word	0x4000c000
   1a928:	4000568c 	.word	0x4000568c
   1a92c:	00038148 	.word	0x00038148
   1a930:	4000f000 	.word	0x4000f000
   1a934:	40000ee4 	.word	0x40000ee4
   1a938:	10000258 	.word	0x10000258
   1a93c:	40029640 	.word	0x40029640
   1a940:	4001e000 	.word	0x4001e000
   1a944:	e000ed00 	.word	0xe000ed00
   1a948:	05fa0004 	.word	0x05fa0004
   1a94c:	20005eb8 	.word	0x20005eb8
   1a950:	03d09000 	.word	0x03d09000

0001a954 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1a954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a958:	691a      	ldr	r2, [r3, #16]


static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1a95a:	fbb0 f3f2 	udiv	r3, r0, r2
   1a95e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());

    if (!is_page_aligned_check(addr))
   1a962:	b973      	cbnz	r3, 1a982 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1a964:	4b08      	ldr	r3, [pc, #32]	; (1a988 <nrfx_nvmc_page_erase+0x34>)
   1a966:	2202      	movs	r2, #2
   1a968:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1a96c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1a970:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1a974:	07d2      	lsls	r2, r2, #31
   1a976:	d5fb      	bpl.n	1a970 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1a978:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1a97a:	4804      	ldr	r0, [pc, #16]	; (1a98c <nrfx_nvmc_page_erase+0x38>)
   1a97c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1a980:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1a982:	4803      	ldr	r0, [pc, #12]	; (1a990 <nrfx_nvmc_page_erase+0x3c>)
}
   1a984:	4770      	bx	lr
   1a986:	bf00      	nop
   1a988:	4001e000 	.word	0x4001e000
   1a98c:	0bad0000 	.word	0x0bad0000
   1a990:	0bad000a 	.word	0x0bad000a

0001a994 <nrfx_nvmc_word_write>:
   1a994:	4b07      	ldr	r3, [pc, #28]	; (1a9b4 <nrfx_nvmc_word_write+0x20>)
   1a996:	2201      	movs	r2, #1
   1a998:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1a99c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1a9a0:	07d2      	lsls	r2, r2, #31
   1a9a2:	d5fb      	bpl.n	1a99c <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1a9a4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1a9a6:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1a9aa:	2200      	movs	r2, #0
   1a9ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1a9b0:	4770      	bx	lr
   1a9b2:	bf00      	nop
   1a9b4:	4001e000 	.word	0x4001e000

0001a9b8 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1a9b8:	4b09      	ldr	r3, [pc, #36]	; (1a9e0 <z_sys_device_do_config_level+0x28>)
{
   1a9ba:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1a9bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a9c0:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1a9c2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1a9c4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1a9c8:	42a5      	cmp	r5, r4
   1a9ca:	d800      	bhi.n	1a9ce <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1a9cc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1a9ce:	6823      	ldr	r3, [r4, #0]
   1a9d0:	4620      	mov	r0, r4
   1a9d2:	685b      	ldr	r3, [r3, #4]
   1a9d4:	4798      	blx	r3
		if (retval != 0) {
   1a9d6:	b100      	cbz	r0, 1a9da <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1a9d8:	6066      	str	r6, [r4, #4]
								info++) {
   1a9da:	340c      	adds	r4, #12
   1a9dc:	e7f4      	b.n	1a9c8 <z_sys_device_do_config_level+0x10>
   1a9de:	bf00      	nop
   1a9e0:	00022b90 	.word	0x00022b90

0001a9e4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9e4:	4b10      	ldr	r3, [pc, #64]	; (1aa28 <z_impl_device_get_binding+0x44>)
{
   1a9e6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9e8:	4c10      	ldr	r4, [pc, #64]	; (1aa2c <z_impl_device_get_binding+0x48>)
{
   1a9ea:	4605      	mov	r5, r0
   1a9ec:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9ee:	429c      	cmp	r4, r3
   1a9f0:	d104      	bne.n	1a9fc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9f2:	4c0e      	ldr	r4, [pc, #56]	; (1aa2c <z_impl_device_get_binding+0x48>)
   1a9f4:	42b4      	cmp	r4, r6
   1a9f6:	d109      	bne.n	1aa0c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1a9f8:	2400      	movs	r4, #0
   1a9fa:	e012      	b.n	1aa22 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1a9fc:	6862      	ldr	r2, [r4, #4]
   1a9fe:	b11a      	cbz	r2, 1aa08 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1aa00:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1aa02:	6812      	ldr	r2, [r2, #0]
   1aa04:	42aa      	cmp	r2, r5
   1aa06:	d00c      	beq.n	1aa22 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa08:	340c      	adds	r4, #12
   1aa0a:	e7f0      	b.n	1a9ee <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1aa0c:	6863      	ldr	r3, [r4, #4]
   1aa0e:	b90b      	cbnz	r3, 1aa14 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa10:	340c      	adds	r4, #12
   1aa12:	e7ef      	b.n	1a9f4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1aa14:	6823      	ldr	r3, [r4, #0]
   1aa16:	4628      	mov	r0, r5
   1aa18:	6819      	ldr	r1, [r3, #0]
   1aa1a:	f003 fd3a 	bl	1e492 <strcmp>
   1aa1e:	2800      	cmp	r0, #0
   1aa20:	d1f6      	bne.n	1aa10 <z_impl_device_get_binding+0x2c>
}
   1aa22:	4620      	mov	r0, r4
   1aa24:	bd70      	pop	{r4, r5, r6, pc}
   1aa26:	bf00      	nop
   1aa28:	2000614c 	.word	0x2000614c
   1aa2c:	20006074 	.word	0x20006074

0001aa30 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1aa30:	4b01      	ldr	r3, [pc, #4]	; (1aa38 <z_impl_z_errno+0x8>)
   1aa32:	6898      	ldr	r0, [r3, #8]
}
   1aa34:	3054      	adds	r0, #84	; 0x54
   1aa36:	4770      	bx	lr
   1aa38:	20001c0c 	.word	0x20001c0c

0001aa3c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1aa3c:	b510      	push	{r4, lr}
   1aa3e:	4604      	mov	r4, r0
	z_impl_log_panic();
   1aa40:	f7e9 fbd8 	bl	41f4 <z_impl_log_panic>
   1aa44:	4b06      	ldr	r3, [pc, #24]	; (1aa60 <k_sys_fatal_error_handler+0x24>)
   1aa46:	4907      	ldr	r1, [pc, #28]	; (1aa64 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1aa48:	4807      	ldr	r0, [pc, #28]	; (1aa68 <k_sys_fatal_error_handler+0x2c>)
   1aa4a:	1ac9      	subs	r1, r1, r3
   1aa4c:	08c9      	lsrs	r1, r1, #3
   1aa4e:	0189      	lsls	r1, r1, #6
   1aa50:	f041 0101 	orr.w	r1, r1, #1
   1aa54:	f002 fe28 	bl	1d6a8 <log_0>
	arch_system_halt(reason);
   1aa58:	4620      	mov	r0, r4
   1aa5a:	f005 fd3c 	bl	204d6 <arch_system_halt>
   1aa5e:	bf00      	nop
   1aa60:	00021114 	.word	0x00021114
   1aa64:	0002123c 	.word	0x0002123c
   1aa68:	00024d86 	.word	0x00024d86

0001aa6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1aa6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa70:	4605      	mov	r5, r0
   1aa72:	460f      	mov	r7, r1
	__asm__ volatile(
   1aa74:	f04f 0320 	mov.w	r3, #32
   1aa78:	f3ef 8811 	mrs	r8, BASEPRI
   1aa7c:	f383 8811 	msr	BASEPRI, r3
   1aa80:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1aa84:	f000 fe8e 	bl	1b7a4 <z_impl_k_current_get>
   1aa88:	4c20      	ldr	r4, [pc, #128]	; (1ab0c <z_fatal_error+0xa0>)
   1aa8a:	4b21      	ldr	r3, [pc, #132]	; (1ab10 <z_fatal_error+0xa4>)
   1aa8c:	1ae4      	subs	r4, r4, r3
   1aa8e:	2d04      	cmp	r5, #4
   1aa90:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1aa94:	bf96      	itet	ls
   1aa96:	4a1f      	ldrls	r2, [pc, #124]	; (1ab14 <z_fatal_error+0xa8>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1aa98:	4a1f      	ldrhi	r2, [pc, #124]	; (1ab18 <z_fatal_error+0xac>)
   1aa9a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1aa9e:	01a4      	lsls	r4, r4, #6
   1aaa0:	f044 0301 	orr.w	r3, r4, #1
   1aaa4:	f8ad 3000 	strh.w	r3, [sp]
   1aaa8:	4606      	mov	r6, r0
   1aaaa:	2300      	movs	r3, #0
   1aaac:	481b      	ldr	r0, [pc, #108]	; (1ab1c <z_fatal_error+0xb0>)
   1aaae:	4629      	mov	r1, r5
   1aab0:	f002 fe34 	bl	1d71c <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1aab4:	69fb      	ldr	r3, [r7, #28]
   1aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1aaba:	b123      	cbz	r3, 1aac6 <z_fatal_error+0x5a>
		LOG_ERR("Fault during interrupt handling\n");
   1aabc:	4818      	ldr	r0, [pc, #96]	; (1ab20 <z_fatal_error+0xb4>)
   1aabe:	f044 0101 	orr.w	r1, r4, #1
   1aac2:	f002 fdf1 	bl	1d6a8 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1aac6:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1aac8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1aacc:	f005 ff5f 	bl	2098e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1aad0:	b1d0      	cbz	r0, 1ab08 <z_fatal_error+0x9c>
   1aad2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1aad4:	4b13      	ldr	r3, [pc, #76]	; (1ab24 <z_fatal_error+0xb8>)
   1aad6:	2a00      	cmp	r2, #0
   1aad8:	bf08      	it	eq
   1aada:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1aadc:	f7e9 fa10 	bl	3f00 <log_strdup>
   1aae0:	4623      	mov	r3, r4
   1aae2:	4602      	mov	r2, r0
   1aae4:	4631      	mov	r1, r6
   1aae6:	4810      	ldr	r0, [pc, #64]	; (1ab28 <z_fatal_error+0xbc>)
   1aae8:	f002 fdff 	bl	1d6ea <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1aaec:	4639      	mov	r1, r7
   1aaee:	4628      	mov	r0, r5
   1aaf0:	f7ff ffa4 	bl	1aa3c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1aaf4:	f388 8811 	msr	BASEPRI, r8
   1aaf8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1aafc:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1aafe:	b002      	add	sp, #8
   1ab00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab04:	f7eb bb0a 	b.w	611c <z_impl_k_thread_abort>
		thread_name = "unknown";
   1ab08:	4806      	ldr	r0, [pc, #24]	; (1ab24 <z_fatal_error+0xb8>)
   1ab0a:	e7e7      	b.n	1aadc <z_fatal_error+0x70>
   1ab0c:	0002123c 	.word	0x0002123c
   1ab10:	00021114 	.word	0x00021114
   1ab14:	00022ba8 	.word	0x00022ba8
   1ab18:	00024d95 	.word	0x00024d95
   1ab1c:	00024da3 	.word	0x00024da3
   1ab20:	00024dcb 	.word	0x00024dcb
   1ab24:	00023894 	.word	0x00023894
   1ab28:	00024dec 	.word	0x00024dec

0001ab2c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1ab2c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1ab2e:	4d0b      	ldr	r5, [pc, #44]	; (1ab5c <idle+0x30>)
	__asm__ volatile(
   1ab30:	f04f 0220 	mov.w	r2, #32
   1ab34:	f3ef 8311 	mrs	r3, BASEPRI
   1ab38:	f382 8811 	msr	BASEPRI, r2
   1ab3c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1ab40:	f005 ffcf 	bl	20ae2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab44:	2101      	movs	r1, #1
   1ab46:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1ab48:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab4a:	bfd8      	it	le
   1ab4c:	4608      	movle	r0, r1
   1ab4e:	f005 ffd8 	bl	20b02 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ab52:	622c      	str	r4, [r5, #32]
   1ab54:	f7eb f82c 	bl	5bb0 <arch_cpu_idle>
}
   1ab58:	e7ea      	b.n	1ab30 <idle+0x4>
   1ab5a:	bf00      	nop
   1ab5c:	20001c0c 	.word	0x20001c0c

0001ab60 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ab60:	4802      	ldr	r0, [pc, #8]	; (1ab6c <z_bss_zero+0xc>)
   1ab62:	4a03      	ldr	r2, [pc, #12]	; (1ab70 <z_bss_zero+0x10>)
   1ab64:	2100      	movs	r1, #0
   1ab66:	1a12      	subs	r2, r2, r0
   1ab68:	f003 bce9 	b.w	1e53e <memset>
   1ab6c:	20000000 	.word	0x20000000
   1ab70:	20002290 	.word	0x20002290

0001ab74 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ab74:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ab76:	4806      	ldr	r0, [pc, #24]	; (1ab90 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ab78:	4a06      	ldr	r2, [pc, #24]	; (1ab94 <z_data_copy+0x20>)
   1ab7a:	4907      	ldr	r1, [pc, #28]	; (1ab98 <z_data_copy+0x24>)
   1ab7c:	1a12      	subs	r2, r2, r0
   1ab7e:	f003 fcb3 	bl	1e4e8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ab82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ab86:	4a05      	ldr	r2, [pc, #20]	; (1ab9c <z_data_copy+0x28>)
   1ab88:	4905      	ldr	r1, [pc, #20]	; (1aba0 <z_data_copy+0x2c>)
   1ab8a:	4806      	ldr	r0, [pc, #24]	; (1aba4 <z_data_copy+0x30>)
   1ab8c:	f003 bcac 	b.w	1e4e8 <memcpy>
   1ab90:	20005888 	.word	0x20005888
   1ab94:	20006340 	.word	0x20006340
   1ab98:	00024eab 	.word	0x00024eab
   1ab9c:	00000000 	.word	0x00000000
   1aba0:	00024ea4 	.word	0x00024ea4
   1aba4:	20000000 	.word	0x20000000

0001aba8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1aba8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1abaa:	4b0c      	ldr	r3, [pc, #48]	; (1abdc <bg_thread_main+0x34>)
   1abac:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1abae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1abb0:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1abb2:	f7ff ff01 	bl	1a9b8 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1abb6:	4a0a      	ldr	r2, [pc, #40]	; (1abe0 <bg_thread_main+0x38>)
   1abb8:	490a      	ldr	r1, [pc, #40]	; (1abe4 <bg_thread_main+0x3c>)
   1abba:	480b      	ldr	r0, [pc, #44]	; (1abe8 <bg_thread_main+0x40>)
   1abbc:	f001 fc26 	bl	1c40c <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1abc0:	2003      	movs	r0, #3
   1abc2:	f7ff fef9 	bl	1a9b8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1abc6:	f000 febb 	bl	1b940 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1abca:	f7e8 fc2b 	bl	3424 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1abce:	4a07      	ldr	r2, [pc, #28]	; (1abec <bg_thread_main+0x44>)
   1abd0:	7b13      	ldrb	r3, [r2, #12]
   1abd2:	f023 0301 	bic.w	r3, r3, #1
   1abd6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1abd8:	bd08      	pop	{r3, pc}
   1abda:	bf00      	nop
   1abdc:	2000228f 	.word	0x2000228f
   1abe0:	00022ef5 	.word	0x00022ef5
   1abe4:	00024e4e 	.word	0x00024e4e
   1abe8:	00024e5c 	.word	0x00024e5c
   1abec:	20001ba0 	.word	0x20001ba0

0001abf0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1abf0:	b580      	push	{r7, lr}
   1abf2:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1abf4:	f7e9 f8dc 	bl	3db0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1abf8:	4b35      	ldr	r3, [pc, #212]	; (1acd0 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1abfa:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1abfe:	4d35      	ldr	r5, [pc, #212]	; (1acd4 <z_cstart+0xe4>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current_cpu->current = &dummy_thread;
   1ac00:	4e35      	ldr	r6, [pc, #212]	; (1acd8 <z_cstart+0xe8>)
   1ac02:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac04:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 1acf4 <z_cstart+0x104>
   1ac08:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1acf8 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1ac0c:	4f33      	ldr	r7, [pc, #204]	; (1acdc <z_cstart+0xec>)
   1ac0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ac12:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac14:	2400      	movs	r4, #0
   1ac16:	23e0      	movs	r3, #224	; 0xe0
   1ac18:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ac1c:	77ec      	strb	r4, [r5, #31]
   1ac1e:	762c      	strb	r4, [r5, #24]
   1ac20:	766c      	strb	r4, [r5, #25]
   1ac22:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ac24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ac26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ac2a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ac2c:	f7eb fa62 	bl	60f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ac30:	f7ea ffb8 	bl	5ba4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ac34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac38:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ac3a:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1ac3c:	ab07      	add	r3, sp, #28
   1ac3e:	226c      	movs	r2, #108	; 0x6c
   1ac40:	4621      	mov	r1, r4
   1ac42:	4618      	mov	r0, r3
   1ac44:	f003 fc7b 	bl	1e53e <memset>
   1ac48:	f04f 0801 	mov.w	r8, #1
	_current_cpu->current = &dummy_thread;
   1ac4c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ac4e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1ac50:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ac54:	f7ff feb0 	bl	1a9b8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac58:	4640      	mov	r0, r8
	_kernel.ready_q.cache = &z_main_thread;
   1ac5a:	4d21      	ldr	r5, [pc, #132]	; (1ace0 <z_cstart+0xf0>)
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac5c:	f7ff feac 	bl	1a9b8 <z_sys_device_do_config_level>
	z_sched_init();
   1ac60:	f000 fd1e 	bl	1b6a0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac64:	4b1f      	ldr	r3, [pc, #124]	; (1ace4 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1ac66:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac68:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ac6c:	4649      	mov	r1, r9
   1ac6e:	e9cd 8304 	strd	r8, r3, [sp, #16]
   1ac72:	4628      	mov	r0, r5
   1ac74:	4653      	mov	r3, sl
   1ac76:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1ac7a:	e9cd 4400 	strd	r4, r4, [sp]
   1ac7e:	f000 fdf7 	bl	1b870 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ac82:	7b6b      	ldrb	r3, [r5, #13]
   1ac84:	f023 0304 	bic.w	r3, r3, #4
   1ac88:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   1ac8a:	4628      	mov	r0, r5
   1ac8c:	f005 fddc 	bl	20848 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1ac90:	4b15      	ldr	r3, [pc, #84]	; (1ace8 <z_cstart+0xf8>)
   1ac92:	4916      	ldr	r1, [pc, #88]	; (1acec <z_cstart+0xfc>)
   1ac94:	e9cd 8304 	strd	r8, r3, [sp, #16]
   1ac98:	230f      	movs	r3, #15
   1ac9a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ac9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1aca2:	4b13      	ldr	r3, [pc, #76]	; (1acf0 <z_cstart+0x100>)
   1aca4:	4638      	mov	r0, r7
   1aca6:	e9cd 4400 	strd	r4, r4, [sp]
   1acaa:	f000 fde1 	bl	1b870 <z_setup_new_thread>
   1acae:	7b7b      	ldrb	r3, [r7, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1acb0:	60f7      	str	r7, [r6, #12]
   1acb2:	f023 0304 	bic.w	r3, r3, #4
   1acb6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1acb8:	f106 0318 	add.w	r3, r6, #24
	list->tail = (sys_dnode_t *)list;
   1acbc:	e9c6 3306 	strd	r3, r3, [r6, #24]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1acc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1acc4:	4653      	mov	r3, sl
   1acc6:	4649      	mov	r1, r9
   1acc8:	4628      	mov	r0, r5
   1acca:	f7ea ff4f 	bl	5b6c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1acce:	bf00      	nop
   1acd0:	20004550 	.word	0x20004550
   1acd4:	e000ed00 	.word	0xe000ed00
   1acd8:	20001c0c 	.word	0x20001c0c
   1acdc:	20001b34 	.word	0x20001b34
   1ace0:	20001ba0 	.word	0x20001ba0
   1ace4:	00024e83 	.word	0x00024e83
   1ace8:	00024e88 	.word	0x00024e88
   1acec:	20003c10 	.word	0x20003c10
   1acf0:	0001ab2d 	.word	0x0001ab2d
   1acf4:	0001aba9 	.word	0x0001aba9
   1acf8:	20003810 	.word	0x20003810

0001acfc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1acfc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1acfe:	4b0e      	ldr	r3, [pc, #56]	; (1ad38 <init_mem_slab_module+0x3c>)
   1ad00:	4c0e      	ldr	r4, [pc, #56]	; (1ad3c <init_mem_slab_module+0x40>)
   1ad02:	42a3      	cmp	r3, r4
   1ad04:	d301      	bcc.n	1ad0a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1ad06:	2000      	movs	r0, #0
	return rc;
}
   1ad08:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ad0a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1ad0e:	ea41 0200 	orr.w	r2, r1, r0
   1ad12:	f012 0203 	ands.w	r2, r2, #3
   1ad16:	d10b      	bne.n	1ad30 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad18:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ad1a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad1c:	42aa      	cmp	r2, r5
   1ad1e:	d101      	bne.n	1ad24 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ad20:	331c      	adds	r3, #28
   1ad22:	e7ee      	b.n	1ad02 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1ad24:	695e      	ldr	r6, [r3, #20]
   1ad26:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad28:	3201      	adds	r2, #1
		slab->free_list = p;
   1ad2a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1ad2c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad2e:	e7f5      	b.n	1ad1c <init_mem_slab_module+0x20>
		return -EINVAL;
   1ad30:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1ad34:	e7e8      	b.n	1ad08 <init_mem_slab_module+0xc>
   1ad36:	bf00      	nop
   1ad38:	2000614c 	.word	0x2000614c
   1ad3c:	20006184 	.word	0x20006184

0001ad40 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1ad40:	b510      	push	{r4, lr}
   1ad42:	4613      	mov	r3, r2
   1ad44:	460c      	mov	r4, r1
   1ad46:	f04f 0220 	mov.w	r2, #32
   1ad4a:	f3ef 8111 	mrs	r1, BASEPRI
   1ad4e:	f382 8811 	msr	BASEPRI, r2
   1ad52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ad56:	6942      	ldr	r2, [r0, #20]
   1ad58:	b15a      	cbz	r2, 1ad72 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1ad5a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ad5c:	6813      	ldr	r3, [r2, #0]
   1ad5e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ad60:	6983      	ldr	r3, [r0, #24]
   1ad62:	3301      	adds	r3, #1
   1ad64:	6183      	str	r3, [r0, #24]
		result = 0;
   1ad66:	2000      	movs	r0, #0
	__asm__ volatile(
   1ad68:	f381 8811 	msr	BASEPRI, r1
   1ad6c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ad70:	e00d      	b.n	1ad8e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1ad72:	b91b      	cbnz	r3, 1ad7c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1ad74:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ad76:	f06f 000b 	mvn.w	r0, #11
   1ad7a:	e7f5      	b.n	1ad68 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ad7c:	4602      	mov	r2, r0
   1ad7e:	4804      	ldr	r0, [pc, #16]	; (1ad90 <k_mem_slab_alloc+0x50>)
   1ad80:	f000 fc36 	bl	1b5f0 <z_pend_curr>
		if (result == 0) {
   1ad84:	b918      	cbnz	r0, 1ad8e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1ad86:	4b03      	ldr	r3, [pc, #12]	; (1ad94 <k_mem_slab_alloc+0x54>)
   1ad88:	689b      	ldr	r3, [r3, #8]
   1ad8a:	695b      	ldr	r3, [r3, #20]
   1ad8c:	6023      	str	r3, [r4, #0]
}
   1ad8e:	bd10      	pop	{r4, pc}
   1ad90:	20002290 	.word	0x20002290
   1ad94:	20001c0c 	.word	0x20001c0c

0001ad98 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ad98:	b570      	push	{r4, r5, r6, lr}
   1ad9a:	4604      	mov	r4, r0
   1ad9c:	460d      	mov	r5, r1
	__asm__ volatile(
   1ad9e:	f04f 0320 	mov.w	r3, #32
   1ada2:	f3ef 8611 	mrs	r6, BASEPRI
   1ada6:	f383 8811 	msr	BASEPRI, r3
   1adaa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1adae:	f005 fd96 	bl	208de <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1adb2:	b158      	cbz	r0, 1adcc <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1adb4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1adb6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1adb8:	2100      	movs	r1, #0
   1adba:	6681      	str	r1, [r0, #104]	; 0x68
		z_ready_thread(pending_thread);
   1adbc:	f005 fd44 	bl	20848 <z_ready_thread>
		z_reschedule(&lock, key);
   1adc0:	4631      	mov	r1, r6
   1adc2:	4809      	ldr	r0, [pc, #36]	; (1ade8 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1adc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1adc8:	f005 bcf6 	b.w	207b8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1adcc:	682b      	ldr	r3, [r5, #0]
   1adce:	6962      	ldr	r2, [r4, #20]
   1add0:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1add2:	682b      	ldr	r3, [r5, #0]
   1add4:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1add6:	69a3      	ldr	r3, [r4, #24]
   1add8:	3b01      	subs	r3, #1
   1adda:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1addc:	f386 8811 	msr	BASEPRI, r6
   1ade0:	f3bf 8f6f 	isb	sy
}
   1ade4:	bd70      	pop	{r4, r5, r6, pc}
   1ade6:	bf00      	nop
   1ade8:	20002290 	.word	0x20002290

0001adec <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1adec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1adee:	4c07      	ldr	r4, [pc, #28]	; (1ae0c <init_static_pools+0x20>)
   1adf0:	4d07      	ldr	r5, [pc, #28]	; (1ae10 <init_static_pools+0x24>)
   1adf2:	42ac      	cmp	r4, r5
   1adf4:	d301      	bcc.n	1adfa <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1adf6:	2000      	movs	r0, #0
   1adf8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1adfa:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1adfe:	4620      	mov	r0, r4
   1ae00:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1ae04:	f001 f94d 	bl	1c0a2 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1ae08:	341c      	adds	r4, #28
   1ae0a:	e7f2      	b.n	1adf2 <init_static_pools+0x6>
   1ae0c:	20006184 	.word	0x20006184
   1ae10:	20006184 	.word	0x20006184

0001ae14 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1ae18:	1e1c      	subs	r4, r3, #0
{
   1ae1a:	b085      	sub	sp, #20
   1ae1c:	4607      	mov	r7, r0
   1ae1e:	460d      	mov	r5, r1
   1ae20:	4692      	mov	sl, r2
	if (timeout > 0) {
   1ae22:	dd3a      	ble.n	1ae9a <k_mem_pool_alloc+0x86>
	return z_impl_k_uptime_get();
   1ae24:	f005 fe8b 	bl	20b3e <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1ae28:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1ae2c:	4b1c      	ldr	r3, [pc, #112]	; (1aea0 <k_mem_pool_alloc+0x8c>)
   1ae2e:	4e1d      	ldr	r6, [pc, #116]	; (1aea4 <k_mem_pool_alloc+0x90>)
   1ae30:	1afb      	subs	r3, r7, r3
   1ae32:	109b      	asrs	r3, r3, #2
   1ae34:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
   1ae36:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1ae38:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1ae3c:	ab03      	add	r3, sp, #12
   1ae3e:	aa02      	add	r2, sp, #8
   1ae40:	9500      	str	r5, [sp, #0]
   1ae42:	4651      	mov	r1, sl
   1ae44:	4638      	mov	r0, r7
   1ae46:	f001 f972 	bl	1c12e <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1ae4a:	9b02      	ldr	r3, [sp, #8]
   1ae4c:	9a03      	ldr	r2, [sp, #12]
   1ae4e:	021b      	lsls	r3, r3, #8
   1ae50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1ae54:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   1ae58:	b2f2      	uxtb	r2, r6
   1ae5a:	4313      	orrs	r3, r2
   1ae5c:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1ae5e:	b1c8      	cbz	r0, 1ae94 <k_mem_pool_alloc+0x80>
   1ae60:	b1c4      	cbz	r4, 1ae94 <k_mem_pool_alloc+0x80>
   1ae62:	f110 0f0c 	cmn.w	r0, #12
   1ae66:	d115      	bne.n	1ae94 <k_mem_pool_alloc+0x80>
	__asm__ volatile(
   1ae68:	f04f 0320 	mov.w	r3, #32
   1ae6c:	f3ef 8011 	mrs	r0, BASEPRI
   1ae70:	f383 8811 	msr	BASEPRI, r3
   1ae74:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1ae78:	4622      	mov	r2, r4
   1ae7a:	4659      	mov	r1, fp
   1ae7c:	f000 fb94 	bl	1b5a8 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1ae80:	1c63      	adds	r3, r4, #1
   1ae82:	d0db      	beq.n	1ae3c <k_mem_pool_alloc+0x28>
   1ae84:	f005 fe5b 	bl	20b3e <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1ae88:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1ae8c:	2c00      	cmp	r4, #0
   1ae8e:	dcd5      	bgt.n	1ae3c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1ae90:	f06f 000a 	mvn.w	r0, #10
}
   1ae94:	b005      	add	sp, #20
   1ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1ae9a:	f04f 0800 	mov.w	r8, #0
   1ae9e:	e7c5      	b.n	1ae2c <k_mem_pool_alloc+0x18>
   1aea0:	20006184 	.word	0x20006184
   1aea4:	b6db6db7 	.word	0xb6db6db7

0001aea8 <k_mem_pool_free_id>:
void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1aea8:	7803      	ldrb	r3, [r0, #0]
   1aeaa:	6802      	ldr	r2, [r0, #0]
   1aeac:	7841      	ldrb	r1, [r0, #1]
{
   1aeae:	b570      	push	{r4, r5, r6, lr}
	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1aeb0:	4e11      	ldr	r6, [pc, #68]	; (1aef8 <k_mem_pool_free_id+0x50>)
   1aeb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1aeb6:	0b12      	lsrs	r2, r2, #12
   1aeb8:	f001 010f 	and.w	r1, r1, #15
   1aebc:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   1aec0:	009c      	lsls	r4, r3, #2
   1aec2:	f001 f9ec 	bl	1c29e <z_sys_mem_pool_block_free>
   1aec6:	f04f 0320 	mov.w	r3, #32
   1aeca:	f3ef 8511 	mrs	r5, BASEPRI
   1aece:	f383 8811 	msr	BASEPRI, r3
   1aed2:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1aed6:	f104 0014 	add.w	r0, r4, #20
   1aeda:	4430      	add	r0, r6
   1aedc:	f005 fd2c 	bl	20938 <z_unpend_all>

	if (need_sched != 0) {
   1aee0:	b128      	cbz	r0, 1aeee <k_mem_pool_free_id+0x46>
		z_reschedule(&lock, key);
   1aee2:	4629      	mov	r1, r5
   1aee4:	4805      	ldr	r0, [pc, #20]	; (1aefc <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1aee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1aeea:	f005 bc65 	b.w	207b8 <z_reschedule>
	__asm__ volatile(
   1aeee:	f385 8811 	msr	BASEPRI, r5
   1aef2:	f3bf 8f6f 	isb	sy
}
   1aef6:	bd70      	pop	{r4, r5, r6, pc}
   1aef8:	20006184 	.word	0x20006184
   1aefc:	20002290 	.word	0x20002290

0001af00 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1af00:	b510      	push	{r4, lr}
   1af02:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1af04:	f005 fd38 	bl	20978 <k_is_in_isr>
   1af08:	b940      	cbnz	r0, 1af1c <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1af0a:	4b05      	ldr	r3, [pc, #20]	; (1af20 <z_thread_malloc+0x20>)
   1af0c:	689b      	ldr	r3, [r3, #8]
   1af0e:	6e18      	ldr	r0, [r3, #96]	; 0x60
	}

	if (pool) {
   1af10:	b120      	cbz	r0, 1af1c <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1af12:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1af14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1af18:	f005 bb03 	b.w	20522 <k_mem_pool_malloc>
}
   1af1c:	2000      	movs	r0, #0
   1af1e:	bd10      	pop	{r4, pc}
   1af20:	20001c0c 	.word	0x20001c0c

0001af24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af26:	4604      	mov	r4, r0
   1af28:	460e      	mov	r6, r1
	__asm__ volatile(
   1af2a:	f04f 0320 	mov.w	r3, #32
   1af2e:	f3ef 8711 	mrs	r7, BASEPRI
   1af32:	f383 8811 	msr	BASEPRI, r3
   1af36:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1af3a:	68c3      	ldr	r3, [r0, #12]
   1af3c:	4a30      	ldr	r2, [pc, #192]	; (1b000 <z_impl_k_mutex_lock+0xdc>)
   1af3e:	b15b      	cbz	r3, 1af58 <z_impl_k_mutex_lock+0x34>
   1af40:	6880      	ldr	r0, [r0, #8]
   1af42:	6891      	ldr	r1, [r2, #8]
   1af44:	4288      	cmp	r0, r1
   1af46:	d015      	beq.n	1af74 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1af48:	b9b6      	cbnz	r6, 1af78 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1af4a:	f387 8811 	msr	BASEPRI, r7
   1af4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1af52:	f06f 000f 	mvn.w	r0, #15
   1af56:	e00c      	b.n	1af72 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1af58:	6891      	ldr	r1, [r2, #8]
   1af5a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1af5e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1af60:	3301      	adds	r3, #1
   1af62:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1af64:	6893      	ldr	r3, [r2, #8]
   1af66:	60a3      	str	r3, [r4, #8]
   1af68:	f387 8811 	msr	BASEPRI, r7
   1af6c:	f3bf 8f6f 	isb	sy
		return 0;
   1af70:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1af72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1af74:	6921      	ldr	r1, [r4, #16]
   1af76:	e7f2      	b.n	1af5e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1af78:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1af7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1af80:	4299      	cmp	r1, r3
   1af82:	bfa8      	it	ge
   1af84:	4619      	movge	r1, r3
   1af86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1af8a:	428b      	cmp	r3, r1
   1af8c:	dd2b      	ble.n	1afe6 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1af8e:	f000 fb43 	bl	1b618 <z_set_prio>
   1af92:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1af94:	481b      	ldr	r0, [pc, #108]	; (1b004 <z_impl_k_mutex_lock+0xe0>)
   1af96:	4633      	mov	r3, r6
   1af98:	4622      	mov	r2, r4
   1af9a:	4639      	mov	r1, r7
   1af9c:	f000 fb28 	bl	1b5f0 <z_pend_curr>
	if (got_mutex == 0) {
   1afa0:	2800      	cmp	r0, #0
   1afa2:	d0e6      	beq.n	1af72 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1afa4:	f04f 0320 	mov.w	r3, #32
   1afa8:	f3ef 8611 	mrs	r6, BASEPRI
   1afac:	f383 8811 	msr	BASEPRI, r3
   1afb0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1afb4:	6823      	ldr	r3, [r4, #0]
   1afb6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afb8:	429c      	cmp	r4, r3
   1afba:	d007      	beq.n	1afcc <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1afbc:	b133      	cbz	r3, 1afcc <z_impl_k_mutex_lock+0xa8>
   1afbe:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1afc2:	4299      	cmp	r1, r3
   1afc4:	bfa8      	it	ge
   1afc6:	4619      	movge	r1, r3
   1afc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1afcc:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1afce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1afd2:	4299      	cmp	r1, r3
   1afd4:	d109      	bne.n	1afea <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1afd6:	b16d      	cbz	r5, 1aff4 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1afd8:	480a      	ldr	r0, [pc, #40]	; (1b004 <z_impl_k_mutex_lock+0xe0>)
   1afda:	4631      	mov	r1, r6
   1afdc:	f005 fbec 	bl	207b8 <z_reschedule>
	return -EAGAIN;
   1afe0:	f06f 000a 	mvn.w	r0, #10
   1afe4:	e7c5      	b.n	1af72 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1afe6:	2500      	movs	r5, #0
   1afe8:	e7d4      	b.n	1af94 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1afea:	f000 fb15 	bl	1b618 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1afee:	2800      	cmp	r0, #0
   1aff0:	d1f2      	bne.n	1afd8 <z_impl_k_mutex_lock+0xb4>
   1aff2:	e7f0      	b.n	1afd6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1aff4:	f386 8811 	msr	BASEPRI, r6
   1aff8:	f3bf 8f6f 	isb	sy
   1affc:	e7f0      	b.n	1afe0 <z_impl_k_mutex_lock+0xbc>
   1affe:	bf00      	nop
   1b000:	20001c0c 	.word	0x20001c0c
   1b004:	20002290 	.word	0x20002290

0001b008 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b008:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1b00a:	6883      	ldr	r3, [r0, #8]
{
   1b00c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d036      	beq.n	1b080 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b012:	4a1e      	ldr	r2, [pc, #120]	; (1b08c <z_impl_k_mutex_unlock+0x84>)
   1b014:	6892      	ldr	r2, [r2, #8]
   1b016:	4293      	cmp	r3, r2
   1b018:	d135      	bne.n	1b086 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b01a:	7bda      	ldrb	r2, [r3, #15]
   1b01c:	3a01      	subs	r2, #1
   1b01e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1b020:	68c3      	ldr	r3, [r0, #12]
   1b022:	2b01      	cmp	r3, #1
   1b024:	d005      	beq.n	1b032 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b026:	3b01      	subs	r3, #1
   1b028:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1b02a:	f000 f8c3 	bl	1b1b4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1b02e:	2000      	movs	r0, #0
}
   1b030:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b032:	f04f 0320 	mov.w	r3, #32
   1b036:	f3ef 8511 	mrs	r5, BASEPRI
   1b03a:	f383 8811 	msr	BASEPRI, r3
   1b03e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b042:	6901      	ldr	r1, [r0, #16]
   1b044:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b046:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b04a:	4299      	cmp	r1, r3
   1b04c:	d001      	beq.n	1b052 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1b04e:	f000 fae3 	bl	1b618 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b052:	4620      	mov	r0, r4
   1b054:	f005 fc43 	bl	208de <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b058:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b05a:	b158      	cbz	r0, 1b074 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b05c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b060:	6122      	str	r2, [r4, #16]
   1b062:	2200      	movs	r2, #0
   1b064:	6682      	str	r2, [r0, #104]	; 0x68
		z_ready_thread(new_owner);
   1b066:	f005 fbef 	bl	20848 <z_ready_thread>
		z_reschedule(&lock, key);
   1b06a:	4809      	ldr	r0, [pc, #36]	; (1b090 <z_impl_k_mutex_unlock+0x88>)
   1b06c:	4629      	mov	r1, r5
   1b06e:	f005 fba3 	bl	207b8 <z_reschedule>
   1b072:	e7da      	b.n	1b02a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b074:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b076:	f385 8811 	msr	BASEPRI, r5
   1b07a:	f3bf 8f6f 	isb	sy
   1b07e:	e7d4      	b.n	1b02a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b080:	f06f 0015 	mvn.w	r0, #21
   1b084:	e7d4      	b.n	1b030 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b08a:	e7d1      	b.n	1b030 <z_impl_k_mutex_unlock+0x28>
   1b08c:	20001c0c 	.word	0x20001c0c
   1b090:	20002290 	.word	0x20002290

0001b094 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b094:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b096:	4c08      	ldr	r4, [pc, #32]	; (1b0b8 <z_reset_time_slice+0x24>)
   1b098:	6823      	ldr	r3, [r4, #0]
   1b09a:	b15b      	cbz	r3, 1b0b4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b09c:	f7ea fbd6 	bl	584c <z_clock_elapsed>
   1b0a0:	4603      	mov	r3, r0
   1b0a2:	6820      	ldr	r0, [r4, #0]
   1b0a4:	4a05      	ldr	r2, [pc, #20]	; (1b0bc <z_reset_time_slice+0x28>)
   1b0a6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b0ac:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b0ae:	2100      	movs	r1, #0
   1b0b0:	f005 bd27 	b.w	20b02 <z_set_timeout_expiry>
}
   1b0b4:	bd10      	pop	{r4, pc}
   1b0b6:	bf00      	nop
   1b0b8:	20001c44 	.word	0x20001c44
   1b0bc:	20001c0c 	.word	0x20001c0c

0001b0c0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0c2:	4605      	mov	r5, r0
   1b0c4:	460c      	mov	r4, r1
	__asm__ volatile(
   1b0c6:	f04f 0320 	mov.w	r3, #32
   1b0ca:	f3ef 8611 	mrs	r6, BASEPRI
   1b0ce:	f383 8811 	msr	BASEPRI, r3
   1b0d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b0d6:	4b0d      	ldr	r3, [pc, #52]	; (1b10c <k_sched_time_slice_set+0x4c>)
   1b0d8:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b0da:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b0de:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b0e2:	2100      	movs	r1, #0
   1b0e4:	611a      	str	r2, [r3, #16]
   1b0e6:	fbe7 0105 	umlal	r0, r1, r7, r5
   1b0ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0ee:	2300      	movs	r3, #0
   1b0f0:	f7e5 f806 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b0f4:	4b06      	ldr	r3, [pc, #24]	; (1b110 <k_sched_time_slice_set+0x50>)
   1b0f6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b0f8:	4b06      	ldr	r3, [pc, #24]	; (1b114 <k_sched_time_slice_set+0x54>)
   1b0fa:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1b0fc:	f7ff ffca 	bl	1b094 <z_reset_time_slice>
	__asm__ volatile(
   1b100:	f386 8811 	msr	BASEPRI, r6
   1b104:	f3bf 8f6f 	isb	sy
	}
}
   1b108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b10a:	bf00      	nop
   1b10c:	20001c0c 	.word	0x20001c0c
   1b110:	20001c44 	.word	0x20001c44
   1b114:	20001c40 	.word	0x20001c40

0001b118 <k_sched_lock>:
	__asm__ volatile(
   1b118:	f04f 0320 	mov.w	r3, #32
   1b11c:	f3ef 8111 	mrs	r1, BASEPRI
   1b120:	f383 8811 	msr	BASEPRI, r3
   1b124:	f3bf 8f6f 	isb	sy
   1b128:	4b04      	ldr	r3, [pc, #16]	; (1b13c <k_sched_lock+0x24>)
   1b12a:	689a      	ldr	r2, [r3, #8]
   1b12c:	7bd3      	ldrb	r3, [r2, #15]
   1b12e:	3b01      	subs	r3, #1
   1b130:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b132:	f381 8811 	msr	BASEPRI, r1
   1b136:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b13a:	4770      	bx	lr
   1b13c:	20001c0c 	.word	0x20001c0c

0001b140 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b140:	4b09      	ldr	r3, [pc, #36]	; (1b168 <z_priq_dumb_remove+0x28>)
   1b142:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b146:	4282      	cmp	r2, r0
   1b148:	d105      	bne.n	1b156 <z_priq_dumb_remove+0x16>
   1b14a:	689b      	ldr	r3, [r3, #8]
   1b14c:	428b      	cmp	r3, r1
   1b14e:	d102      	bne.n	1b156 <z_priq_dumb_remove+0x16>
   1b150:	7b4b      	ldrb	r3, [r1, #13]
   1b152:	06db      	lsls	r3, r3, #27
   1b154:	d106      	bne.n	1b164 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b156:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b15a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b15c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b15e:	2300      	movs	r3, #0
	node->prev = NULL;
   1b160:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b164:	4770      	bx	lr
   1b166:	bf00      	nop
   1b168:	20001c0c 	.word	0x20001c0c

0001b16c <update_cache>:
{
   1b16c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b16e:	4c10      	ldr	r4, [pc, #64]	; (1b1b0 <update_cache+0x44>)
{
   1b170:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b172:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b176:	f005 fb5d 	bl	20834 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b17a:	68a3      	ldr	r3, [r4, #8]
   1b17c:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b17e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b180:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1b182:	bf44      	itt	mi
   1b184:	f041 0108 	orrmi.w	r1, r1, #8
   1b188:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1b18a:	b905      	cbnz	r5, 1b18e <update_cache+0x22>
   1b18c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b18e:	b94e      	cbnz	r6, 1b1a4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1b190:	7b5a      	ldrb	r2, [r3, #13]
   1b192:	06d2      	lsls	r2, r2, #27
   1b194:	d106      	bne.n	1b1a4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b196:	69aa      	ldr	r2, [r5, #24]
   1b198:	b922      	cbnz	r2, 1b1a4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b19a:	89da      	ldrh	r2, [r3, #14]
   1b19c:	2a7f      	cmp	r2, #127	; 0x7f
   1b19e:	d901      	bls.n	1b1a4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1b1a0:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b1a2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1b1a4:	42ab      	cmp	r3, r5
   1b1a6:	d001      	beq.n	1b1ac <update_cache+0x40>
			z_reset_time_slice();
   1b1a8:	f7ff ff74 	bl	1b094 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b1ac:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b1ae:	e7f8      	b.n	1b1a2 <update_cache+0x36>
   1b1b0:	20001c0c 	.word	0x20001c0c

0001b1b4 <k_sched_unlock>:
{
   1b1b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b1b6:	f04f 0320 	mov.w	r3, #32
   1b1ba:	f3ef 8411 	mrs	r4, BASEPRI
   1b1be:	f383 8811 	msr	BASEPRI, r3
   1b1c2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b1c6:	4b08      	ldr	r3, [pc, #32]	; (1b1e8 <k_sched_unlock+0x34>)
   1b1c8:	689a      	ldr	r2, [r3, #8]
   1b1ca:	7bd3      	ldrb	r3, [r2, #15]
   1b1cc:	3301      	adds	r3, #1
   1b1ce:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b1d0:	2000      	movs	r0, #0
   1b1d2:	f7ff ffcb 	bl	1b16c <update_cache>
	__asm__ volatile(
   1b1d6:	f384 8811 	msr	BASEPRI, r4
   1b1da:	f3bf 8f6f 	isb	sy
}
   1b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b1e2:	f005 bb00 	b.w	207e6 <z_reschedule_unlocked>
   1b1e6:	bf00      	nop
   1b1e8:	20001c0c 	.word	0x20001c0c

0001b1ec <ready_thread>:
{
   1b1ec:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1ee:	7b43      	ldrb	r3, [r0, #13]
   1b1f0:	06db      	lsls	r3, r3, #27
   1b1f2:	d12a      	bne.n	1b24a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1b1f4:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1b1f6:	bb43      	cbnz	r3, 1b24a <ready_thread+0x5e>
	return list->head == list;
   1b1f8:	4a15      	ldr	r2, [pc, #84]	; (1b250 <ready_thread+0x64>)
   1b1fa:	4611      	mov	r1, r2
   1b1fc:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b200:	428c      	cmp	r4, r1
   1b202:	bf18      	it	ne
   1b204:	4623      	movne	r3, r4
   1b206:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b208:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1b20a:	bf38      	it	cc
   1b20c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b20e:	b1b3      	cbz	r3, 1b23e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b210:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b214:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b218:	42ae      	cmp	r6, r5
   1b21a:	db03      	blt.n	1b224 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1b21c:	42a3      	cmp	r3, r4
   1b21e:	d00e      	beq.n	1b23e <ready_thread+0x52>
   1b220:	681b      	ldr	r3, [r3, #0]
   1b222:	e7f4      	b.n	1b20e <ready_thread+0x22>
	node->prev = successor->prev;
   1b224:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b226:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b22a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b22c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b22e:	7b43      	ldrb	r3, [r0, #13]
   1b230:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b234:	7343      	strb	r3, [r0, #13]
}
   1b236:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b238:	2000      	movs	r0, #0
   1b23a:	f7ff bf97 	b.w	1b16c <update_cache>
	node->prev = list->tail;
   1b23e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1b242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b244:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b246:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1b248:	e7f1      	b.n	1b22e <ready_thread+0x42>
}
   1b24a:	bc70      	pop	{r4, r5, r6}
   1b24c:	4770      	bx	lr
   1b24e:	bf00      	nop
   1b250:	20001c0c 	.word	0x20001c0c

0001b254 <z_sched_start>:
{
   1b254:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b256:	f04f 0220 	mov.w	r2, #32
   1b25a:	f3ef 8411 	mrs	r4, BASEPRI
   1b25e:	f382 8811 	msr	BASEPRI, r2
   1b262:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b266:	7b42      	ldrb	r2, [r0, #13]
   1b268:	0751      	lsls	r1, r2, #29
   1b26a:	d404      	bmi.n	1b276 <z_sched_start+0x22>
	__asm__ volatile(
   1b26c:	f384 8811 	msr	BASEPRI, r4
   1b270:	f3bf 8f6f 	isb	sy
}
   1b274:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b276:	f022 0204 	bic.w	r2, r2, #4
   1b27a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b27c:	f7ff ffb6 	bl	1b1ec <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b280:	4621      	mov	r1, r4
   1b282:	4802      	ldr	r0, [pc, #8]	; (1b28c <z_sched_start+0x38>)
}
   1b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b288:	f005 ba96 	b.w	207b8 <z_reschedule>
   1b28c:	20002290 	.word	0x20002290

0001b290 <z_move_thread_to_end_of_prio_q>:
{
   1b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b292:	4601      	mov	r1, r0
	__asm__ volatile(
   1b294:	f04f 0320 	mov.w	r3, #32
   1b298:	f3ef 8411 	mrs	r4, BASEPRI
   1b29c:	f383 8811 	msr	BASEPRI, r3
   1b2a0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b2a4:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b2a8:	2b00      	cmp	r3, #0
   1b2aa:	da02      	bge.n	1b2b2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b2ac:	4819      	ldr	r0, [pc, #100]	; (1b314 <z_move_thread_to_end_of_prio_q+0x84>)
   1b2ae:	f7ff ff47 	bl	1b140 <z_priq_dumb_remove>
	return list->head == list;
   1b2b2:	4a19      	ldr	r2, [pc, #100]	; (1b318 <z_move_thread_to_end_of_prio_q+0x88>)
   1b2b4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b2b6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   1b2b8:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2bc:	4283      	cmp	r3, r0
   1b2be:	bf08      	it	eq
   1b2c0:	2300      	moveq	r3, #0
   1b2c2:	2b00      	cmp	r3, #0
   1b2c4:	bf38      	it	cc
   1b2c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2c8:	b1eb      	cbz	r3, 1b306 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b2ca:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1b2ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b2d2:	42b7      	cmp	r7, r6
   1b2d4:	db03      	blt.n	1b2de <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1b2d6:	429d      	cmp	r5, r3
   1b2d8:	d015      	beq.n	1b306 <z_move_thread_to_end_of_prio_q+0x76>
   1b2da:	681b      	ldr	r3, [r3, #0]
   1b2dc:	e7f4      	b.n	1b2c8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1b2de:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1b2e0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1b2e4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b2e6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1b2e8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1b2ea:	6890      	ldr	r0, [r2, #8]
   1b2ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b2f0:	734b      	strb	r3, [r1, #13]
   1b2f2:	1a43      	subs	r3, r0, r1
   1b2f4:	4258      	negs	r0, r3
   1b2f6:	4158      	adcs	r0, r3
   1b2f8:	f7ff ff38 	bl	1b16c <update_cache>
	__asm__ volatile(
   1b2fc:	f384 8811 	msr	BASEPRI, r4
   1b300:	f3bf 8f6f 	isb	sy
}
   1b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1b306:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1b30a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b30c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1b30e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1b310:	e7ea      	b.n	1b2e8 <z_move_thread_to_end_of_prio_q+0x58>
   1b312:	bf00      	nop
   1b314:	20001c34 	.word	0x20001c34
   1b318:	20001c0c 	.word	0x20001c0c

0001b31c <z_time_slice>:
{
   1b31c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b31e:	4a15      	ldr	r2, [pc, #84]	; (1b374 <z_time_slice+0x58>)
   1b320:	4b15      	ldr	r3, [pc, #84]	; (1b378 <z_time_slice+0x5c>)
   1b322:	6814      	ldr	r4, [r2, #0]
{
   1b324:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1b326:	6898      	ldr	r0, [r3, #8]
   1b328:	42a0      	cmp	r0, r4
   1b32a:	461c      	mov	r4, r3
   1b32c:	d103      	bne.n	1b336 <z_time_slice+0x1a>
}
   1b32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b332:	f7ff beaf 	b.w	1b094 <z_reset_time_slice>
	pending_current = NULL;
   1b336:	2500      	movs	r5, #0
   1b338:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b33a:	4a10      	ldr	r2, [pc, #64]	; (1b37c <z_time_slice+0x60>)
   1b33c:	6812      	ldr	r2, [r2, #0]
   1b33e:	b1b2      	cbz	r2, 1b36e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b340:	89c2      	ldrh	r2, [r0, #14]
   1b342:	2a7f      	cmp	r2, #127	; 0x7f
   1b344:	d813      	bhi.n	1b36e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b346:	4a0e      	ldr	r2, [pc, #56]	; (1b380 <z_time_slice+0x64>)
   1b348:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b34c:	6812      	ldr	r2, [r2, #0]
   1b34e:	4295      	cmp	r5, r2
   1b350:	db0d      	blt.n	1b36e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1b352:	4a0c      	ldr	r2, [pc, #48]	; (1b384 <z_time_slice+0x68>)
   1b354:	4290      	cmp	r0, r2
   1b356:	d00a      	beq.n	1b36e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b358:	6982      	ldr	r2, [r0, #24]
   1b35a:	b942      	cbnz	r2, 1b36e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b35c:	691a      	ldr	r2, [r3, #16]
   1b35e:	428a      	cmp	r2, r1
   1b360:	dc02      	bgt.n	1b368 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b362:	f7ff ff95 	bl	1b290 <z_move_thread_to_end_of_prio_q>
   1b366:	e7e2      	b.n	1b32e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1b368:	1a52      	subs	r2, r2, r1
   1b36a:	611a      	str	r2, [r3, #16]
}
   1b36c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b36e:	2300      	movs	r3, #0
   1b370:	6123      	str	r3, [r4, #16]
   1b372:	e7fb      	b.n	1b36c <z_time_slice+0x50>
   1b374:	20001c3c 	.word	0x20001c3c
   1b378:	20001c0c 	.word	0x20001c0c
   1b37c:	20001c44 	.word	0x20001c44
   1b380:	20001c40 	.word	0x20001c40
   1b384:	20001b34 	.word	0x20001b34

0001b388 <z_thread_single_suspend>:
{
   1b388:	b570      	push	{r4, r5, r6, lr}
   1b38a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b38c:	3018      	adds	r0, #24
   1b38e:	f005 fb92 	bl	20ab6 <z_abort_timeout>
	__asm__ volatile(
   1b392:	f04f 0320 	mov.w	r3, #32
   1b396:	f3ef 8611 	mrs	r6, BASEPRI
   1b39a:	f383 8811 	msr	BASEPRI, r3
   1b39e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b3a2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b3a6:	2b00      	cmp	r3, #0
   1b3a8:	da07      	bge.n	1b3ba <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b3aa:	480f      	ldr	r0, [pc, #60]	; (1b3e8 <z_thread_single_suspend+0x60>)
   1b3ac:	4621      	mov	r1, r4
   1b3ae:	f7ff fec7 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b3b2:	7b63      	ldrb	r3, [r4, #13]
   1b3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b3b8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b3ba:	4d0c      	ldr	r5, [pc, #48]	; (1b3ec <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b3bc:	7b63      	ldrb	r3, [r4, #13]
   1b3be:	68a8      	ldr	r0, [r5, #8]
   1b3c0:	f043 0310 	orr.w	r3, r3, #16
   1b3c4:	7363      	strb	r3, [r4, #13]
   1b3c6:	1b03      	subs	r3, r0, r4
   1b3c8:	4258      	negs	r0, r3
   1b3ca:	4158      	adcs	r0, r3
   1b3cc:	f7ff fece 	bl	1b16c <update_cache>
	__asm__ volatile(
   1b3d0:	f386 8811 	msr	BASEPRI, r6
   1b3d4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b3d8:	68ab      	ldr	r3, [r5, #8]
   1b3da:	42a3      	cmp	r3, r4
   1b3dc:	d103      	bne.n	1b3e6 <z_thread_single_suspend+0x5e>
}
   1b3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b3e2:	f005 ba00 	b.w	207e6 <z_reschedule_unlocked>
}
   1b3e6:	bd70      	pop	{r4, r5, r6, pc}
   1b3e8:	20001c34 	.word	0x20001c34
   1b3ec:	20001c0c 	.word	0x20001c0c

0001b3f0 <z_thread_single_abort>:
{
   1b3f0:	b538      	push	{r3, r4, r5, lr}
	if (thread->fn_abort != NULL) {
   1b3f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b3f4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1b3f6:	b103      	cbz	r3, 1b3fa <z_thread_single_abort+0xa>
		thread->fn_abort();
   1b3f8:	4798      	blx	r3
   1b3fa:	f104 0018 	add.w	r0, r4, #24
   1b3fe:	f005 fb5a 	bl	20ab6 <z_abort_timeout>
	__asm__ volatile(
   1b402:	f04f 0320 	mov.w	r3, #32
   1b406:	f3ef 8511 	mrs	r5, BASEPRI
   1b40a:	f383 8811 	msr	BASEPRI, r3
   1b40e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b412:	7b63      	ldrb	r3, [r4, #13]
   1b414:	06d8      	lsls	r0, r3, #27
   1b416:	d11b      	bne.n	1b450 <z_thread_single_abort+0x60>
		if (z_is_thread_ready(thread)) {
   1b418:	69a2      	ldr	r2, [r4, #24]
   1b41a:	b9ca      	cbnz	r2, 1b450 <z_thread_single_abort+0x60>
			if (z_is_thread_queued(thread)) {
   1b41c:	0619      	lsls	r1, r3, #24
   1b41e:	d507      	bpl.n	1b430 <z_thread_single_abort+0x40>
				_priq_run_remove(&_kernel.ready_q.runq,
   1b420:	4812      	ldr	r0, [pc, #72]	; (1b46c <z_thread_single_abort+0x7c>)
   1b422:	4621      	mov	r1, r4
   1b424:	f7ff fe8c 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b428:	7b63      	ldrb	r3, [r4, #13]
   1b42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b42e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1b430:	4b0f      	ldr	r3, [pc, #60]	; (1b470 <z_thread_single_abort+0x80>)
   1b432:	6898      	ldr	r0, [r3, #8]
   1b434:	1b02      	subs	r2, r0, r4
   1b436:	4250      	negs	r0, r2
   1b438:	4150      	adcs	r0, r2
   1b43a:	f7ff fe97 	bl	1b16c <update_cache>
		thread->base.thread_state |= mask;
   1b43e:	7b63      	ldrb	r3, [r4, #13]
   1b440:	f043 0308 	orr.w	r3, r3, #8
   1b444:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1b446:	f385 8811 	msr	BASEPRI, r5
   1b44a:	f3bf 8f6f 	isb	sy
}
   1b44e:	bd38      	pop	{r3, r4, r5, pc}
			if (z_is_thread_pending(thread)) {
   1b450:	079b      	lsls	r3, r3, #30
   1b452:	d5f4      	bpl.n	1b43e <z_thread_single_abort+0x4e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1b454:	68a0      	ldr	r0, [r4, #8]
   1b456:	4621      	mov	r1, r4
   1b458:	f7ff fe72 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b45c:	7b63      	ldrb	r3, [r4, #13]
   1b45e:	f023 0302 	bic.w	r3, r3, #2
   1b462:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1b464:	2300      	movs	r3, #0
   1b466:	60a3      	str	r3, [r4, #8]
   1b468:	e7e9      	b.n	1b43e <z_thread_single_abort+0x4e>
   1b46a:	bf00      	nop
   1b46c:	20001c34 	.word	0x20001c34
   1b470:	20001c0c 	.word	0x20001c0c

0001b474 <unready_thread>:
{
   1b474:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b476:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b47a:	2b00      	cmp	r3, #0
{
   1b47c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b47e:	da06      	bge.n	1b48e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b480:	4807      	ldr	r0, [pc, #28]	; (1b4a0 <unready_thread+0x2c>)
   1b482:	f7ff fe5d 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b486:	7b4b      	ldrb	r3, [r1, #13]
   1b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b48c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1b48e:	4b05      	ldr	r3, [pc, #20]	; (1b4a4 <unready_thread+0x30>)
   1b490:	6898      	ldr	r0, [r3, #8]
   1b492:	1a43      	subs	r3, r0, r1
   1b494:	4258      	negs	r0, r3
   1b496:	4158      	adcs	r0, r3
}
   1b498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b49c:	f7ff be66 	b.w	1b16c <update_cache>
   1b4a0:	20001c34 	.word	0x20001c34
   1b4a4:	20001c0c 	.word	0x20001c0c

0001b4a8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1b4aa:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1b4ac:	f005 fb43 	bl	20b36 <z_tick_get_32>
   1b4b0:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1b4b2:	f04f 0320 	mov.w	r3, #32
   1b4b6:	f3ef 8711 	mrs	r7, BASEPRI
   1b4ba:	f383 8811 	msr	BASEPRI, r3
   1b4be:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b4c2:	4e0d      	ldr	r6, [pc, #52]	; (1b4f8 <z_tick_sleep.part.0+0x50>)
   1b4c4:	4b0d      	ldr	r3, [pc, #52]	; (1b4fc <z_tick_sleep.part.0+0x54>)
   1b4c6:	68b0      	ldr	r0, [r6, #8]
   1b4c8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1b4ca:	f005 f9f8 	bl	208be <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b4ce:	68b0      	ldr	r0, [r6, #8]
   1b4d0:	490b      	ldr	r1, [pc, #44]	; (1b500 <z_tick_sleep.part.0+0x58>)
   1b4d2:	462a      	mov	r2, r5
   1b4d4:	3018      	adds	r0, #24
   1b4d6:	f000 fb33 	bl	1bb40 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1b4da:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b4dc:	7b53      	ldrb	r3, [r2, #13]
   1b4de:	f043 0310 	orr.w	r3, r3, #16
   1b4e2:	7353      	strb	r3, [r2, #13]
   1b4e4:	4638      	mov	r0, r7
   1b4e6:	f7ea fa79 	bl	59dc <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b4ea:	f005 fb24 	bl	20b36 <z_tick_get_32>
   1b4ee:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b4f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4f6:	bf00      	nop
   1b4f8:	20001c0c 	.word	0x20001c0c
   1b4fc:	20001c3c 	.word	0x20001c3c
   1b500:	00020869 	.word	0x00020869

0001b504 <pend>:
{
   1b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b506:	4604      	mov	r4, r0
   1b508:	460d      	mov	r5, r1
   1b50a:	4616      	mov	r6, r2
   1b50c:	f04f 0320 	mov.w	r3, #32
   1b510:	f3ef 8711 	mrs	r7, BASEPRI
   1b514:	f383 8811 	msr	BASEPRI, r3
   1b518:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   1b51c:	f7ff ffaa 	bl	1b474 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b520:	7b63      	ldrb	r3, [r4, #13]
   1b522:	f043 0302 	orr.w	r3, r3, #2
   1b526:	7363      	strb	r3, [r4, #13]
		if (wait_q != NULL) {
   1b528:	b1c5      	cbz	r5, 1b55c <pend+0x58>
	return list->head == list;
   1b52a:	682b      	ldr	r3, [r5, #0]
			thread->base.pended_on = wait_q;
   1b52c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b52e:	429d      	cmp	r5, r3
   1b530:	bf08      	it	eq
   1b532:	2300      	moveq	r3, #0
   1b534:	2b00      	cmp	r3, #0
   1b536:	bf38      	it	cc
   1b538:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b53a:	b35b      	cbz	r3, 1b594 <pend+0x90>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b53c:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b540:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1b544:	4291      	cmp	r1, r2
   1b546:	db04      	blt.n	1b552 <pend+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1b548:	686a      	ldr	r2, [r5, #4]
   1b54a:	4293      	cmp	r3, r2
   1b54c:	d022      	beq.n	1b594 <pend+0x90>
   1b54e:	681b      	ldr	r3, [r3, #0]
   1b550:	e7f3      	b.n	1b53a <pend+0x36>
	node->prev = successor->prev;
   1b552:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b554:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b558:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b55a:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   1b55c:	f387 8811 	msr	BASEPRI, r7
   1b560:	f3bf 8f6f 	isb	sy
	if (timeout != K_FOREVER) {
   1b564:	1c73      	adds	r3, r6, #1
   1b566:	d01c      	beq.n	1b5a2 <pend+0x9e>
   1b568:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1b56c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b570:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b574:	2100      	movs	r1, #0
   1b576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b57a:	2300      	movs	r3, #0
   1b57c:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b580:	f7e4 fdbe 	bl	100 <__aeabi_uldivmod>
   1b584:	4907      	ldr	r1, [pc, #28]	; (1b5a4 <pend+0xa0>)
   1b586:	1c42      	adds	r2, r0, #1
   1b588:	f104 0018 	add.w	r0, r4, #24
}
   1b58c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b590:	f000 bad6 	b.w	1bb40 <z_add_timeout>
	node->prev = list->tail;
   1b594:	686b      	ldr	r3, [r5, #4]
   1b596:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b598:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b59a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1b59c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b59e:	606c      	str	r4, [r5, #4]
}
   1b5a0:	e7dc      	b.n	1b55c <pend+0x58>
   1b5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5a4:	00020869 	.word	0x00020869

0001b5a8 <z_pend_curr_irqlock>:
{
   1b5a8:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   1b5aa:	4d0f      	ldr	r5, [pc, #60]	; (1b5e8 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1b5ac:	4c0f      	ldr	r4, [pc, #60]	; (1b5ec <z_pend_curr_irqlock+0x44>)
{
   1b5ae:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1b5b0:	68a8      	ldr	r0, [r5, #8]
   1b5b2:	f7ff ffa7 	bl	1b504 <pend>
	pending_current = _current;
   1b5b6:	68ab      	ldr	r3, [r5, #8]
   1b5b8:	6023      	str	r3, [r4, #0]
   1b5ba:	4630      	mov	r0, r6
   1b5bc:	f7ea fa0e 	bl	59dc <arch_swap>
	__asm__ volatile(
   1b5c0:	f04f 0220 	mov.w	r2, #32
   1b5c4:	f3ef 8311 	mrs	r3, BASEPRI
   1b5c8:	f382 8811 	msr	BASEPRI, r2
   1b5cc:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1b5d0:	6822      	ldr	r2, [r4, #0]
   1b5d2:	68a9      	ldr	r1, [r5, #8]
   1b5d4:	4291      	cmp	r1, r2
			pending_current = NULL;
   1b5d6:	bf04      	itt	eq
   1b5d8:	2200      	moveq	r2, #0
   1b5da:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1b5dc:	f383 8811 	msr	BASEPRI, r3
   1b5e0:	f3bf 8f6f 	isb	sy
}
   1b5e4:	bd70      	pop	{r4, r5, r6, pc}
   1b5e6:	bf00      	nop
   1b5e8:	20001c0c 	.word	0x20001c0c
   1b5ec:	20001c3c 	.word	0x20001c3c

0001b5f0 <z_pend_curr>:
{
   1b5f0:	b510      	push	{r4, lr}
   1b5f2:	460c      	mov	r4, r1
   1b5f4:	4611      	mov	r1, r2
	pending_current = _current;
   1b5f6:	4a06      	ldr	r2, [pc, #24]	; (1b610 <z_pend_curr+0x20>)
   1b5f8:	6890      	ldr	r0, [r2, #8]
   1b5fa:	4a06      	ldr	r2, [pc, #24]	; (1b614 <z_pend_curr+0x24>)
   1b5fc:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1b5fe:	461a      	mov	r2, r3
   1b600:	f7ff ff80 	bl	1b504 <pend>
   1b604:	4620      	mov	r0, r4
}
   1b606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b60a:	f7ea b9e7 	b.w	59dc <arch_swap>
   1b60e:	bf00      	nop
   1b610:	20001c0c 	.word	0x20001c0c
   1b614:	20001c3c 	.word	0x20001c3c

0001b618 <z_set_prio>:
{
   1b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b61c:	4604      	mov	r4, r0
	__asm__ volatile(
   1b61e:	f04f 0320 	mov.w	r3, #32
   1b622:	f3ef 8811 	mrs	r8, BASEPRI
   1b626:	f383 8811 	msr	BASEPRI, r3
   1b62a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b62e:	7b43      	ldrb	r3, [r0, #13]
   1b630:	06db      	lsls	r3, r3, #27
   1b632:	b24e      	sxtb	r6, r1
   1b634:	d12e      	bne.n	1b694 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1b636:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1b638:	bb65      	cbnz	r5, 1b694 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b63a:	4f18      	ldr	r7, [pc, #96]	; (1b69c <z_set_prio+0x84>)
   1b63c:	4621      	mov	r1, r4
   1b63e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1b642:	f7ff fd7d 	bl	1b140 <z_priq_dumb_remove>
	return list->head == list;
   1b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
   1b64a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b64c:	4283      	cmp	r3, r0
   1b64e:	bf18      	it	ne
   1b650:	461d      	movne	r5, r3
   1b652:	2d00      	cmp	r5, #0
   1b654:	bf38      	it	cc
   1b656:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b658:	b1b5      	cbz	r5, 1b688 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b65a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1b65e:	42b1      	cmp	r1, r6
   1b660:	dc03      	bgt.n	1b66a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1b662:	42aa      	cmp	r2, r5
   1b664:	d010      	beq.n	1b688 <z_set_prio+0x70>
   1b666:	682d      	ldr	r5, [r5, #0]
   1b668:	e7f6      	b.n	1b658 <z_set_prio+0x40>
	node->prev = successor->prev;
   1b66a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1b66c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1b670:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b672:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1b674:	2001      	movs	r0, #1
   1b676:	f7ff fd79 	bl	1b16c <update_cache>
   1b67a:	2001      	movs	r0, #1
	__asm__ volatile(
   1b67c:	f388 8811 	msr	BASEPRI, r8
   1b680:	f3bf 8f6f 	isb	sy
}
   1b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1b688:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b68e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b690:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1b692:	e7ef      	b.n	1b674 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1b694:	73a6      	strb	r6, [r4, #14]
   1b696:	2000      	movs	r0, #0
   1b698:	e7f0      	b.n	1b67c <z_set_prio+0x64>
   1b69a:	bf00      	nop
   1b69c:	20001c0c 	.word	0x20001c0c

0001b6a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b6a0:	4b04      	ldr	r3, [pc, #16]	; (1b6b4 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b6a2:	2100      	movs	r1, #0
   1b6a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b6a8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b6ac:	4608      	mov	r0, r1
   1b6ae:	f7ff bd07 	b.w	1b0c0 <k_sched_time_slice_set>
   1b6b2:	bf00      	nop
   1b6b4:	20001c0c 	.word	0x20001c0c

0001b6b8 <z_impl_k_yield>:
{
   1b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b6ba:	4c24      	ldr	r4, [pc, #144]	; (1b74c <z_impl_k_yield+0x94>)
   1b6bc:	4b24      	ldr	r3, [pc, #144]	; (1b750 <z_impl_k_yield+0x98>)
   1b6be:	68a2      	ldr	r2, [r4, #8]
   1b6c0:	429a      	cmp	r2, r3
   1b6c2:	d030      	beq.n	1b726 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1b6c4:	f04f 0320 	mov.w	r3, #32
   1b6c8:	f3ef 8511 	mrs	r5, BASEPRI
   1b6cc:	f383 8811 	msr	BASEPRI, r3
   1b6d0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b6d4:	68a1      	ldr	r1, [r4, #8]
   1b6d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b6da:	f7ff fd31 	bl	1b140 <z_priq_dumb_remove>
	return list->head == list;
   1b6de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b6e0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b6e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6e4:	4283      	cmp	r3, r0
   1b6e6:	bf08      	it	eq
   1b6e8:	2300      	moveq	r3, #0
   1b6ea:	2b00      	cmp	r3, #0
   1b6ec:	bf38      	it	cc
   1b6ee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6f0:	b32b      	cbz	r3, 1b73e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b6f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b6f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b6fa:	42b7      	cmp	r7, r6
   1b6fc:	db03      	blt.n	1b706 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1b6fe:	428b      	cmp	r3, r1
   1b700:	d01d      	beq.n	1b73e <z_impl_k_yield+0x86>
   1b702:	681b      	ldr	r3, [r3, #0]
   1b704:	e7f4      	b.n	1b6f0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1b706:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b708:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1b70c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1b70e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1b710:	7b53      	ldrb	r3, [r2, #13]
   1b712:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b716:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1b718:	2001      	movs	r0, #1
   1b71a:	f7ff fd27 	bl	1b16c <update_cache>
	__asm__ volatile(
   1b71e:	f385 8811 	msr	BASEPRI, r5
   1b722:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b726:	f04f 0320 	mov.w	r3, #32
   1b72a:	f3ef 8011 	mrs	r0, BASEPRI
   1b72e:	f383 8811 	msr	BASEPRI, r3
   1b732:	f3bf 8f6f 	isb	sy
}
   1b736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b73a:	f7ea b94f 	b.w	59dc <arch_swap>
	node->prev = list->tail;
   1b73e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1b742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b744:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b746:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1b748:	e7e2      	b.n	1b710 <z_impl_k_yield+0x58>
   1b74a:	bf00      	nop
   1b74c:	20001c0c 	.word	0x20001c0c
   1b750:	20001b34 	.word	0x20001b34

0001b754 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1b754:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   1b756:	1c43      	adds	r3, r0, #1
{
   1b758:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1b75a:	d105      	bne.n	1b768 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1b75c:	4b10      	ldr	r3, [pc, #64]	; (1b7a0 <z_impl_k_sleep+0x4c>)
   1b75e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b760:	f000 f8ce 	bl	1b900 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1b764:	4620      	mov	r0, r4
   1b766:	bd38      	pop	{r3, r4, r5, pc}
   1b768:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b76c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b770:	2100      	movs	r1, #0
   1b772:	fbe5 0104 	umlal	r0, r1, r5, r4
   1b776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b77a:	2300      	movs	r3, #0
   1b77c:	f7e4 fcc0 	bl	100 <__aeabi_uldivmod>
	if (ticks == 0) {
   1b780:	4604      	mov	r4, r0
   1b782:	b948      	cbnz	r0, 1b798 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1b784:	f7ff ff98 	bl	1b6b8 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1b788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b78c:	fb84 0100 	smull	r0, r1, r4, r0
   1b790:	0bc4      	lsrs	r4, r0, #15
   1b792:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b796:	e7e5      	b.n	1b764 <z_impl_k_sleep+0x10>
   1b798:	f7ff fe86 	bl	1b4a8 <z_tick_sleep.part.0>
   1b79c:	4604      	mov	r4, r0
   1b79e:	e7f3      	b.n	1b788 <z_impl_k_sleep+0x34>
   1b7a0:	20001c0c 	.word	0x20001c0c

0001b7a4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b7a4:	4b01      	ldr	r3, [pc, #4]	; (1b7ac <z_impl_k_current_get+0x8>)
   1b7a6:	6898      	ldr	r0, [r3, #8]
   1b7a8:	4770      	bx	lr
   1b7aa:	bf00      	nop
   1b7ac:	20001c0c 	.word	0x20001c0c

0001b7b0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b7b0:	b538      	push	{r3, r4, r5, lr}
   1b7b2:	4604      	mov	r4, r0
   1b7b4:	f04f 0320 	mov.w	r3, #32
   1b7b8:	f3ef 8511 	mrs	r5, BASEPRI
   1b7bc:	f383 8811 	msr	BASEPRI, r3
   1b7c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1b7c4:	f005 f88b 	bl	208de <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1b7c8:	b148      	cbz	r0, 1b7de <z_impl_k_sem_give+0x2e>
   1b7ca:	2200      	movs	r2, #0
   1b7cc:	6682      	str	r2, [r0, #104]	; 0x68
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b7ce:	f005 f83b 	bl	20848 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1b7d2:	4629      	mov	r1, r5
   1b7d4:	4808      	ldr	r0, [pc, #32]	; (1b7f8 <z_impl_k_sem_give+0x48>)
}
   1b7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b7da:	f004 bfed 	b.w	207b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b7de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b7e2:	429a      	cmp	r2, r3
   1b7e4:	bf18      	it	ne
   1b7e6:	3301      	addne	r3, #1
   1b7e8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b7ea:	2102      	movs	r1, #2
   1b7ec:	f104 0010 	add.w	r0, r4, #16
   1b7f0:	f005 faf0 	bl	20dd4 <z_handle_obj_poll_events>
}
   1b7f4:	e7ed      	b.n	1b7d2 <z_impl_k_sem_give+0x22>
   1b7f6:	bf00      	nop
   1b7f8:	20002290 	.word	0x20002290

0001b7fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1b7fc:	4602      	mov	r2, r0
   1b7fe:	460b      	mov	r3, r1
   1b800:	f04f 0020 	mov.w	r0, #32
   1b804:	f3ef 8111 	mrs	r1, BASEPRI
   1b808:	f380 8811 	msr	BASEPRI, r0
   1b80c:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1b810:	6890      	ldr	r0, [r2, #8]
   1b812:	b138      	cbz	r0, 1b824 <z_impl_k_sem_take+0x28>
		sem->count--;
   1b814:	3801      	subs	r0, #1
   1b816:	6090      	str	r0, [r2, #8]
	__asm__ volatile(
   1b818:	f381 8811 	msr	BASEPRI, r1
   1b81c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b820:	2000      	movs	r0, #0
		goto out;
   1b822:	4770      	bx	lr
	}

	if (timeout == K_NO_WAIT) {
   1b824:	b933      	cbnz	r3, 1b834 <z_impl_k_sem_take+0x38>
   1b826:	f381 8811 	msr	BASEPRI, r1
   1b82a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
   1b82e:	f06f 000f 	mvn.w	r0, #15
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b832:	4770      	bx	lr
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b834:	4801      	ldr	r0, [pc, #4]	; (1b83c <z_impl_k_sem_take+0x40>)
   1b836:	f7ff bedb 	b.w	1b5f0 <z_pend_curr>
   1b83a:	bf00      	nop
   1b83c:	20002290 	.word	0x20002290

0001b840 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1b840:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b842:	4c08      	ldr	r4, [pc, #32]	; (1b864 <k_sys_work_q_init+0x24>)
   1b844:	4908      	ldr	r1, [pc, #32]	; (1b868 <k_sys_work_q_init+0x28>)
   1b846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b84a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b84e:	4620      	mov	r0, r4
   1b850:	f000 f8d0 	bl	1b9f4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b854:	4905      	ldr	r1, [pc, #20]	; (1b86c <k_sys_work_q_init+0x2c>)
   1b856:	f104 0010 	add.w	r0, r4, #16
   1b85a:	f005 f895 	bl	20988 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b85e:	2000      	movs	r0, #0
   1b860:	bd10      	pop	{r4, pc}
   1b862:	bf00      	nop
   1b864:	20001c48 	.word	0x20001c48
   1b868:	20004550 	.word	0x20004550
   1b86c:	00024e90 	.word	0x00024e90

0001b870 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1b870:	b530      	push	{r4, r5, lr}
   1b872:	b087      	sub	sp, #28
   1b874:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b876:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b878:	9504      	str	r5, [sp, #16]
   1b87a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b87c:	9503      	str	r5, [sp, #12]
   1b87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b880:	9502      	str	r5, [sp, #8]
   1b882:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1b884:	9501      	str	r5, [sp, #4]
   1b886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b888:	9500      	str	r5, [sp, #0]
   1b88a:	f7ea f94d 	bl	5b28 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b88e:	4b03      	ldr	r3, [pc, #12]	; (1b89c <z_setup_new_thread+0x2c>)
   1b890:	689b      	ldr	r3, [r3, #8]
   1b892:	b103      	cbz	r3, 1b896 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b896:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1b898:	b007      	add	sp, #28
   1b89a:	bd30      	pop	{r4, r5, pc}
   1b89c:	20001c0c 	.word	0x20001c0c

0001b8a0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1b8a0:	b570      	push	{r4, r5, r6, lr}
   1b8a2:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8a4:	2600      	movs	r6, #0
   1b8a6:	9605      	str	r6, [sp, #20]
   1b8a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b8aa:	9604      	str	r6, [sp, #16]
   1b8ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1b8ae:	9603      	str	r6, [sp, #12]
   1b8b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1b8b2:	9602      	str	r6, [sp, #8]
   1b8b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1b8b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8b8:	9601      	str	r6, [sp, #4]
   1b8ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1b8bc:	9600      	str	r6, [sp, #0]
{
   1b8be:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8c0:	f7ff ffd6 	bl	1b870 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1b8c4:	1c6b      	adds	r3, r5, #1
   1b8c6:	d003      	beq.n	1b8d0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1b8c8:	b92d      	cbnz	r5, 1b8d6 <z_impl_k_thread_create+0x36>
	z_sched_start(thread);
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f7ff fcc2 	bl	1b254 <z_sched_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1b8d0:	4620      	mov	r0, r4
   1b8d2:	b006      	add	sp, #24
   1b8d4:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1b8d6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b8da:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b8de:	2100      	movs	r1, #0
   1b8e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b8e4:	2300      	movs	r3, #0
   1b8e6:	fbe6 0105 	umlal	r0, r1, r6, r5
   1b8ea:	f7e4 fc09 	bl	100 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b8ee:	4903      	ldr	r1, [pc, #12]	; (1b8fc <z_impl_k_thread_create+0x5c>)
   1b8f0:	1c42      	adds	r2, r0, #1
   1b8f2:	f104 0018 	add.w	r0, r4, #24
   1b8f6:	f000 f923 	bl	1bb40 <z_add_timeout>
}
   1b8fa:	e7e9      	b.n	1b8d0 <z_impl_k_thread_create+0x30>
   1b8fc:	00020869 	.word	0x00020869

0001b900 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1b900:	b538      	push	{r3, r4, r5, lr}
   1b902:	4604      	mov	r4, r0
	__asm__ volatile(
   1b904:	f04f 0320 	mov.w	r3, #32
   1b908:	f3ef 8511 	mrs	r5, BASEPRI
   1b90c:	f383 8811 	msr	BASEPRI, r3
   1b910:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1b914:	f7ff fd38 	bl	1b388 <z_thread_single_suspend>

	if (thread == _current) {
   1b918:	4b07      	ldr	r3, [pc, #28]	; (1b938 <z_impl_k_thread_suspend+0x38>)
   1b91a:	689b      	ldr	r3, [r3, #8]
   1b91c:	42a3      	cmp	r3, r4
   1b91e:	d105      	bne.n	1b92c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1b920:	4629      	mov	r1, r5
   1b922:	4806      	ldr	r0, [pc, #24]	; (1b93c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1b928:	f004 bf46 	b.w	207b8 <z_reschedule>
	__asm__ volatile(
   1b92c:	f385 8811 	msr	BASEPRI, r5
   1b930:	f3bf 8f6f 	isb	sy
}
   1b934:	bd38      	pop	{r3, r4, r5, pc}
   1b936:	bf00      	nop
   1b938:	20001c0c 	.word	0x20001c0c
   1b93c:	20002290 	.word	0x20002290

0001b940 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b944:	4e28      	ldr	r6, [pc, #160]	; (1b9e8 <z_init_static_threads+0xa8>)
   1b946:	4d29      	ldr	r5, [pc, #164]	; (1b9ec <z_init_static_threads+0xac>)
{
   1b948:	b087      	sub	sp, #28
   1b94a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1b94c:	42b5      	cmp	r5, r6
   1b94e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b952:	d310      	bcc.n	1b976 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1b954:	f7ff fbe0 	bl	1b118 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b958:	4c24      	ldr	r4, [pc, #144]	; (1b9ec <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b95a:	f8df a094 	ldr.w	sl, [pc, #148]	; 1b9f0 <z_init_static_threads+0xb0>
   1b95e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1b962:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b966:	2700      	movs	r7, #0
   1b968:	4544      	cmp	r4, r8
   1b96a:	d321      	bcc.n	1b9b0 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1b96c:	b007      	add	sp, #28
   1b96e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1b972:	f7ff bc1f 	b.w	1b1b4 <k_sched_unlock>
		z_setup_new_thread(
   1b976:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b97a:	9305      	str	r3, [sp, #20]
   1b97c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b980:	9304      	str	r3, [sp, #16]
   1b982:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b986:	9303      	str	r3, [sp, #12]
   1b988:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b98c:	9302      	str	r3, [sp, #8]
   1b98e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b992:	9301      	str	r3, [sp, #4]
   1b994:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b998:	9300      	str	r3, [sp, #0]
   1b99a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b99e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b9a2:	f7ff ff65 	bl	1b870 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b9a6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b9aa:	64dd      	str	r5, [r3, #76]	; 0x4c
   1b9ac:	4625      	mov	r5, r4
   1b9ae:	e7cd      	b.n	1b94c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1b9b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b9b2:	1c4b      	adds	r3, r1, #1
   1b9b4:	d004      	beq.n	1b9c0 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1b9b6:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1b9b8:	b921      	cbnz	r1, 1b9c4 <z_init_static_threads+0x84>
	z_sched_start(thread);
   1b9ba:	4628      	mov	r0, r5
   1b9bc:	f7ff fc4a 	bl	1b254 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b9c0:	3430      	adds	r4, #48	; 0x30
   1b9c2:	e7d1      	b.n	1b968 <z_init_static_threads+0x28>
   1b9c4:	46b3      	mov	fp, r6
   1b9c6:	46bc      	mov	ip, r7
   1b9c8:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1b9cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b9d0:	2300      	movs	r3, #0
   1b9d2:	4658      	mov	r0, fp
   1b9d4:	4661      	mov	r1, ip
   1b9d6:	f7e4 fb93 	bl	100 <__aeabi_uldivmod>
   1b9da:	4651      	mov	r1, sl
   1b9dc:	1c42      	adds	r2, r0, #1
   1b9de:	f105 0018 	add.w	r0, r5, #24
   1b9e2:	f000 f8ad 	bl	1bb40 <z_add_timeout>
}
   1b9e6:	e7eb      	b.n	1b9c0 <z_init_static_threads+0x80>
   1b9e8:	2000614c 	.word	0x2000614c
   1b9ec:	2000614c 	.word	0x2000614c
   1b9f0:	00020869 	.word	0x00020869

0001b9f4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9f8:	4604      	mov	r4, r0
   1b9fa:	b086      	sub	sp, #24
   1b9fc:	460d      	mov	r5, r1
   1b9fe:	4616      	mov	r6, r2
   1ba00:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1ba02:	f004 fe0b 	bl	2061c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ba06:	f104 0810 	add.w	r8, r4, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ba0a:	2000      	movs	r0, #0
   1ba0c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1ba10:	e9cd 0702 	strd	r0, r7, [sp, #8]
   1ba14:	e9cd 4000 	strd	r4, r0, [sp]
   1ba18:	4b06      	ldr	r3, [pc, #24]	; (1ba34 <k_work_q_start+0x40>)
   1ba1a:	4632      	mov	r2, r6
   1ba1c:	4629      	mov	r1, r5
   1ba1e:	4640      	mov	r0, r8
   1ba20:	f7ff ff3e 	bl	1b8a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ba24:	4904      	ldr	r1, [pc, #16]	; (1ba38 <k_work_q_start+0x44>)
   1ba26:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1ba28:	b006      	add	sp, #24
   1ba2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ba2e:	f004 bfab 	b.w	20988 <z_impl_k_thread_name_set>
   1ba32:	bf00      	nop
   1ba34:	0001c455 	.word	0x0001c455
   1ba38:	00024e99 	.word	0x00024e99

0001ba3c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1ba3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba40:	4606      	mov	r6, r0
   1ba42:	460d      	mov	r5, r1
   1ba44:	4617      	mov	r7, r2
	__asm__ volatile(
   1ba46:	f04f 0320 	mov.w	r3, #32
   1ba4a:	f3ef 8811 	mrs	r8, BASEPRI
   1ba4e:	f383 8811 	msr	BASEPRI, r3
   1ba52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1ba56:	69cb      	ldr	r3, [r1, #28]
   1ba58:	b17b      	cbz	r3, 1ba7a <k_delayed_work_submit_to_queue+0x3e>
   1ba5a:	4283      	cmp	r3, r0
   1ba5c:	d131      	bne.n	1bac2 <k_delayed_work_submit_to_queue+0x86>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1ba5e:	4628      	mov	r0, r5
   1ba60:	f004 ffc3 	bl	209ea <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1ba64:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1ba68:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1ba6a:	d008      	beq.n	1ba7e <k_delayed_work_submit_to_queue+0x42>
			err = 0;
		} else if (err < 0) {
   1ba6c:	2800      	cmp	r0, #0
   1ba6e:	da07      	bge.n	1ba80 <k_delayed_work_submit_to_queue+0x44>
	__asm__ volatile(
   1ba70:	f388 8811 	msr	BASEPRI, r8
   1ba74:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1ba78:	e00d      	b.n	1ba96 <k_delayed_work_submit_to_queue+0x5a>
	if (work->work_q == work_q) {
   1ba7a:	2800      	cmp	r0, #0
   1ba7c:	d0ef      	beq.n	1ba5e <k_delayed_work_submit_to_queue+0x22>
	int err = 0;
   1ba7e:	2400      	movs	r4, #0
	work->work_q = work_q;
   1ba80:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   1ba82:	b95f      	cbnz	r7, 1ba9c <k_delayed_work_submit_to_queue+0x60>
   1ba84:	f388 8811 	msr	BASEPRI, r8
   1ba88:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1ba8c:	4629      	mov	r1, r5
   1ba8e:	4630      	mov	r0, r6
   1ba90:	f004 ff8e 	bl	209b0 <k_work_submit_to_queue>
		return 0;
   1ba94:	463c      	mov	r4, r7
}
   1ba96:	4620      	mov	r0, r4
   1ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba9c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1baa0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1baa4:	2100      	movs	r1, #0
   1baa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1baaa:	2300      	movs	r3, #0
   1baac:	fbe6 0107 	umlal	r0, r1, r6, r7
   1bab0:	f7e4 fb26 	bl	100 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1bab4:	4904      	ldr	r1, [pc, #16]	; (1bac8 <k_delayed_work_submit_to_queue+0x8c>)
   1bab6:	1c42      	adds	r2, r0, #1
   1bab8:	f105 000c 	add.w	r0, r5, #12
   1babc:	f000 f840 	bl	1bb40 <z_add_timeout>
   1bac0:	e7d6      	b.n	1ba70 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   1bac2:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1bac6:	e7d3      	b.n	1ba70 <k_delayed_work_submit_to_queue+0x34>
   1bac8:	000209e1 	.word	0x000209e1

0001bacc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1bacc:	4b03      	ldr	r3, [pc, #12]	; (1badc <elapsed+0x10>)
   1bace:	681b      	ldr	r3, [r3, #0]
   1bad0:	b90b      	cbnz	r3, 1bad6 <elapsed+0xa>
   1bad2:	f7e9 bebb 	b.w	584c <z_clock_elapsed>
}
   1bad6:	2000      	movs	r0, #0
   1bad8:	4770      	bx	lr
   1bada:	bf00      	nop
   1badc:	20001cc4 	.word	0x20001cc4

0001bae0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bae0:	6803      	ldr	r3, [r0, #0]
   1bae2:	b140      	cbz	r0, 1baf6 <remove_timeout+0x16>
   1bae4:	4a07      	ldr	r2, [pc, #28]	; (1bb04 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1bae6:	6852      	ldr	r2, [r2, #4]
   1bae8:	4290      	cmp	r0, r2
   1baea:	d004      	beq.n	1baf6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1baec:	b11b      	cbz	r3, 1baf6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1baee:	689a      	ldr	r2, [r3, #8]
   1baf0:	6881      	ldr	r1, [r0, #8]
   1baf2:	440a      	add	r2, r1
   1baf4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1baf6:	6842      	ldr	r2, [r0, #4]
   1baf8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bafa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bafc:	2300      	movs	r3, #0
	node->prev = NULL;
   1bafe:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bb02:	4770      	bx	lr
   1bb04:	20005ebc 	.word	0x20005ebc

0001bb08 <next_timeout>:
	return list->head == list;
   1bb08:	4b0b      	ldr	r3, [pc, #44]	; (1bb38 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1bb0a:	b510      	push	{r4, lr}
   1bb0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb0e:	429c      	cmp	r4, r3
   1bb10:	bf08      	it	eq
   1bb12:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1bb14:	f7ff ffda 	bl	1bacc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bb18:	b154      	cbz	r4, 1bb30 <next_timeout+0x28>
   1bb1a:	68a3      	ldr	r3, [r4, #8]
   1bb1c:	1a18      	subs	r0, r3, r0
   1bb1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bb22:	4b06      	ldr	r3, [pc, #24]	; (1bb3c <next_timeout+0x34>)
   1bb24:	691b      	ldr	r3, [r3, #16]
   1bb26:	b113      	cbz	r3, 1bb2e <next_timeout+0x26>
   1bb28:	4298      	cmp	r0, r3
   1bb2a:	bfa8      	it	ge
   1bb2c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bb2e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bb30:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bb34:	e7f5      	b.n	1bb22 <next_timeout+0x1a>
   1bb36:	bf00      	nop
   1bb38:	20005ebc 	.word	0x20005ebc
   1bb3c:	20001c0c 	.word	0x20001c0c

0001bb40 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1bb40:	b570      	push	{r4, r5, r6, lr}
   1bb42:	4604      	mov	r4, r0
   1bb44:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bb46:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1bb48:	f04f 0320 	mov.w	r3, #32
   1bb4c:	f3ef 8511 	mrs	r5, BASEPRI
   1bb50:	f383 8811 	msr	BASEPRI, r3
   1bb54:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bb58:	f7ff ffb8 	bl	1bacc <elapsed>
	return list->head == list;
   1bb5c:	4b18      	ldr	r3, [pc, #96]	; (1bbc0 <z_add_timeout+0x80>)
   1bb5e:	681a      	ldr	r2, [r3, #0]
   1bb60:	2e01      	cmp	r6, #1
   1bb62:	bfac      	ite	ge
   1bb64:	1980      	addge	r0, r0, r6
   1bb66:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb68:	429a      	cmp	r2, r3
   1bb6a:	60a0      	str	r0, [r4, #8]
   1bb6c:	d001      	beq.n	1bb72 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb6e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bb70:	b932      	cbnz	r2, 1bb80 <z_add_timeout+0x40>
	node->prev = list->tail;
   1bb72:	685a      	ldr	r2, [r3, #4]
   1bb74:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1bb76:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bb78:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   1bb7a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bb7c:	605c      	str	r4, [r3, #4]
}
   1bb7e:	e00a      	b.n	1bb96 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1bb80:	6890      	ldr	r0, [r2, #8]
   1bb82:	68a1      	ldr	r1, [r4, #8]
   1bb84:	4288      	cmp	r0, r1
   1bb86:	dd15      	ble.n	1bbb4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1bb88:	1a41      	subs	r1, r0, r1
   1bb8a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1bb8c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bb8e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1bb92:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bb94:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1bb96:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb98:	429a      	cmp	r2, r3
   1bb9a:	d006      	beq.n	1bbaa <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bb9c:	4294      	cmp	r4, r2
   1bb9e:	d104      	bne.n	1bbaa <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1bba0:	f7ff ffb2 	bl	1bb08 <next_timeout>
   1bba4:	2100      	movs	r1, #0
   1bba6:	f7e9 fdfb 	bl	57a0 <z_clock_set_timeout>
	__asm__ volatile(
   1bbaa:	f385 8811 	msr	BASEPRI, r5
   1bbae:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bbb2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1bbb4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1bbb6:	4296      	cmp	r6, r2
   1bbb8:	60a1      	str	r1, [r4, #8]
   1bbba:	d0da      	beq.n	1bb72 <z_add_timeout+0x32>
   1bbbc:	6812      	ldr	r2, [r2, #0]
   1bbbe:	e7d7      	b.n	1bb70 <z_add_timeout+0x30>
   1bbc0:	20005ebc 	.word	0x20005ebc

0001bbc4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbc8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bbca:	f7ff fba7 	bl	1b31c <z_time_slice>
	__asm__ volatile(
   1bbce:	f04f 0320 	mov.w	r3, #32
   1bbd2:	f3ef 8411 	mrs	r4, BASEPRI
   1bbd6:	f383 8811 	msr	BASEPRI, r3
   1bbda:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bbde:	4d20      	ldr	r5, [pc, #128]	; (1bc60 <z_clock_announce+0x9c>)
   1bbe0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1bc64 <z_clock_announce+0xa0>
	return list->head == list;
   1bbe4:	f8df a080 	ldr.w	sl, [pc, #128]	; 1bc68 <z_clock_announce+0xa4>
   1bbe8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bbea:	46c1      	mov	r9, r8
   1bbec:	f8da 0000 	ldr.w	r0, [sl]
   1bbf0:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbf2:	4550      	cmp	r0, sl
   1bbf4:	e9d8 6700 	ldrd	r6, r7, [r8]
   1bbf8:	d005      	beq.n	1bc06 <z_clock_announce+0x42>
   1bbfa:	b120      	cbz	r0, 1bc06 <z_clock_announce+0x42>
   1bbfc:	6883      	ldr	r3, [r0, #8]
   1bbfe:	4293      	cmp	r3, r2
   1bc00:	dd13      	ble.n	1bc2a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bc02:	1a9b      	subs	r3, r3, r2
   1bc04:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   1bc06:	18b6      	adds	r6, r6, r2
   1bc08:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   1bc0c:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   1bc10:	2600      	movs	r6, #0
   1bc12:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bc14:	f7ff ff78 	bl	1bb08 <next_timeout>
   1bc18:	4631      	mov	r1, r6
   1bc1a:	f7e9 fdc1 	bl	57a0 <z_clock_set_timeout>
	__asm__ volatile(
   1bc1e:	f384 8811 	msr	BASEPRI, r4
   1bc22:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   1bc2a:	18f6      	adds	r6, r6, r3
   1bc2c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   1bc30:	1ad3      	subs	r3, r2, r3
   1bc32:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   1bc34:	2300      	movs	r3, #0
   1bc36:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   1bc38:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   1bc3c:	f7ff ff50 	bl	1bae0 <remove_timeout>
   1bc40:	f384 8811 	msr	BASEPRI, r4
   1bc44:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bc48:	68c3      	ldr	r3, [r0, #12]
   1bc4a:	4798      	blx	r3
	__asm__ volatile(
   1bc4c:	f04f 0320 	mov.w	r3, #32
   1bc50:	f3ef 8411 	mrs	r4, BASEPRI
   1bc54:	f383 8811 	msr	BASEPRI, r3
   1bc58:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bc5c:	e7c6      	b.n	1bbec <z_clock_announce+0x28>
   1bc5e:	bf00      	nop
   1bc60:	20001cc4 	.word	0x20001cc4
   1bc64:	20000010 	.word	0x20000010
   1bc68:	20005ebc 	.word	0x20005ebc

0001bc6c <z_tick_get>:

s64_t z_tick_get(void)
{
   1bc6c:	b510      	push	{r4, lr}
   1bc6e:	f04f 0320 	mov.w	r3, #32
   1bc72:	f3ef 8411 	mrs	r4, BASEPRI
   1bc76:	f383 8811 	msr	BASEPRI, r3
   1bc7a:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bc7e:	f7e9 fde5 	bl	584c <z_clock_elapsed>
   1bc82:	4b06      	ldr	r3, [pc, #24]	; (1bc9c <z_tick_get+0x30>)
   1bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bc88:	1812      	adds	r2, r2, r0
   1bc8a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bc8e:	f384 8811 	msr	BASEPRI, r4
   1bc92:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bc96:	4610      	mov	r0, r2
   1bc98:	4619      	mov	r1, r3
   1bc9a:	bd10      	pop	{r4, pc}
   1bc9c:	20000010 	.word	0x20000010

0001bca0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1bca0:	6a02      	ldr	r2, [r0, #32]
   1bca2:	2a00      	cmp	r2, #0
{
   1bca4:	b538      	push	{r3, r4, r5, lr}
   1bca6:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1bca8:	dd02      	ble.n	1bcb0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bcaa:	490c      	ldr	r1, [pc, #48]	; (1bcdc <z_timer_expiration_handler+0x3c>)
   1bcac:	f7ff ff48 	bl	1bb40 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bcb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bcb2:	3301      	adds	r3, #1
   1bcb4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bcb6:	69a3      	ldr	r3, [r4, #24]
   1bcb8:	b10b      	cbz	r3, 1bcbe <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1bcba:	4620      	mov	r0, r4
   1bcbc:	4798      	blx	r3
	return list->head == list;
   1bcbe:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcc2:	42a5      	cmp	r5, r4
   1bcc4:	d008      	beq.n	1bcd8 <z_timer_expiration_handler+0x38>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bcc6:	b13d      	cbz	r5, 1bcd8 <z_timer_expiration_handler+0x38>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bcc8:	4628      	mov	r0, r5
   1bcca:	f004 fd5c 	bl	20786 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1bcce:	4628      	mov	r0, r5
   1bcd0:	f004 fdba 	bl	20848 <z_ready_thread>
   1bcd4:	2300      	movs	r3, #0
   1bcd6:	66ab      	str	r3, [r5, #104]	; 0x68

	arch_thread_return_value_set(thread, 0);
}
   1bcd8:	bd38      	pop	{r3, r4, r5, pc}
   1bcda:	bf00      	nop
   1bcdc:	0001bca1 	.word	0x0001bca1

0001bce0 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1bce0:	e92d 49f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, fp, lr}
   1bce4:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bce8:	2700      	movs	r7, #0
   1bcea:	460d      	mov	r5, r1
   1bcec:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   1bcf0:	4611      	mov	r1, r2
   1bcf2:	46b3      	mov	fp, r6
   1bcf4:	46bc      	mov	ip, r7
   1bcf6:	fbe8 bc01 	umlal	fp, ip, r8, r1
   1bcfa:	4604      	mov	r4, r0
   1bcfc:	4661      	mov	r1, ip
   1bcfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd02:	2300      	movs	r3, #0
   1bd04:	4658      	mov	r0, fp
   1bd06:	f7e4 f9fb 	bl	100 <__aeabi_uldivmod>
   1bd0a:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1bd0c:	9000      	str	r0, [sp, #0]
   1bd0e:	4630      	mov	r0, r6
   1bd10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd14:	2300      	movs	r3, #0
   1bd16:	fbe8 0105 	umlal	r0, r1, r8, r5
   1bd1a:	f7e4 f9f1 	bl	100 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1bd1e:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1bd20:	4620      	mov	r0, r4
   1bd22:	f004 fec8 	bl	20ab6 <z_abort_timeout>
	timer->period = period_in_ticks;
   1bd26:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd28:	4905      	ldr	r1, [pc, #20]	; (1bd40 <z_impl_k_timer_start+0x60>)
   1bd2a:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
   1bd2c:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd2e:	4620      	mov	r0, r4
	timer->status = 0U;
   1bd30:	2300      	movs	r3, #0
   1bd32:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1bd34:	b003      	add	sp, #12
   1bd36:	e8bd 49f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd3a:	f7ff bf01 	b.w	1bb40 <z_add_timeout>
   1bd3e:	bf00      	nop
   1bd40:	0001bca1 	.word	0x0001bca1

0001bd44 <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   1bd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd48:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1bd4a:	2301      	movs	r3, #1
   1bd4c:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1bd50:	4b23      	ldr	r3, [pc, #140]	; (1bde0 <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
   1bd52:	689b      	ldr	r3, [r3, #8]
   1bd54:	9304      	str	r3, [sp, #16]
   1bd56:	4b23      	ldr	r3, [pc, #140]	; (1bde4 <z_impl_k_poll+0xa0>)
   1bd58:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1bd5a:	fab2 f382 	clz	r3, r2
   1bd5e:	4690      	mov	r8, r2
   1bd60:	095b      	lsrs	r3, r3, #5
   1bd62:	aa03      	add	r2, sp, #12
{
   1bd64:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   1bd66:	f004 ffbf 	bl	20ce8 <register_events>
   1bd6a:	4606      	mov	r6, r0
	__asm__ volatile(
   1bd6c:	f04f 0320 	mov.w	r3, #32
   1bd70:	f3ef 8711 	mrs	r7, BASEPRI
   1bd74:	f383 8811 	msr	BASEPRI, r3
   1bd78:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1bd7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1bd80:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1bd84:	b94b      	cbnz	r3, 1bd9a <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1bd86:	463a      	mov	r2, r7
   1bd88:	4631      	mov	r1, r6
   1bd8a:	4628      	mov	r0, r5
   1bd8c:	f004 ff13 	bl	20bb6 <clear_event_registrations>
	__asm__ volatile(
   1bd90:	f387 8811 	msr	BASEPRI, r7
   1bd94:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1bd98:	e00b      	b.n	1bdb2 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1bd9a:	2300      	movs	r3, #0
   1bd9c:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1bda0:	f1b8 0f00 	cmp.w	r8, #0
   1bda4:	d109      	bne.n	1bdba <z_impl_k_poll+0x76>
   1bda6:	f387 8811 	msr	BASEPRI, r7
   1bdaa:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1bdae:	f06f 040a 	mvn.w	r4, #10
}
   1bdb2:	4620      	mov	r0, r4
   1bdb4:	b006      	add	sp, #24
   1bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1bdba:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bdbc:	4643      	mov	r3, r8
   1bdbe:	4639      	mov	r1, r7
   1bdc0:	4809      	ldr	r0, [pc, #36]	; (1bde8 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1bdc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bdc6:	f7ff fc13 	bl	1b5f0 <z_pend_curr>
   1bdca:	4604      	mov	r4, r0
	__asm__ volatile(
   1bdcc:	f04f 0320 	mov.w	r3, #32
   1bdd0:	f3ef 8711 	mrs	r7, BASEPRI
   1bdd4:	f383 8811 	msr	BASEPRI, r3
   1bdd8:	f3bf 8f6f 	isb	sy
   1bddc:	e7d3      	b.n	1bd86 <z_impl_k_poll+0x42>
   1bdde:	bf00      	nop
   1bde0:	20001c0c 	.word	0x20001c0c
   1bde4:	00020c43 	.word	0x00020c43
   1bde8:	20002290 	.word	0x20002290

0001bdec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1bdec:	b538      	push	{r3, r4, r5, lr}
   1bdee:	4603      	mov	r3, r0
   1bdf0:	f04f 0220 	mov.w	r2, #32
   1bdf4:	f3ef 8511 	mrs	r5, BASEPRI
   1bdf8:	f382 8811 	msr	BASEPRI, r2
   1bdfc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1be00:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1be02:	2101      	movs	r1, #1
   1be04:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1be06:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1be08:	4283      	cmp	r3, r0
   1be0a:	d106      	bne.n	1be1a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1be0c:	f385 8811 	msr	BASEPRI, r5
   1be10:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1be14:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1be16:	4620      	mov	r0, r4
   1be18:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1be1a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1be1e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1be20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1be22:	2300      	movs	r3, #0
	node->prev = NULL;
   1be24:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1be28:	f004 fef0 	bl	20c0c <signal_poll_event>
	z_reschedule(&lock, key);
   1be2c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1be2e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1be30:	4801      	ldr	r0, [pc, #4]	; (1be38 <z_impl_k_poll_signal_raise+0x4c>)
   1be32:	f004 fcc1 	bl	207b8 <z_reschedule>
	return rc;
   1be36:	e7ee      	b.n	1be16 <z_impl_k_poll_signal_raise+0x2a>
   1be38:	20002290 	.word	0x20002290

0001be3c <write_without_rsp_vnd>:
{
   1be3c:	b510      	push	{r4, lr}
   1be3e:	4608      	mov	r0, r1
   1be40:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1be42:	f89d 200c 	ldrb.w	r2, [sp, #12]
	u8_t *value = attr->user_data;
   1be46:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1be48:	0792      	lsls	r2, r2, #30
{
   1be4a:	461c      	mov	r4, r3
   1be4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1be50:	d508      	bpl.n	1be64 <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   1be52:	191a      	adds	r2, r3, r4
   1be54:	2a06      	cmp	r2, #6
   1be56:	dc08      	bgt.n	1be6a <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   1be58:	4622      	mov	r2, r4
   1be5a:	4418      	add	r0, r3
   1be5c:	f002 fb44 	bl	1e4e8 <memcpy>
}
   1be60:	4620      	mov	r0, r4
   1be62:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   1be64:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   1be68:	e7fa      	b.n	1be60 <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1be6a:	f06f 0406 	mvn.w	r4, #6
   1be6e:	e7f7      	b.n	1be60 <write_without_rsp_vnd+0x24>

0001be70 <write_signed>:
{
   1be70:	b538      	push	{r3, r4, r5, lr}
   1be72:	460c      	mov	r4, r1
   1be74:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	u8_t *value = attr->user_data;
   1be78:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   1be7a:	461c      	mov	r4, r3
   1be7c:	18c3      	adds	r3, r0, r3
   1be7e:	2b04      	cmp	r3, #4
{
   1be80:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   1be82:	dc05      	bgt.n	1be90 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   1be84:	4622      	mov	r2, r4
   1be86:	4428      	add	r0, r5
   1be88:	f002 fb2e 	bl	1e4e8 <memcpy>
}
   1be8c:	4620      	mov	r0, r4
   1be8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1be90:	f06f 0406 	mvn.w	r4, #6
   1be94:	e7fa      	b.n	1be8c <write_signed+0x1c>

0001be96 <write_long_vnd>:
{
   1be96:	b538      	push	{r3, r4, r5, lr}
   1be98:	460d      	mov	r5, r1
   1be9a:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   1be9c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1bea0:	07d2      	lsls	r2, r2, #31
{
   1bea2:	461c      	mov	r4, r3
   1bea4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   1bea8:	d409      	bmi.n	1bebe <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   1beaa:	191a      	adds	r2, r3, r4
   1beac:	2a4a      	cmp	r2, #74	; 0x4a
   1beae:	dc08      	bgt.n	1bec2 <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   1beb0:	68e8      	ldr	r0, [r5, #12]
   1beb2:	4622      	mov	r2, r4
   1beb4:	4418      	add	r0, r3
   1beb6:	f002 fb17 	bl	1e4e8 <memcpy>
}
   1beba:	4620      	mov	r0, r4
   1bebc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1bebe:	2400      	movs	r4, #0
   1bec0:	e7fb      	b.n	1beba <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bec2:	f06f 0406 	mvn.w	r4, #6
   1bec6:	e7f8      	b.n	1beba <write_long_vnd+0x24>

0001bec8 <write_vnd>:
{
   1bec8:	b538      	push	{r3, r4, r5, lr}
   1beca:	460c      	mov	r4, r1
   1becc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	u8_t *value = attr->user_data;
   1bed0:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   1bed2:	461c      	mov	r4, r3
   1bed4:	18c3      	adds	r3, r0, r3
   1bed6:	2b06      	cmp	r3, #6
{
   1bed8:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   1beda:	dc05      	bgt.n	1bee8 <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   1bedc:	4622      	mov	r2, r4
   1bede:	4428      	add	r0, r5
   1bee0:	f002 fb02 	bl	1e4e8 <memcpy>
}
   1bee4:	4620      	mov	r0, r4
   1bee6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bee8:	f06f 0406 	mvn.w	r4, #6
   1beec:	e7fa      	b.n	1bee4 <write_vnd+0x1c>

0001beee <read_signed>:
{
   1beee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1bef0:	2404      	movs	r4, #4
   1bef2:	9402      	str	r4, [sp, #8]
   1bef4:	68cc      	ldr	r4, [r1, #12]
   1bef6:	9401      	str	r4, [sp, #4]
   1bef8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1befc:	9400      	str	r4, [sp, #0]
   1befe:	f003 fc78 	bl	1f7f2 <bt_gatt_attr_read>
}
   1bf02:	b004      	add	sp, #16
   1bf04:	bd10      	pop	{r4, pc}

0001bf06 <read_long_vnd>:
{
   1bf06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1bf08:	244a      	movs	r4, #74	; 0x4a
   1bf0a:	9402      	str	r4, [sp, #8]
   1bf0c:	68cc      	ldr	r4, [r1, #12]
   1bf0e:	9401      	str	r4, [sp, #4]
   1bf10:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1bf14:	9400      	str	r4, [sp, #0]
   1bf16:	f003 fc6c 	bl	1f7f2 <bt_gatt_attr_read>
}
   1bf1a:	b004      	add	sp, #16
   1bf1c:	bd10      	pop	{r4, pc}

0001bf1e <read_vnd>:
{
   1bf1e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   1bf22:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1bf26:	4605      	mov	r5, r0
				 strlen(value));
   1bf28:	4640      	mov	r0, r8
{
   1bf2a:	461f      	mov	r7, r3
   1bf2c:	460c      	mov	r4, r1
   1bf2e:	4616      	mov	r6, r2
				 strlen(value));
   1bf30:	f002 faa8 	bl	1e484 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1bf34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1bf38:	9300      	str	r3, [sp, #0]
   1bf3a:	b280      	uxth	r0, r0
   1bf3c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1bf40:	463b      	mov	r3, r7
   1bf42:	4632      	mov	r2, r6
   1bf44:	4621      	mov	r1, r4
   1bf46:	4628      	mov	r0, r5
   1bf48:	f003 fc53 	bl	1f7f2 <bt_gatt_attr_read>
}
   1bf4c:	b004      	add	sp, #16
   1bf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf52 <ct_ccc_cfg_changed>:
}
   1bf52:	4770      	bx	lr

0001bf54 <read_ct>:
{
   1bf54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1bf56:	240a      	movs	r4, #10
   1bf58:	9402      	str	r4, [sp, #8]
   1bf5a:	68cc      	ldr	r4, [r1, #12]
   1bf5c:	9401      	str	r4, [sp, #4]
   1bf5e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1bf62:	9400      	str	r4, [sp, #0]
   1bf64:	f003 fc45 	bl	1f7f2 <bt_gatt_attr_read>
}
   1bf68:	b004      	add	sp, #16
   1bf6a:	bd10      	pop	{r4, pc}

0001bf6c <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   1bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1bf6e:	f04f 0c0a 	mov.w	ip, #10
{
   1bf72:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   1bf74:	2604      	movs	r6, #4
	u8_t num_digits = 0;
   1bf76:	2000      	movs	r0, #0
	u8_t divisor = 100;
   1bf78:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1bf7a:	b111      	cbz	r1, 1bf82 <u8_to_dec+0x16>
   1bf7c:	3e01      	subs	r6, #1
   1bf7e:	d101      	bne.n	1bf84 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1bf80:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   1bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1bf84:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1bf86:	fbb2 f7f4 	udiv	r7, r2, r4
   1bf8a:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1bf8c:	d202      	bcs.n	1bf94 <u8_to_dec+0x28>
   1bf8e:	2c01      	cmp	r4, #1
   1bf90:	d000      	beq.n	1bf94 <u8_to_dec+0x28>
   1bf92:	b130      	cbz	r0, 1bfa2 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1bf94:	3330      	adds	r3, #48	; 0x30
   1bf96:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1bf9a:	3901      	subs	r1, #1
			num_digits++;
   1bf9c:	1c43      	adds	r3, r0, #1
			buflen--;
   1bf9e:	b2c9      	uxtb	r1, r1
			num_digits++;
   1bfa0:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   1bfa2:	fb04 2217 	mls	r2, r4, r7, r2
   1bfa6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1bfa8:	fbb4 f4fc 	udiv	r4, r4, ip
   1bfac:	e7e5      	b.n	1bf7a <u8_to_dec+0xe>

0001bfae <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   1bfae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1bfb2:	b2db      	uxtb	r3, r3
   1bfb4:	2b09      	cmp	r3, #9
   1bfb6:	d802      	bhi.n	1bfbe <char2hex+0x10>
		*x = c - '0';
   1bfb8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1bfba:	2000      	movs	r0, #0
   1bfbc:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1bfbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1bfc2:	2b05      	cmp	r3, #5
   1bfc4:	d802      	bhi.n	1bfcc <char2hex+0x1e>
		*x = c - 'a' + 10;
   1bfc6:	3857      	subs	r0, #87	; 0x57
   1bfc8:	7008      	strb	r0, [r1, #0]
   1bfca:	e7f6      	b.n	1bfba <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1bfcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1bfd0:	2b05      	cmp	r3, #5
   1bfd2:	d801      	bhi.n	1bfd8 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1bfd4:	3837      	subs	r0, #55	; 0x37
   1bfd6:	e7f7      	b.n	1bfc8 <char2hex+0x1a>
		return -EINVAL;
   1bfd8:	f06f 0015 	mvn.w	r0, #21
}
   1bfdc:	4770      	bx	lr

0001bfde <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   1bfde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bfe0:	4604      	mov	r4, r0
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1bfe2:	f001 0001 	and.w	r0, r1, #1
   1bfe6:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1bfea:	429d      	cmp	r5, r3
   1bfec:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1bff0:	d903      	bls.n	1bffa <hex2bin+0x1c>
		return 0;
   1bff2:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1bff4:	4628      	mov	r0, r5
   1bff6:	b003      	add	sp, #12
   1bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1bffa:	b158      	cbz	r0, 1c014 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1bffc:	7820      	ldrb	r0, [r4, #0]
   1bffe:	f10d 0107 	add.w	r1, sp, #7
   1c002:	f7ff ffd4 	bl	1bfae <char2hex>
   1c006:	2800      	cmp	r0, #0
   1c008:	dbf3      	blt.n	1bff2 <hex2bin+0x14>
		buf[0] = dec;
   1c00a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c00e:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1c012:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c014:	3401      	adds	r4, #1
   1c016:	4416      	add	r6, r2
   1c018:	42b2      	cmp	r2, r6
   1c01a:	d0eb      	beq.n	1bff4 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1c01c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c020:	f10d 0107 	add.w	r1, sp, #7
   1c024:	f7ff ffc3 	bl	1bfae <char2hex>
   1c028:	2800      	cmp	r0, #0
   1c02a:	dbe2      	blt.n	1bff2 <hex2bin+0x14>
		buf[i] = dec << 4;
   1c02c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c030:	011b      	lsls	r3, r3, #4
   1c032:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1c034:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c038:	f10d 0107 	add.w	r1, sp, #7
   1c03c:	f7ff ffb7 	bl	1bfae <char2hex>
   1c040:	2800      	cmp	r0, #0
   1c042:	dbd6      	blt.n	1bff2 <hex2bin+0x14>
		buf[i] += dec;
   1c044:	7813      	ldrb	r3, [r2, #0]
   1c046:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c04a:	440b      	add	r3, r1
   1c04c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c050:	e7e2      	b.n	1c018 <hex2bin+0x3a>

0001c052 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1c052:	b570      	push	{r4, r5, r6, lr}
   1c054:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c056:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c05a:	240c      	movs	r4, #12
{
   1c05c:	460d      	mov	r5, r1
   1c05e:	434c      	muls	r4, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c060:	42a8      	cmp	r0, r5
   1c062:	eb06 0104 	add.w	r1, r6, r4
   1c066:	bfb8      	it	lt
   1c068:	5931      	ldrlt	r1, [r6, r4]

	*word = &bitarray[bn / 32];
   1c06a:	2a00      	cmp	r2, #0
   1c06c:	4610      	mov	r0, r2
   1c06e:	bfb8      	it	lt
   1c070:	f102 001f 	addlt.w	r0, r2, #31
   1c074:	1140      	asrs	r0, r0, #5
   1c076:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1c07a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1c07c:	f002 001f 	and.w	r0, r2, #31
   1c080:	bd70      	pop	{r4, r5, r6, pc}

0001c082 <pool_irq_lock.isra.0.part.0>:
	__asm__ volatile(
   1c082:	f04f 0320 	mov.w	r3, #32
   1c086:	f3ef 8011 	mrs	r0, BASEPRI
   1c08a:	f383 8811 	msr	BASEPRI, r3
   1c08e:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1c092:	4770      	bx	lr

0001c094 <pool_irq_unlock.isra.0>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c094:	07c3      	lsls	r3, r0, #31
   1c096:	d503      	bpl.n	1c0a0 <pool_irq_unlock.isra.0+0xc>
	__asm__ volatile(
   1c098:	f381 8811 	msr	BASEPRI, r1
   1c09c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1c0a0:	4770      	bx	lr

0001c0a2 <z_sys_mem_pool_base_init>:
{
   1c0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c0a6:	6846      	ldr	r6, [r0, #4]
   1c0a8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c0aa:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   1c0ac:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
   1c0b0:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c0b2:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
   1c0b6:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c0b8:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c0ba:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c0bc:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c0be:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
   1c0c2:	4598      	cmp	r8, r3
   1c0c4:	dc05      	bgt.n	1c0d2 <z_sys_mem_pool_base_init+0x30>
   1c0c6:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c0c8:	4619      	mov	r1, r3
   1c0ca:	428f      	cmp	r7, r1
   1c0cc:	dc20      	bgt.n	1c110 <z_sys_mem_pool_base_init+0x6e>
}
   1c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
   1c0d2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
   1c0d6:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c0da:	fb09 fe03 	mul.w	lr, r9, r3
   1c0de:	eb0a 040e 	add.w	r4, sl, lr
   1c0e2:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c0e6:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
   1c0e8:	e9c4 bb01 	strd	fp, fp, [r4, #4]
   1c0ec:	d805      	bhi.n	1c0fa <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c0ee:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c0f0:	0892      	lsrs	r2, r2, #2
   1c0f2:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c0f6:	3301      	adds	r3, #1
   1c0f8:	e7e3      	b.n	1c0c2 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c0fa:	f115 041f 	adds.w	r4, r5, #31
   1c0fe:	bf48      	it	mi
   1c100:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c104:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c106:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c10a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c10e:	e7ef      	b.n	1c0f0 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c110:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c112:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c114:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c118:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c11a:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c11e:	6895      	ldr	r5, [r2, #8]
   1c120:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c122:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c124:	3101      	adds	r1, #1
   1c126:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c128:	4433      	add	r3, r6
   1c12a:	6094      	str	r4, [r2, #8]
   1c12c:	e7cd      	b.n	1c0ca <z_sys_mem_pool_base_init+0x28>

0001c12e <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c12e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c132:	b087      	sub	sp, #28
   1c134:	af00      	add	r7, sp, #0
   1c136:	e9c7 3201 	strd	r3, r2, [r7, #4]
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c13a:	7a82      	ldrb	r2, [r0, #10]
   1c13c:	0093      	lsls	r3, r2, #2
   1c13e:	3307      	adds	r3, #7
   1c140:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c144:	ebad 0d03 	sub.w	sp, sp, r3
   1c148:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c14a:	4653      	mov	r3, sl
{
   1c14c:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c14e:	6840      	ldr	r0, [r0, #4]
   1c150:	f843 0904 	str.w	r0, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c154:	2400      	movs	r4, #0
   1c156:	42a2      	cmp	r2, r4
   1c158:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   1c15c:	dd09      	ble.n	1c172 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c15e:	b124      	cbz	r4, 1c16a <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c160:	6818      	ldr	r0, [r3, #0]
   1c162:	0880      	lsrs	r0, r0, #2
   1c164:	f020 0003 	bic.w	r0, r0, #3
   1c168:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c16a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c16e:	4288      	cmp	r0, r1
   1c170:	d208      	bcs.n	1c184 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c172:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c176:	d107      	bne.n	1c188 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c17a:	2300      	movs	r3, #0
   1c17c:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c17e:	f06f 000b 	mvn.w	r0, #11
   1c182:	e02e      	b.n	1c1e2 <z_sys_mem_pool_block_alloc+0xb4>
	for (i = 0; i < p->n_levels; i++) {
   1c184:	3401      	adds	r4, #1
   1c186:	e7e6      	b.n	1c156 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c188:	7c2e      	ldrb	r6, [r5, #16]
   1c18a:	f016 0601 	ands.w	r6, r6, #1
   1c18e:	d002      	beq.n	1c196 <z_sys_mem_pool_block_alloc+0x68>
   1c190:	f7ff ff77 	bl	1c082 <pool_irq_lock.isra.0.part.0>
   1c194:	4606      	mov	r6, r0
	for (i = alloc_l; i >= 0; i--) {
   1c196:	68ea      	ldr	r2, [r5, #12]
   1c198:	230c      	movs	r3, #12
   1c19a:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
   1c19e:	46c8      	mov	r8, r9
	return list->head == list;
   1c1a0:	461a      	mov	r2, r3
   1c1a2:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   1c1a6:	4294      	cmp	r4, r2
   1c1a8:	d11f      	bne.n	1c1ea <z_sys_mem_pool_block_alloc+0xbc>
	for (i = alloc_l; i >= 0; i--) {
   1c1aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1c1ae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1c1b2:	f1a3 030c 	sub.w	r3, r3, #12
   1c1b6:	d1f3      	bne.n	1c1a0 <z_sys_mem_pool_block_alloc+0x72>
   1c1b8:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c1ba:	7c28      	ldrb	r0, [r5, #16]
   1c1bc:	4631      	mov	r1, r6
   1c1be:	f7ff ff69 	bl	1c094 <pool_irq_unlock.isra.0>
	*data_p = data;
   1c1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c1c4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c1c6:	2c00      	cmp	r4, #0
   1c1c8:	d0d9      	beq.n	1c17e <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c1ca:	68bb      	ldr	r3, [r7, #8]
   1c1cc:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c1d0:	682b      	ldr	r3, [r5, #0]
   1c1d2:	1ae4      	subs	r4, r4, r3
   1c1d4:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c1d8:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c1dc:	687b      	ldr	r3, [r7, #4]

	return 0;
   1c1de:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c1e0:	601c      	str	r4, [r3, #0]
}
   1c1e2:	371c      	adds	r7, #28
   1c1e4:	46bd      	mov	sp, r7
   1c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c1ea:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c1ee:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c1f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c1f2:	2300      	movs	r3, #0
	node->prev = NULL;
   1c1f4:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c1f8:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c1fa:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c1fe:	f107 0314 	add.w	r3, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c202:	1a62      	subs	r2, r4, r1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c204:	4641      	mov	r1, r8
   1c206:	fb92 f2f0 	sdiv	r2, r2, r0
   1c20a:	4628      	mov	r0, r5
   1c20c:	f7ff ff21 	bl	1c052 <get_bit_ptr>
	*word |= (1<<bit);
   1c210:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1c214:	2101      	movs	r1, #1
   1c216:	f8dc 2000 	ldr.w	r2, [ip]
   1c21a:	6039      	str	r1, [r7, #0]
   1c21c:	fa01 f000 	lsl.w	r0, r1, r0
   1c220:	4302      	orrs	r2, r0
   1c222:	f8cc 2000 	str.w	r2, [ip]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c226:	469b      	mov	fp, r3
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c228:	45c8      	cmp	r8, r9
   1c22a:	dac6      	bge.n	1c1ba <z_sys_mem_pool_block_alloc+0x8c>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c22c:	682a      	ldr	r2, [r5, #0]
   1c22e:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
   1c232:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c236:	4641      	mov	r1, r8
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c238:	1aa2      	subs	r2, r4, r2
	int bit = get_bit_ptr(p, level, bn, &word);
   1c23a:	4628      	mov	r0, r5
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c23c:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c240:	465b      	mov	r3, fp
   1c242:	0092      	lsls	r2, r2, #2
   1c244:	f7ff ff05 	bl	1c052 <get_bit_ptr>
	*word |= (1<<bit);
   1c248:	697a      	ldr	r2, [r7, #20]
   1c24a:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c24c:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c24e:	fa03 f000 	lsl.w	r0, r3, r0
   1c252:	6813      	ldr	r3, [r2, #0]
   1c254:	4303      	orrs	r3, r0
   1c256:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
   1c258:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c25c:	230c      	movs	r3, #12
   1c25e:	fb03 1108 	mla	r1, r3, r8, r1
   1c262:	2203      	movs	r2, #3
   1c264:	f101 0e04 	add.w	lr, r1, #4
   1c268:	1823      	adds	r3, r4, r0
   1c26a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c26c:	688a      	ldr	r2, [r1, #8]
   1c26e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c270:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c272:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
   1c276:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c278:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c27a:	608b      	str	r3, [r1, #8]
   1c27c:	3a01      	subs	r2, #1
   1c27e:	4403      	add	r3, r0
   1c280:	60fa      	str	r2, [r7, #12]
   1c282:	d1f3      	bne.n	1c26c <z_sys_mem_pool_block_alloc+0x13e>
				pool_irq_unlock(p, key);
   1c284:	7c28      	ldrb	r0, [r5, #16]
   1c286:	4631      	mov	r1, r6
   1c288:	f7ff ff04 	bl	1c094 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c28c:	7c2b      	ldrb	r3, [r5, #16]
   1c28e:	07db      	lsls	r3, r3, #31
   1c290:	d503      	bpl.n	1c29a <z_sys_mem_pool_block_alloc+0x16c>
   1c292:	f7ff fef6 	bl	1c082 <pool_irq_lock.isra.0.part.0>
   1c296:	4606      	mov	r6, r0
   1c298:	e7c6      	b.n	1c228 <z_sys_mem_pool_block_alloc+0xfa>
		return 0;
   1c29a:	68fe      	ldr	r6, [r7, #12]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c29c:	e7c4      	b.n	1c228 <z_sys_mem_pool_block_alloc+0xfa>

0001c29e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c29e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2a2:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c2a4:	7a83      	ldrb	r3, [r0, #10]
   1c2a6:	009b      	lsls	r3, r3, #2
   1c2a8:	3307      	adds	r3, #7
   1c2aa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   1c2ae:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c2b0:	ebad 0d03 	sub.w	sp, sp, r3
   1c2b4:	46e8      	mov	r8, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c2b6:	6843      	ldr	r3, [r0, #4]
   1c2b8:	f8c8 3000 	str.w	r3, [r8]
{
   1c2bc:	4605      	mov	r5, r0
   1c2be:	460e      	mov	r6, r1
	for (i = 1; i <= level; i++) {
   1c2c0:	4640      	mov	r0, r8
   1c2c2:	2101      	movs	r1, #1
   1c2c4:	428e      	cmp	r6, r1
   1c2c6:	d212      	bcs.n	1c2ee <z_sys_mem_pool_block_free+0x50>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c2c8:	7c2c      	ldrb	r4, [r5, #16]
   1c2ca:	f014 0401 	ands.w	r4, r4, #1
   1c2ce:	d002      	beq.n	1c2d6 <z_sys_mem_pool_block_free+0x38>
   1c2d0:	f7ff fed7 	bl	1c082 <pool_irq_lock.isra.0.part.0>
   1c2d4:	4604      	mov	r4, r0
	while (level >= 0) {
   1c2d6:	2e00      	cmp	r6, #0
   1c2d8:	da11      	bge.n	1c2fe <z_sys_mem_pool_block_free+0x60>
	return -1;
   1c2da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c2de:	7c28      	ldrb	r0, [r5, #16]
   1c2e0:	4621      	mov	r1, r4
   1c2e2:	f7ff fed7 	bl	1c094 <pool_irq_unlock.isra.0>
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
}
   1c2e6:	3714      	adds	r7, #20
   1c2e8:	46bd      	mov	sp, r7
   1c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c2ee:	6803      	ldr	r3, [r0, #0]
   1c2f0:	089b      	lsrs	r3, r3, #2
   1c2f2:	f023 0303 	bic.w	r3, r3, #3
   1c2f6:	f840 3f04 	str.w	r3, [r0, #4]!
	for (i = 1; i <= level; i++) {
   1c2fa:	3101      	adds	r1, #1
   1c2fc:	e7e2      	b.n	1c2c4 <z_sys_mem_pool_block_free+0x26>
		int i, lsz = lsizes[level];
   1c2fe:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   1c302:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c304:	fb03 fa02 	mul.w	sl, r3, r2
	int bit = get_bit_ptr(p, level, bn, &word);
   1c308:	4631      	mov	r1, r6
   1c30a:	f107 030c 	add.w	r3, r7, #12
   1c30e:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   1c310:	f8d5 b000 	ldr.w	fp, [r5]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c314:	f7ff fe9d 	bl	1c052 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c318:	68f9      	ldr	r1, [r7, #12]
   1c31a:	2301      	movs	r3, #1
   1c31c:	fa03 f000 	lsl.w	r0, r3, r0
   1c320:	680b      	ldr	r3, [r1, #0]
   1c322:	ea23 0300 	bic.w	r3, r3, r0
   1c326:	600b      	str	r3, [r1, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c328:	68eb      	ldr	r3, [r5, #12]
   1c32a:	210c      	movs	r1, #12
   1c32c:	fb01 3306 	mla	r3, r1, r6, r3
	return (u8_t *)p->buf + lsz * block;
   1c330:	eb0b 090a 	add.w	r9, fp, sl
		sys_dlist_append(&p->levels[level].free_list, block);
   1c334:	1d19      	adds	r1, r3, #4
	node->next = list;
   1c336:	f84b 100a 	str.w	r1, [fp, sl]
	node->prev = list->tail;
   1c33a:	6899      	ldr	r1, [r3, #8]
   1c33c:	f8c9 1004 	str.w	r1, [r9, #4]
	list->tail->next = node;
   1c340:	6899      	ldr	r1, [r3, #8]
   1c342:	f8c1 9000 	str.w	r9, [r1]
	list->tail = node;
   1c346:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
   1c34a:	4621      	mov	r1, r4
   1c34c:	7c28      	ldrb	r0, [r5, #16]
   1c34e:	f7ff fea1 	bl	1c094 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c352:	7c2c      	ldrb	r4, [r5, #16]
   1c354:	f014 0401 	ands.w	r4, r4, #1
   1c358:	d002      	beq.n	1c360 <z_sys_mem_pool_block_free+0xc2>
   1c35a:	f7ff fe92 	bl	1c082 <pool_irq_lock.isra.0.part.0>
   1c35e:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c360:	2e00      	cmp	r6, #0
   1c362:	d0bc      	beq.n	1c2de <z_sys_mem_pool_block_free+0x40>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c364:	f107 030c 	add.w	r3, r7, #12
   1c368:	4631      	mov	r1, r6
   1c36a:	4628      	mov	r0, r5
   1c36c:	f7ff fe71 	bl	1c052 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c370:	68fb      	ldr	r3, [r7, #12]
   1c372:	2800      	cmp	r0, #0
   1c374:	681b      	ldr	r3, [r3, #0]
   1c376:	bfb8      	it	lt
   1c378:	3003      	addlt	r0, #3
   1c37a:	f020 0003 	bic.w	r0, r0, #3
   1c37e:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c382:	f010 030f 	ands.w	r3, r0, #15
   1c386:	d1aa      	bne.n	1c2de <z_sys_mem_pool_block_free+0x40>
			int b = (bn & ~3) + i;
   1c388:	f022 0b03 	bic.w	fp, r2, #3
	node->next = NULL;
   1c38c:	469e      	mov	lr, r3
	return (u8_t *)p->buf + lsz * block;
   1c38e:	6878      	ldr	r0, [r7, #4]
			int b = (bn & ~3) + i;
   1c390:	eb0b 0103 	add.w	r1, fp, r3
	return (u8_t *)p->buf + lsz * block;
   1c394:	4341      	muls	r1, r0
   1c396:	6828      	ldr	r0, [r5, #0]
   1c398:	eb00 0c01 	add.w	ip, r0, r1
	node->prev->next = node->next;
   1c39c:	f850 9001 	ldr.w	r9, [r0, r1]
   1c3a0:	f8dc a004 	ldr.w	sl, [ip, #4]
		for (i = 0; i < 4; i++) {
   1c3a4:	3301      	adds	r3, #1
   1c3a6:	2b04      	cmp	r3, #4
   1c3a8:	f8ca 9000 	str.w	r9, [sl]
	node->next->prev = node->prev;
   1c3ac:	f8c9 a004 	str.w	sl, [r9, #4]
	node->next = NULL;
   1c3b0:	f840 e001 	str.w	lr, [r0, r1]
	node->prev = NULL;
   1c3b4:	f8cc e004 	str.w	lr, [ip, #4]
   1c3b8:	d1e9      	bne.n	1c38e <z_sys_mem_pool_block_free+0xf0>
		bn = bn / 4;
   1c3ba:	2a00      	cmp	r2, #0
   1c3bc:	bfb8      	it	lt
   1c3be:	3203      	addlt	r2, #3
		level = level - 1;
   1c3c0:	3e01      	subs	r6, #1
		bn = bn / 4;
   1c3c2:	1092      	asrs	r2, r2, #2
   1c3c4:	e787      	b.n	1c2d6 <z_sys_mem_pool_block_free+0x38>

0001c3c6 <arch_printk_char_out>:
}
   1c3c6:	2000      	movs	r0, #0
   1c3c8:	4770      	bx	lr

0001c3ca <print_err>:
{
   1c3ca:	b570      	push	{r4, r5, r6, lr}
   1c3cc:	4604      	mov	r4, r0
   1c3ce:	460d      	mov	r5, r1
	out('E', ctx);
   1c3d0:	2045      	movs	r0, #69	; 0x45
   1c3d2:	47a0      	blx	r4
	out('R', ctx);
   1c3d4:	4629      	mov	r1, r5
   1c3d6:	2052      	movs	r0, #82	; 0x52
   1c3d8:	47a0      	blx	r4
	out('R', ctx);
   1c3da:	4629      	mov	r1, r5
   1c3dc:	4623      	mov	r3, r4
   1c3de:	2052      	movs	r0, #82	; 0x52
}
   1c3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c3e4:	4718      	bx	r3

0001c3e6 <str_out>:
{
   1c3e6:	b530      	push	{r4, r5, lr}
   1c3e8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c3ea:	680c      	ldr	r4, [r1, #0]
   1c3ec:	1c55      	adds	r5, r2, #1
   1c3ee:	b114      	cbz	r4, 1c3f6 <str_out+0x10>
   1c3f0:	684b      	ldr	r3, [r1, #4]
   1c3f2:	4293      	cmp	r3, r2
   1c3f4:	dc01      	bgt.n	1c3fa <str_out+0x14>
		ctx->count++;
   1c3f6:	608d      	str	r5, [r1, #8]
}
   1c3f8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c3fa:	3b01      	subs	r3, #1
   1c3fc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c3fe:	bf08      	it	eq
   1c400:	2200      	moveq	r2, #0
   1c402:	608d      	str	r5, [r1, #8]
   1c404:	bf0c      	ite	eq
   1c406:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c408:	54a0      	strbne	r0, [r4, r2]
   1c40a:	e7f5      	b.n	1c3f8 <str_out+0x12>

0001c40c <printk>:
{
   1c40c:	b40f      	push	{r0, r1, r2, r3}
   1c40e:	b507      	push	{r0, r1, r2, lr}
   1c410:	a904      	add	r1, sp, #16
   1c412:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c416:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c418:	f7e7 fae6 	bl	39e8 <vprintk>
}
   1c41c:	b003      	add	sp, #12
   1c41e:	f85d eb04 	ldr.w	lr, [sp], #4
   1c422:	b004      	add	sp, #16
   1c424:	4770      	bx	lr

0001c426 <snprintk>:
{
   1c426:	b40c      	push	{r2, r3}
   1c428:	b507      	push	{r0, r1, r2, lr}
   1c42a:	ab04      	add	r3, sp, #16
   1c42c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c430:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c432:	f7e7 fae7 	bl	3a04 <vsnprintk>
}
   1c436:	b003      	add	sp, #12
   1c438:	f85d eb04 	ldr.w	lr, [sp], #4
   1c43c:	b002      	add	sp, #8
   1c43e:	4770      	bx	lr

0001c440 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c440:	4604      	mov	r4, r0
   1c442:	b508      	push	{r3, lr}
   1c444:	4608      	mov	r0, r1
   1c446:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c448:	461a      	mov	r2, r3
   1c44a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c44c:	f7ff f9aa 	bl	1b7a4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c450:	f7e9 fe64 	bl	611c <z_impl_k_thread_abort>

0001c454 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c454:	b510      	push	{r4, lr}
   1c456:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c45c:	4620      	mov	r0, r4
   1c45e:	f004 f914 	bl	2068a <z_impl_k_queue_get>
   1c462:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c464:	2800      	cmp	r0, #0
   1c466:	d0f7      	beq.n	1c458 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c468:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1c46a:	6842      	ldr	r2, [r0, #4]
   1c46c:	f3bf 8f5b 	dmb	ish
   1c470:	e853 1f00 	ldrex	r1, [r3]
   1c474:	f021 0c01 	bic.w	ip, r1, #1
   1c478:	e843 ce00 	strex	lr, ip, [r3]
   1c47c:	f1be 0f00 	cmp.w	lr, #0
   1c480:	d1f6      	bne.n	1c470 <z_work_q_main+0x1c>
   1c482:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c486:	07cb      	lsls	r3, r1, #31
   1c488:	d500      	bpl.n	1c48c <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c48a:	4790      	blx	r2
	z_impl_k_yield();
   1c48c:	f7ff f914 	bl	1b6b8 <z_impl_k_yield>
}
   1c490:	e7e2      	b.n	1c458 <z_work_q_main+0x4>

0001c492 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1c492:	4770      	bx	lr

0001c494 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1c494:	b538      	push	{r3, r4, r5, lr}
   1c496:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1c498:	42ab      	cmp	r3, r5
{
   1c49a:	4611      	mov	r1, r2
   1c49c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1c49e:	d804      	bhi.n	1c4aa <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1c4a0:	461a      	mov	r2, r3
   1c4a2:	f002 f821 	bl	1e4e8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1c4aa:	2400      	movs	r4, #0
   1c4ac:	e7fb      	b.n	1c4a6 <_copy+0x12>

0001c4ae <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1c4ae:	f002 b846 	b.w	1e53e <memset>

0001c4b2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1c4b2:	09c3      	lsrs	r3, r0, #7
   1c4b4:	005a      	lsls	r2, r3, #1
   1c4b6:	4413      	add	r3, r2
   1c4b8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c4bc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1c4c0:	b2c0      	uxtb	r0, r0
   1c4c2:	4770      	bx	lr

0001c4c4 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1c4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c4c8:	4606      	mov	r6, r0
   1c4ca:	b0a9      	sub	sp, #164	; 0xa4
   1c4cc:	4688      	mov	r8, r1
   1c4ce:	4614      	mov	r4, r2
   1c4d0:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c4d2:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1c4d6:	f7e7 faa9 	bl	3a2c <uECC_get_rng>
		if (!rng_function ||
   1c4da:	4603      	mov	r3, r0
   1c4dc:	2800      	cmp	r0, #0
   1c4de:	d03e      	beq.n	1c55e <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1c4e0:	2140      	movs	r1, #64	; 0x40
   1c4e2:	a808      	add	r0, sp, #32
   1c4e4:	4798      	blx	r3
		if (!rng_function ||
   1c4e6:	b3d0      	cbz	r0, 1c55e <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c4e8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1c4ec:	f112 031f 	adds.w	r3, r2, #31
   1c4f0:	bf48      	it	mi
   1c4f2:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1c4f6:	466d      	mov	r5, sp
   1c4f8:	464a      	mov	r2, r9
   1c4fa:	a908      	add	r1, sp, #32
   1c4fc:	4628      	mov	r0, r5
   1c4fe:	f343 1347 	sbfx	r3, r3, #5, #8
   1c502:	f000 fa03 	bl	1c90c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1c506:	4622      	mov	r2, r4
   1c508:	4629      	mov	r1, r5
   1c50a:	a818      	add	r0, sp, #96	; 0x60
   1c50c:	f000 fe19 	bl	1d142 <EccPoint_compute_public_key>
   1c510:	b318      	cbz	r0, 1c55a <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1c512:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1c516:	1dd9      	adds	r1, r3, #7
   1c518:	bf48      	it	mi
   1c51a:	f103 010e 	addmi.w	r1, r3, #14
   1c51e:	462a      	mov	r2, r5
   1c520:	4640      	mov	r0, r8
   1c522:	10c9      	asrs	r1, r1, #3
   1c524:	f000 fe35 	bl	1d192 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1c528:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1c52c:	aa18      	add	r2, sp, #96	; 0x60
   1c52e:	4630      	mov	r0, r6
   1c530:	f000 fe2f 	bl	1d192 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c534:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1c538:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c53c:	ab18      	add	r3, sp, #96	; 0x60
   1c53e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c542:	1870      	adds	r0, r6, r1
   1c544:	f000 fe25 	bl	1d192 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1c548:	2220      	movs	r2, #32
   1c54a:	2100      	movs	r1, #0
   1c54c:	4628      	mov	r0, r5
   1c54e:	f001 fff6 	bl	1e53e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1c552:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1c554:	b029      	add	sp, #164	; 0xa4
   1c556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1c55a:	3f01      	subs	r7, #1
   1c55c:	d1bb      	bne.n	1c4d6 <uECC_make_key+0x12>
        		return 0;
   1c55e:	2000      	movs	r0, #0
   1c560:	e7f8      	b.n	1c554 <uECC_make_key+0x90>

0001c562 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1c562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c566:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1c568:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1c56c:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1c570:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1c574:	b0a4      	sub	sp, #144	; 0x90
   1c576:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1c578:	1dda      	adds	r2, r3, #7
   1c57a:	bf48      	it	mi
   1c57c:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1c580:	ad04      	add	r5, sp, #16
{
   1c582:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1c584:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1c586:	4628      	mov	r0, r5
   1c588:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1c58a:	9502      	str	r5, [sp, #8]
   1c58c:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1c58e:	f000 fe14 	bl	1d1ba <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1c592:	463a      	mov	r2, r7
   1c594:	4649      	mov	r1, r9
   1c596:	a814      	add	r0, sp, #80	; 0x50
   1c598:	f000 fe0f 	bl	1d1ba <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1c59c:	ab14      	add	r3, sp, #80	; 0x50
   1c59e:	eb09 0107 	add.w	r1, r9, r7
   1c5a2:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1c5a6:	463a      	mov	r2, r7
   1c5a8:	f000 fe07 	bl	1d1ba <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1c5ac:	4623      	mov	r3, r4
   1c5ae:	4632      	mov	r2, r6
   1c5b0:	4629      	mov	r1, r5
   1c5b2:	4628      	mov	r0, r5
   1c5b4:	f000 fd99 	bl	1d0ea <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1c5b8:	fab0 f080 	clz	r0, r0
   1c5bc:	9401      	str	r4, [sp, #4]
   1c5be:	ab24      	add	r3, sp, #144	; 0x90
   1c5c0:	0940      	lsrs	r0, r0, #5
   1c5c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1c5c6:	8863      	ldrh	r3, [r4, #2]
   1c5c8:	3301      	adds	r3, #1
   1c5ca:	b21b      	sxth	r3, r3
   1c5cc:	9300      	str	r3, [sp, #0]
   1c5ce:	a914      	add	r1, sp, #80	; 0x50
   1c5d0:	2300      	movs	r3, #0
   1c5d2:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1c5d6:	4608      	mov	r0, r1
   1c5d8:	f000 fcb8 	bl	1cf4c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1c5dc:	aa14      	add	r2, sp, #80	; 0x50
   1c5de:	4639      	mov	r1, r7
   1c5e0:	4640      	mov	r0, r8
   1c5e2:	f000 fdd6 	bl	1d192 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1c5e6:	4621      	mov	r1, r4
   1c5e8:	a814      	add	r0, sp, #80	; 0x50
   1c5ea:	f000 fc24 	bl	1ce36 <EccPoint_isZero>
   1c5ee:	af02      	add	r7, sp, #8
   1c5f0:	4604      	mov	r4, r0
   1c5f2:	2208      	movs	r2, #8
   1c5f4:	2100      	movs	r1, #0
   1c5f6:	4638      	mov	r0, r7
   1c5f8:	f001 ffa1 	bl	1e53e <memset>
   1c5fc:	2220      	movs	r2, #32
   1c5fe:	2100      	movs	r1, #0
   1c600:	4630      	mov	r0, r6
   1c602:	f001 ff9c 	bl	1e53e <memset>
   1c606:	2220      	movs	r2, #32
   1c608:	2100      	movs	r1, #0
   1c60a:	4628      	mov	r0, r5
   1c60c:	f001 ff97 	bl	1e53e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1c610:	fab4 f084 	clz	r0, r4
   1c614:	0940      	lsrs	r0, r0, #5
   1c616:	b024      	add	sp, #144	; 0x90
   1c618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c61c <uECC_vli_add>:
{
   1c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1c61e:	2400      	movs	r4, #0
{
   1c620:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1c622:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1c624:	b265      	sxtb	r5, r4
   1c626:	42ab      	cmp	r3, r5
   1c628:	dc00      	bgt.n	1c62c <uECC_vli_add+0x10>
}
   1c62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1c62c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1c630:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1c634:	443d      	add	r5, r7
   1c636:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1c638:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1c63a:	bf8c      	ite	hi
   1c63c:	2701      	movhi	r7, #1
   1c63e:	2700      	movls	r7, #0
		result[i] = sum;
   1c640:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1c644:	bf18      	it	ne
   1c646:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1c648:	3401      	adds	r4, #1
   1c64a:	e7eb      	b.n	1c624 <uECC_vli_add+0x8>

0001c64c <uECC_vli_rshift1>:
	vli += num_words;
   1c64c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1c650:	2300      	movs	r3, #0
	while (vli-- > end) {
   1c652:	4288      	cmp	r0, r1
   1c654:	d300      	bcc.n	1c658 <uECC_vli_rshift1+0xc>
}
   1c656:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1c658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1c65c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1c660:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1c662:	07d3      	lsls	r3, r2, #31
   1c664:	e7f5      	b.n	1c652 <uECC_vli_rshift1+0x6>

0001c666 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1c666:	6803      	ldr	r3, [r0, #0]
{
   1c668:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1c66a:	f013 0601 	ands.w	r6, r3, #1
{
   1c66e:	4605      	mov	r5, r0
   1c670:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1c672:	d005      	beq.n	1c680 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1c674:	4613      	mov	r3, r2
   1c676:	460a      	mov	r2, r1
   1c678:	4601      	mov	r1, r0
   1c67a:	f7ff ffcf 	bl	1c61c <uECC_vli_add>
   1c67e:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1c680:	4621      	mov	r1, r4
   1c682:	4628      	mov	r0, r5
   1c684:	f7ff ffe2 	bl	1c64c <uECC_vli_rshift1>
	if (carry) {
   1c688:	b146      	cbz	r6, 1c69c <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1c68a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1c68e:	3a01      	subs	r2, #1
   1c690:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1c694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c698:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1c69c:	bd70      	pop	{r4, r5, r6, pc}

0001c69e <uECC_vli_mult>:
{
   1c69e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1c6a2:	2500      	movs	r5, #0
{
   1c6a4:	b087      	sub	sp, #28
   1c6a6:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1c6aa:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1c6ac:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1c6ae:	fa4f f885 	sxtb.w	r8, r5
   1c6b2:	4543      	cmp	r3, r8
   1c6b4:	dc16      	bgt.n	1c6e4 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c6b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c6ba:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1c6be:	9502      	str	r5, [sp, #8]
   1c6c0:	f04f 0a00 	mov.w	sl, #0
   1c6c4:	9e02      	ldr	r6, [sp, #8]
   1c6c6:	fa53 fe8a 	uxtab	lr, r3, sl
   1c6ca:	fa4f fe8e 	sxtb.w	lr, lr
   1c6ce:	45b6      	cmp	lr, r6
   1c6d0:	fa5f f58a 	uxtb.w	r5, sl
   1c6d4:	db2d      	blt.n	1c732 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1c6d6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c6da:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1c6de:	b007      	add	sp, #28
   1c6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6e4:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1c6e6:	f04f 0c00 	mov.w	ip, #0
   1c6ea:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1c6ee:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1c6f0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c6f4:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c6f6:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c6fa:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1c6fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1c702:	fba7 ab06 	umull	sl, fp, r7, r6
   1c706:	eb1a 0601 	adds.w	r6, sl, r1
   1c70a:	f10c 0c01 	add.w	ip, ip, #1
   1c70e:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1c712:	fa4f fa8c 	sxtb.w	sl, ip
   1c716:	bf2c      	ite	cs
   1c718:	2201      	movcs	r2, #1
   1c71a:	2200      	movcc	r2, #0
   1c71c:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1c71e:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1c720:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1c722:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1c724:	dde4      	ble.n	1c6f0 <uECC_vli_mult+0x52>
		result[k] = r0;
   1c726:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1c72a:	463a      	mov	r2, r7
   1c72c:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1c72e:	4674      	mov	r4, lr
   1c730:	e7bd      	b.n	1c6ae <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c732:	3501      	adds	r5, #1
   1c734:	9900      	ldr	r1, [sp, #0]
   1c736:	9e01      	ldr	r6, [sp, #4]
   1c738:	fa4f fc85 	sxtb.w	ip, r5
   1c73c:	ebae 0b0c 	sub.w	fp, lr, ip
   1c740:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1c744:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1c748:	4621      	mov	r1, r4
   1c74a:	2400      	movs	r4, #0
   1c74c:	459c      	cmp	ip, r3
   1c74e:	db05      	blt.n	1c75c <uECC_vli_mult+0xbe>
		result[k] = r0;
   1c750:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c754:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1c758:	460a      	mov	r2, r1
   1c75a:	e7b3      	b.n	1c6c4 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1c75c:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c760:	f855 7b04 	ldr.w	r7, [r5], #4
   1c764:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1c768:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c76c:	fba7 6706 	umull	r6, r7, r7, r6
   1c770:	eb16 0801 	adds.w	r8, r6, r1
   1c774:	eb57 0902 	adcs.w	r9, r7, r2
   1c778:	bf2c      	ite	cs
   1c77a:	2201      	movcs	r2, #1
   1c77c:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c77e:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1c782:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1c784:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1c786:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c788:	fa4f fc8c 	sxtb.w	ip, ip
   1c78c:	e7de      	b.n	1c74c <uECC_vli_mult+0xae>

0001c78e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1c78e:	2300      	movs	r3, #0
{
   1c790:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1c792:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1c794:	b25a      	sxtb	r2, r3
   1c796:	4291      	cmp	r1, r2
   1c798:	dc00      	bgt.n	1c79c <uECC_vli_clear+0xe>
}
   1c79a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1c79c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1c7a0:	3301      	adds	r3, #1
   1c7a2:	e7f7      	b.n	1c794 <uECC_vli_clear+0x6>

0001c7a4 <uECC_vli_isZero>:
{
   1c7a4:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1c7a6:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1c7a8:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1c7aa:	b25c      	sxtb	r4, r3
   1c7ac:	42a1      	cmp	r1, r4
   1c7ae:	dc03      	bgt.n	1c7b8 <uECC_vli_isZero+0x14>
}
   1c7b0:	fab2 f082 	clz	r0, r2
   1c7b4:	0940      	lsrs	r0, r0, #5
   1c7b6:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1c7b8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1c7bc:	3301      	adds	r3, #1
   1c7be:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1c7c0:	e7f3      	b.n	1c7aa <uECC_vli_isZero+0x6>

0001c7c2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c7c2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1c7c4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c7c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1c7ca:	f001 011f 	and.w	r1, r1, #31
   1c7ce:	fa03 f101 	lsl.w	r1, r3, r1
}
   1c7d2:	4008      	ands	r0, r1
   1c7d4:	4770      	bx	lr

0001c7d6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c7d6:	3901      	subs	r1, #1
   1c7d8:	b24b      	sxtb	r3, r1
{
   1c7da:	4602      	mov	r2, r0
   1c7dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	da03      	bge.n	1c7ec <uECC_vli_numBits+0x16>
	return (i + 1);
   1c7e4:	3301      	adds	r3, #1
   1c7e6:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1c7e8:	b938      	cbnz	r0, 1c7fa <uECC_vli_numBits+0x24>
   1c7ea:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1c7ec:	f851 0904 	ldr.w	r0, [r1], #-4
   1c7f0:	2800      	cmp	r0, #0
   1c7f2:	d1f7      	bne.n	1c7e4 <uECC_vli_numBits+0xe>
   1c7f4:	3b01      	subs	r3, #1
   1c7f6:	b25b      	sxtb	r3, r3
   1c7f8:	e7f2      	b.n	1c7e0 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1c7fa:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1c7fe:	3b01      	subs	r3, #1
   1c800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1c804:	2300      	movs	r3, #0
   1c806:	b922      	cbnz	r2, 1c812 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1c808:	3801      	subs	r0, #1
   1c80a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1c80e:	b200      	sxth	r0, r0
}
   1c810:	4770      	bx	lr
		digit >>= 1;
   1c812:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1c814:	3301      	adds	r3, #1
   1c816:	e7f6      	b.n	1c806 <uECC_vli_numBits+0x30>

0001c818 <uECC_vli_set>:
{
   1c818:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1c81a:	2300      	movs	r3, #0
   1c81c:	b25c      	sxtb	r4, r3
   1c81e:	42a2      	cmp	r2, r4
   1c820:	dc00      	bgt.n	1c824 <uECC_vli_set+0xc>
}
   1c822:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1c824:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1c828:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1c82c:	3301      	adds	r3, #1
   1c82e:	e7f5      	b.n	1c81c <uECC_vli_set+0x4>

0001c830 <uECC_vli_cmp_unsafe>:
{
   1c830:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1c832:	3a01      	subs	r2, #1
   1c834:	b253      	sxtb	r3, r2
   1c836:	009a      	lsls	r2, r3, #2
   1c838:	2b00      	cmp	r3, #0
   1c83a:	da01      	bge.n	1c840 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1c83c:	2000      	movs	r0, #0
}
   1c83e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1c840:	5885      	ldr	r5, [r0, r2]
   1c842:	588c      	ldr	r4, [r1, r2]
   1c844:	42a5      	cmp	r5, r4
   1c846:	d805      	bhi.n	1c854 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1c848:	f1a2 0204 	sub.w	r2, r2, #4
   1c84c:	d304      	bcc.n	1c858 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1c84e:	3b01      	subs	r3, #1
   1c850:	b25b      	sxtb	r3, r3
   1c852:	e7f1      	b.n	1c838 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1c854:	2001      	movs	r0, #1
   1c856:	e7f2      	b.n	1c83e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1c858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c85c:	e7ef      	b.n	1c83e <uECC_vli_cmp_unsafe+0xe>

0001c85e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1c85e:	3a01      	subs	r2, #1
   1c860:	b253      	sxtb	r3, r2
{
   1c862:	b570      	push	{r4, r5, r6, lr}
   1c864:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1c866:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1c868:	2b00      	cmp	r3, #0
   1c86a:	da03      	bge.n	1c874 <uECC_vli_equal+0x16>
}
   1c86c:	1e20      	subs	r0, r4, #0
   1c86e:	bf18      	it	ne
   1c870:	2001      	movne	r0, #1
   1c872:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1c874:	5885      	ldr	r5, [r0, r2]
   1c876:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1c878:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1c87a:	4075      	eors	r5, r6
   1c87c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1c87e:	b25b      	sxtb	r3, r3
   1c880:	3a04      	subs	r2, #4
   1c882:	e7f1      	b.n	1c868 <uECC_vli_equal+0xa>

0001c884 <uECC_vli_sub>:
{
   1c884:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1c886:	2400      	movs	r4, #0
{
   1c888:	4606      	mov	r6, r0
   1c88a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1c88c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1c88e:	b265      	sxtb	r5, r4
   1c890:	45ac      	cmp	ip, r5
   1c892:	dc00      	bgt.n	1c896 <uECC_vli_sub+0x12>
}
   1c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1c896:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1c89a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1c89e:	1a3d      	subs	r5, r7, r0
   1c8a0:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1c8a2:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1c8a4:	bf34      	ite	cc
   1c8a6:	2701      	movcc	r7, #1
   1c8a8:	2700      	movcs	r7, #0
		result[i] = diff;
   1c8aa:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1c8ae:	bf18      	it	ne
   1c8b0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1c8b2:	3401      	adds	r4, #1
   1c8b4:	e7eb      	b.n	1c88e <uECC_vli_sub+0xa>

0001c8b6 <uECC_vli_modAdd>:
{
   1c8b6:	b570      	push	{r4, r5, r6, lr}
   1c8b8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1c8bc:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1c8be:	4633      	mov	r3, r6
{
   1c8c0:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1c8c2:	f7ff feab 	bl	1c61c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1c8c6:	b930      	cbnz	r0, 1c8d6 <uECC_vli_modAdd+0x20>
   1c8c8:	4632      	mov	r2, r6
   1c8ca:	4621      	mov	r1, r4
   1c8cc:	4628      	mov	r0, r5
   1c8ce:	f7ff ffaf 	bl	1c830 <uECC_vli_cmp_unsafe>
   1c8d2:	2801      	cmp	r0, #1
   1c8d4:	d007      	beq.n	1c8e6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1c8d6:	4633      	mov	r3, r6
   1c8d8:	462a      	mov	r2, r5
   1c8da:	4621      	mov	r1, r4
   1c8dc:	4620      	mov	r0, r4
}
   1c8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1c8e2:	f7ff bfcf 	b.w	1c884 <uECC_vli_sub>
}
   1c8e6:	bd70      	pop	{r4, r5, r6, pc}

0001c8e8 <uECC_vli_modSub>:
{
   1c8e8:	b570      	push	{r4, r5, r6, lr}
   1c8ea:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1c8ee:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1c8f0:	4633      	mov	r3, r6
{
   1c8f2:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1c8f4:	f7ff ffc6 	bl	1c884 <uECC_vli_sub>
	if (l_borrow) {
   1c8f8:	b138      	cbz	r0, 1c90a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1c8fa:	4633      	mov	r3, r6
   1c8fc:	462a      	mov	r2, r5
   1c8fe:	4621      	mov	r1, r4
   1c900:	4620      	mov	r0, r4
}
   1c902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1c906:	f7ff be89 	b.w	1c61c <uECC_vli_add>
}
   1c90a:	bd70      	pop	{r4, r5, r6, pc}

0001c90c <uECC_vli_mmod>:
{
   1c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c910:	b0a5      	sub	sp, #148	; 0x94
   1c912:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1c914:	ab14      	add	r3, sp, #80	; 0x50
   1c916:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1c91a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1c91c:	4629      	mov	r1, r5
   1c91e:	4610      	mov	r0, r2
{
   1c920:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1c922:	f7ff ff58 	bl	1c7d6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1c926:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1c92a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1c92c:	2c00      	cmp	r4, #0
   1c92e:	4621      	mov	r1, r4
   1c930:	bfb8      	it	lt
   1c932:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1c936:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1c938:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1c93c:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1c940:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1c942:	f004 071f 	and.w	r7, r4, #31
   1c946:	bf58      	it	pl
   1c948:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1c94a:	f7ff ff20 	bl	1c78e <uECC_vli_clear>
	if (bit_shift > 0) {
   1c94e:	2f00      	cmp	r7, #0
   1c950:	b208      	sxth	r0, r1
   1c952:	dd2b      	ble.n	1c9ac <uECC_vli_mmod+0xa0>
   1c954:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1c956:	2200      	movs	r2, #0
   1c958:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1c95c:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1c960:	4613      	mov	r3, r2
   1c962:	429d      	cmp	r5, r3
   1c964:	d817      	bhi.n	1c996 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1c966:	006b      	lsls	r3, r5, #1
   1c968:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1c96a:	ab04      	add	r3, sp, #16
   1c96c:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c970:	1e6f      	subs	r7, r5, #1
   1c972:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1c974:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1c976:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1c97a:	2c00      	cmp	r4, #0
   1c97c:	da54      	bge.n	1ca28 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1c97e:	ab24      	add	r3, sp, #144	; 0x90
   1c980:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1c984:	462a      	mov	r2, r5
   1c986:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1c98a:	4640      	mov	r0, r8
   1c98c:	f7ff ff44 	bl	1c818 <uECC_vli_set>
}
   1c990:	b025      	add	sp, #148	; 0x94
   1c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1c996:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1c99a:	fa0c f007 	lsl.w	r0, ip, r7
   1c99e:	4302      	orrs	r2, r0
   1c9a0:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1c9a4:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1c9a6:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1c9aa:	e7da      	b.n	1c962 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1c9ac:	ab04      	add	r3, sp, #16
   1c9ae:	462a      	mov	r2, r5
   1c9b0:	4631      	mov	r1, r6
   1c9b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1c9b6:	f7ff ff2f 	bl	1c818 <uECC_vli_set>
   1c9ba:	e7d4      	b.n	1c966 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1c9bc:	fa0f fe82 	sxth.w	lr, r2
   1c9c0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1c9c4:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1c9c8:	ab24      	add	r3, sp, #144	; 0x90
   1c9ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c9ce:	3001      	adds	r0, #1
   1c9d0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1c9d4:	440b      	add	r3, r1
   1c9d6:	ebbb 0303 	subs.w	r3, fp, r3
   1c9da:	bf34      	ite	cc
   1c9dc:	2201      	movcc	r2, #1
   1c9de:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1c9e0:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1c9e2:	bf18      	it	ne
   1c9e4:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1c9e6:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1c9ea:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1c9ee:	9b01      	ldr	r3, [sp, #4]
   1c9f0:	b242      	sxtb	r2, r0
   1c9f2:	429a      	cmp	r2, r3
   1c9f4:	dbe2      	blt.n	1c9bc <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1c9f6:	1a73      	subs	r3, r6, r1
   1c9f8:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1c9fa:	4629      	mov	r1, r5
   1c9fc:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1c9fe:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ca00:	f7ff fe24 	bl	1c64c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca04:	ab24      	add	r3, sp, #144	; 0x90
   1ca06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ca0a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca0c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1ca10:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ca14:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca16:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ca1a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ca1c:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1ca20:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ca22:	f7ff fe13 	bl	1c64c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1ca26:	e7a8      	b.n	1c97a <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ca28:	ab24      	add	r3, sp, #144	; 0x90
   1ca2a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1ca2c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1ca30:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ca32:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1ca36:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1ca3a:	e7d8      	b.n	1c9ee <uECC_vli_mmod+0xe2>

0001ca3c <uECC_vli_modMult_fast>:
{
   1ca3c:	b530      	push	{r4, r5, lr}
   1ca3e:	461c      	mov	r4, r3
   1ca40:	b091      	sub	sp, #68	; 0x44
   1ca42:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1ca44:	f993 3000 	ldrsb.w	r3, [r3]
   1ca48:	4668      	mov	r0, sp
   1ca4a:	f7ff fe28 	bl	1c69e <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1ca4e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1ca52:	4669      	mov	r1, sp
   1ca54:	4628      	mov	r0, r5
   1ca56:	4798      	blx	r3
}
   1ca58:	b011      	add	sp, #68	; 0x44
   1ca5a:	bd30      	pop	{r4, r5, pc}

0001ca5c <uECC_vli_modSquare_fast>:
{
   1ca5c:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1ca5e:	460a      	mov	r2, r1
   1ca60:	f7ff bfec 	b.w	1ca3c <uECC_vli_modMult_fast>

0001ca64 <double_jacobian_default>:
{
   1ca64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1ca68:	f993 6000 	ldrsb.w	r6, [r3]
{
   1ca6c:	b092      	sub	sp, #72	; 0x48
   1ca6e:	4604      	mov	r4, r0
   1ca70:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1ca72:	4610      	mov	r0, r2
   1ca74:	4631      	mov	r1, r6
{
   1ca76:	4615      	mov	r5, r2
   1ca78:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1ca7a:	f7ff fe93 	bl	1c7a4 <uECC_vli_isZero>
   1ca7e:	2800      	cmp	r0, #0
   1ca80:	f040 8091 	bne.w	1cba6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1ca84:	463a      	mov	r2, r7
   1ca86:	4649      	mov	r1, r9
   1ca88:	a802      	add	r0, sp, #8
   1ca8a:	f7ff ffe7 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1ca8e:	463b      	mov	r3, r7
   1ca90:	aa02      	add	r2, sp, #8
   1ca92:	4621      	mov	r1, r4
   1ca94:	a80a      	add	r0, sp, #40	; 0x28
   1ca96:	f7ff ffd1 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1ca9a:	a902      	add	r1, sp, #8
   1ca9c:	4608      	mov	r0, r1
   1ca9e:	463a      	mov	r2, r7
   1caa0:	f7ff ffdc 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1caa4:	463b      	mov	r3, r7
   1caa6:	462a      	mov	r2, r5
   1caa8:	4649      	mov	r1, r9
   1caaa:	4648      	mov	r0, r9
   1caac:	f7ff ffc6 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cab0:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1cab4:	463a      	mov	r2, r7
   1cab6:	4629      	mov	r1, r5
   1cab8:	4628      	mov	r0, r5
   1caba:	f7ff ffcf 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cabe:	4643      	mov	r3, r8
   1cac0:	462a      	mov	r2, r5
   1cac2:	4621      	mov	r1, r4
   1cac4:	4620      	mov	r0, r4
   1cac6:	9600      	str	r6, [sp, #0]
   1cac8:	f7ff fef5 	bl	1c8b6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1cacc:	4643      	mov	r3, r8
   1cace:	462a      	mov	r2, r5
   1cad0:	4629      	mov	r1, r5
   1cad2:	4628      	mov	r0, r5
   1cad4:	9600      	str	r6, [sp, #0]
   1cad6:	f7ff feee 	bl	1c8b6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1cada:	4643      	mov	r3, r8
   1cadc:	462a      	mov	r2, r5
   1cade:	4621      	mov	r1, r4
   1cae0:	4628      	mov	r0, r5
   1cae2:	9600      	str	r6, [sp, #0]
   1cae4:	f7ff ff00 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1cae8:	463b      	mov	r3, r7
   1caea:	462a      	mov	r2, r5
   1caec:	4621      	mov	r1, r4
   1caee:	4620      	mov	r0, r4
   1caf0:	f7ff ffa4 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1caf4:	4643      	mov	r3, r8
   1caf6:	4622      	mov	r2, r4
   1caf8:	4621      	mov	r1, r4
   1cafa:	4628      	mov	r0, r5
   1cafc:	9600      	str	r6, [sp, #0]
   1cafe:	f7ff feda 	bl	1c8b6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1cb02:	4643      	mov	r3, r8
   1cb04:	9600      	str	r6, [sp, #0]
   1cb06:	462a      	mov	r2, r5
   1cb08:	4621      	mov	r1, r4
   1cb0a:	4620      	mov	r0, r4
   1cb0c:	f7ff fed3 	bl	1c8b6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cb10:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1cb12:	07db      	lsls	r3, r3, #31
   1cb14:	d54a      	bpl.n	1cbac <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cb16:	4633      	mov	r3, r6
   1cb18:	4642      	mov	r2, r8
   1cb1a:	4621      	mov	r1, r4
   1cb1c:	4620      	mov	r0, r4
   1cb1e:	f7ff fd7d 	bl	1c61c <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1cb22:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cb24:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1cb26:	4620      	mov	r0, r4
   1cb28:	f7ff fd90 	bl	1c64c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1cb2c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1cb30:	3b01      	subs	r3, #1
   1cb32:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1cb36:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1cb3a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1cb3e:	463a      	mov	r2, r7
   1cb40:	4621      	mov	r1, r4
   1cb42:	4628      	mov	r0, r5
   1cb44:	f7ff ff8a 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1cb48:	4643      	mov	r3, r8
   1cb4a:	aa0a      	add	r2, sp, #40	; 0x28
   1cb4c:	4629      	mov	r1, r5
   1cb4e:	4628      	mov	r0, r5
   1cb50:	9600      	str	r6, [sp, #0]
   1cb52:	f7ff fec9 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1cb56:	4643      	mov	r3, r8
   1cb58:	aa0a      	add	r2, sp, #40	; 0x28
   1cb5a:	4629      	mov	r1, r5
   1cb5c:	4628      	mov	r0, r5
   1cb5e:	9600      	str	r6, [sp, #0]
   1cb60:	f7ff fec2 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1cb64:	a90a      	add	r1, sp, #40	; 0x28
   1cb66:	4608      	mov	r0, r1
   1cb68:	4643      	mov	r3, r8
   1cb6a:	462a      	mov	r2, r5
   1cb6c:	9600      	str	r6, [sp, #0]
   1cb6e:	f7ff febb 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1cb72:	463b      	mov	r3, r7
   1cb74:	aa0a      	add	r2, sp, #40	; 0x28
   1cb76:	4621      	mov	r1, r4
   1cb78:	4620      	mov	r0, r4
   1cb7a:	f7ff ff5f 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1cb7e:	aa02      	add	r2, sp, #8
   1cb80:	4643      	mov	r3, r8
   1cb82:	4610      	mov	r0, r2
   1cb84:	4621      	mov	r1, r4
   1cb86:	9600      	str	r6, [sp, #0]
   1cb88:	f7ff feae 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1cb8c:	4632      	mov	r2, r6
   1cb8e:	4629      	mov	r1, r5
   1cb90:	4620      	mov	r0, r4
   1cb92:	f7ff fe41 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1cb96:	4649      	mov	r1, r9
   1cb98:	4628      	mov	r0, r5
   1cb9a:	f7ff fe3d 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1cb9e:	a902      	add	r1, sp, #8
   1cba0:	4648      	mov	r0, r9
   1cba2:	f7ff fe39 	bl	1c818 <uECC_vli_set>
}
   1cba6:	b012      	add	sp, #72	; 0x48
   1cba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1cbac:	4631      	mov	r1, r6
   1cbae:	4620      	mov	r0, r4
   1cbb0:	f7ff fd4c 	bl	1c64c <uECC_vli_rshift1>
   1cbb4:	e7c3      	b.n	1cb3e <double_jacobian_default+0xda>

0001cbb6 <x_side_default>:
{
   1cbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbba:	4615      	mov	r5, r2
   1cbbc:	b08a      	sub	sp, #40	; 0x28
   1cbbe:	4604      	mov	r4, r0
   1cbc0:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1cbc2:	221c      	movs	r2, #28
   1cbc4:	2100      	movs	r1, #0
   1cbc6:	a803      	add	r0, sp, #12
   1cbc8:	f001 fcb9 	bl	1e53e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1cbcc:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1cbce:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1cbd2:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1cbd4:	462a      	mov	r2, r5
   1cbd6:	4631      	mov	r1, r6
   1cbd8:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1cbda:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1cbdc:	f7ff ff3e 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1cbe0:	463b      	mov	r3, r7
   1cbe2:	aa02      	add	r2, sp, #8
   1cbe4:	4621      	mov	r1, r4
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	f8cd 8000 	str.w	r8, [sp]
   1cbec:	f7ff fe7c 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1cbf0:	462b      	mov	r3, r5
   1cbf2:	4632      	mov	r2, r6
   1cbf4:	4621      	mov	r1, r4
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	f7ff ff20 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1cbfc:	f8cd 8000 	str.w	r8, [sp]
   1cc00:	463b      	mov	r3, r7
   1cc02:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1cc06:	4621      	mov	r1, r4
   1cc08:	4620      	mov	r0, r4
   1cc0a:	f7ff fe54 	bl	1c8b6 <uECC_vli_modAdd>
}
   1cc0e:	b00a      	add	sp, #40	; 0x28
   1cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cc14 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1cc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc18:	b09a      	sub	sp, #104	; 0x68
   1cc1a:	4616      	mov	r6, r2
   1cc1c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1cc20:	4644      	mov	r4, r8
{
   1cc22:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1cc24:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cc28:	9500      	str	r5, [sp, #0]
{
   1cc2a:	4607      	mov	r7, r0
   1cc2c:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cc2e:	4623      	mov	r3, r4
   1cc30:	4602      	mov	r2, r0
   1cc32:	4631      	mov	r1, r6
   1cc34:	a802      	add	r0, sp, #8
   1cc36:	f7ff fe57 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1cc3a:	a902      	add	r1, sp, #8
   1cc3c:	4642      	mov	r2, r8
   1cc3e:	4608      	mov	r0, r1
   1cc40:	f7ff ff0c 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1cc44:	4643      	mov	r3, r8
   1cc46:	aa02      	add	r2, sp, #8
   1cc48:	4639      	mov	r1, r7
   1cc4a:	4638      	mov	r0, r7
   1cc4c:	f7ff fef6 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1cc50:	4643      	mov	r3, r8
   1cc52:	aa02      	add	r2, sp, #8
   1cc54:	4631      	mov	r1, r6
   1cc56:	4630      	mov	r0, r6
   1cc58:	f7ff fef0 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1cc5c:	4623      	mov	r3, r4
   1cc5e:	4652      	mov	r2, sl
   1cc60:	4649      	mov	r1, r9
   1cc62:	a802      	add	r0, sp, #8
   1cc64:	9500      	str	r5, [sp, #0]
   1cc66:	f7ff fe26 	bl	1c8b6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1cc6a:	4623      	mov	r3, r4
   1cc6c:	4652      	mov	r2, sl
   1cc6e:	4649      	mov	r1, r9
   1cc70:	4648      	mov	r0, r9
   1cc72:	9500      	str	r5, [sp, #0]
   1cc74:	f7ff fe38 	bl	1c8e8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1cc78:	4623      	mov	r3, r4
   1cc7a:	463a      	mov	r2, r7
   1cc7c:	4631      	mov	r1, r6
   1cc7e:	a80a      	add	r0, sp, #40	; 0x28
   1cc80:	9500      	str	r5, [sp, #0]
   1cc82:	f7ff fe31 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1cc86:	4643      	mov	r3, r8
   1cc88:	aa0a      	add	r2, sp, #40	; 0x28
   1cc8a:	4651      	mov	r1, sl
   1cc8c:	4650      	mov	r0, sl
   1cc8e:	f7ff fed5 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1cc92:	4623      	mov	r3, r4
   1cc94:	4632      	mov	r2, r6
   1cc96:	4639      	mov	r1, r7
   1cc98:	a80a      	add	r0, sp, #40	; 0x28
   1cc9a:	9500      	str	r5, [sp, #0]
   1cc9c:	f7ff fe0b 	bl	1c8b6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1cca0:	4642      	mov	r2, r8
   1cca2:	4649      	mov	r1, r9
   1cca4:	4630      	mov	r0, r6
   1cca6:	f7ff fed9 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1ccaa:	4623      	mov	r3, r4
   1ccac:	aa0a      	add	r2, sp, #40	; 0x28
   1ccae:	4631      	mov	r1, r6
   1ccb0:	4630      	mov	r0, r6
   1ccb2:	9500      	str	r5, [sp, #0]
   1ccb4:	f7ff fe18 	bl	1c8e8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1ccb8:	4623      	mov	r3, r4
   1ccba:	4632      	mov	r2, r6
   1ccbc:	4639      	mov	r1, r7
   1ccbe:	a812      	add	r0, sp, #72	; 0x48
   1ccc0:	9500      	str	r5, [sp, #0]
   1ccc2:	f7ff fe11 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1ccc6:	4643      	mov	r3, r8
   1ccc8:	aa12      	add	r2, sp, #72	; 0x48
   1ccca:	4649      	mov	r1, r9
   1cccc:	4648      	mov	r0, r9
   1ccce:	f7ff feb5 	bl	1ca3c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1ccd2:	4623      	mov	r3, r4
   1ccd4:	4652      	mov	r2, sl
   1ccd6:	4649      	mov	r1, r9
   1ccd8:	4648      	mov	r0, r9
   1ccda:	9500      	str	r5, [sp, #0]
   1ccdc:	f7ff fe04 	bl	1c8e8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1cce0:	4642      	mov	r2, r8
   1cce2:	a902      	add	r1, sp, #8
   1cce4:	a812      	add	r0, sp, #72	; 0x48
   1cce6:	f7ff feb9 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1ccea:	a912      	add	r1, sp, #72	; 0x48
   1ccec:	4623      	mov	r3, r4
   1ccee:	aa0a      	add	r2, sp, #40	; 0x28
   1ccf0:	4608      	mov	r0, r1
   1ccf2:	9500      	str	r5, [sp, #0]
   1ccf4:	f7ff fdf8 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1ccf8:	4623      	mov	r3, r4
   1ccfa:	463a      	mov	r2, r7
   1ccfc:	a912      	add	r1, sp, #72	; 0x48
   1ccfe:	a80a      	add	r0, sp, #40	; 0x28
   1cd00:	9500      	str	r5, [sp, #0]
   1cd02:	f7ff fdf1 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1cd06:	a90a      	add	r1, sp, #40	; 0x28
   1cd08:	4643      	mov	r3, r8
   1cd0a:	aa02      	add	r2, sp, #8
   1cd0c:	4608      	mov	r0, r1
   1cd0e:	f7ff fe95 	bl	1ca3c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1cd12:	4623      	mov	r3, r4
   1cd14:	4652      	mov	r2, sl
   1cd16:	a90a      	add	r1, sp, #40	; 0x28
   1cd18:	4650      	mov	r0, sl
   1cd1a:	9500      	str	r5, [sp, #0]
   1cd1c:	f7ff fde4 	bl	1c8e8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1cd20:	462a      	mov	r2, r5
   1cd22:	a912      	add	r1, sp, #72	; 0x48
   1cd24:	4638      	mov	r0, r7
   1cd26:	f7ff fd77 	bl	1c818 <uECC_vli_set>
}
   1cd2a:	b01a      	add	sp, #104	; 0x68
   1cd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cd30 <uECC_vli_modInv>:
{
   1cd30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd32:	460f      	mov	r7, r1
   1cd34:	b0a1      	sub	sp, #132	; 0x84
   1cd36:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1cd38:	4619      	mov	r1, r3
   1cd3a:	4638      	mov	r0, r7
{
   1cd3c:	4615      	mov	r5, r2
   1cd3e:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1cd40:	f7ff fd30 	bl	1c7a4 <uECC_vli_isZero>
   1cd44:	b120      	cbz	r0, 1cd50 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1cd46:	4630      	mov	r0, r6
   1cd48:	f7ff fd21 	bl	1c78e <uECC_vli_clear>
}
   1cd4c:	b021      	add	sp, #132	; 0x84
   1cd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1cd50:	4622      	mov	r2, r4
   1cd52:	4639      	mov	r1, r7
   1cd54:	4668      	mov	r0, sp
   1cd56:	f7ff fd5f 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1cd5a:	4629      	mov	r1, r5
   1cd5c:	a808      	add	r0, sp, #32
   1cd5e:	f7ff fd5b 	bl	1c818 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1cd62:	a810      	add	r0, sp, #64	; 0x40
   1cd64:	4621      	mov	r1, r4
   1cd66:	f7ff fd12 	bl	1c78e <uECC_vli_clear>
	u[0] = 1;
   1cd6a:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1cd6c:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1cd6e:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1cd70:	f7ff fd0d 	bl	1c78e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1cd74:	4622      	mov	r2, r4
   1cd76:	a908      	add	r1, sp, #32
   1cd78:	4668      	mov	r0, sp
   1cd7a:	f7ff fd59 	bl	1c830 <uECC_vli_cmp_unsafe>
   1cd7e:	b928      	cbnz	r0, 1cd8c <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1cd80:	4622      	mov	r2, r4
   1cd82:	a910      	add	r1, sp, #64	; 0x40
   1cd84:	4630      	mov	r0, r6
   1cd86:	f7ff fd47 	bl	1c818 <uECC_vli_set>
   1cd8a:	e7df      	b.n	1cd4c <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1cd8c:	9b00      	ldr	r3, [sp, #0]
   1cd8e:	07da      	lsls	r2, r3, #31
   1cd90:	d409      	bmi.n	1cda6 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1cd92:	4621      	mov	r1, r4
   1cd94:	4668      	mov	r0, sp
   1cd96:	f7ff fc59 	bl	1c64c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1cd9a:	4622      	mov	r2, r4
   1cd9c:	4629      	mov	r1, r5
   1cd9e:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1cda0:	f7ff fc61 	bl	1c666 <vli_modInv_update>
   1cda4:	e7e6      	b.n	1cd74 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1cda6:	9b08      	ldr	r3, [sp, #32]
   1cda8:	07db      	lsls	r3, r3, #31
   1cdaa:	d407      	bmi.n	1cdbc <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1cdac:	4621      	mov	r1, r4
   1cdae:	a808      	add	r0, sp, #32
   1cdb0:	f7ff fc4c 	bl	1c64c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1cdb4:	4622      	mov	r2, r4
   1cdb6:	4629      	mov	r1, r5
   1cdb8:	a818      	add	r0, sp, #96	; 0x60
   1cdba:	e7f1      	b.n	1cda0 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1cdbc:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1cdbe:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1cdc0:	dd1c      	ble.n	1cdfc <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1cdc2:	aa08      	add	r2, sp, #32
   1cdc4:	4669      	mov	r1, sp
   1cdc6:	4668      	mov	r0, sp
   1cdc8:	f7ff fd5c 	bl	1c884 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1cdcc:	4621      	mov	r1, r4
   1cdce:	4668      	mov	r0, sp
   1cdd0:	f7ff fc3c 	bl	1c64c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1cdd4:	4622      	mov	r2, r4
   1cdd6:	a918      	add	r1, sp, #96	; 0x60
   1cdd8:	a810      	add	r0, sp, #64	; 0x40
   1cdda:	f7ff fd29 	bl	1c830 <uECC_vli_cmp_unsafe>
   1cdde:	2800      	cmp	r0, #0
   1cde0:	da05      	bge.n	1cdee <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1cde2:	a910      	add	r1, sp, #64	; 0x40
   1cde4:	4623      	mov	r3, r4
   1cde6:	462a      	mov	r2, r5
   1cde8:	4608      	mov	r0, r1
   1cdea:	f7ff fc17 	bl	1c61c <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1cdee:	a910      	add	r1, sp, #64	; 0x40
   1cdf0:	4623      	mov	r3, r4
   1cdf2:	aa18      	add	r2, sp, #96	; 0x60
   1cdf4:	4608      	mov	r0, r1
   1cdf6:	f7ff fd45 	bl	1c884 <uECC_vli_sub>
   1cdfa:	e7ce      	b.n	1cd9a <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1cdfc:	a908      	add	r1, sp, #32
   1cdfe:	466a      	mov	r2, sp
   1ce00:	4608      	mov	r0, r1
   1ce02:	f7ff fd3f 	bl	1c884 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1ce06:	4621      	mov	r1, r4
   1ce08:	a808      	add	r0, sp, #32
   1ce0a:	f7ff fc1f 	bl	1c64c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1ce0e:	4622      	mov	r2, r4
   1ce10:	a910      	add	r1, sp, #64	; 0x40
   1ce12:	a818      	add	r0, sp, #96	; 0x60
   1ce14:	f7ff fd0c 	bl	1c830 <uECC_vli_cmp_unsafe>
   1ce18:	2800      	cmp	r0, #0
   1ce1a:	da05      	bge.n	1ce28 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1ce1c:	a918      	add	r1, sp, #96	; 0x60
   1ce1e:	4623      	mov	r3, r4
   1ce20:	462a      	mov	r2, r5
   1ce22:	4608      	mov	r0, r1
   1ce24:	f7ff fbfa 	bl	1c61c <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1ce28:	a918      	add	r1, sp, #96	; 0x60
   1ce2a:	4623      	mov	r3, r4
   1ce2c:	aa10      	add	r2, sp, #64	; 0x40
   1ce2e:	4608      	mov	r0, r1
   1ce30:	f7ff fd28 	bl	1c884 <uECC_vli_sub>
   1ce34:	e7be      	b.n	1cdb4 <uECC_vli_modInv+0x84>

0001ce36 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1ce36:	7809      	ldrb	r1, [r1, #0]
   1ce38:	0049      	lsls	r1, r1, #1
   1ce3a:	b249      	sxtb	r1, r1
   1ce3c:	f7ff bcb2 	b.w	1c7a4 <uECC_vli_isZero>

0001ce40 <apply_z>:
{
   1ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce42:	4615      	mov	r5, r2
   1ce44:	b089      	sub	sp, #36	; 0x24
   1ce46:	461c      	mov	r4, r3
   1ce48:	4607      	mov	r7, r0
   1ce4a:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1ce4c:	461a      	mov	r2, r3
   1ce4e:	4629      	mov	r1, r5
   1ce50:	4668      	mov	r0, sp
   1ce52:	f7ff fe03 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1ce56:	4623      	mov	r3, r4
   1ce58:	466a      	mov	r2, sp
   1ce5a:	4639      	mov	r1, r7
   1ce5c:	4638      	mov	r0, r7
   1ce5e:	f7ff fded 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1ce62:	4623      	mov	r3, r4
   1ce64:	462a      	mov	r2, r5
   1ce66:	4669      	mov	r1, sp
   1ce68:	4668      	mov	r0, sp
   1ce6a:	f7ff fde7 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1ce6e:	4623      	mov	r3, r4
   1ce70:	466a      	mov	r2, sp
   1ce72:	4631      	mov	r1, r6
   1ce74:	4630      	mov	r0, r6
   1ce76:	f7ff fde1 	bl	1ca3c <uECC_vli_modMult_fast>
}
   1ce7a:	b009      	add	sp, #36	; 0x24
   1ce7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ce7e <XYcZ_add>:
{
   1ce7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce82:	b08a      	sub	sp, #40	; 0x28
   1ce84:	4614      	mov	r4, r2
   1ce86:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1ce8a:	4655      	mov	r5, sl
{
   1ce8c:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1ce8e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1ce92:	9600      	str	r6, [sp, #0]
{
   1ce94:	4680      	mov	r8, r0
   1ce96:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1ce98:	462b      	mov	r3, r5
   1ce9a:	4602      	mov	r2, r0
   1ce9c:	4621      	mov	r1, r4
   1ce9e:	a802      	add	r0, sp, #8
   1cea0:	f7ff fd22 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1cea4:	a902      	add	r1, sp, #8
   1cea6:	4652      	mov	r2, sl
   1cea8:	4608      	mov	r0, r1
   1ceaa:	f7ff fdd7 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1ceae:	4653      	mov	r3, sl
   1ceb0:	aa02      	add	r2, sp, #8
   1ceb2:	4641      	mov	r1, r8
   1ceb4:	4640      	mov	r0, r8
   1ceb6:	f7ff fdc1 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1ceba:	4653      	mov	r3, sl
   1cebc:	aa02      	add	r2, sp, #8
   1cebe:	4621      	mov	r1, r4
   1cec0:	4620      	mov	r0, r4
   1cec2:	f7ff fdbb 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1cec6:	462b      	mov	r3, r5
   1cec8:	464a      	mov	r2, r9
   1ceca:	4639      	mov	r1, r7
   1cecc:	4638      	mov	r0, r7
   1cece:	9600      	str	r6, [sp, #0]
   1ced0:	f7ff fd0a 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1ced4:	4652      	mov	r2, sl
   1ced6:	4639      	mov	r1, r7
   1ced8:	a802      	add	r0, sp, #8
   1ceda:	f7ff fdbf 	bl	1ca5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1cede:	a902      	add	r1, sp, #8
   1cee0:	462b      	mov	r3, r5
   1cee2:	4642      	mov	r2, r8
   1cee4:	4608      	mov	r0, r1
   1cee6:	9600      	str	r6, [sp, #0]
   1cee8:	f7ff fcfe 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1ceec:	a902      	add	r1, sp, #8
   1ceee:	462b      	mov	r3, r5
   1cef0:	4622      	mov	r2, r4
   1cef2:	4608      	mov	r0, r1
   1cef4:	9600      	str	r6, [sp, #0]
   1cef6:	f7ff fcf7 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1cefa:	462b      	mov	r3, r5
   1cefc:	4642      	mov	r2, r8
   1cefe:	4621      	mov	r1, r4
   1cf00:	4620      	mov	r0, r4
   1cf02:	9600      	str	r6, [sp, #0]
   1cf04:	f7ff fcf0 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1cf08:	4653      	mov	r3, sl
   1cf0a:	4622      	mov	r2, r4
   1cf0c:	4649      	mov	r1, r9
   1cf0e:	4648      	mov	r0, r9
   1cf10:	f7ff fd94 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1cf14:	462b      	mov	r3, r5
   1cf16:	aa02      	add	r2, sp, #8
   1cf18:	4641      	mov	r1, r8
   1cf1a:	4620      	mov	r0, r4
   1cf1c:	9600      	str	r6, [sp, #0]
   1cf1e:	f7ff fce3 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1cf22:	4653      	mov	r3, sl
   1cf24:	4622      	mov	r2, r4
   1cf26:	4639      	mov	r1, r7
   1cf28:	4638      	mov	r0, r7
   1cf2a:	f7ff fd87 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1cf2e:	462b      	mov	r3, r5
   1cf30:	464a      	mov	r2, r9
   1cf32:	4639      	mov	r1, r7
   1cf34:	4638      	mov	r0, r7
   1cf36:	9600      	str	r6, [sp, #0]
   1cf38:	f7ff fcd6 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1cf3c:	4632      	mov	r2, r6
   1cf3e:	a902      	add	r1, sp, #8
   1cf40:	4620      	mov	r0, r4
   1cf42:	f7ff fc69 	bl	1c818 <uECC_vli_set>
}
   1cf46:	b00a      	add	sp, #40	; 0x28
   1cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cf4c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf50:	b0b1      	sub	sp, #196	; 0xc4
   1cf52:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1cf56:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1cf58:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1cf5c:	a818      	add	r0, sp, #96	; 0x60
{
   1cf5e:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1cf60:	463a      	mov	r2, r7
{
   1cf62:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1cf64:	f7ff fc58 	bl	1c818 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1cf68:	00bb      	lsls	r3, r7, #2
   1cf6a:	9305      	str	r3, [sp, #20]
   1cf6c:	9b04      	ldr	r3, [sp, #16]
   1cf6e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1cf72:	4619      	mov	r1, r3
   1cf74:	a828      	add	r0, sp, #160	; 0xa0
   1cf76:	9302      	str	r3, [sp, #8]
   1cf78:	f7ff fc4e 	bl	1c818 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1cf7c:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1cf80:	2e00      	cmp	r6, #0
   1cf82:	f000 8088 	beq.w	1d096 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1cf86:	462a      	mov	r2, r5
   1cf88:	4631      	mov	r1, r6
   1cf8a:	a808      	add	r0, sp, #32
   1cf8c:	f7ff fc44 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1cf90:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1cf94:	462a      	mov	r2, r5
   1cf96:	a918      	add	r1, sp, #96	; 0x60
   1cf98:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1cf9a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1cf9e:	f7ff fc3b 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1cfa2:	a928      	add	r1, sp, #160	; 0xa0
   1cfa4:	4648      	mov	r0, r9
   1cfa6:	f7ff fc37 	bl	1c818 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1cfaa:	4623      	mov	r3, r4
   1cfac:	aa08      	add	r2, sp, #32
   1cfae:	a928      	add	r1, sp, #160	; 0xa0
   1cfb0:	a818      	add	r0, sp, #96	; 0x60
   1cfb2:	f7ff ff45 	bl	1ce40 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1cfb6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1cfba:	4623      	mov	r3, r4
   1cfbc:	aa08      	add	r2, sp, #32
   1cfbe:	a928      	add	r1, sp, #160	; 0xa0
   1cfc0:	a818      	add	r0, sp, #96	; 0x60
   1cfc2:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1cfc4:	4623      	mov	r3, r4
   1cfc6:	aa08      	add	r2, sp, #32
   1cfc8:	4649      	mov	r1, r9
   1cfca:	4640      	mov	r0, r8
   1cfcc:	f7ff ff38 	bl	1ce40 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1cfd0:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1cfd4:	3d02      	subs	r5, #2
   1cfd6:	b22d      	sxth	r5, r5
   1cfd8:	2d00      	cmp	r5, #0
   1cfda:	dc63      	bgt.n	1d0a4 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cfdc:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1cfe0:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cfe2:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1cfe6:	ab10      	add	r3, sp, #64	; 0x40
   1cfe8:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1cfec:	43ed      	mvns	r5, r5
   1cfee:	ab20      	add	r3, sp, #128	; 0x80
   1cff0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1cff4:	f005 0501 	and.w	r5, r5, #1
   1cff8:	ab10      	add	r3, sp, #64	; 0x40
   1cffa:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1cffe:	ab20      	add	r3, sp, #128	; 0x80
   1d000:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d004:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d008:	462b      	mov	r3, r5
   1d00a:	464a      	mov	r2, r9
   1d00c:	4631      	mov	r1, r6
   1d00e:	4640      	mov	r0, r8
   1d010:	f7ff fe00 	bl	1cc14 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d014:	4653      	mov	r3, sl
   1d016:	aa10      	add	r2, sp, #64	; 0x40
   1d018:	a918      	add	r1, sp, #96	; 0x60
   1d01a:	a808      	add	r0, sp, #32
   1d01c:	9700      	str	r7, [sp, #0]
   1d01e:	f7ff fc63 	bl	1c8e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1d022:	a908      	add	r1, sp, #32
   1d024:	4623      	mov	r3, r4
   1d026:	4632      	mov	r2, r6
   1d028:	4608      	mov	r0, r1
   1d02a:	f7ff fd07 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1d02e:	a908      	add	r1, sp, #32
   1d030:	9a04      	ldr	r2, [sp, #16]
   1d032:	4623      	mov	r3, r4
   1d034:	4608      	mov	r0, r1
   1d036:	f7ff fd01 	bl	1ca3c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1d03a:	a908      	add	r1, sp, #32
   1d03c:	463b      	mov	r3, r7
   1d03e:	4652      	mov	r2, sl
   1d040:	4608      	mov	r0, r1
   1d042:	f7ff fe75 	bl	1cd30 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1d046:	a908      	add	r1, sp, #32
   1d048:	9a02      	ldr	r2, [sp, #8]
   1d04a:	4623      	mov	r3, r4
   1d04c:	4608      	mov	r0, r1
   1d04e:	f7ff fcf5 	bl	1ca3c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1d052:	a908      	add	r1, sp, #32
   1d054:	4623      	mov	r3, r4
   1d056:	4642      	mov	r2, r8
   1d058:	4608      	mov	r0, r1
   1d05a:	f7ff fcef 	bl	1ca3c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d05e:	9400      	str	r4, [sp, #0]
   1d060:	4633      	mov	r3, r6
   1d062:	4642      	mov	r2, r8
   1d064:	4629      	mov	r1, r5
   1d066:	4648      	mov	r0, r9
   1d068:	f7ff ff09 	bl	1ce7e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1d06c:	4623      	mov	r3, r4
   1d06e:	aa08      	add	r2, sp, #32
   1d070:	a920      	add	r1, sp, #128	; 0x80
   1d072:	a810      	add	r0, sp, #64	; 0x40
   1d074:	f7ff fee4 	bl	1ce40 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1d078:	9803      	ldr	r0, [sp, #12]
   1d07a:	463a      	mov	r2, r7
   1d07c:	a910      	add	r1, sp, #64	; 0x40
   1d07e:	f7ff fbcb 	bl	1c818 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1d082:	9b03      	ldr	r3, [sp, #12]
   1d084:	9c05      	ldr	r4, [sp, #20]
   1d086:	4423      	add	r3, r4
   1d088:	a920      	add	r1, sp, #128	; 0x80
   1d08a:	4618      	mov	r0, r3
   1d08c:	f7ff fbc4 	bl	1c818 <uECC_vli_set>
}
   1d090:	b031      	add	sp, #196	; 0xc4
   1d092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1d096:	4629      	mov	r1, r5
   1d098:	a808      	add	r0, sp, #32
   1d09a:	f7ff fb78 	bl	1c78e <uECC_vli_clear>
		z[0] = 1;
   1d09e:	2301      	movs	r3, #1
   1d0a0:	9308      	str	r3, [sp, #32]
   1d0a2:	e775      	b.n	1cf90 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1d0a4:	4629      	mov	r1, r5
   1d0a6:	4650      	mov	r0, sl
   1d0a8:	f7ff fb8b 	bl	1c7c2 <uECC_vli_testBit>
   1d0ac:	fab0 f680 	clz	r6, r0
   1d0b0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d0b2:	f1c6 0101 	rsb	r1, r6, #1
   1d0b6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1d0ba:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1d0be:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1d0c2:	4633      	mov	r3, r6
   1d0c4:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1d0c8:	465a      	mov	r2, fp
   1d0ca:	9400      	str	r4, [sp, #0]
   1d0cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d0d0:	f7ff fda0 	bl	1cc14 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d0d4:	9907      	ldr	r1, [sp, #28]
   1d0d6:	9806      	ldr	r0, [sp, #24]
   1d0d8:	9400      	str	r4, [sp, #0]
   1d0da:	460b      	mov	r3, r1
   1d0dc:	4602      	mov	r2, r0
   1d0de:	4631      	mov	r1, r6
   1d0e0:	4658      	mov	r0, fp
   1d0e2:	f7ff fecc 	bl	1ce7e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1d0e6:	3d01      	subs	r5, #1
   1d0e8:	e775      	b.n	1cfd6 <EccPoint_mult+0x8a>

0001d0ea <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1d0ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d0ee:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1d0f2:	f119 081f 	adds.w	r8, r9, #31
{
   1d0f6:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d0f8:	bf48      	it	mi
   1d0fa:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1d0fe:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d100:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d104:	3524      	adds	r5, #36	; 0x24
   1d106:	4601      	mov	r1, r0
{
   1d108:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d10a:	4643      	mov	r3, r8
   1d10c:	462a      	mov	r2, r5
   1d10e:	4630      	mov	r0, r6
   1d110:	f7ff fa84 	bl	1c61c <uECC_vli_add>
   1d114:	4604      	mov	r4, r0
   1d116:	b990      	cbnz	r0, 1d13e <regularize_k+0x54>
   1d118:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1d11c:	da06      	bge.n	1d12c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1d11e:	4649      	mov	r1, r9
   1d120:	4630      	mov	r0, r6
   1d122:	f7ff fb4e 	bl	1c7c2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1d126:	1e04      	subs	r4, r0, #0
   1d128:	bf18      	it	ne
   1d12a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1d12c:	4643      	mov	r3, r8
   1d12e:	462a      	mov	r2, r5
   1d130:	4631      	mov	r1, r6
   1d132:	4638      	mov	r0, r7
   1d134:	f7ff fa72 	bl	1c61c <uECC_vli_add>

	return carry;
}
   1d138:	4620      	mov	r0, r4
   1d13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d13e:	2401      	movs	r4, #1
   1d140:	e7f4      	b.n	1d12c <regularize_k+0x42>

0001d142 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1d142:	b530      	push	{r4, r5, lr}
   1d144:	4614      	mov	r4, r2
   1d146:	b095      	sub	sp, #84	; 0x54
   1d148:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d14a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d14c:	4623      	mov	r3, r4
{
   1d14e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d150:	a904      	add	r1, sp, #16
   1d152:	9102      	str	r1, [sp, #8]
   1d154:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d156:	f7ff ffc8 	bl	1d0ea <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1d15a:	fab0 f380 	clz	r3, r0
   1d15e:	095b      	lsrs	r3, r3, #5
   1d160:	aa14      	add	r2, sp, #80	; 0x50
   1d162:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1d166:	8863      	ldrh	r3, [r4, #2]
   1d168:	9401      	str	r4, [sp, #4]
   1d16a:	3301      	adds	r3, #1
   1d16c:	b21b      	sxth	r3, r3
   1d16e:	9300      	str	r3, [sp, #0]
   1d170:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1d174:	2300      	movs	r3, #0
   1d176:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1d17a:	4628      	mov	r0, r5
   1d17c:	f7ff fee6 	bl	1cf4c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1d180:	4621      	mov	r1, r4
   1d182:	4628      	mov	r0, r5
   1d184:	f7ff fe57 	bl	1ce36 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1d188:	fab0 f080 	clz	r0, r0
   1d18c:	0940      	lsrs	r0, r0, #5
   1d18e:	b015      	add	sp, #84	; 0x54
   1d190:	bd30      	pop	{r4, r5, pc}

0001d192 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1d192:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1d194:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d196:	1e4f      	subs	r7, r1, #1
   1d198:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1d19a:	428c      	cmp	r4, r1
   1d19c:	f105 0501 	add.w	r5, r5, #1
   1d1a0:	db00      	blt.n	1d1a4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1d1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d1a4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1d1a6:	f023 0603 	bic.w	r6, r3, #3
   1d1aa:	f003 0303 	and.w	r3, r3, #3
   1d1ae:	5996      	ldr	r6, [r2, r6]
   1d1b0:	00db      	lsls	r3, r3, #3
   1d1b2:	fa26 f303 	lsr.w	r3, r6, r3
   1d1b6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1d1b8:	e7ee      	b.n	1d198 <uECC_vli_nativeToBytes+0x6>

0001d1ba <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1d1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d1bc:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d1be:	1cd1      	adds	r1, r2, #3
   1d1c0:	bf48      	it	mi
   1d1c2:	1d91      	addmi	r1, r2, #6
   1d1c4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1d1c8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d1ca:	f7ff fae0 	bl	1c78e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1d1ce:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d1d0:	1e67      	subs	r7, r4, #1
   1d1d2:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1d1d4:	42a2      	cmp	r2, r4
   1d1d6:	f105 0501 	add.w	r5, r5, #1
   1d1da:	db00      	blt.n	1d1de <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1d1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d1de:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1d1e0:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1d1e4:	5cb2      	ldrb	r2, [r6, r2]
   1d1e6:	f003 0303 	and.w	r3, r3, #3
   1d1ea:	00db      	lsls	r3, r3, #3
   1d1ec:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1d1f0:	5842      	ldr	r2, [r0, r1]
   1d1f2:	431a      	orrs	r2, r3
   1d1f4:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1d1f6:	e7ec      	b.n	1d1d2 <uECC_vli_bytesToNative+0x18>

0001d1f8 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1fa:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d1fc:	f991 6000 	ldrsb.w	r6, [r1]
{
   1d200:	4605      	mov	r5, r0
   1d202:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1d204:	f7ff fe17 	bl	1ce36 <EccPoint_isZero>
   1d208:	bb28      	cbnz	r0, 1d256 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d20a:	1d27      	adds	r7, r4, #4
   1d20c:	4632      	mov	r2, r6
   1d20e:	4629      	mov	r1, r5
   1d210:	4638      	mov	r0, r7
   1d212:	f7ff fb0d 	bl	1c830 <uECC_vli_cmp_unsafe>
   1d216:	2801      	cmp	r0, #1
   1d218:	d120      	bne.n	1d25c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1d21a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1d21e:	4632      	mov	r2, r6
   1d220:	4638      	mov	r0, r7
   1d222:	f7ff fb05 	bl	1c830 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d226:	2801      	cmp	r0, #1
   1d228:	d118      	bne.n	1d25c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1d22a:	4622      	mov	r2, r4
   1d22c:	4668      	mov	r0, sp
   1d22e:	f7ff fc15 	bl	1ca5c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1d232:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d236:	4622      	mov	r2, r4
   1d238:	4629      	mov	r1, r5
   1d23a:	a808      	add	r0, sp, #32
   1d23c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1d23e:	4632      	mov	r2, r6
   1d240:	a908      	add	r1, sp, #32
   1d242:	4668      	mov	r0, sp
   1d244:	f7ff fb0b 	bl	1c85e <uECC_vli_equal>
   1d248:	2800      	cmp	r0, #0
		return -3;
   1d24a:	bf0c      	ite	eq
   1d24c:	2000      	moveq	r0, #0
   1d24e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1d252:	b011      	add	sp, #68	; 0x44
   1d254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1d256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d25a:	e7fa      	b.n	1d252 <uECC_valid_point+0x5a>
		return -2;
   1d25c:	f06f 0001 	mvn.w	r0, #1
   1d260:	e7f7      	b.n	1d252 <uECC_valid_point+0x5a>

0001d262 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1d262:	b570      	push	{r4, r5, r6, lr}
   1d264:	460c      	mov	r4, r1
   1d266:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1d268:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d26a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1d26e:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d270:	4601      	mov	r1, r0
   1d272:	4668      	mov	r0, sp
   1d274:	f7ff ffa1 	bl	1d1ba <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1d278:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1d27c:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1d280:	18a9      	adds	r1, r5, r2
   1d282:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1d286:	f7ff ff98 	bl	1d1ba <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1d28a:	2210      	movs	r2, #16
   1d28c:	4631      	mov	r1, r6
   1d28e:	4668      	mov	r0, sp
   1d290:	f7ff face 	bl	1c830 <uECC_vli_cmp_unsafe>
   1d294:	b128      	cbz	r0, 1d2a2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1d296:	4621      	mov	r1, r4
   1d298:	4668      	mov	r0, sp
   1d29a:	f7ff ffad 	bl	1d1f8 <uECC_valid_point>
}
   1d29e:	b010      	add	sp, #64	; 0x40
   1d2a0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1d2a2:	f06f 0003 	mvn.w	r0, #3
   1d2a6:	e7fa      	b.n	1d29e <uECC_valid_public_key+0x3c>

0001d2a8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d2a8:	78cb      	ldrb	r3, [r1, #3]
   1d2aa:	7802      	ldrb	r2, [r0, #0]
   1d2ac:	4053      	eors	r3, r2
   1d2ae:	7003      	strb	r3, [r0, #0]
   1d2b0:	884b      	ldrh	r3, [r1, #2]
   1d2b2:	7842      	ldrb	r2, [r0, #1]
   1d2b4:	4053      	eors	r3, r2
   1d2b6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d2b8:	680a      	ldr	r2, [r1, #0]
   1d2ba:	7883      	ldrb	r3, [r0, #2]
   1d2bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d2c0:	7083      	strb	r3, [r0, #2]
   1d2c2:	680a      	ldr	r2, [r1, #0]
   1d2c4:	78c3      	ldrb	r3, [r0, #3]
   1d2c6:	4053      	eors	r3, r2
   1d2c8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d2ca:	79cb      	ldrb	r3, [r1, #7]
   1d2cc:	7902      	ldrb	r2, [r0, #4]
   1d2ce:	4053      	eors	r3, r2
   1d2d0:	7103      	strb	r3, [r0, #4]
   1d2d2:	88cb      	ldrh	r3, [r1, #6]
   1d2d4:	7942      	ldrb	r2, [r0, #5]
   1d2d6:	4053      	eors	r3, r2
   1d2d8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d2da:	684a      	ldr	r2, [r1, #4]
   1d2dc:	7983      	ldrb	r3, [r0, #6]
   1d2de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d2e2:	7183      	strb	r3, [r0, #6]
   1d2e4:	684a      	ldr	r2, [r1, #4]
   1d2e6:	79c3      	ldrb	r3, [r0, #7]
   1d2e8:	4053      	eors	r3, r2
   1d2ea:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d2ec:	7acb      	ldrb	r3, [r1, #11]
   1d2ee:	7a02      	ldrb	r2, [r0, #8]
   1d2f0:	4053      	eors	r3, r2
   1d2f2:	7203      	strb	r3, [r0, #8]
   1d2f4:	7a42      	ldrb	r2, [r0, #9]
   1d2f6:	894b      	ldrh	r3, [r1, #10]
   1d2f8:	4053      	eors	r3, r2
   1d2fa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d2fc:	688a      	ldr	r2, [r1, #8]
   1d2fe:	7a83      	ldrb	r3, [r0, #10]
   1d300:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d304:	7283      	strb	r3, [r0, #10]
   1d306:	688a      	ldr	r2, [r1, #8]
   1d308:	7ac3      	ldrb	r3, [r0, #11]
   1d30a:	4053      	eors	r3, r2
   1d30c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d30e:	7bcb      	ldrb	r3, [r1, #15]
   1d310:	7b02      	ldrb	r2, [r0, #12]
   1d312:	4053      	eors	r3, r2
   1d314:	7303      	strb	r3, [r0, #12]
   1d316:	89cb      	ldrh	r3, [r1, #14]
   1d318:	7b42      	ldrb	r2, [r0, #13]
   1d31a:	4053      	eors	r3, r2
   1d31c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d31e:	68ca      	ldr	r2, [r1, #12]
   1d320:	7b83      	ldrb	r3, [r0, #14]
   1d322:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d326:	7383      	strb	r3, [r0, #14]
   1d328:	68ca      	ldr	r2, [r1, #12]
   1d32a:	7bc3      	ldrb	r3, [r0, #15]
   1d32c:	4053      	eors	r3, r2
   1d32e:	73c3      	strb	r3, [r0, #15]
}
   1d330:	4770      	bx	lr

0001d332 <shift_rows>:
{
   1d332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d334:	7802      	ldrb	r2, [r0, #0]
   1d336:	f88d 2000 	strb.w	r2, [sp]
   1d33a:	7942      	ldrb	r2, [r0, #5]
   1d33c:	f88d 2001 	strb.w	r2, [sp, #1]
   1d340:	7a82      	ldrb	r2, [r0, #10]
   1d342:	f88d 2002 	strb.w	r2, [sp, #2]
   1d346:	7bc2      	ldrb	r2, [r0, #15]
   1d348:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d34c:	7902      	ldrb	r2, [r0, #4]
   1d34e:	f88d 2004 	strb.w	r2, [sp, #4]
   1d352:	7a42      	ldrb	r2, [r0, #9]
   1d354:	f88d 2005 	strb.w	r2, [sp, #5]
   1d358:	7b82      	ldrb	r2, [r0, #14]
   1d35a:	f88d 2006 	strb.w	r2, [sp, #6]
   1d35e:	78c2      	ldrb	r2, [r0, #3]
   1d360:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d364:	7a02      	ldrb	r2, [r0, #8]
   1d366:	f88d 2008 	strb.w	r2, [sp, #8]
   1d36a:	7b42      	ldrb	r2, [r0, #13]
   1d36c:	f88d 2009 	strb.w	r2, [sp, #9]
   1d370:	7882      	ldrb	r2, [r0, #2]
   1d372:	f88d 200a 	strb.w	r2, [sp, #10]
   1d376:	79c2      	ldrb	r2, [r0, #7]
   1d378:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d37c:	7b02      	ldrb	r2, [r0, #12]
   1d37e:	f88d 200c 	strb.w	r2, [sp, #12]
   1d382:	7842      	ldrb	r2, [r0, #1]
   1d384:	7ac3      	ldrb	r3, [r0, #11]
   1d386:	f88d 200d 	strb.w	r2, [sp, #13]
   1d38a:	7982      	ldrb	r2, [r0, #6]
   1d38c:	f88d 200e 	strb.w	r2, [sp, #14]
   1d390:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d394:	2310      	movs	r3, #16
   1d396:	466a      	mov	r2, sp
   1d398:	4619      	mov	r1, r3
   1d39a:	f7ff f87b 	bl	1c494 <_copy>
}
   1d39e:	b005      	add	sp, #20
   1d3a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3a4 <mult_row_column>:
{
   1d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3a6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3a8:	7808      	ldrb	r0, [r1, #0]
{
   1d3aa:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3ac:	f7ff f881 	bl	1c4b2 <_double_byte>
   1d3b0:	4605      	mov	r5, r0
   1d3b2:	7860      	ldrb	r0, [r4, #1]
   1d3b4:	f7ff f87d 	bl	1c4b2 <_double_byte>
   1d3b8:	78a2      	ldrb	r2, [r4, #2]
   1d3ba:	7863      	ldrb	r3, [r4, #1]
   1d3bc:	4053      	eors	r3, r2
   1d3be:	78e2      	ldrb	r2, [r4, #3]
   1d3c0:	4053      	eors	r3, r2
   1d3c2:	405d      	eors	r5, r3
   1d3c4:	4045      	eors	r5, r0
   1d3c6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d3c8:	7860      	ldrb	r0, [r4, #1]
   1d3ca:	7827      	ldrb	r7, [r4, #0]
   1d3cc:	f7ff f871 	bl	1c4b2 <_double_byte>
   1d3d0:	4605      	mov	r5, r0
   1d3d2:	78a0      	ldrb	r0, [r4, #2]
   1d3d4:	f7ff f86d 	bl	1c4b2 <_double_byte>
   1d3d8:	78a3      	ldrb	r3, [r4, #2]
   1d3da:	405f      	eors	r7, r3
   1d3dc:	78e3      	ldrb	r3, [r4, #3]
   1d3de:	405f      	eors	r7, r3
   1d3e0:	407d      	eors	r5, r7
   1d3e2:	4045      	eors	r5, r0
   1d3e4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d3e6:	78a0      	ldrb	r0, [r4, #2]
   1d3e8:	7865      	ldrb	r5, [r4, #1]
   1d3ea:	7827      	ldrb	r7, [r4, #0]
   1d3ec:	f7ff f861 	bl	1c4b2 <_double_byte>
   1d3f0:	406f      	eors	r7, r5
   1d3f2:	4605      	mov	r5, r0
   1d3f4:	78e0      	ldrb	r0, [r4, #3]
   1d3f6:	f7ff f85c 	bl	1c4b2 <_double_byte>
   1d3fa:	78e3      	ldrb	r3, [r4, #3]
   1d3fc:	405f      	eors	r7, r3
   1d3fe:	407d      	eors	r5, r7
   1d400:	4045      	eors	r5, r0
   1d402:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d404:	7820      	ldrb	r0, [r4, #0]
   1d406:	f7ff f854 	bl	1c4b2 <_double_byte>
   1d40a:	7863      	ldrb	r3, [r4, #1]
   1d40c:	7825      	ldrb	r5, [r4, #0]
   1d40e:	405d      	eors	r5, r3
   1d410:	78a3      	ldrb	r3, [r4, #2]
   1d412:	405d      	eors	r5, r3
   1d414:	4045      	eors	r5, r0
   1d416:	78e0      	ldrb	r0, [r4, #3]
   1d418:	f7ff f84b 	bl	1c4b2 <_double_byte>
   1d41c:	b2ed      	uxtb	r5, r5
   1d41e:	4045      	eors	r5, r0
   1d420:	70f5      	strb	r5, [r6, #3]
}
   1d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d424 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d424:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d426:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d428:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d42a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d42e:	2b00      	cmp	r3, #0
   1d430:	bfb4      	ite	lt
   1d432:	2387      	movlt	r3, #135	; 0x87
   1d434:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d436:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d43a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d43e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d440:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d444:	d002      	beq.n	1d44c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d446:	7813      	ldrb	r3, [r2, #0]
   1d448:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d44a:	e7f4      	b.n	1d436 <gf_double+0x12>
	}
}
   1d44c:	bd10      	pop	{r4, pc}

0001d44e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d44e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d450:	b120      	cbz	r0, 1d45c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d452:	2258      	movs	r2, #88	; 0x58
   1d454:	2100      	movs	r1, #0
   1d456:	f7ff f82a 	bl	1c4ae <_set>
   1d45a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d45c:	bd08      	pop	{r3, pc}

0001d45e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d45e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d460:	4604      	mov	r4, r0
   1d462:	b188      	cbz	r0, 1d488 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d464:	2210      	movs	r2, #16
   1d466:	2100      	movs	r1, #0
   1d468:	f7ff f821 	bl	1c4ae <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d46c:	2210      	movs	r2, #16
   1d46e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d472:	2100      	movs	r1, #0
   1d474:	f7ff f81b 	bl	1c4ae <_set>
	s->leftover_offset = 0;
   1d478:	2300      	movs	r3, #0
   1d47a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d47c:	2200      	movs	r2, #0
   1d47e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d482:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d486:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d488:	bd10      	pop	{r4, pc}

0001d48a <tc_cmac_setup>:
{
   1d48a:	b570      	push	{r4, r5, r6, lr}
   1d48c:	460d      	mov	r5, r1
   1d48e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d490:	4604      	mov	r4, r0
   1d492:	b310      	cbz	r0, 1d4da <tc_cmac_setup+0x50>
   1d494:	b311      	cbz	r1, 1d4dc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d496:	2258      	movs	r2, #88	; 0x58
   1d498:	2100      	movs	r1, #0
   1d49a:	f7ff f808 	bl	1c4ae <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d49e:	4629      	mov	r1, r5
	s->sched = sched;
   1d4a0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d4a2:	4630      	mov	r0, r6
   1d4a4:	f7e6 fb98 	bl	3bd8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d4a8:	2210      	movs	r2, #16
   1d4aa:	2100      	movs	r1, #0
   1d4ac:	4620      	mov	r0, r4
   1d4ae:	f7fe fffe 	bl	1c4ae <_set>
	gf_double (s->K1, s->iv);
   1d4b2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d4b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d4b8:	4621      	mov	r1, r4
   1d4ba:	4620      	mov	r0, r4
   1d4bc:	f7e6 fbde 	bl	3c7c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d4c0:	4621      	mov	r1, r4
   1d4c2:	4628      	mov	r0, r5
   1d4c4:	f7ff ffae 	bl	1d424 <gf_double>
	gf_double (s->K2, s->K1);
   1d4c8:	4629      	mov	r1, r5
   1d4ca:	f104 0020 	add.w	r0, r4, #32
   1d4ce:	f7ff ffa9 	bl	1d424 <gf_double>
	tc_cmac_init(s);
   1d4d2:	4620      	mov	r0, r4
   1d4d4:	f7ff ffc3 	bl	1d45e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d4d8:	2001      	movs	r0, #1
}
   1d4da:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d4dc:	4608      	mov	r0, r1
   1d4de:	e7fc      	b.n	1d4da <tc_cmac_setup+0x50>

0001d4e0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4e4:	460d      	mov	r5, r1
   1d4e6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d4e8:	4604      	mov	r4, r0
   1d4ea:	2800      	cmp	r0, #0
   1d4ec:	d062      	beq.n	1d5b4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d4ee:	b912      	cbnz	r2, 1d4f6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d4f0:	2001      	movs	r0, #1
}
   1d4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d4f6:	2900      	cmp	r1, #0
   1d4f8:	d05c      	beq.n	1d5b4 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1d4fa:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1d4fe:	ea50 0301 	orrs.w	r3, r0, r1
   1d502:	d057      	beq.n	1d5b4 <tc_cmac_update+0xd4>
	s->countdown--;
   1d504:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1d508:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1d50c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1d510:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d514:	f1b8 0f00 	cmp.w	r8, #0
   1d518:	d02a      	beq.n	1d570 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d51a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1d51e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1d522:	42be      	cmp	r6, r7
   1d524:	4420      	add	r0, r4
   1d526:	d208      	bcs.n	1d53a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d528:	462a      	mov	r2, r5
   1d52a:	4633      	mov	r3, r6
   1d52c:	4631      	mov	r1, r6
   1d52e:	f7fe ffb1 	bl	1c494 <_copy>
			s->leftover_offset += data_length;
   1d532:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d534:	4432      	add	r2, r6
   1d536:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d538:	e7da      	b.n	1d4f0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d53a:	463b      	mov	r3, r7
   1d53c:	462a      	mov	r2, r5
   1d53e:	4639      	mov	r1, r7
   1d540:	f7fe ffa8 	bl	1c494 <_copy>
		data_length -= remaining_space;
   1d544:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d546:	2300      	movs	r3, #0
   1d548:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d54a:	4446      	add	r6, r8
		data += remaining_space;
   1d54c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d54e:	1e63      	subs	r3, r4, #1
   1d550:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d554:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d558:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d55c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d55e:	ea82 0200 	eor.w	r2, r2, r0
   1d562:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d564:	d1f6      	bne.n	1d554 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d566:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d568:	4621      	mov	r1, r4
   1d56a:	4620      	mov	r0, r4
   1d56c:	f7e6 fb86 	bl	3c7c <tc_aes_encrypt>
   1d570:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d574:	2e10      	cmp	r6, #16
   1d576:	d80a      	bhi.n	1d58e <tc_cmac_update+0xae>
	if (data_length > 0) {
   1d578:	2e00      	cmp	r6, #0
   1d57a:	d0b9      	beq.n	1d4f0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d57c:	4633      	mov	r3, r6
   1d57e:	462a      	mov	r2, r5
   1d580:	4631      	mov	r1, r6
   1d582:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d586:	f7fe ff85 	bl	1c494 <_copy>
		s->leftover_offset = data_length;
   1d58a:	6466      	str	r6, [r4, #68]	; 0x44
   1d58c:	e7b0      	b.n	1d4f0 <tc_cmac_update+0x10>
   1d58e:	1e63      	subs	r3, r4, #1
   1d590:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d592:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d596:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d59a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d59c:	ea82 0200 	eor.w	r2, r2, r0
   1d5a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5a2:	d1f6      	bne.n	1d592 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d5a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d5a6:	4621      	mov	r1, r4
   1d5a8:	4620      	mov	r0, r4
   1d5aa:	f7e6 fb67 	bl	3c7c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d5ae:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d5b0:	3e10      	subs	r6, #16
   1d5b2:	e7df      	b.n	1d574 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1d5b4:	2000      	movs	r0, #0
   1d5b6:	e79c      	b.n	1d4f2 <tc_cmac_update+0x12>

0001d5b8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d5b8:	b570      	push	{r4, r5, r6, lr}
   1d5ba:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d5bc:	4605      	mov	r5, r0
   1d5be:	b1e8      	cbz	r0, 1d5fc <tc_cmac_final+0x44>
   1d5c0:	b369      	cbz	r1, 1d61e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d5c2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d5c4:	2a10      	cmp	r2, #16
   1d5c6:	d11a      	bne.n	1d5fe <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d5c8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5ca:	1e63      	subs	r3, r4, #1
   1d5cc:	3901      	subs	r1, #1
   1d5ce:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d5d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d5d6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d5da:	4072      	eors	r2, r6
   1d5dc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5e0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d5e2:	ea82 0206 	eor.w	r2, r2, r6
   1d5e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5e8:	d1f3      	bne.n	1d5d2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d5ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d5ec:	4621      	mov	r1, r4
   1d5ee:	4628      	mov	r0, r5
   1d5f0:	f7e6 fb44 	bl	3c7c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d5f4:	4620      	mov	r0, r4
   1d5f6:	f7ff ff2a 	bl	1d44e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d5fa:	2001      	movs	r0, #1
}
   1d5fc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d5fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d602:	2100      	movs	r1, #0
   1d604:	f1c2 0210 	rsb	r2, r2, #16
   1d608:	4420      	add	r0, r4
   1d60a:	f7fe ff50 	bl	1c4ae <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d60e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d610:	4423      	add	r3, r4
   1d612:	2280      	movs	r2, #128	; 0x80
   1d614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d618:	f104 0120 	add.w	r1, r4, #32
   1d61c:	e7d5      	b.n	1d5ca <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d61e:	4608      	mov	r0, r1
   1d620:	e7ec      	b.n	1d5fc <tc_cmac_final+0x44>

0001d622 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1d622:	2300      	movs	r3, #0
	list->head = NULL;
   1d624:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d628:	4770      	bx	lr

0001d62a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1d62a:	6803      	ldr	r3, [r0, #0]
   1d62c:	b923      	cbnz	r3, 1d638 <log_list_add_tail+0xe>
		list->head = msg;
   1d62e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1d630:	2300      	movs	r3, #0
	list->tail = msg;
   1d632:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1d634:	600b      	str	r3, [r1, #0]
}
   1d636:	4770      	bx	lr
		list->tail->next = msg;
   1d638:	6843      	ldr	r3, [r0, #4]
   1d63a:	6019      	str	r1, [r3, #0]
   1d63c:	e7f8      	b.n	1d630 <log_list_add_tail+0x6>

0001d63e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1d63e:	6800      	ldr	r0, [r0, #0]
   1d640:	4770      	bx	lr

0001d642 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1d642:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1d644:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1d646:	b108      	cbz	r0, 1d64c <log_list_head_get+0xa>
		list->head = list->head->next;
   1d648:	6802      	ldr	r2, [r0, #0]
   1d64a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1d64c:	4770      	bx	lr

0001d64e <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1d64e:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d650:	f7e6 fe30 	bl	42b4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1d654:	b118      	cbz	r0, 1d65e <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1d656:	2301      	movs	r3, #1
   1d658:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d65a:	2300      	movs	r3, #0
   1d65c:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1d65e:	bd08      	pop	{r3, pc}

0001d660 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1d660:	f7e8 b90e 	b.w	5880 <z_timer_cycle_get_32>

0001d664 <dummy_timestamp>:
   1d664:	2000      	movs	r0, #0
   1d666:	4770      	bx	lr

0001d668 <z_log_get_s_mask>:
{
   1d668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d66a:	4605      	mov	r5, r0
	u32_t mask = 0;
   1d66c:	2000      	movs	r0, #0
	u32_t arg = 0;
   1d66e:	4603      	mov	r3, r0
	bool arm = false;
   1d670:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1d672:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1d674:	f815 4b01 	ldrb.w	r4, [r5], #1
   1d678:	b10c      	cbz	r4, 1d67e <z_log_get_s_mask+0x16>
   1d67a:	428b      	cmp	r3, r1
   1d67c:	d300      	bcc.n	1d680 <z_log_get_s_mask+0x18>
}
   1d67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1d680:	2c25      	cmp	r4, #37	; 0x25
   1d682:	d102      	bne.n	1d68a <z_log_get_s_mask+0x22>
			arm = !arm;
   1d684:	f082 0201 	eor.w	r2, r2, #1
   1d688:	e7f4      	b.n	1d674 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1d68a:	2a00      	cmp	r2, #0
   1d68c:	d0f2      	beq.n	1d674 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d68e:	f044 0620 	orr.w	r6, r4, #32
   1d692:	3e61      	subs	r6, #97	; 0x61
   1d694:	2e19      	cmp	r6, #25
   1d696:	d8ed      	bhi.n	1d674 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1d698:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1d69a:	bf04      	itt	eq
   1d69c:	fa07 f203 	lsleq.w	r2, r7, r3
   1d6a0:	4310      	orreq	r0, r2
			arg++;
   1d6a2:	3301      	adds	r3, #1
			arm = false;
   1d6a4:	2200      	movs	r2, #0
   1d6a6:	e7e5      	b.n	1d674 <z_log_get_s_mask+0xc>

0001d6a8 <log_0>:
{
   1d6a8:	b538      	push	{r3, r4, r5, lr}
   1d6aa:	4605      	mov	r5, r0
   1d6ac:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1d6ae:	f7ff ffce 	bl	1d64e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d6b2:	b128      	cbz	r0, 1d6c0 <log_0+0x18>
		msg->str = str;
   1d6b4:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1d6b6:	4621      	mov	r1, r4
}
   1d6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1d6bc:	f7e6 bd1c 	b.w	40f8 <msg_finalize>
}
   1d6c0:	bd38      	pop	{r3, r4, r5, pc}

0001d6c2 <log_1>:
{
   1d6c2:	b570      	push	{r4, r5, r6, lr}
   1d6c4:	4606      	mov	r6, r0
   1d6c6:	460d      	mov	r5, r1
   1d6c8:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d6ca:	f7ff ffc0 	bl	1d64e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d6ce:	b158      	cbz	r0, 1d6e8 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1d6d0:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1d6d2:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1d6d4:	2101      	movs	r1, #1
   1d6d6:	f361 1207 	bfi	r2, r1, #4, #4
   1d6da:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1d6dc:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1d6de:	4621      	mov	r1, r4
}
   1d6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1d6e4:	f7e6 bd08 	b.w	40f8 <msg_finalize>
}
   1d6e8:	bd70      	pop	{r4, r5, r6, pc}

0001d6ea <log_2>:
{
   1d6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6ee:	4680      	mov	r8, r0
   1d6f0:	460f      	mov	r7, r1
   1d6f2:	4616      	mov	r6, r2
   1d6f4:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d6f6:	f7ff ffaa 	bl	1d64e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d6fa:	b168      	cbz	r0, 1d718 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1d6fc:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d6fe:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1d702:	2202      	movs	r2, #2
   1d704:	f362 1307 	bfi	r3, r2, #4, #4
   1d708:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1d70a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1d70e:	4629      	mov	r1, r5
}
   1d710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1d714:	f7e6 bcf0 	b.w	40f8 <msg_finalize>
}
   1d718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d71c <log_3>:
{
   1d71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d720:	4680      	mov	r8, r0
   1d722:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1d726:	460f      	mov	r7, r1
   1d728:	4616      	mov	r6, r2
   1d72a:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d72c:	f7ff ff8f 	bl	1d64e <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d730:	b170      	cbz	r0, 1d750 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1d732:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d734:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1d738:	2203      	movs	r2, #3
   1d73a:	f362 1307 	bfi	r3, r2, #4, #4
   1d73e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1d740:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1d744:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1d746:	4649      	mov	r1, r9
}
   1d748:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1d74c:	f7e6 bcd4 	b.w	40f8 <msg_finalize>
}
   1d750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d754 <log_n>:
{
   1d754:	b510      	push	{r4, lr}
   1d756:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1d758:	f000 f89f 	bl	1d89a <log_msg_create_n>
		if (msg == NULL) {
   1d75c:	b120      	cbz	r0, 1d768 <log_n+0x14>
		msg_finalize(msg, src_level);
   1d75e:	4621      	mov	r1, r4
}
   1d760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1d764:	f7e6 bcc8 	b.w	40f8 <msg_finalize>
}
   1d768:	bd10      	pop	{r4, pc}

0001d76a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1d76a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d76e:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1d770:	8903      	ldrh	r3, [r0, #8]
{
   1d772:	f89d 8020 	ldrb.w	r8, [sp, #32]
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1d776:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1d77a:	460e      	mov	r6, r1
   1d77c:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
   1d77e:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1d782:	d303      	bcc.n	1d78c <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1d784:	2300      	movs	r3, #0
   1d786:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1d788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1d78c:	680b      	ldr	r3, [r1, #0]
   1d78e:	4423      	add	r3, r4
   1d790:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1d792:	bf84      	itt	hi
   1d794:	1b13      	subhi	r3, r2, r4
   1d796:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d798:	2a0c      	cmp	r2, #12
	req_len = *length;
   1d79a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d79e:	d929      	bls.n	1d7f4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1d7a0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1d7a2:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1d7a4:	d82c      	bhi.n	1d800 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   1d7a6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d7a8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d7aa:	454a      	cmp	r2, r9
   1d7ac:	bf28      	it	cs
   1d7ae:	464a      	movcs	r2, r9
   1d7b0:	4615      	mov	r5, r2
		if (put_op) {
   1d7b2:	4420      	add	r0, r4
   1d7b4:	f1b8 0f00 	cmp.w	r8, #0
   1d7b8:	d01f      	beq.n	1d7fa <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1d7ba:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1d7bc:	f000 fe94 	bl	1e4e8 <memcpy>
		req_len -= cpy_len;
   1d7c0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1d7c4:	442e      	add	r6, r5
	while (req_len > 0) {
   1d7c6:	f1b9 0f00 	cmp.w	r9, #0
   1d7ca:	d0dd      	beq.n	1d788 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1d7cc:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d7d0:	454d      	cmp	r5, r9
   1d7d2:	bf28      	it	cs
   1d7d4:	464d      	movcs	r5, r9
		if (put_op) {
   1d7d6:	1d20      	adds	r0, r4, #4
   1d7d8:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1d7da:	462a      	mov	r2, r5
		if (put_op) {
   1d7dc:	f1b8 0f00 	cmp.w	r8, #0
   1d7e0:	d014      	beq.n	1d80c <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   1d7e2:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1d7e4:	f000 fe80 	bl	1e4e8 <memcpy>
		req_len -= cpy_len;
   1d7e8:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1d7ec:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1d7ee:	442e      	add	r6, r5
		offset = 0;
   1d7f0:	2400      	movs	r4, #0
   1d7f2:	e7e8      	b.n	1d7c6 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1d7f4:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1d7f6:	2700      	movs	r7, #0
   1d7f8:	e7d7      	b.n	1d7aa <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1d7fa:	4601      	mov	r1, r0
   1d7fc:	4630      	mov	r0, r6
   1d7fe:	e7dd      	b.n	1d7bc <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1d800:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1d802:	2c1b      	cmp	r4, #27
   1d804:	d9df      	bls.n	1d7c6 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1d806:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1d808:	3c1c      	subs	r4, #28
   1d80a:	e7fa      	b.n	1d802 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1d80c:	4601      	mov	r1, r0
   1d80e:	4630      	mov	r0, r6
   1d810:	e7e8      	b.n	1d7e4 <log_msg_hexdump_data_op+0x7a>

0001d812 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d812:	3004      	adds	r0, #4
   1d814:	f3bf 8f5b 	dmb	ish
   1d818:	e850 3f00 	ldrex	r3, [r0]
   1d81c:	3301      	adds	r3, #1
   1d81e:	e840 3200 	strex	r2, r3, [r0]
   1d822:	2a00      	cmp	r2, #0
   1d824:	d1f8      	bne.n	1d818 <log_msg_get+0x6>
   1d826:	f3bf 8f5b 	dmb	ish
}
   1d82a:	4770      	bx	lr

0001d82c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1d82c:	7a40      	ldrb	r0, [r0, #9]
}
   1d82e:	0900      	lsrs	r0, r0, #4
   1d830:	4770      	bx	lr

0001d832 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1d832:	7a43      	ldrb	r3, [r0, #9]
   1d834:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1d838:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1d83c:	d216      	bcs.n	1d86c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d83e:	2a03      	cmp	r2, #3
   1d840:	d803      	bhi.n	1d84a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1d842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d846:	6948      	ldr	r0, [r1, #20]
   1d848:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1d84a:	2901      	cmp	r1, #1
   1d84c:	d803      	bhi.n	1d856 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1d84e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d852:	6988      	ldr	r0, [r1, #24]
   1d854:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1d856:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d858:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1d85a:	2906      	cmp	r1, #6
   1d85c:	d803      	bhi.n	1d866 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1d85e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1d862:	6848      	ldr	r0, [r1, #4]
   1d864:	4770      	bx	lr
		cont = cont->next;
   1d866:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1d868:	3907      	subs	r1, #7
		cont = cont->next;
   1d86a:	e7f6      	b.n	1d85a <log_msg_arg_get+0x28>
		return 0;
   1d86c:	2000      	movs	r0, #0
}
   1d86e:	4770      	bx	lr

0001d870 <log_msg_put>:
{
   1d870:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d872:	1d02      	adds	r2, r0, #4
   1d874:	f3bf 8f5b 	dmb	ish
   1d878:	e852 1f00 	ldrex	r1, [r2]
   1d87c:	3901      	subs	r1, #1
   1d87e:	e842 1c00 	strex	ip, r1, [r2]
   1d882:	f1bc 0f00 	cmp.w	ip, #0
   1d886:	d1f7      	bne.n	1d878 <log_msg_put+0x8>
   1d888:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1d88c:	685b      	ldr	r3, [r3, #4]
   1d88e:	b90b      	cbnz	r3, 1d894 <log_msg_put+0x24>
		msg_free(msg);
   1d890:	f7e6 bd22 	b.w	42d8 <msg_free>
}
   1d894:	4770      	bx	lr

0001d896 <log_msg_str_get>:
}
   1d896:	6900      	ldr	r0, [r0, #16]
   1d898:	4770      	bx	lr

0001d89a <log_msg_create_n>:
{
   1d89a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d89e:	4681      	mov	r9, r0
   1d8a0:	4688      	mov	r8, r1
   1d8a2:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d8a4:	f7e6 fd06 	bl	42b4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1d8a8:	4604      	mov	r4, r0
   1d8aa:	b330      	cbz	r0, 1d8fa <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1d8ac:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1d8ae:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d8b0:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1d8b2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d8b4:	8107      	strh	r7, [r0, #8]
   1d8b6:	d909      	bls.n	1d8cc <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1d8b8:	2202      	movs	r2, #2
   1d8ba:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d8bc:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1d8c0:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1d8c4:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1d8c6:	f1ba 0f00 	cmp.w	sl, #0
   1d8ca:	dc0e      	bgt.n	1d8ea <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1d8cc:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1d8ce:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1d8d2:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d8d6:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1d8d8:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d8da:	d818      	bhi.n	1d90e <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1d8dc:	00aa      	lsls	r2, r5, #2
   1d8de:	4641      	mov	r1, r8
   1d8e0:	f104 0014 	add.w	r0, r4, #20
   1d8e4:	f000 fe00 	bl	1e4e8 <memcpy>
	while (nargs != 0U) {
   1d8e8:	e007      	b.n	1d8fa <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d8ea:	f7e6 fce3 	bl	42b4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d8ee:	4606      	mov	r6, r0
   1d8f0:	b930      	cbnz	r0, 1d900 <log_msg_create_n+0x66>
			msg_free(msg);
   1d8f2:	4620      	mov	r0, r4
   1d8f4:	f7e6 fcf0 	bl	42d8 <msg_free>
			return NULL;
   1d8f8:	4634      	mov	r4, r6
}
   1d8fa:	4620      	mov	r0, r4
   1d8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1d900:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1d904:	f1aa 0a07 	sub.w	sl, sl, #7
   1d908:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1d90a:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1d90c:	e7db      	b.n	1d8c6 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1d90e:	4641      	mov	r1, r8
   1d910:	2208      	movs	r2, #8
   1d912:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1d916:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1d918:	f000 fde6 	bl	1e4e8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d91c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1d91e:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1d922:	2d07      	cmp	r5, #7
   1d924:	462e      	mov	r6, r5
   1d926:	bf28      	it	cs
   1d928:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1d92a:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1d92e:	4641      	mov	r1, r8
   1d930:	1d38      	adds	r0, r7, #4
   1d932:	464a      	mov	r2, r9
   1d934:	f000 fdd8 	bl	1e4e8 <memcpy>
	while (nargs != 0U) {
   1d938:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1d93a:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1d93c:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1d93e:	d1f0      	bne.n	1d922 <log_msg_create_n+0x88>
   1d940:	e7db      	b.n	1d8fa <log_msg_create_n+0x60>

0001d942 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1d942:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1d944:	2400      	movs	r4, #0
   1d946:	9400      	str	r4, [sp, #0]
   1d948:	f7ff ff0f 	bl	1d76a <log_msg_hexdump_data_op>
}
   1d94c:	b002      	add	sp, #8
   1d94e:	bd10      	pop	{r4, pc}

0001d950 <buffer_write>:
{
   1d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d952:	4606      	mov	r6, r0
   1d954:	460d      	mov	r5, r1
   1d956:	4614      	mov	r4, r2
   1d958:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1d95a:	4621      	mov	r1, r4
   1d95c:	4628      	mov	r0, r5
   1d95e:	463a      	mov	r2, r7
   1d960:	47b0      	blx	r6
	} while (len != 0);
   1d962:	1a24      	subs	r4, r4, r0
		buf += processed;
   1d964:	4405      	add	r5, r0
	} while (len != 0);
   1d966:	d1f8      	bne.n	1d95a <buffer_write+0xa>
}
   1d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d96a <std_print>:
{
   1d96a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d96e:	b08e      	sub	sp, #56	; 0x38
   1d970:	af0e      	add	r7, sp, #56	; 0x38
   1d972:	4680      	mov	r8, r0
   1d974:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1d976:	f7ff ff8e 	bl	1d896 <log_msg_str_get>
   1d97a:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1d97c:	4640      	mov	r0, r8
   1d97e:	f7ff ff55 	bl	1d82c <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1d982:	0083      	lsls	r3, r0, #2
   1d984:	3307      	adds	r3, #7
   1d986:	f023 0307 	bic.w	r3, r3, #7
   1d98a:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   1d98e:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1d990:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1d992:	f04f 0900 	mov.w	r9, #0
   1d996:	45d1      	cmp	r9, sl
   1d998:	d116      	bne.n	1d9c8 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1d99a:	4640      	mov	r0, r8
   1d99c:	f7ff ff46 	bl	1d82c <log_msg_nargs_get>
   1d9a0:	280f      	cmp	r0, #15
   1d9a2:	d81e      	bhi.n	1d9e2 <std_print+0x78>
   1d9a4:	e8df f010 	tbh	[pc, r0, lsl #1]
   1d9a8:	00200019 	.word	0x00200019
   1d9ac:	002d0026 	.word	0x002d0026
   1d9b0:	00410036 	.word	0x00410036
   1d9b4:	005d004e 	.word	0x005d004e
   1d9b8:	0081006e 	.word	0x0081006e
   1d9bc:	00ad0096 	.word	0x00ad0096
   1d9c0:	00e100c6 	.word	0x00e100c6
   1d9c4:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1d9c8:	4649      	mov	r1, r9
   1d9ca:	4640      	mov	r0, r8
   1d9cc:	f7ff ff31 	bl	1d832 <log_msg_arg_get>
   1d9d0:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1d9d4:	f109 0901 	add.w	r9, r9, #1
   1d9d8:	e7dd      	b.n	1d996 <std_print+0x2c>
		print_formatted(log_output, str);
   1d9da:	4631      	mov	r1, r6
   1d9dc:	4628      	mov	r0, r5
   1d9de:	f7e6 fcbd 	bl	435c <print_formatted>
}
   1d9e2:	46bd      	mov	sp, r7
   1d9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1d9e8:	6822      	ldr	r2, [r4, #0]
   1d9ea:	4631      	mov	r1, r6
   1d9ec:	4628      	mov	r0, r5
   1d9ee:	f7e6 fcb5 	bl	435c <print_formatted>
		break;
   1d9f2:	e7f6      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1d9f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d9f8:	4631      	mov	r1, r6
   1d9fa:	4628      	mov	r0, r5
   1d9fc:	f7e6 fcae 	bl	435c <print_formatted>
		break;
   1da00:	e7ef      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1da02:	68a3      	ldr	r3, [r4, #8]
   1da04:	9300      	str	r3, [sp, #0]
   1da06:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da0a:	4631      	mov	r1, r6
   1da0c:	4628      	mov	r0, r5
   1da0e:	f7e6 fca5 	bl	435c <print_formatted>
		break;
   1da12:	e7e6      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1da14:	68e3      	ldr	r3, [r4, #12]
   1da16:	9301      	str	r3, [sp, #4]
   1da18:	68a3      	ldr	r3, [r4, #8]
   1da1a:	9300      	str	r3, [sp, #0]
   1da1c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da20:	4631      	mov	r1, r6
   1da22:	4628      	mov	r0, r5
   1da24:	f7e6 fc9a 	bl	435c <print_formatted>
		break;
   1da28:	e7db      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1da2a:	6923      	ldr	r3, [r4, #16]
   1da2c:	9302      	str	r3, [sp, #8]
   1da2e:	68e3      	ldr	r3, [r4, #12]
   1da30:	9301      	str	r3, [sp, #4]
   1da32:	68a3      	ldr	r3, [r4, #8]
   1da34:	9300      	str	r3, [sp, #0]
   1da36:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da3a:	4631      	mov	r1, r6
   1da3c:	4628      	mov	r0, r5
   1da3e:	f7e6 fc8d 	bl	435c <print_formatted>
		break;
   1da42:	e7ce      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1da44:	6963      	ldr	r3, [r4, #20]
   1da46:	9303      	str	r3, [sp, #12]
   1da48:	6923      	ldr	r3, [r4, #16]
   1da4a:	9302      	str	r3, [sp, #8]
   1da4c:	68e3      	ldr	r3, [r4, #12]
   1da4e:	9301      	str	r3, [sp, #4]
   1da50:	68a3      	ldr	r3, [r4, #8]
   1da52:	9300      	str	r3, [sp, #0]
   1da54:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da58:	4631      	mov	r1, r6
   1da5a:	4628      	mov	r0, r5
   1da5c:	f7e6 fc7e 	bl	435c <print_formatted>
		break;
   1da60:	e7bf      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1da62:	69a3      	ldr	r3, [r4, #24]
   1da64:	9304      	str	r3, [sp, #16]
   1da66:	6963      	ldr	r3, [r4, #20]
   1da68:	9303      	str	r3, [sp, #12]
   1da6a:	6923      	ldr	r3, [r4, #16]
   1da6c:	9302      	str	r3, [sp, #8]
   1da6e:	68e3      	ldr	r3, [r4, #12]
   1da70:	9301      	str	r3, [sp, #4]
   1da72:	68a3      	ldr	r3, [r4, #8]
   1da74:	9300      	str	r3, [sp, #0]
   1da76:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da7a:	4631      	mov	r1, r6
   1da7c:	4628      	mov	r0, r5
   1da7e:	f7e6 fc6d 	bl	435c <print_formatted>
		break;
   1da82:	e7ae      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1da84:	69e3      	ldr	r3, [r4, #28]
   1da86:	9305      	str	r3, [sp, #20]
   1da88:	69a3      	ldr	r3, [r4, #24]
   1da8a:	9304      	str	r3, [sp, #16]
   1da8c:	6963      	ldr	r3, [r4, #20]
   1da8e:	9303      	str	r3, [sp, #12]
   1da90:	6923      	ldr	r3, [r4, #16]
   1da92:	9302      	str	r3, [sp, #8]
   1da94:	68e3      	ldr	r3, [r4, #12]
   1da96:	9301      	str	r3, [sp, #4]
   1da98:	68a3      	ldr	r3, [r4, #8]
   1da9a:	9300      	str	r3, [sp, #0]
   1da9c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1daa0:	4631      	mov	r1, r6
   1daa2:	4628      	mov	r0, r5
   1daa4:	f7e6 fc5a 	bl	435c <print_formatted>
		break;
   1daa8:	e79b      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1daaa:	6a23      	ldr	r3, [r4, #32]
   1daac:	9306      	str	r3, [sp, #24]
   1daae:	69e3      	ldr	r3, [r4, #28]
   1dab0:	9305      	str	r3, [sp, #20]
   1dab2:	69a3      	ldr	r3, [r4, #24]
   1dab4:	9304      	str	r3, [sp, #16]
   1dab6:	6963      	ldr	r3, [r4, #20]
   1dab8:	9303      	str	r3, [sp, #12]
   1daba:	6923      	ldr	r3, [r4, #16]
   1dabc:	9302      	str	r3, [sp, #8]
   1dabe:	68e3      	ldr	r3, [r4, #12]
   1dac0:	9301      	str	r3, [sp, #4]
   1dac2:	68a3      	ldr	r3, [r4, #8]
   1dac4:	9300      	str	r3, [sp, #0]
   1dac6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1daca:	4631      	mov	r1, r6
   1dacc:	4628      	mov	r0, r5
   1dace:	f7e6 fc45 	bl	435c <print_formatted>
		break;
   1dad2:	e786      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dad6:	9307      	str	r3, [sp, #28]
   1dad8:	6a23      	ldr	r3, [r4, #32]
   1dada:	9306      	str	r3, [sp, #24]
   1dadc:	69e3      	ldr	r3, [r4, #28]
   1dade:	9305      	str	r3, [sp, #20]
   1dae0:	69a3      	ldr	r3, [r4, #24]
   1dae2:	9304      	str	r3, [sp, #16]
   1dae4:	6963      	ldr	r3, [r4, #20]
   1dae6:	9303      	str	r3, [sp, #12]
   1dae8:	6923      	ldr	r3, [r4, #16]
   1daea:	9302      	str	r3, [sp, #8]
   1daec:	68e3      	ldr	r3, [r4, #12]
   1daee:	9301      	str	r3, [sp, #4]
   1daf0:	68a3      	ldr	r3, [r4, #8]
   1daf2:	9300      	str	r3, [sp, #0]
   1daf4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1daf8:	4631      	mov	r1, r6
   1dafa:	4628      	mov	r0, r5
   1dafc:	f7e6 fc2e 	bl	435c <print_formatted>
		break;
   1db00:	e76f      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1db02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db04:	9308      	str	r3, [sp, #32]
   1db06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1db08:	9307      	str	r3, [sp, #28]
   1db0a:	6a23      	ldr	r3, [r4, #32]
   1db0c:	9306      	str	r3, [sp, #24]
   1db0e:	69e3      	ldr	r3, [r4, #28]
   1db10:	9305      	str	r3, [sp, #20]
   1db12:	69a3      	ldr	r3, [r4, #24]
   1db14:	9304      	str	r3, [sp, #16]
   1db16:	6963      	ldr	r3, [r4, #20]
   1db18:	9303      	str	r3, [sp, #12]
   1db1a:	6923      	ldr	r3, [r4, #16]
   1db1c:	9302      	str	r3, [sp, #8]
   1db1e:	68e3      	ldr	r3, [r4, #12]
   1db20:	9301      	str	r3, [sp, #4]
   1db22:	68a3      	ldr	r3, [r4, #8]
   1db24:	9300      	str	r3, [sp, #0]
   1db26:	e9d4 2300 	ldrd	r2, r3, [r4]
   1db2a:	4631      	mov	r1, r6
   1db2c:	4628      	mov	r0, r5
   1db2e:	f7e6 fc15 	bl	435c <print_formatted>
		break;
   1db32:	e756      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1db34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1db36:	9309      	str	r3, [sp, #36]	; 0x24
   1db38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db3a:	9308      	str	r3, [sp, #32]
   1db3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1db3e:	9307      	str	r3, [sp, #28]
   1db40:	6a23      	ldr	r3, [r4, #32]
   1db42:	9306      	str	r3, [sp, #24]
   1db44:	69e3      	ldr	r3, [r4, #28]
   1db46:	9305      	str	r3, [sp, #20]
   1db48:	69a3      	ldr	r3, [r4, #24]
   1db4a:	9304      	str	r3, [sp, #16]
   1db4c:	6963      	ldr	r3, [r4, #20]
   1db4e:	9303      	str	r3, [sp, #12]
   1db50:	6923      	ldr	r3, [r4, #16]
   1db52:	9302      	str	r3, [sp, #8]
   1db54:	68e3      	ldr	r3, [r4, #12]
   1db56:	9301      	str	r3, [sp, #4]
   1db58:	68a3      	ldr	r3, [r4, #8]
   1db5a:	9300      	str	r3, [sp, #0]
   1db5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1db60:	4631      	mov	r1, r6
   1db62:	4628      	mov	r0, r5
   1db64:	f7e6 fbfa 	bl	435c <print_formatted>
		break;
   1db68:	e73b      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1db6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1db6c:	930a      	str	r3, [sp, #40]	; 0x28
   1db6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1db70:	9309      	str	r3, [sp, #36]	; 0x24
   1db72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db74:	9308      	str	r3, [sp, #32]
   1db76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1db78:	9307      	str	r3, [sp, #28]
   1db7a:	6a23      	ldr	r3, [r4, #32]
   1db7c:	9306      	str	r3, [sp, #24]
   1db7e:	69e3      	ldr	r3, [r4, #28]
   1db80:	9305      	str	r3, [sp, #20]
   1db82:	69a3      	ldr	r3, [r4, #24]
   1db84:	9304      	str	r3, [sp, #16]
   1db86:	6963      	ldr	r3, [r4, #20]
   1db88:	9303      	str	r3, [sp, #12]
   1db8a:	6923      	ldr	r3, [r4, #16]
   1db8c:	9302      	str	r3, [sp, #8]
   1db8e:	68e3      	ldr	r3, [r4, #12]
   1db90:	9301      	str	r3, [sp, #4]
   1db92:	68a3      	ldr	r3, [r4, #8]
   1db94:	9300      	str	r3, [sp, #0]
   1db96:	e9d4 2300 	ldrd	r2, r3, [r4]
   1db9a:	4631      	mov	r1, r6
   1db9c:	4628      	mov	r0, r5
   1db9e:	f7e6 fbdd 	bl	435c <print_formatted>
		break;
   1dba2:	e71e      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dba6:	930b      	str	r3, [sp, #44]	; 0x2c
   1dba8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dbaa:	930a      	str	r3, [sp, #40]	; 0x28
   1dbac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dbae:	9309      	str	r3, [sp, #36]	; 0x24
   1dbb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dbb2:	9308      	str	r3, [sp, #32]
   1dbb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dbb6:	9307      	str	r3, [sp, #28]
   1dbb8:	6a23      	ldr	r3, [r4, #32]
   1dbba:	9306      	str	r3, [sp, #24]
   1dbbc:	69e3      	ldr	r3, [r4, #28]
   1dbbe:	9305      	str	r3, [sp, #20]
   1dbc0:	69a3      	ldr	r3, [r4, #24]
   1dbc2:	9304      	str	r3, [sp, #16]
   1dbc4:	6963      	ldr	r3, [r4, #20]
   1dbc6:	9303      	str	r3, [sp, #12]
   1dbc8:	6923      	ldr	r3, [r4, #16]
   1dbca:	9302      	str	r3, [sp, #8]
   1dbcc:	68e3      	ldr	r3, [r4, #12]
   1dbce:	9301      	str	r3, [sp, #4]
   1dbd0:	68a3      	ldr	r3, [r4, #8]
   1dbd2:	9300      	str	r3, [sp, #0]
   1dbd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dbd8:	4631      	mov	r1, r6
   1dbda:	4628      	mov	r0, r5
   1dbdc:	f7e6 fbbe 	bl	435c <print_formatted>
		break;
   1dbe0:	e6ff      	b.n	1d9e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dbe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1dbe4:	930c      	str	r3, [sp, #48]	; 0x30
   1dbe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dbe8:	930b      	str	r3, [sp, #44]	; 0x2c
   1dbea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dbec:	930a      	str	r3, [sp, #40]	; 0x28
   1dbee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dbf0:	9309      	str	r3, [sp, #36]	; 0x24
   1dbf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dbf4:	9308      	str	r3, [sp, #32]
   1dbf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dbf8:	9307      	str	r3, [sp, #28]
   1dbfa:	6a23      	ldr	r3, [r4, #32]
   1dbfc:	9306      	str	r3, [sp, #24]
   1dbfe:	69e3      	ldr	r3, [r4, #28]
   1dc00:	9305      	str	r3, [sp, #20]
   1dc02:	69a3      	ldr	r3, [r4, #24]
   1dc04:	9304      	str	r3, [sp, #16]
   1dc06:	6963      	ldr	r3, [r4, #20]
   1dc08:	9303      	str	r3, [sp, #12]
   1dc0a:	6923      	ldr	r3, [r4, #16]
   1dc0c:	9302      	str	r3, [sp, #8]
   1dc0e:	68e3      	ldr	r3, [r4, #12]
   1dc10:	9301      	str	r3, [sp, #4]
   1dc12:	68a3      	ldr	r3, [r4, #8]
   1dc14:	9300      	str	r3, [sp, #0]
   1dc16:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dc1a:	4631      	mov	r1, r6
   1dc1c:	4628      	mov	r0, r5
   1dc1e:	f7e6 fb9d 	bl	435c <print_formatted>
}
   1dc22:	e6de      	b.n	1d9e2 <std_print+0x78>

0001dc24 <log_output_flush>:
		     log_output->control_block->offset,
   1dc24:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1dc26:	6881      	ldr	r1, [r0, #8]
{
   1dc28:	b510      	push	{r4, lr}
   1dc2a:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1dc2c:	e9d2 2300 	ldrd	r2, r3, [r2]
   1dc30:	6800      	ldr	r0, [r0, #0]
   1dc32:	f7ff fe8d 	bl	1d950 <buffer_write>
	log_output->control_block->offset = 0;
   1dc36:	6863      	ldr	r3, [r4, #4]
   1dc38:	2200      	movs	r2, #0
   1dc3a:	601a      	str	r2, [r3, #0]
}
   1dc3c:	bd10      	pop	{r4, pc}

0001dc3e <out_func>:
{
   1dc3e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1dc40:	684b      	ldr	r3, [r1, #4]
   1dc42:	681a      	ldr	r2, [r3, #0]
   1dc44:	68cb      	ldr	r3, [r1, #12]
   1dc46:	429a      	cmp	r2, r3
{
   1dc48:	4605      	mov	r5, r0
   1dc4a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1dc4c:	d102      	bne.n	1dc54 <out_func+0x16>
		log_output_flush(out_ctx);
   1dc4e:	4608      	mov	r0, r1
   1dc50:	f7ff ffe8 	bl	1dc24 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dc54:	6863      	ldr	r3, [r4, #4]
   1dc56:	f3bf 8f5b 	dmb	ish
   1dc5a:	e853 2f00 	ldrex	r2, [r3]
   1dc5e:	1c51      	adds	r1, r2, #1
   1dc60:	e843 1000 	strex	r0, r1, [r3]
   1dc64:	2800      	cmp	r0, #0
   1dc66:	d1f8      	bne.n	1dc5a <out_func+0x1c>
   1dc68:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
   1dc6c:	68a3      	ldr	r3, [r4, #8]
   1dc6e:	549d      	strb	r5, [r3, r2]
}
   1dc70:	2000      	movs	r0, #0
   1dc72:	bd38      	pop	{r3, r4, r5, pc}

0001dc74 <char_out>:
{
   1dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc76:	460d      	mov	r5, r1
   1dc78:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1dc7a:	4604      	mov	r4, r0
   1dc7c:	1847      	adds	r7, r0, r1
   1dc7e:	42bc      	cmp	r4, r7
   1dc80:	d101      	bne.n	1dc86 <char_out+0x12>
}
   1dc82:	4628      	mov	r0, r5
   1dc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dc8a:	6873      	ldr	r3, [r6, #4]
   1dc8c:	4630      	mov	r0, r6
   1dc8e:	685b      	ldr	r3, [r3, #4]
   1dc90:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1dc92:	e7f4      	b.n	1dc7e <char_out+0xa>

0001dc94 <read_str>:
{
   1dc94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1dc98:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1dc9c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1dc9e:	4640      	mov	r0, r8
{
   1dca0:	461f      	mov	r7, r3
   1dca2:	460c      	mov	r4, r1
   1dca4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1dca6:	f000 fbed 	bl	1e484 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1dcaa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dcae:	9300      	str	r3, [sp, #0]
   1dcb0:	b280      	uxth	r0, r0
   1dcb2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1dcb6:	463b      	mov	r3, r7
   1dcb8:	4632      	mov	r2, r6
   1dcba:	4621      	mov	r1, r4
   1dcbc:	4628      	mov	r0, r5
   1dcbe:	f001 fd98 	bl	1f7f2 <bt_gatt_attr_read>
}
   1dcc2:	b004      	add	sp, #16
   1dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dcc8 <bas_init>:
}
   1dcc8:	2000      	movs	r0, #0
   1dcca:	4770      	bx	lr

0001dccc <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1dccc:	6843      	ldr	r3, [r0, #4]
   1dcce:	68db      	ldr	r3, [r3, #12]
   1dcd0:	4718      	bx	r3

0001dcd2 <nvs_flash_rd>:
{
   1dcd2:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1dcd4:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1dcd6:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1dcd8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1dcda:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1dcdc:	fa16 f181 	uxtah	r1, r6, r1
   1dce0:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1dce4:	6844      	ldr	r4, [r0, #4]
   1dce6:	6824      	ldr	r4, [r4, #0]
   1dce8:	46a4      	mov	ip, r4
}
   1dcea:	bc70      	pop	{r4, r5, r6}
   1dcec:	4760      	bx	ip

0001dcee <nvs_flash_block_cmp>:
{
   1dcee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1dcf2:	7c05      	ldrb	r5, [r0, #16]
   1dcf4:	426d      	negs	r5, r5
{
   1dcf6:	b089      	sub	sp, #36	; 0x24
   1dcf8:	4681      	mov	r9, r0
   1dcfa:	460e      	mov	r6, r1
   1dcfc:	4617      	mov	r7, r2
   1dcfe:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1dd00:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1dd04:	b91c      	cbnz	r4, 1dd0e <nvs_flash_block_cmp+0x20>
	return 0;
   1dd06:	4620      	mov	r0, r4
}
   1dd08:	b009      	add	sp, #36	; 0x24
   1dd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1dd0e:	42ac      	cmp	r4, r5
   1dd10:	46a0      	mov	r8, r4
   1dd12:	bf28      	it	cs
   1dd14:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1dd16:	4643      	mov	r3, r8
   1dd18:	466a      	mov	r2, sp
   1dd1a:	4631      	mov	r1, r6
   1dd1c:	4648      	mov	r0, r9
   1dd1e:	f7ff ffd8 	bl	1dcd2 <nvs_flash_rd>
		if (rc) {
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d1f0      	bne.n	1dd08 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1dd26:	4642      	mov	r2, r8
   1dd28:	4669      	mov	r1, sp
   1dd2a:	4638      	mov	r0, r7
   1dd2c:	f000 fbcc 	bl	1e4c8 <memcmp>
		if (rc) {
   1dd30:	b920      	cbnz	r0, 1dd3c <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   1dd32:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1dd36:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1dd38:	4447      	add	r7, r8
   1dd3a:	e7e3      	b.n	1dd04 <nvs_flash_block_cmp+0x16>
			return 1;
   1dd3c:	2001      	movs	r0, #1
   1dd3e:	e7e3      	b.n	1dd08 <nvs_flash_block_cmp+0x1a>

0001dd40 <nvs_ate_crc8_check>:
{
   1dd40:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1dd42:	4601      	mov	r1, r0
{
   1dd44:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1dd46:	2207      	movs	r2, #7
   1dd48:	20ff      	movs	r0, #255	; 0xff
   1dd4a:	f7e5 fc43 	bl	35d4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1dd4e:	79e3      	ldrb	r3, [r4, #7]
}
   1dd50:	1a18      	subs	r0, r3, r0
   1dd52:	bf18      	it	ne
   1dd54:	2001      	movne	r0, #1
   1dd56:	bd10      	pop	{r4, pc}

0001dd58 <nvs_ate_crc8_update>:
{
   1dd58:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1dd5a:	4601      	mov	r1, r0
{
   1dd5c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1dd5e:	2207      	movs	r2, #7
   1dd60:	20ff      	movs	r0, #255	; 0xff
   1dd62:	f7e5 fc37 	bl	35d4 <crc8_ccitt>
	entry->crc8 = crc8;
   1dd66:	71e0      	strb	r0, [r4, #7]
}
   1dd68:	bd10      	pop	{r4, pc}

0001dd6a <nvs_al_size.isra.0>:
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   1dd6a:	4603      	mov	r3, r0
	if (fs->write_block_size <= 1U) {
   1dd6c:	2b01      	cmp	r3, #1
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   1dd6e:	4608      	mov	r0, r1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   1dd70:	bf81      	itttt	hi
   1dd72:	f103 31ff 	addhi.w	r1, r3, #4294967295	; 0xffffffff
   1dd76:	1809      	addhi	r1, r1, r0
   1dd78:	4258      	neghi	r0, r3
   1dd7a:	4008      	andhi	r0, r1
}
   1dd7c:	4770      	bx	lr

0001dd7e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1dd7e:	680b      	ldr	r3, [r1, #0]
   1dd80:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1dd84:	0c1a      	lsrs	r2, r3, #16
   1dd86:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1dd8a:	bf08      	it	eq
   1dd8c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1dd90:	600b      	str	r3, [r1, #0]
}
   1dd92:	4770      	bx	lr

0001dd94 <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1dd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1dd98:	7c05      	ldrb	r5, [r0, #16]
   1dd9a:	426d      	negs	r5, r5
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1dd9c:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1dd9e:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1dda2:	4607      	mov	r7, r0
   1dda4:	460e      	mov	r6, r1
   1dda6:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   1dda8:	21ff      	movs	r1, #255	; 0xff
   1ddaa:	462a      	mov	r2, r5
   1ddac:	4668      	mov	r0, sp
   1ddae:	f000 fbc6 	bl	1e53e <memset>
	while (len) {
   1ddb2:	b91c      	cbnz	r4, 1ddbc <nvs_flash_cmp_const.constprop.0+0x28>
	return 0;
   1ddb4:	4620      	mov	r0, r4
}
   1ddb6:	b008      	add	sp, #32
   1ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1ddbc:	42a5      	cmp	r5, r4
   1ddbe:	46a8      	mov	r8, r5
   1ddc0:	bf28      	it	cs
   1ddc2:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1ddc4:	4643      	mov	r3, r8
   1ddc6:	466a      	mov	r2, sp
   1ddc8:	4631      	mov	r1, r6
   1ddca:	4638      	mov	r0, r7
   1ddcc:	f7ff ff8f 	bl	1dcee <nvs_flash_block_cmp>
		if (rc) {
   1ddd0:	2800      	cmp	r0, #0
   1ddd2:	d1f0      	bne.n	1ddb6 <nvs_flash_cmp_const.constprop.0+0x22>
		len -= bytes_to_cmp;
   1ddd4:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1ddd8:	4446      	add	r6, r8
   1ddda:	e7ea      	b.n	1ddb2 <nvs_flash_cmp_const.constprop.0+0x1e>

0001dddc <nvs_flash_erase_sector>:
{
   1dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   1dde0:	0c0e      	lsrs	r6, r1, #16
   1dde2:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1dde4:	8982      	ldrh	r2, [r0, #12]
   1dde6:	4631      	mov	r1, r6
{
   1dde8:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1ddea:	f7ff ffd3 	bl	1dd94 <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   1ddee:	1e04      	subs	r4, r0, #0
   1ddf0:	dd17      	ble.n	1de22 <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   1ddf2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   1ddf4:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ddf6:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   1ddfa:	2100      	movs	r1, #0
   1ddfc:	f7ff ff66 	bl	1dccc <flash_write_protection_set>
	if (rc) {
   1de00:	4604      	mov	r4, r0
   1de02:	b970      	cbnz	r0, 1de22 <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1de04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1de06:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   1de08:	6843      	ldr	r3, [r0, #4]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1de0a:	0c31      	lsrs	r1, r6, #16
   1de0c:	689b      	ldr	r3, [r3, #8]
   1de0e:	fb08 7101 	mla	r1, r8, r1, r7
   1de12:	4798      	blx	r3
	if (rc) {
   1de14:	4604      	mov	r4, r0
   1de16:	b920      	cbnz	r0, 1de22 <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   1de18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   1de1a:	6843      	ldr	r3, [r0, #4]
   1de1c:	2101      	movs	r1, #1
   1de1e:	68db      	ldr	r3, [r3, #12]
   1de20:	4798      	blx	r3
}
   1de22:	4620      	mov	r0, r4
   1de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001de28 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   1de2c:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1de30:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1de32:	b088      	sub	sp, #32
   1de34:	4605      	mov	r5, r0
   1de36:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, 0);
   1de38:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1de3a:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1de3c:	4690      	mov	r8, r2
   1de3e:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   1de40:	f7ff ff44 	bl	1dccc <flash_write_protection_set>
	if (rc) {
   1de44:	bb78      	cbnz	r0, 1dea6 <nvs_flash_al_wrt.part.0+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1de46:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   1de4a:	fa1a f484 	uxtah	r4, sl, r4
   1de4e:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   1de52:	7c2f      	ldrb	r7, [r5, #16]
   1de54:	427f      	negs	r7, r7
	if (blen > 0) {
   1de56:	4037      	ands	r7, r6
   1de58:	d00b      	beq.n	1de72 <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1de5a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1de5c:	6843      	ldr	r3, [r0, #4]
   1de5e:	4642      	mov	r2, r8
   1de60:	685c      	ldr	r4, [r3, #4]
   1de62:	4649      	mov	r1, r9
   1de64:	463b      	mov	r3, r7
   1de66:	47a0      	blx	r4
		if (rc) {
   1de68:	4604      	mov	r4, r0
   1de6a:	b9b8      	cbnz	r0, 1de9c <nvs_flash_al_wrt.part.0+0x74>
		len -= blen;
   1de6c:	1bf6      	subs	r6, r6, r7
		offset += blen;
   1de6e:	44b9      	add	r9, r7
		data8 += blen;
   1de70:	44b8      	add	r8, r7
	if (len) {
   1de72:	b1de      	cbz	r6, 1deac <nvs_flash_al_wrt.part.0+0x84>
		memcpy(buf, data8, len);
   1de74:	4632      	mov	r2, r6
   1de76:	4641      	mov	r1, r8
   1de78:	4668      	mov	r0, sp
   1de7a:	f000 fb35 	bl	1e4e8 <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   1de7e:	7c2a      	ldrb	r2, [r5, #16]
   1de80:	21ff      	movs	r1, #255	; 0xff
   1de82:	1b92      	subs	r2, r2, r6
   1de84:	eb0d 0006 	add.w	r0, sp, r6
   1de88:	f000 fb59 	bl	1e53e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1de8c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1de8e:	7c2b      	ldrb	r3, [r5, #16]
   1de90:	6842      	ldr	r2, [r0, #4]
   1de92:	4649      	mov	r1, r9
   1de94:	6854      	ldr	r4, [r2, #4]
   1de96:	466a      	mov	r2, sp
   1de98:	47a0      	blx	r4
   1de9a:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   1de9c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1de9e:	2101      	movs	r1, #1
   1dea0:	f7ff ff14 	bl	1dccc <flash_write_protection_set>
	return rc;
   1dea4:	4620      	mov	r0, r4
}
   1dea6:	b008      	add	sp, #32
   1dea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   1deac:	4634      	mov	r4, r6
   1deae:	e7f5      	b.n	1de9c <nvs_flash_al_wrt.part.0+0x74>

0001deb0 <nvs_flash_ate_wrt>:
{
   1deb0:	b510      	push	{r4, lr}
   1deb2:	460a      	mov	r2, r1
	if (!len) {
   1deb4:	2308      	movs	r3, #8
   1deb6:	6841      	ldr	r1, [r0, #4]
{
   1deb8:	4604      	mov	r4, r0
   1deba:	f7ff ffb5 	bl	1de28 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1debe:	2108      	movs	r1, #8
   1dec0:	4602      	mov	r2, r0
   1dec2:	7c20      	ldrb	r0, [r4, #16]
   1dec4:	f7ff ff51 	bl	1dd6a <nvs_al_size.isra.0>
   1dec8:	6863      	ldr	r3, [r4, #4]
   1deca:	1a1b      	subs	r3, r3, r0
   1decc:	6063      	str	r3, [r4, #4]
}
   1dece:	4610      	mov	r0, r2
   1ded0:	bd10      	pop	{r4, pc}

0001ded2 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1ded2:	2300      	movs	r3, #0
   1ded4:	461a      	mov	r2, r3
   1ded6:	f7e6 bfed 	b.w	4eb4 <nvs_write>

0001deda <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   1deda:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1dedc:	2400      	movs	r4, #0
   1dede:	9400      	str	r4, [sp, #0]
   1dee0:	f7e7 f8c8 	bl	5074 <nvs_read_hist>
	return rc;
}
   1dee4:	b002      	add	sp, #8
   1dee6:	bd10      	pop	{r4, pc}

0001dee8 <get_sectors_cb>:
{
   1dee8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1deea:	6802      	ldr	r2, [r0, #0]
   1deec:	684c      	ldr	r4, [r1, #4]
   1deee:	42a2      	cmp	r2, r4
   1def0:	d316      	bcc.n	1df20 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1def2:	688b      	ldr	r3, [r1, #8]
   1def4:	4423      	add	r3, r4
   1def6:	429a      	cmp	r2, r3
   1def8:	d206      	bcs.n	1df08 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1defa:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1defe:	42ab      	cmp	r3, r5
   1df00:	d304      	bcc.n	1df0c <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1df02:	f06f 030b 	mvn.w	r3, #11
   1df06:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1df08:	2000      	movs	r0, #0
   1df0a:	e00a      	b.n	1df22 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1df0c:	68cd      	ldr	r5, [r1, #12]
   1df0e:	1b12      	subs	r2, r2, r4
   1df10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1df14:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1df18:	6842      	ldr	r2, [r0, #4]
   1df1a:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1df1c:	3301      	adds	r3, #1
   1df1e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1df20:	2001      	movs	r0, #1
}
   1df22:	bd70      	pop	{r4, r5, r6, pc}

0001df24 <settings_load>:
	return settings_load_subtree(NULL);
   1df24:	2000      	movs	r0, #0
   1df26:	f7e7 b999 	b.w	525c <settings_load_subtree>

0001df2a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1df2a:	2200      	movs	r2, #0
   1df2c:	4611      	mov	r1, r2
   1df2e:	f7e7 b95d 	b.w	51ec <settings_save_one>

0001df32 <settings_name_steq>:
{
   1df32:	4603      	mov	r3, r0
   1df34:	b530      	push	{r4, r5, lr}
   1df36:	4608      	mov	r0, r1
	if (next) {
   1df38:	b10a      	cbz	r2, 1df3e <settings_name_steq+0xc>
		*next = NULL;
   1df3a:	2100      	movs	r1, #0
   1df3c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1df3e:	b163      	cbz	r3, 1df5a <settings_name_steq+0x28>
   1df40:	b190      	cbz	r0, 1df68 <settings_name_steq+0x36>
   1df42:	1e41      	subs	r1, r0, #1
   1df44:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1df46:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1df4a:	4604      	mov	r4, r0
   1df4c:	f810 3b01 	ldrb.w	r3, [r0], #1
   1df50:	b15d      	cbz	r5, 1df6a <settings_name_steq+0x38>
   1df52:	429d      	cmp	r5, r3
   1df54:	d101      	bne.n	1df5a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1df56:	2d3d      	cmp	r5, #61	; 0x3d
   1df58:	d1f5      	bne.n	1df46 <settings_name_steq+0x14>
	return 0;
   1df5a:	2000      	movs	r0, #0
   1df5c:	e004      	b.n	1df68 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1df5e:	2b3d      	cmp	r3, #61	; 0x3d
   1df60:	d008      	beq.n	1df74 <settings_name_steq+0x42>
   1df62:	fab3 f083 	clz	r0, r3
   1df66:	0940      	lsrs	r0, r0, #5
}
   1df68:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1df6a:	2b2f      	cmp	r3, #47	; 0x2f
   1df6c:	d1f7      	bne.n	1df5e <settings_name_steq+0x2c>
		if (next) {
   1df6e:	b10a      	cbz	r2, 1df74 <settings_name_steq+0x42>
			*next = name + 1;
   1df70:	3401      	adds	r4, #1
   1df72:	6014      	str	r4, [r2, #0]
		return 1;
   1df74:	2001      	movs	r0, #1
   1df76:	e7f7      	b.n	1df68 <settings_name_steq+0x36>

0001df78 <settings_name_next>:
{
   1df78:	b530      	push	{r4, r5, lr}
   1df7a:	4603      	mov	r3, r0
	if (next) {
   1df7c:	b109      	cbz	r1, 1df82 <settings_name_next+0xa>
		*next = NULL;
   1df7e:	2200      	movs	r2, #0
   1df80:	600a      	str	r2, [r1, #0]
	if (!name) {
   1df82:	b16b      	cbz	r3, 1dfa0 <settings_name_next+0x28>
   1df84:	461a      	mov	r2, r3
   1df86:	4614      	mov	r4, r2
   1df88:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1df8a:	f812 5b01 	ldrb.w	r5, [r2], #1
   1df8e:	b135      	cbz	r5, 1df9e <settings_name_next+0x26>
   1df90:	2d3d      	cmp	r5, #61	; 0x3d
   1df92:	d004      	beq.n	1df9e <settings_name_next+0x26>
   1df94:	2d2f      	cmp	r5, #47	; 0x2f
   1df96:	d1f6      	bne.n	1df86 <settings_name_next+0xe>
		if (next) {
   1df98:	b109      	cbz	r1, 1df9e <settings_name_next+0x26>
			*next = name + 1;
   1df9a:	3401      	adds	r4, #1
   1df9c:	600c      	str	r4, [r1, #0]
}
   1df9e:	bd30      	pop	{r4, r5, pc}
		return 0;
   1dfa0:	4618      	mov	r0, r3
   1dfa2:	e7fc      	b.n	1df9e <settings_name_next+0x26>

0001dfa4 <settings_nvs_read_fn>:
{
   1dfa4:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1dfa6:	4613      	mov	r3, r2
{
   1dfa8:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1dfaa:	460a      	mov	r2, r1
   1dfac:	8881      	ldrh	r1, [r0, #4]
   1dfae:	6800      	ldr	r0, [r0, #0]
   1dfb0:	f7ff ff93 	bl	1deda <nvs_read>
}
   1dfb4:	42a0      	cmp	r0, r4
   1dfb6:	bfa8      	it	ge
   1dfb8:	4620      	movge	r0, r4
   1dfba:	bd10      	pop	{r4, pc}

0001dfbc <settings_nvs_save>:
{
   1dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfc0:	b097      	sub	sp, #92	; 0x5c
   1dfc2:	4604      	mov	r4, r0
   1dfc4:	9201      	str	r2, [sp, #4]
   1dfc6:	469b      	mov	fp, r3
	if (!name) {
   1dfc8:	4689      	mov	r9, r1
   1dfca:	2900      	cmp	r1, #0
   1dfcc:	d067      	beq.n	1e09e <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   1dfce:	b1da      	cbz	r2, 1e008 <settings_nvs_save+0x4c>
   1dfd0:	fabb f78b 	clz	r7, fp
   1dfd4:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1dfd6:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
   1dfd8:	3501      	adds	r5, #1
   1dfda:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1dfdc:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1dfde:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   1dfe2:	1e6e      	subs	r6, r5, #1
   1dfe4:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1dfe6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1dfea:	d02e      	beq.n	1e04a <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1dfec:	234a      	movs	r3, #74	; 0x4a
   1dfee:	aa03      	add	r2, sp, #12
   1dff0:	4631      	mov	r1, r6
   1dff2:	4650      	mov	r0, sl
   1dff4:	f7ff ff71 	bl	1deda <nvs_read>
		if (rc < 0) {
   1dff8:	2800      	cmp	r0, #0
   1dffa:	da07      	bge.n	1e00c <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1dffc:	f110 0f02 	cmn.w	r0, #2
   1e000:	bf08      	it	eq
   1e002:	46b0      	moveq	r8, r6
   1e004:	4635      	mov	r5, r6
   1e006:	e7ec      	b.n	1dfe2 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1e008:	2701      	movs	r7, #1
   1e00a:	e7e4      	b.n	1dfd6 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1e00c:	ab16      	add	r3, sp, #88	; 0x58
   1e00e:	4418      	add	r0, r3
   1e010:	2300      	movs	r3, #0
   1e012:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1e016:	a903      	add	r1, sp, #12
   1e018:	4648      	mov	r0, r9
   1e01a:	f000 fa3a 	bl	1e492 <strcmp>
   1e01e:	2800      	cmp	r0, #0
   1e020:	d1f0      	bne.n	1e004 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1e022:	2f00      	cmp	r7, #0
   1e024:	d039      	beq.n	1e09a <settings_nvs_save+0xde>
   1e026:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e028:	42b3      	cmp	r3, r6
   1e02a:	d140      	bne.n	1e0ae <settings_nvs_save+0xf2>
			cf->last_name_id--;
   1e02c:	4622      	mov	r2, r4
   1e02e:	1e73      	subs	r3, r6, #1
   1e030:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1e034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e038:	2302      	movs	r3, #2
   1e03a:	4650      	mov	r0, sl
   1e03c:	f7e6 ff3a 	bl	4eb4 <nvs_write>
			if (rc < 0) {
   1e040:	2800      	cmp	r0, #0
   1e042:	da34      	bge.n	1e0ae <settings_nvs_save+0xf2>
}
   1e044:	b017      	add	sp, #92	; 0x5c
   1e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1e04a:	bb5f      	cbnz	r7, 1e0a4 <settings_nvs_save+0xe8>
	write_name = true;
   1e04c:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1e04e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1e052:	d029      	beq.n	1e0a8 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1e054:	f104 0508 	add.w	r5, r4, #8
   1e058:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1e05c:	9a01      	ldr	r2, [sp, #4]
   1e05e:	465b      	mov	r3, fp
   1e060:	b289      	uxth	r1, r1
   1e062:	4628      	mov	r0, r5
   1e064:	f7e6 ff26 	bl	4eb4 <nvs_write>
	if (write_name) {
   1e068:	b157      	cbz	r7, 1e080 <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1e06a:	4648      	mov	r0, r9
   1e06c:	f000 fa0a 	bl	1e484 <strlen>
   1e070:	464a      	mov	r2, r9
   1e072:	4603      	mov	r3, r0
   1e074:	4641      	mov	r1, r8
   1e076:	4628      	mov	r0, r5
   1e078:	f7e6 ff1c 	bl	4eb4 <nvs_write>
		if (rc < 0) {
   1e07c:	2800      	cmp	r0, #0
   1e07e:	dbe1      	blt.n	1e044 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1e080:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e082:	4543      	cmp	r3, r8
   1e084:	d220      	bcs.n	1e0c8 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   1e086:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1e088:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   1e08a:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1e08e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e092:	4628      	mov	r0, r5
   1e094:	f7e6 ff0e 	bl	4eb4 <nvs_write>
   1e098:	e016      	b.n	1e0c8 <settings_nvs_save+0x10c>
   1e09a:	46b0      	mov	r8, r6
   1e09c:	e7d7      	b.n	1e04e <settings_nvs_save+0x92>
		return -EINVAL;
   1e09e:	f06f 0015 	mvn.w	r0, #21
   1e0a2:	e7cf      	b.n	1e044 <settings_nvs_save+0x88>
		return 0;
   1e0a4:	2000      	movs	r0, #0
   1e0a6:	e7cd      	b.n	1e044 <settings_nvs_save+0x88>
		return -ENOMEM;
   1e0a8:	f06f 000b 	mvn.w	r0, #11
   1e0ac:	e7ca      	b.n	1e044 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1e0ae:	4631      	mov	r1, r6
   1e0b0:	4650      	mov	r0, sl
   1e0b2:	f7ff ff0e 	bl	1ded2 <nvs_delete>
			if (rc >= 0) {
   1e0b6:	2800      	cmp	r0, #0
   1e0b8:	dbc4      	blt.n	1e044 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1e0ba:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1e0be:	313f      	adds	r1, #63	; 0x3f
   1e0c0:	b289      	uxth	r1, r1
   1e0c2:	4650      	mov	r0, sl
   1e0c4:	f7ff ff05 	bl	1ded2 <nvs_delete>
	if (rc < 0) {
   1e0c8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1e0cc:	e7ba      	b.n	1e044 <settings_nvs_save+0x88>

0001e0ce <settings_nvs_backend_init>:
{
   1e0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1e0d0:	f100 0608 	add.w	r6, r0, #8
   1e0d4:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   1e0d6:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1e0d8:	4630      	mov	r0, r6
   1e0da:	f7e6 fda3 	bl	4c24 <nvs_init>
	if (rc) {
   1e0de:	4605      	mov	r5, r0
   1e0e0:	b970      	cbnz	r0, 1e100 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1e0e2:	2302      	movs	r3, #2
   1e0e4:	f10d 0206 	add.w	r2, sp, #6
   1e0e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e0ec:	4630      	mov	r0, r6
   1e0ee:	f7ff fef4 	bl	1deda <nvs_read>
	if (rc < 0) {
   1e0f2:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   1e0f4:	bfac      	ite	ge
   1e0f6:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   1e0fa:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1e0fe:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   1e100:	4628      	mov	r0, r5
   1e102:	b002      	add	sp, #8
   1e104:	bd70      	pop	{r4, r5, r6, pc}

0001e106 <get_status>:
	data = get_sub_data(dev, type);
   1e106:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1e108:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1e10a:	220c      	movs	r2, #12
   1e10c:	fb02 3101 	mla	r1, r2, r1, r3
   1e110:	7a4b      	ldrb	r3, [r1, #9]
   1e112:	b923      	cbnz	r3, 1e11e <get_status+0x18>
	if (data->ref > 0) {
   1e114:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1e116:	fab0 f080 	clz	r0, r0
   1e11a:	0940      	lsrs	r0, r0, #5
   1e11c:	4770      	bx	lr
   1e11e:	2002      	movs	r0, #2
}
   1e120:	4770      	bx	lr

0001e122 <clkstarted_handle>:
{
   1e122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1e124:	6883      	ldr	r3, [r0, #8]
	sub_data->started = true;
   1e126:	240c      	movs	r4, #12
   1e128:	fb04 3401 	mla	r4, r4, r1, r3
   1e12c:	2301      	movs	r3, #1
{
   1e12e:	4605      	mov	r5, r0
   1e130:	460e      	mov	r6, r1
	sub_data->started = true;
   1e132:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1e134:	f04f 0320 	mov.w	r3, #32
   1e138:	f3ef 8111 	mrs	r1, BASEPRI
   1e13c:	f383 8811 	msr	BASEPRI, r3
   1e140:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e144:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1e146:	b12b      	cbz	r3, 1e154 <clkstarted_handle+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e148:	6860      	ldr	r0, [r4, #4]
   1e14a:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1e14c:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e14e:	4283      	cmp	r3, r0
	list->tail = node;
   1e150:	bf08      	it	eq
   1e152:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1e154:	f381 8811 	msr	BASEPRI, r1
   1e158:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1e15c:	b903      	cbnz	r3, 1e160 <clkstarted_handle+0x3e>
}
   1e15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1e160:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
   1e164:	4631      	mov	r1, r6
   1e166:	4628      	mov	r0, r5
   1e168:	47b8      	blx	r7
   1e16a:	e7e3      	b.n	1e134 <clkstarted_handle+0x12>

0001e16c <clock_async_start>:
{
   1e16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct nrf_clock_control_config *config =
   1e170:	6803      	ldr	r3, [r0, #0]
	clk_data = get_sub_data(dev, type);
   1e172:	f8d0 e008 	ldr.w	lr, [r0, #8]
	const struct nrf_clock_control_config *config =
   1e176:	689e      	ldr	r6, [r3, #8]
{
   1e178:	4605      	mov	r5, r0
   1e17a:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   1e17c:	b14a      	cbz	r2, 1e192 <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
   1e17e:	230c      	movs	r3, #12
   1e180:	437b      	muls	r3, r7
   1e182:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1e186:	429a      	cmp	r2, r3
   1e188:	d061      	beq.n	1e24e <clock_async_start+0xe2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e18a:	b113      	cbz	r3, 1e192 <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e18c:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1e18e:	2b00      	cmp	r3, #0
   1e190:	d1f9      	bne.n	1e186 <clock_async_start+0x1a>
	__asm__ volatile(
   1e192:	f04f 0320 	mov.w	r3, #32
   1e196:	f3ef 8c11 	mrs	ip, BASEPRI
   1e19a:	f383 8811 	msr	BASEPRI, r3
   1e19e:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1e1a2:	200c      	movs	r0, #12
   1e1a4:	4378      	muls	r0, r7
   1e1a6:	eb0e 0300 	add.w	r3, lr, r0
   1e1aa:	7a1c      	ldrb	r4, [r3, #8]
   1e1ac:	3401      	adds	r4, #1
   1e1ae:	b2e4      	uxtb	r4, r4
   1e1b0:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1e1b2:	f38c 8811 	msr	BASEPRI, ip
   1e1b6:	f3bf 8f6f 	isb	sy
	if (data) {
   1e1ba:	b362      	cbz	r2, 1e216 <clock_async_start+0xaa>
    p_reg->INTENCLR = mask;
   1e1bc:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   1e1c0:	f04f 0803 	mov.w	r8, #3
   1e1c4:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   1e1c8:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   1e1cc:	f1bc 0f00 	cmp.w	ip, #0
   1e1d0:	d115      	bne.n	1e1fe <clock_async_start+0x92>
	__asm__ volatile(
   1e1d2:	f04f 0820 	mov.w	r8, #32
   1e1d6:	f3ef 8911 	mrs	r9, BASEPRI
   1e1da:	f388 8811 	msr	BASEPRI, r8
   1e1de:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1e1e2:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   1e1e6:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1e1ea:	f1b8 0f00 	cmp.w	r8, #0
   1e1ee:	d121      	bne.n	1e234 <clock_async_start+0xc8>
	list->tail = node;
   1e1f0:	605a      	str	r2, [r3, #4]
	list->head = node;
   1e1f2:	f84e 2000 	str.w	r2, [lr, r0]
	__asm__ volatile(
   1e1f6:	f389 8811 	msr	BASEPRI, r9
   1e1fa:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1e1fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e202:	2003      	movs	r0, #3
   1e204:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		if (already_started) {
   1e208:	f1bc 0f00 	cmp.w	ip, #0
   1e20c:	d003      	beq.n	1e216 <clock_async_start+0xaa>
			data->cb(dev, subsys, data->user_data);
   1e20e:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   1e212:	4628      	mov	r0, r5
   1e214:	4798      	blx	r3
	if (ref == 1) {
   1e216:	2c01      	cmp	r4, #1
   1e218:	d10a      	bne.n	1e230 <clock_async_start+0xc4>
		do_start =  (config->start_handler) ?
   1e21a:	ea4f 1807 	mov.w	r8, r7, lsl #4
   1e21e:	f856 3008 	ldr.w	r3, [r6, r8]
				config->start_handler(dev) : true;
   1e222:	b95b      	cbnz	r3, 1e23c <clock_async_start+0xd0>
			nrf_clock_task_trigger(NRF_CLOCK,
   1e224:	4446      	add	r6, r8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e226:	2201      	movs	r2, #1
   1e228:	7ab3      	ldrb	r3, [r6, #10]
   1e22a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e22e:	601a      	str	r2, [r3, #0]
	return 0;
   1e230:	2000      	movs	r0, #0
   1e232:	e00e      	b.n	1e252 <clock_async_start+0xe6>
	parent->next = child;
   1e234:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   1e238:	605a      	str	r2, [r3, #4]
}
   1e23a:	e7dc      	b.n	1e1f6 <clock_async_start+0x8a>
				config->start_handler(dev) : true;
   1e23c:	4628      	mov	r0, r5
   1e23e:	4798      	blx	r3
   1e240:	2800      	cmp	r0, #0
   1e242:	d1ef      	bne.n	1e224 <clock_async_start+0xb8>
			clkstarted_handle(dev, type);
   1e244:	4639      	mov	r1, r7
   1e246:	4628      	mov	r0, r5
   1e248:	f7ff ff6b 	bl	1e122 <clkstarted_handle>
   1e24c:	e7f0      	b.n	1e230 <clock_async_start+0xc4>
		return -EBUSY;
   1e24e:	f06f 000f 	mvn.w	r0, #15
}
   1e252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e256 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1e256:	2200      	movs	r2, #0
   1e258:	f7ff bf88 	b.w	1e16c <clock_async_start>

0001e25c <clk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1e25c:	2200      	movs	r2, #0
{
   1e25e:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1e260:	2101      	movs	r1, #1
{
   1e262:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1e264:	4610      	mov	r0, r2
   1e266:	f7e7 fc39 	bl	5adc <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1e26a:	2000      	movs	r0, #0
   1e26c:	f7e7 fc04 	bl	5a78 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e274:	2201      	movs	r2, #1
   1e276:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1e27a:	2203      	movs	r2, #3
   1e27c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1e280:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
   1e282:	2000      	movs	r0, #0
	list->tail = NULL;
   1e284:	e9c3 0000 	strd	r0, r0, [r3]
   1e288:	68a3      	ldr	r3, [r4, #8]
   1e28a:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1e28e:	bd10      	pop	{r4, pc}

0001e290 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1e290:	6803      	ldr	r3, [r0, #0]
{
   1e292:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   1e296:	f8d3 8008 	ldr.w	r8, [r3, #8]
	data = get_sub_data(dev, type);
   1e29a:	6887      	ldr	r7, [r0, #8]
   1e29c:	b2cc      	uxtb	r4, r1
	__asm__ volatile(
   1e29e:	f04f 0320 	mov.w	r3, #32
   1e2a2:	f3ef 8611 	mrs	r6, BASEPRI
   1e2a6:	f383 8811 	msr	BASEPRI, r3
   1e2aa:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1e2ae:	220c      	movs	r2, #12
   1e2b0:	4362      	muls	r2, r4
   1e2b2:	18b9      	adds	r1, r7, r2
   1e2b4:	7a0b      	ldrb	r3, [r1, #8]
   1e2b6:	b34b      	cbz	r3, 1e30c <clock_stop+0x7c>
	data->ref--;
   1e2b8:	3b01      	subs	r3, #1
   1e2ba:	b2db      	uxtb	r3, r3
   1e2bc:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1e2be:	bb43      	cbnz	r3, 1e312 <clock_stop+0x82>
	list->head = NULL;
   1e2c0:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1e2c2:	604b      	str	r3, [r1, #4]
		do_stop =  (config->stop_handler) ?
   1e2c4:	eb08 1304 	add.w	r3, r8, r4, lsl #4
   1e2c8:	0125      	lsls	r5, r4, #4
   1e2ca:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1e2cc:	b9d3      	cbnz	r3, 1e304 <clock_stop+0x74>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1e2ce:	eb08 0305 	add.w	r3, r8, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2d2:	2101      	movs	r1, #1
   1e2d4:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e2d6:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e2dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2e0:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e2e2:	2200      	movs	r2, #0
   1e2e4:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e2e6:	681b      	ldr	r3, [r3, #0]
   1e2e8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1e2ea:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
   1e2ec:	210c      	movs	r1, #12
   1e2ee:	fb01 7404 	mla	r4, r1, r4, r7
   1e2f2:	2000      	movs	r0, #0
   1e2f4:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1e2f6:	f386 8811 	msr	BASEPRI, r6
   1e2fa:	f3bf 8f6f 	isb	sy
}
   1e2fe:	b002      	add	sp, #8
   1e300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   1e304:	4798      	blx	r3
   1e306:	2800      	cmp	r0, #0
   1e308:	d1e1      	bne.n	1e2ce <clock_stop+0x3e>
   1e30a:	e7ef      	b.n	1e2ec <clock_stop+0x5c>
		err = -EALREADY;
   1e30c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1e310:	e7f1      	b.n	1e2f6 <clock_stop+0x66>
	int err = 0;
   1e312:	2000      	movs	r0, #0
   1e314:	e7ef      	b.n	1e2f6 <clock_stop+0x66>

0001e316 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1e316:	4770      	bx	lr

0001e318 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1e318:	4770      	bx	lr

0001e31a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e31a:	f7e7 bacb 	b.w	58b4 <_DoInit>

0001e31e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1e31e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e320:	f7ff fffb 	bl	1e31a <SEGGER_RTT_Init>

	return 0;
}
   1e324:	2000      	movs	r0, #0
   1e326:	bd08      	pop	{r3, pc}

0001e328 <z_irq_spurious>:
	z_arm_reserved();
   1e328:	f7e7 bc48 	b.w	5bbc <z_arm_bus_fault>

0001e32c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e32c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1e32e:	6800      	ldr	r0, [r0, #0]
   1e330:	f7e7 bc4e 	b.w	5bd0 <z_arm_fatal_error>

0001e334 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e334:	b508      	push	{r3, lr}
	handler();
   1e336:	f7e7 fc83 	bl	5c40 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1e33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1e33e:	f7e7 bb3f 	b.w	59c0 <z_arm_exc_exit>

0001e342 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1e342:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e346:	4684      	mov	ip, r0
   1e348:	4688      	mov	r8, r1
	register const char *s = nptr;
   1e34a:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1e34c:	460c      	mov	r4, r1
   1e34e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e352:	2b20      	cmp	r3, #32
   1e354:	d033      	beq.n	1e3be <strtol+0x7c>
   1e356:	f1a3 0009 	sub.w	r0, r3, #9
   1e35a:	2804      	cmp	r0, #4
   1e35c:	d92f      	bls.n	1e3be <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1e35e:	2b2d      	cmp	r3, #45	; 0x2d
   1e360:	d12f      	bne.n	1e3c2 <strtol+0x80>
		neg = 1;
		c = *s++;
   1e362:	784b      	ldrb	r3, [r1, #1]
   1e364:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1e366:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e368:	2a00      	cmp	r2, #0
   1e36a:	d05c      	beq.n	1e426 <strtol+0xe4>
   1e36c:	2a10      	cmp	r2, #16
   1e36e:	d109      	bne.n	1e384 <strtol+0x42>
   1e370:	2b30      	cmp	r3, #48	; 0x30
   1e372:	d107      	bne.n	1e384 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e374:	7823      	ldrb	r3, [r4, #0]
   1e376:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e37a:	2b58      	cmp	r3, #88	; 0x58
   1e37c:	d14e      	bne.n	1e41c <strtol+0xda>
		c = s[1];
   1e37e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1e380:	2210      	movs	r2, #16
		s += 2;
   1e382:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e384:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e388:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e38a:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1e38c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e390:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e392:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e396:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e39a:	2d09      	cmp	r5, #9
   1e39c:	d817      	bhi.n	1e3ce <strtol+0x8c>
			c -= '0';
   1e39e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e3a0:	429a      	cmp	r2, r3
   1e3a2:	dd24      	ble.n	1e3ee <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e3a4:	1c75      	adds	r5, r6, #1
   1e3a6:	d007      	beq.n	1e3b8 <strtol+0x76>
   1e3a8:	4570      	cmp	r0, lr
   1e3aa:	d81d      	bhi.n	1e3e8 <strtol+0xa6>
   1e3ac:	d101      	bne.n	1e3b2 <strtol+0x70>
   1e3ae:	454b      	cmp	r3, r9
   1e3b0:	dc1a      	bgt.n	1e3e8 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1e3b2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1e3b6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1e3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e3bc:	e7eb      	b.n	1e396 <strtol+0x54>
{
   1e3be:	4621      	mov	r1, r4
   1e3c0:	e7c4      	b.n	1e34c <strtol+0xa>
	} else if (c == '+') {
   1e3c2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e3c4:	bf04      	itt	eq
   1e3c6:	784b      	ldrbeq	r3, [r1, #1]
   1e3c8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e3ca:	2100      	movs	r1, #0
   1e3cc:	e7cc      	b.n	1e368 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e3ce:	f043 0520 	orr.w	r5, r3, #32
   1e3d2:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e3d4:	2d19      	cmp	r5, #25
   1e3d6:	d80a      	bhi.n	1e3ee <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e3d8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e3dc:	2d1a      	cmp	r5, #26
   1e3de:	bf34      	ite	cc
   1e3e0:	2537      	movcc	r5, #55	; 0x37
   1e3e2:	2557      	movcs	r5, #87	; 0x57
   1e3e4:	1b5b      	subs	r3, r3, r5
   1e3e6:	e7db      	b.n	1e3a0 <strtol+0x5e>
			any = -1;
   1e3e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e3ec:	e7e4      	b.n	1e3b8 <strtol+0x76>
		}
	}

	if (any < 0) {
   1e3ee:	1c73      	adds	r3, r6, #1
   1e3f0:	d109      	bne.n	1e406 <strtol+0xc4>
   1e3f2:	f7fc fb1d 	bl	1aa30 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e3f6:	2326      	movs	r3, #38	; 0x26
   1e3f8:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e3fa:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e3fc:	f1b8 0f00 	cmp.w	r8, #0
   1e400:	d107      	bne.n	1e412 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e406:	b101      	cbz	r1, 1e40a <strtol+0xc8>
		acc = -acc;
   1e408:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e40a:	f1b8 0f00 	cmp.w	r8, #0
   1e40e:	d0f8      	beq.n	1e402 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e410:	b10e      	cbz	r6, 1e416 <strtol+0xd4>
   1e412:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1e416:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e41a:	e7f2      	b.n	1e402 <strtol+0xc0>
	if (base == 0) {
   1e41c:	2330      	movs	r3, #48	; 0x30
   1e41e:	2a00      	cmp	r2, #0
   1e420:	d1b0      	bne.n	1e384 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e422:	2208      	movs	r2, #8
   1e424:	e7ae      	b.n	1e384 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e426:	2b30      	cmp	r3, #48	; 0x30
   1e428:	d0a4      	beq.n	1e374 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e42a:	220a      	movs	r2, #10
   1e42c:	e7aa      	b.n	1e384 <strtol+0x42>

0001e42e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1e42e:	3901      	subs	r1, #1
   1e430:	4603      	mov	r3, r0
   1e432:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e436:	b90a      	cbnz	r2, 1e43c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1e438:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1e43a:	4770      	bx	lr
		*d = *s;
   1e43c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1e440:	e7f7      	b.n	1e432 <strcpy+0x4>

0001e442 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e442:	b570      	push	{r4, r5, r6, lr}
   1e444:	3901      	subs	r1, #1
   1e446:	4605      	mov	r5, r0
   1e448:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e44a:	b142      	cbz	r2, 1e45e <strncpy+0x1c>
   1e44c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e450:	1e56      	subs	r6, r2, #1
   1e452:	b92b      	cbnz	r3, 1e460 <strncpy+0x1e>
   1e454:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1e456:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1e45a:	42a2      	cmp	r2, r4
   1e45c:	d1fb      	bne.n	1e456 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1e45e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1e460:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1e464:	4632      	mov	r2, r6
   1e466:	e7ef      	b.n	1e448 <strncpy+0x6>

0001e468 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1e468:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1e46a:	4603      	mov	r3, r0
   1e46c:	781a      	ldrb	r2, [r3, #0]
   1e46e:	428a      	cmp	r2, r1
   1e470:	4618      	mov	r0, r3
   1e472:	f103 0301 	add.w	r3, r3, #1
   1e476:	d004      	beq.n	1e482 <strchr+0x1a>
   1e478:	2a00      	cmp	r2, #0
   1e47a:	d1f7      	bne.n	1e46c <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1e47c:	2900      	cmp	r1, #0
   1e47e:	bf18      	it	ne
   1e480:	2000      	movne	r0, #0
}
   1e482:	4770      	bx	lr

0001e484 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e484:	4603      	mov	r3, r0
	size_t n = 0;
   1e486:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e488:	5c1a      	ldrb	r2, [r3, r0]
   1e48a:	b902      	cbnz	r2, 1e48e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e48c:	4770      	bx	lr
		n++;
   1e48e:	3001      	adds	r0, #1
   1e490:	e7fa      	b.n	1e488 <strlen+0x4>

0001e492 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e492:	1e43      	subs	r3, r0, #1
   1e494:	3901      	subs	r1, #1
   1e496:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e49a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e49e:	4282      	cmp	r2, r0
   1e4a0:	d101      	bne.n	1e4a6 <strcmp+0x14>
   1e4a2:	2a00      	cmp	r2, #0
   1e4a4:	d1f7      	bne.n	1e496 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e4a6:	1a10      	subs	r0, r2, r0
   1e4a8:	4770      	bx	lr

0001e4aa <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e4aa:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e4ac:	2400      	movs	r4, #0
   1e4ae:	42a2      	cmp	r2, r4
   1e4b0:	d008      	beq.n	1e4c4 <strncmp+0x1a>
   1e4b2:	5d03      	ldrb	r3, [r0, r4]
   1e4b4:	5d0d      	ldrb	r5, [r1, r4]
   1e4b6:	42ab      	cmp	r3, r5
   1e4b8:	d102      	bne.n	1e4c0 <strncmp+0x16>
   1e4ba:	3401      	adds	r4, #1
   1e4bc:	2b00      	cmp	r3, #0
   1e4be:	d1f6      	bne.n	1e4ae <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e4c0:	1b58      	subs	r0, r3, r5
   1e4c2:	e000      	b.n	1e4c6 <strncmp+0x1c>
   1e4c4:	2000      	movs	r0, #0
}
   1e4c6:	bd30      	pop	{r4, r5, pc}

0001e4c8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e4c8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e4ca:	b15a      	cbz	r2, 1e4e4 <memcmp+0x1c>
   1e4cc:	3901      	subs	r1, #1
   1e4ce:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e4d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e4d8:	42a0      	cmp	r0, r4
   1e4da:	d001      	beq.n	1e4e0 <memcmp+0x18>
   1e4dc:	429a      	cmp	r2, r3
   1e4de:	d0f7      	beq.n	1e4d0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e4e0:	1ad0      	subs	r0, r2, r3
}
   1e4e2:	bd10      	pop	{r4, pc}
		return 0;
   1e4e4:	4610      	mov	r0, r2
   1e4e6:	e7fc      	b.n	1e4e2 <memcmp+0x1a>

0001e4e8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e4ea:	ea81 0400 	eor.w	r4, r1, r0
   1e4ee:	07a5      	lsls	r5, r4, #30
   1e4f0:	4603      	mov	r3, r0
   1e4f2:	d00b      	beq.n	1e50c <memcpy+0x24>
   1e4f4:	3b01      	subs	r3, #1
   1e4f6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e4f8:	4291      	cmp	r1, r2
   1e4fa:	d11b      	bne.n	1e534 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e4fe:	2a00      	cmp	r2, #0
   1e500:	d0fc      	beq.n	1e4fc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e502:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e506:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1e50a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1e50c:	079c      	lsls	r4, r3, #30
   1e50e:	d1f6      	bne.n	1e4fe <memcpy+0x16>
   1e510:	f022 0403 	bic.w	r4, r2, #3
   1e514:	1f1d      	subs	r5, r3, #4
   1e516:	0896      	lsrs	r6, r2, #2
   1e518:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e51a:	42b9      	cmp	r1, r7
   1e51c:	d105      	bne.n	1e52a <memcpy+0x42>
   1e51e:	f06f 0503 	mvn.w	r5, #3
   1e522:	fb05 2206 	mla	r2, r5, r6, r2
   1e526:	4423      	add	r3, r4
   1e528:	e7e4      	b.n	1e4f4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e52a:	f851 cb04 	ldr.w	ip, [r1], #4
   1e52e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e532:	e7f2      	b.n	1e51a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e534:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e538:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e53c:	e7dc      	b.n	1e4f8 <memcpy+0x10>

0001e53e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1e53e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1e540:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1e542:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e544:	079c      	lsls	r4, r3, #30
   1e546:	d111      	bne.n	1e56c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e548:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e54c:	f022 0603 	bic.w	r6, r2, #3
   1e550:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e554:	441e      	add	r6, r3
   1e556:	0894      	lsrs	r4, r2, #2
   1e558:	42b3      	cmp	r3, r6
   1e55a:	d10d      	bne.n	1e578 <memset+0x3a>
   1e55c:	f06f 0503 	mvn.w	r5, #3
   1e560:	fb05 2204 	mla	r2, r5, r4, r2
   1e564:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e566:	4293      	cmp	r3, r2
   1e568:	d109      	bne.n	1e57e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e56a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e56c:	2a00      	cmp	r2, #0
   1e56e:	d0fc      	beq.n	1e56a <memset+0x2c>
		*(d_byte++) = c_byte;
   1e570:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e574:	3a01      	subs	r2, #1
   1e576:	e7e5      	b.n	1e544 <memset+0x6>
		*(d_word++) = c_word;
   1e578:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1e57c:	e7ec      	b.n	1e558 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e57e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e582:	e7f0      	b.n	1e566 <memset+0x28>

0001e584 <_to_x>:
{
   1e584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e586:	4603      	mov	r3, r0
   1e588:	4614      	mov	r4, r2
   1e58a:	4602      	mov	r2, r0
		unsigned int d = n % base;
   1e58c:	fbb1 f0f4 	udiv	r0, r1, r4
   1e590:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1e594:	2d09      	cmp	r5, #9
   1e596:	460f      	mov	r7, r1
   1e598:	bf8c      	ite	hi
   1e59a:	2627      	movhi	r6, #39	; 0x27
   1e59c:	2600      	movls	r6, #0
		n /= base;
   1e59e:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1e5a0:	3530      	adds	r5, #48	; 0x30
   1e5a2:	4610      	mov	r0, r2
   1e5a4:	4435      	add	r5, r6
	} while (n);
   1e5a6:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1e5a8:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   1e5ac:	d205      	bcs.n	1e5ba <_to_x+0x36>
	*buf = 0;
   1e5ae:	2100      	movs	r1, #0
   1e5b0:	7001      	strb	r1, [r0, #0]
	len = buf - start;
   1e5b2:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   1e5b4:	429a      	cmp	r2, r3
   1e5b6:	d802      	bhi.n	1e5be <_to_x+0x3a>
}
   1e5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5ba:	4602      	mov	r2, r0
   1e5bc:	e7e6      	b.n	1e58c <_to_x+0x8>
		char tmp = *buf;
   1e5be:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   1e5c0:	781c      	ldrb	r4, [r3, #0]
   1e5c2:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   1e5c6:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   1e5ca:	e7f3      	b.n	1e5b4 <_to_x+0x30>

0001e5cc <_rlrshift>:
{
   1e5cc:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1e5ce:	e9d0 6500 	ldrd	r6, r5, [r0]
   1e5d2:	0872      	lsrs	r2, r6, #1
   1e5d4:	f006 0301 	and.w	r3, r6, #1
   1e5d8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1e5dc:	189b      	adds	r3, r3, r2
   1e5de:	f04f 0100 	mov.w	r1, #0
   1e5e2:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1e5e6:	eb44 0101 	adc.w	r1, r4, r1
   1e5ea:	e9c0 3100 	strd	r3, r1, [r0]
}
   1e5ee:	bd70      	pop	{r4, r5, r6, pc}

0001e5f0 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   1e5f0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	rem += 2U;
   1e5f6:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1e5f8:	f04f 0705 	mov.w	r7, #5
   1e5fc:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   1e600:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   1e604:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   1e608:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   1e60c:	fb07 f10e 	mul.w	r1, r7, lr
   1e610:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1e614:	08f2      	lsrs	r2, r6, #3
   1e616:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1e61a:	fbb2 f1f7 	udiv	r1, r2, r7
   1e61e:	00ca      	lsls	r2, r1, #3
		quot += q;
   1e620:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1e624:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1e628:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   1e62c:	fba2 2307 	umull	r2, r3, r2, r7
   1e630:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1e632:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1e636:	18e4      	adds	r4, r4, r3
   1e638:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   1e63c:	e9c0 4500 	strd	r4, r5, [r0]
}
   1e640:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e642 <_get_digit>:
	if (*digit_count > 0) {
   1e642:	680b      	ldr	r3, [r1, #0]
   1e644:	2b00      	cmp	r3, #0
{
   1e646:	b570      	push	{r4, r5, r6, lr}
   1e648:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   1e64a:	dd0f      	ble.n	1e66c <_get_digit+0x2a>
		*fr = *fr * 10U;
   1e64c:	6822      	ldr	r2, [r4, #0]
   1e64e:	6840      	ldr	r0, [r0, #4]
		*digit_count -= 1;
   1e650:	3b01      	subs	r3, #1
   1e652:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1e654:	210a      	movs	r1, #10
   1e656:	fba2 5601 	umull	r5, r6, r2, r1
   1e65a:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1e65e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1e662:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   1e666:	0f30      	lsrs	r0, r6, #28
   1e668:	3030      	adds	r0, #48	; 0x30
}
   1e66a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1e66c:	2030      	movs	r0, #48	; 0x30
   1e66e:	e7fc      	b.n	1e66a <_get_digit+0x28>

0001e670 <_stdout_hook_default>:
}
   1e670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e674:	4770      	bx	lr

0001e676 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1e676:	684b      	ldr	r3, [r1, #4]
   1e678:	2b01      	cmp	r3, #1
   1e67a:	dd07      	ble.n	1e68c <sprintf_out+0x16>
		*(p->ptr) = c;
   1e67c:	680b      	ldr	r3, [r1, #0]
   1e67e:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1e680:	680b      	ldr	r3, [r1, #0]
   1e682:	3301      	adds	r3, #1
   1e684:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1e686:	684b      	ldr	r3, [r1, #4]
   1e688:	3b01      	subs	r3, #1
   1e68a:	604b      	str	r3, [r1, #4]
}
   1e68c:	2000      	movs	r0, #0
   1e68e:	4770      	bx	lr

0001e690 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1e690:	f7fc b884 	b.w	1a79c <SystemInit>

0001e694 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   1e694:	b530      	push	{r4, r5, lr}
   1e696:	b085      	sub	sp, #20
   1e698:	4604      	mov	r4, r0
   1e69a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1e69c:	4668      	mov	r0, sp
   1e69e:	2203      	movs	r2, #3
   1e6a0:	f7ff ff22 	bl	1e4e8 <memcpy>
	(void)memset(res + 3, 0, 13);
   1e6a4:	220d      	movs	r2, #13
   1e6a6:	2100      	movs	r1, #0
   1e6a8:	f10d 0003 	add.w	r0, sp, #3
   1e6ac:	f7ff ff47 	bl	1e53e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1e6b0:	4620      	mov	r0, r4
   1e6b2:	466a      	mov	r2, sp
   1e6b4:	4669      	mov	r1, sp
   1e6b6:	f7f2 fe19 	bl	112ec <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1e6ba:	4604      	mov	r4, r0
   1e6bc:	b920      	cbnz	r0, 1e6c8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1e6be:	2203      	movs	r2, #3
   1e6c0:	4669      	mov	r1, sp
   1e6c2:	4628      	mov	r0, r5
   1e6c4:	f7ff ff10 	bl	1e4e8 <memcpy>

	return 0;
}
   1e6c8:	4620      	mov	r0, r4
   1e6ca:	b005      	add	sp, #20
   1e6cc:	bd30      	pop	{r4, r5, pc}

0001e6ce <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   1e6ce:	b513      	push	{r0, r1, r4, lr}
   1e6d0:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1e6d2:	aa01      	add	r2, sp, #4
   1e6d4:	3103      	adds	r1, #3
   1e6d6:	f7ff ffdd 	bl	1e694 <ah>
	if (err) {
   1e6da:	b948      	cbnz	r0, 1e6f0 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1e6dc:	2203      	movs	r2, #3
   1e6de:	a901      	add	r1, sp, #4
   1e6e0:	4620      	mov	r0, r4
   1e6e2:	f7ff fef1 	bl	1e4c8 <memcmp>
   1e6e6:	fab0 f080 	clz	r0, r0
   1e6ea:	0940      	lsrs	r0, r0, #5
}
   1e6ec:	b002      	add	sp, #8
   1e6ee:	bd10      	pop	{r4, pc}
		return false;
   1e6f0:	2000      	movs	r0, #0
   1e6f2:	e7fb      	b.n	1e6ec <bt_rpa_irk_matches+0x1e>

0001e6f4 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   1e6f4:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1e6f6:	1cce      	adds	r6, r1, #3
{
   1e6f8:	4605      	mov	r5, r0
   1e6fa:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1e6fc:	4630      	mov	r0, r6
   1e6fe:	2103      	movs	r1, #3
   1e700:	f7f2 fdf2 	bl	112e8 <bt_rand>
	if (err) {
   1e704:	b960      	cbnz	r0, 1e720 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1e706:	7963      	ldrb	r3, [r4, #5]
   1e708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e710:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1e712:	4622      	mov	r2, r4
   1e714:	4631      	mov	r1, r6
   1e716:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1e718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1e71c:	f7ff bfba 	b.w	1e694 <ah>
}
   1e720:	bd70      	pop	{r4, r5, r6, pc}

0001e722 <send_cmd_status>:
{
   1e722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1e726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1e72a:	4606      	mov	r6, r0
   1e72c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1e72e:	200f      	movs	r0, #15
   1e730:	2100      	movs	r1, #0
   1e732:	f7eb f873 	bl	981c <bt_buf_get_evt>
	*(u8_t *)net_buf_user_data(buf) = type;
   1e736:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e738:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1e73c:	4604      	mov	r4, r0
   1e73e:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e740:	2102      	movs	r1, #2
   1e742:	4640      	mov	r0, r8
   1e744:	f001 fcfd 	bl	20142 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e748:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1e74a:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e74c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1e74e:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1e750:	4640      	mov	r0, r8
   1e752:	f001 fcf6 	bl	20142 <net_buf_simple_add>
	evt->ncmd = 1U;
   1e756:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1e758:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1e75a:	8046      	strh	r6, [r0, #2]
	bt_recv_prio(buf);
   1e75c:	4620      	mov	r0, r4
}
   1e75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1e762:	f7ea b9d9 	b.w	8b18 <bt_recv_prio>

0001e766 <sys_memcpy_swap.constprop.0>:
   1e766:	f101 0320 	add.w	r3, r1, #32
   1e76a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e76c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e770:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e774:	428b      	cmp	r3, r1
   1e776:	d1f9      	bne.n	1e76c <sys_memcpy_swap.constprop.0+0x6>
}
   1e778:	4770      	bx	lr

0001e77a <default_CSPRNG>:
{
   1e77a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1e77c:	f7f2 fdb4 	bl	112e8 <bt_rand>
}
   1e780:	fab0 f080 	clz	r0, r0
   1e784:	0940      	lsrs	r0, r0, #5
   1e786:	bd08      	pop	{r3, pc}

0001e788 <bt_settings_decode_key>:
{
   1e788:	b570      	push	{r4, r5, r6, lr}
   1e78a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1e78c:	2100      	movs	r1, #0
{
   1e78e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1e790:	f7ff fbf2 	bl	1df78 <settings_name_next>
   1e794:	280d      	cmp	r0, #13
   1e796:	d118      	bne.n	1e7ca <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1e798:	7b23      	ldrb	r3, [r4, #12]
   1e79a:	2b30      	cmp	r3, #48	; 0x30
   1e79c:	d111      	bne.n	1e7c2 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1e79e:	2300      	movs	r3, #0
   1e7a0:	702b      	strb	r3, [r5, #0]
   1e7a2:	f104 060c 	add.w	r6, r4, #12
   1e7a6:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e7a8:	462a      	mov	r2, r5
   1e7aa:	4620      	mov	r0, r4
   1e7ac:	2301      	movs	r3, #1
   1e7ae:	2102      	movs	r1, #2
   1e7b0:	3402      	adds	r4, #2
   1e7b2:	f7fd fc14 	bl	1bfde <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   1e7b6:	42b4      	cmp	r4, r6
   1e7b8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1e7bc:	d1f4      	bne.n	1e7a8 <bt_settings_decode_key+0x20>
	return 0;
   1e7be:	2000      	movs	r0, #0
}
   1e7c0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1e7c2:	2b31      	cmp	r3, #49	; 0x31
   1e7c4:	d101      	bne.n	1e7ca <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1e7c6:	2301      	movs	r3, #1
   1e7c8:	e7ea      	b.n	1e7a0 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1e7ca:	f06f 0015 	mvn.w	r0, #21
   1e7ce:	e7f7      	b.n	1e7c0 <bt_settings_decode_key+0x38>

0001e7d0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e7d0:	b510      	push	{r4, lr}
   1e7d2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e7d4:	7801      	ldrb	r1, [r0, #0]
   1e7d6:	7822      	ldrb	r2, [r4, #0]
   1e7d8:	428a      	cmp	r2, r1
{
   1e7da:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e7dc:	d00e      	beq.n	1e7fc <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1e7de:	4669      	mov	r1, sp
   1e7e0:	f7e8 fe2c 	bl	743c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e7e4:	a905      	add	r1, sp, #20
   1e7e6:	4620      	mov	r0, r4
   1e7e8:	f7e8 fe28 	bl	743c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e7ec:	2210      	movs	r2, #16
   1e7ee:	f10d 0115 	add.w	r1, sp, #21
   1e7f2:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e7f6:	f7ff fe67 	bl	1e4c8 <memcmp>
   1e7fa:	e007      	b.n	1e80c <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1e7fc:	2a01      	cmp	r2, #1
   1e7fe:	d007      	beq.n	1e810 <bt_uuid_cmp+0x40>
   1e800:	2a02      	cmp	r2, #2
   1e802:	d008      	beq.n	1e816 <bt_uuid_cmp+0x46>
   1e804:	b95a      	cbnz	r2, 1e81e <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e806:	8840      	ldrh	r0, [r0, #2]
   1e808:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e80a:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1e80c:	b00a      	add	sp, #40	; 0x28
   1e80e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e810:	6840      	ldr	r0, [r0, #4]
   1e812:	6863      	ldr	r3, [r4, #4]
   1e814:	e7f9      	b.n	1e80a <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e816:	2210      	movs	r2, #16
   1e818:	1c61      	adds	r1, r4, #1
   1e81a:	3001      	adds	r0, #1
   1e81c:	e7eb      	b.n	1e7f6 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1e81e:	f06f 0015 	mvn.w	r0, #21
   1e822:	e7f3      	b.n	1e80c <bt_uuid_cmp+0x3c>

0001e824 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e824:	2a04      	cmp	r2, #4
{
   1e826:	b538      	push	{r3, r4, r5, lr}
   1e828:	460c      	mov	r4, r1
	switch (data_len) {
   1e82a:	d00d      	beq.n	1e848 <bt_uuid_create+0x24>
   1e82c:	2a10      	cmp	r2, #16
   1e82e:	d019      	beq.n	1e864 <bt_uuid_create+0x40>
   1e830:	2a02      	cmp	r2, #2
   1e832:	f04f 0300 	mov.w	r3, #0
   1e836:	d11b      	bne.n	1e870 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1e838:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   1e83a:	784a      	ldrb	r2, [r1, #1]
   1e83c:	780b      	ldrb	r3, [r1, #0]
   1e83e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e842:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e844:	2001      	movs	r0, #1
}
   1e846:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e848:	2301      	movs	r3, #1
   1e84a:	7003      	strb	r3, [r0, #0]
   1e84c:	78a2      	ldrb	r2, [r4, #2]
   1e84e:	78c9      	ldrb	r1, [r1, #3]
   1e850:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e852:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   1e856:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e858:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1e85c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e860:	6042      	str	r2, [r0, #4]
		break;
   1e862:	e7ef      	b.n	1e844 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1e864:	2302      	movs	r3, #2
   1e866:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e86a:	f7ff fe3d 	bl	1e4e8 <memcpy>
		break;
   1e86e:	e7e9      	b.n	1e844 <bt_uuid_create+0x20>
	switch (data_len) {
   1e870:	4618      	mov	r0, r3
   1e872:	e7e8      	b.n	1e846 <bt_uuid_create+0x22>

0001e874 <atomic_and>:
{
   1e874:	4603      	mov	r3, r0
}
   1e876:	f3bf 8f5b 	dmb	ish
   1e87a:	e853 0f00 	ldrex	r0, [r3]
   1e87e:	ea00 0201 	and.w	r2, r0, r1
   1e882:	e843 2c00 	strex	ip, r2, [r3]
   1e886:	f1bc 0f00 	cmp.w	ip, #0
   1e88a:	d1f6      	bne.n	1e87a <atomic_and+0x6>
   1e88c:	f3bf 8f5b 	dmb	ish
   1e890:	4770      	bx	lr

0001e892 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e892:	f3bf 8f5b 	dmb	ish
   1e896:	6800      	ldr	r0, [r0, #0]
   1e898:	f3bf 8f5b 	dmb	ish
}
   1e89c:	4770      	bx	lr

0001e89e <bt_addr_copy>:
   1e89e:	2206      	movs	r2, #6
   1e8a0:	f7ff be22 	b.w	1e4e8 <memcpy>

0001e8a4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1e8a4:	2207      	movs	r2, #7
   1e8a6:	f7ff be1f 	b.w	1e4e8 <memcpy>

0001e8aa <atomic_or>:
{
   1e8aa:	4603      	mov	r3, r0
}
   1e8ac:	f3bf 8f5b 	dmb	ish
   1e8b0:	e853 0f00 	ldrex	r0, [r3]
   1e8b4:	ea40 0201 	orr.w	r2, r0, r1
   1e8b8:	e843 2c00 	strex	ip, r2, [r3]
   1e8bc:	f1bc 0f00 	cmp.w	ip, #0
   1e8c0:	d1f6      	bne.n	1e8b0 <atomic_or+0x6>
   1e8c2:	f3bf 8f5b 	dmb	ish
   1e8c6:	4770      	bx	lr

0001e8c8 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1e8c8:	460b      	mov	r3, r1
   1e8ca:	b410      	push	{r4}
   1e8cc:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e8ce:	f001 041f 	and.w	r4, r1, #31
   1e8d2:	2101      	movs	r1, #1
   1e8d4:	40a1      	lsls	r1, r4

	if (val) {
   1e8d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e8da:	b112      	cbz	r2, 1e8e2 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1e8dc:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e8de:	f7ff bfe4 	b.w	1e8aa <atomic_or>
}
   1e8e2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e8e4:	43c9      	mvns	r1, r1
   1e8e6:	f7ff bfc5 	b.w	1e874 <atomic_and>

0001e8ea <unpair>:
{
   1e8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ec:	4606      	mov	r6, r0
   1e8ee:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   1e8f0:	f7eb fc1c 	bl	a12c <bt_conn_lookup_addr_le>
	if (conn) {
   1e8f4:	4604      	mov	r4, r0
   1e8f6:	b970      	cbnz	r0, 1e916 <unpair+0x2c>
			keys = bt_keys_find_addr(id, addr);
   1e8f8:	4639      	mov	r1, r7
   1e8fa:	4630      	mov	r0, r6
   1e8fc:	f7ef ff38 	bl	e770 <bt_keys_find_addr>
		if (keys) {
   1e900:	4605      	mov	r5, r0
   1e902:	b110      	cbz	r0, 1e90a <unpair+0x20>
			bt_keys_clear(keys);
   1e904:	4628      	mov	r0, r5
   1e906:	f7ef ff43 	bl	e790 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   1e90a:	4639      	mov	r1, r7
   1e90c:	4630      	mov	r0, r6
}
   1e90e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_gatt_clear(id, addr);
   1e912:	f7ee b953 	b.w	cbbc <bt_gatt_clear>
		if (conn->type == BT_CONN_TYPE_LE) {
   1e916:	7883      	ldrb	r3, [r0, #2]
   1e918:	2b01      	cmp	r3, #1
   1e91a:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   1e91e:	bf04      	itt	eq
   1e920:	f8d0 509c 	ldreq.w	r5, [r0, #156]	; 0x9c
			conn->le.keys = NULL;
   1e924:	f8c0 309c 	streq.w	r3, [r0, #156]	; 0x9c
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1e928:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   1e92c:	bf18      	it	ne
   1e92e:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1e930:	f000 f960 	bl	1ebf4 <bt_conn_disconnect>
		bt_conn_unref(conn);
   1e934:	4620      	mov	r0, r4
   1e936:	f000 f958 	bl	1ebea <bt_conn_unref>
		if (!keys) {
   1e93a:	2d00      	cmp	r5, #0
   1e93c:	d1e2      	bne.n	1e904 <unpair+0x1a>
   1e93e:	e7db      	b.n	1e8f8 <unpair+0xe>

0001e940 <unpair_remote>:
{
   1e940:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   1e942:	4601      	mov	r1, r0
   1e944:	7818      	ldrb	r0, [r3, #0]
   1e946:	f7ff bfd0 	b.w	1e8ea <unpair>

0001e94a <sys_put_le64>:
	dst[1] = val >> 8;
   1e94a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1e94e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1e950:	0e00      	lsrs	r0, r0, #24
   1e952:	7053      	strb	r3, [r2, #1]
   1e954:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1e956:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1e958:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1e95c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1e95e:	7093      	strb	r3, [r2, #2]
   1e960:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1e962:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1e964:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1e966:	71d1      	strb	r1, [r2, #7]
}
   1e968:	4770      	bx	lr

0001e96a <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
   1e96a:	f100 0126 	add.w	r1, r0, #38	; 0x26
   1e96e:	3001      	adds	r0, #1
   1e970:	f7e9 bc4c 	b.w	820c <hci_id_add>

0001e974 <addr_res_enable>:
{
   1e974:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e976:	2101      	movs	r1, #1
{
   1e978:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e97a:	f242 002d 	movw	r0, #8237	; 0x202d
   1e97e:	f7e9 f9cb 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
   1e982:	4604      	mov	r4, r0
   1e984:	b158      	cbz	r0, 1e99e <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1e986:	4629      	mov	r1, r5
   1e988:	3008      	adds	r0, #8
   1e98a:	f001 fbe9 	bl	20160 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e98e:	4621      	mov	r1, r4
   1e990:	2200      	movs	r2, #0
}
   1e992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e996:	f242 002d 	movw	r0, #8237	; 0x202d
   1e99a:	f7e9 bb17 	b.w	7fcc <bt_hci_cmd_send_sync>
}
   1e99e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e9a2:	bd38      	pop	{r3, r4, r5, pc}

0001e9a4 <bt_lookup_id_addr>:
{
   1e9a4:	b510      	push	{r4, lr}
   1e9a6:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1e9a8:	f7ef fea8 	bl	e6fc <bt_keys_find_irk>
		if (keys) {
   1e9ac:	b100      	cbz	r0, 1e9b0 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1e9ae:	1c44      	adds	r4, r0, #1
}
   1e9b0:	4620      	mov	r0, r4
   1e9b2:	bd10      	pop	{r4, pc}

0001e9b4 <bt_hci_disconnect>:
{
   1e9b4:	b570      	push	{r4, r5, r6, lr}
   1e9b6:	4606      	mov	r6, r0
   1e9b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e9ba:	f240 4006 	movw	r0, #1030	; 0x406
   1e9be:	2103      	movs	r1, #3
   1e9c0:	f7e9 f9aa 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
   1e9c4:	4604      	mov	r4, r0
   1e9c6:	b160      	cbz	r0, 1e9e2 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1e9c8:	2103      	movs	r1, #3
   1e9ca:	3008      	adds	r0, #8
   1e9cc:	f001 fbb9 	bl	20142 <net_buf_simple_add>
	disconn->reason = reason;
   1e9d0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e9d2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1e9d4:	4621      	mov	r1, r4
   1e9d6:	f240 4006 	movw	r0, #1030	; 0x406
}
   1e9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1e9de:	f7e9 b9d1 	b.w	7d84 <bt_hci_cmd_send>
}
   1e9e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e9e6:	bd70      	pop	{r4, r5, r6, pc}

0001e9e8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e9e8:	8802      	ldrh	r2, [r0, #0]
   1e9ea:	8843      	ldrh	r3, [r0, #2]
   1e9ec:	429a      	cmp	r2, r3
{
   1e9ee:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e9f0:	d818      	bhi.n	1ea24 <bt_le_conn_params_valid+0x3c>
   1e9f2:	2a05      	cmp	r2, #5
   1e9f4:	d916      	bls.n	1ea24 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e9f6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e9fa:	d813      	bhi.n	1ea24 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1e9fc:	8884      	ldrh	r4, [r0, #4]
   1e9fe:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1ea02:	d20f      	bcs.n	1ea24 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ea04:	88c1      	ldrh	r1, [r0, #6]
   1ea06:	f1a1 020a 	sub.w	r2, r1, #10
   1ea0a:	b292      	uxth	r2, r2
   1ea0c:	f640 4076 	movw	r0, #3190	; 0xc76
   1ea10:	4282      	cmp	r2, r0
   1ea12:	d807      	bhi.n	1ea24 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   1ea14:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ea18:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1ea1c:	bf34      	ite	cc
   1ea1e:	2001      	movcc	r0, #1
   1ea20:	2000      	movcs	r0, #0
}
   1ea22:	bd10      	pop	{r4, pc}
		return false;
   1ea24:	2000      	movs	r0, #0
   1ea26:	e7fc      	b.n	1ea22 <bt_le_conn_params_valid+0x3a>

0001ea28 <update_pending_id>:
	if (keys->flags & BT_KEYS_ID_PENDING_ADD) {
   1ea28:	7a43      	ldrb	r3, [r0, #9]
   1ea2a:	0759      	lsls	r1, r3, #29
   1ea2c:	d504      	bpl.n	1ea38 <update_pending_id+0x10>
		keys->flags &= ~BT_KEYS_ID_PENDING_ADD;
   1ea2e:	f023 0304 	bic.w	r3, r3, #4
   1ea32:	7243      	strb	r3, [r0, #9]
		bt_id_add(keys);
   1ea34:	f7e9 be12 	b.w	865c <bt_id_add>
	if (keys->flags & BT_KEYS_ID_PENDING_DEL) {
   1ea38:	0719      	lsls	r1, r3, #28
   1ea3a:	d504      	bpl.n	1ea46 <update_pending_id+0x1e>
		keys->flags &= ~BT_KEYS_ID_PENDING_DEL;
   1ea3c:	f023 0308 	bic.w	r3, r3, #8
   1ea40:	7243      	strb	r3, [r0, #9]
		bt_id_del(keys);
   1ea42:	f7e9 bed1 	b.w	87e8 <bt_id_del>
}
   1ea46:	4770      	bx	lr

0001ea48 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1ea48:	2301      	movs	r3, #1
{
   1ea4a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ea4c:	2106      	movs	r1, #6
{
   1ea4e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ea50:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ea54:	f7f2 fc48 	bl	112e8 <bt_rand>
	if (err) {
   1ea58:	b918      	cbnz	r0, 1ea62 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1ea5a:	79a3      	ldrb	r3, [r4, #6]
   1ea5c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ea60:	71a3      	strb	r3, [r4, #6]
}
   1ea62:	bd10      	pop	{r4, pc}

0001ea64 <bt_send>:
		return bt_hci_ecc_send(buf);
   1ea64:	f7e8 bab4 	b.w	6fd0 <bt_hci_ecc_send>

0001ea68 <bt_addr_le_is_bonded>:
{
   1ea68:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1ea6a:	f7ef fe81 	bl	e770 <bt_keys_find_addr>
		return keys && keys->keys;
   1ea6e:	b118      	cbz	r0, 1ea78 <bt_addr_le_is_bonded+0x10>
   1ea70:	8940      	ldrh	r0, [r0, #10]
   1ea72:	3800      	subs	r0, #0
   1ea74:	bf18      	it	ne
   1ea76:	2001      	movne	r0, #1
}
   1ea78:	bd08      	pop	{r3, pc}

0001ea7a <bt_le_adv_start>:
{
   1ea7a:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1ea7c:	7844      	ldrb	r4, [r0, #1]
   1ea7e:	f014 0410 	ands.w	r4, r4, #16
   1ea82:	d106      	bne.n	1ea92 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   1ea84:	9401      	str	r4, [sp, #4]
   1ea86:	9c04      	ldr	r4, [sp, #16]
   1ea88:	9400      	str	r4, [sp, #0]
   1ea8a:	f7ea fb4f 	bl	912c <bt_le_adv_start_internal>
}
   1ea8e:	b002      	add	sp, #8
   1ea90:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1ea92:	f06f 0015 	mvn.w	r0, #21
   1ea96:	e7fa      	b.n	1ea8e <bt_le_adv_start+0x14>

0001ea98 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1ea98:	6880      	ldr	r0, [r0, #8]
   1ea9a:	f7ea bd67 	b.w	956c <enh_conn_complete>

0001ea9e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea9e:	f3bf 8f5b 	dmb	ish
   1eaa2:	6800      	ldr	r0, [r0, #0]
   1eaa4:	f3bf 8f5b 	dmb	ish
}
   1eaa8:	4770      	bx	lr

0001eaaa <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1eaaa:	89c3      	ldrh	r3, [r0, #14]
{
   1eaac:	b510      	push	{r4, lr}
   1eaae:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1eab0:	b12b      	cbz	r3, 1eabe <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1eab2:	6900      	ldr	r0, [r0, #16]
   1eab4:	f7fb f8a0 	bl	19bf8 <net_buf_unref>
	conn->rx = NULL;
   1eab8:	2300      	movs	r3, #0
   1eaba:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1eabc:	81e3      	strh	r3, [r4, #14]
}
   1eabe:	bd10      	pop	{r4, pc}

0001eac0 <atomic_dec>:
{
   1eac0:	4603      	mov	r3, r0
}
   1eac2:	f3bf 8f5b 	dmb	ish
   1eac6:	e853 0f00 	ldrex	r0, [r3]
   1eaca:	1e42      	subs	r2, r0, #1
   1eacc:	e843 2100 	strex	r1, r2, [r3]
   1ead0:	2900      	cmp	r1, #0
   1ead2:	d1f8      	bne.n	1eac6 <atomic_dec+0x6>
   1ead4:	f3bf 8f5b 	dmb	ish
   1ead8:	4770      	bx	lr

0001eada <atomic_inc>:
{
   1eada:	4603      	mov	r3, r0
}
   1eadc:	f3bf 8f5b 	dmb	ish
   1eae0:	e853 0f00 	ldrex	r0, [r3]
   1eae4:	1c42      	adds	r2, r0, #1
   1eae6:	e843 2100 	strex	r1, r2, [r3]
   1eaea:	2900      	cmp	r1, #0
   1eaec:	d1f8      	bne.n	1eae0 <atomic_inc+0x6>
   1eaee:	f3bf 8f5b 	dmb	ish
   1eaf2:	4770      	bx	lr

0001eaf4 <tx_notify>:
{
   1eaf4:	b570      	push	{r4, r5, r6, lr}
   1eaf6:	4604      	mov	r4, r0
	__asm__ volatile(
   1eaf8:	f04f 0220 	mov.w	r2, #32
   1eafc:	f3ef 8311 	mrs	r3, BASEPRI
   1eb00:	f382 8811 	msr	BASEPRI, r2
   1eb04:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1eb08:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1eb0a:	b920      	cbnz	r0, 1eb16 <tx_notify+0x22>
	__asm__ volatile(
   1eb0c:	f383 8811 	msr	BASEPRI, r3
   1eb10:	f3bf 8f6f 	isb	sy
}
   1eb14:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eb16:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1eb18:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1eb1a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eb1c:	4288      	cmp	r0, r1
	list->tail = node;
   1eb1e:	bf08      	it	eq
   1eb20:	6262      	streq	r2, [r4, #36]	; 0x24
   1eb22:	f383 8811 	msr	BASEPRI, r3
   1eb26:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1eb2a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1eb2e:	f7ea ff37 	bl	99a0 <tx_free>
		cb(conn, user_data);
   1eb32:	4631      	mov	r1, r6
   1eb34:	4620      	mov	r0, r4
   1eb36:	47a8      	blx	r5
	while (1) {
   1eb38:	e7de      	b.n	1eaf8 <tx_notify+0x4>

0001eb3a <tx_complete_work>:
	tx_notify(conn);
   1eb3a:	3828      	subs	r0, #40	; 0x28
   1eb3c:	f7ff bfda 	b.w	1eaf4 <tx_notify>

0001eb40 <bt_conn_set_security>:
{
   1eb40:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1eb42:	7b43      	ldrb	r3, [r0, #13]
   1eb44:	2b06      	cmp	r3, #6
{
   1eb46:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1eb48:	d128      	bne.n	1eb9c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1eb4a:	7a43      	ldrb	r3, [r0, #9]
   1eb4c:	428b      	cmp	r3, r1
   1eb4e:	d228      	bcs.n	1eba2 <bt_conn_set_security+0x62>
   1eb50:	7a83      	ldrb	r3, [r0, #10]
   1eb52:	428b      	cmp	r3, r1
   1eb54:	d225      	bcs.n	1eba2 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eb56:	f3bf 8f5b 	dmb	ish
	if (val) {
   1eb5a:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1eb5c:	f100 0304 	add.w	r3, r0, #4
   1eb60:	d513      	bpl.n	1eb8a <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eb62:	e853 2f00 	ldrex	r2, [r3]
   1eb66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1eb6a:	e843 2000 	strex	r0, r2, [r3]
   1eb6e:	2800      	cmp	r0, #0
   1eb70:	d1f7      	bne.n	1eb62 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eb72:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1eb76:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1eb7a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1eb7c:	4620      	mov	r0, r4
   1eb7e:	f7ef fbd3 	bl	e328 <bt_smp_start_security>
	if (err) {
   1eb82:	b108      	cbz	r0, 1eb88 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1eb84:	7a63      	ldrb	r3, [r4, #9]
   1eb86:	72a3      	strb	r3, [r4, #10]
}
   1eb88:	bd10      	pop	{r4, pc}
   1eb8a:	e853 2f00 	ldrex	r2, [r3]
   1eb8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1eb92:	e843 2000 	strex	r0, r2, [r3]
   1eb96:	2800      	cmp	r0, #0
   1eb98:	d0eb      	beq.n	1eb72 <bt_conn_set_security+0x32>
   1eb9a:	e7f6      	b.n	1eb8a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1eb9c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1eba0:	e7f2      	b.n	1eb88 <bt_conn_set_security+0x48>
		return 0;
   1eba2:	2000      	movs	r0, #0
   1eba4:	e7f0      	b.n	1eb88 <bt_conn_set_security+0x48>

0001eba6 <bt_conn_get_security>:
}
   1eba6:	7a40      	ldrb	r0, [r0, #9]
   1eba8:	4770      	bx	lr

0001ebaa <bt_conn_is_peer_addr_le>:
{
   1ebaa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1ebac:	7a03      	ldrb	r3, [r0, #8]
   1ebae:	428b      	cmp	r3, r1
{
   1ebb0:	4604      	mov	r4, r0
   1ebb2:	4615      	mov	r5, r2
	if (id != conn->id) {
   1ebb4:	d115      	bne.n	1ebe2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ebb6:	f100 0170 	add.w	r1, r0, #112	; 0x70
   1ebba:	2207      	movs	r2, #7
   1ebbc:	4628      	mov	r0, r5
   1ebbe:	f7ff fc83 	bl	1e4c8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1ebc2:	b180      	cbz	r0, 1ebe6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1ebc4:	78e3      	ldrb	r3, [r4, #3]
   1ebc6:	2207      	movs	r2, #7
   1ebc8:	b943      	cbnz	r3, 1ebdc <bt_conn_is_peer_addr_le+0x32>
   1ebca:	f104 017e 	add.w	r1, r4, #126	; 0x7e
   1ebce:	4628      	mov	r0, r5
   1ebd0:	f7ff fc7a 	bl	1e4c8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1ebd4:	fab0 f080 	clz	r0, r0
   1ebd8:	0940      	lsrs	r0, r0, #5
}
   1ebda:	bd38      	pop	{r3, r4, r5, pc}
   1ebdc:	f104 0177 	add.w	r1, r4, #119	; 0x77
   1ebe0:	e7f5      	b.n	1ebce <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ebe2:	2000      	movs	r0, #0
   1ebe4:	e7f9      	b.n	1ebda <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ebe6:	2001      	movs	r0, #1
   1ebe8:	e7f7      	b.n	1ebda <bt_conn_is_peer_addr_le+0x30>

0001ebea <bt_conn_unref>:
	atomic_dec(&conn->ref);
   1ebea:	304c      	adds	r0, #76	; 0x4c
   1ebec:	f7ff bf68 	b.w	1eac0 <atomic_dec>

0001ebf0 <bt_conn_get_dst>:
}
   1ebf0:	3070      	adds	r0, #112	; 0x70
   1ebf2:	4770      	bx	lr

0001ebf4 <bt_conn_disconnect>:
{
   1ebf4:	b538      	push	{r3, r4, r5, lr}
   1ebf6:	7b43      	ldrb	r3, [r0, #13]
   1ebf8:	3b01      	subs	r3, #1
   1ebfa:	4604      	mov	r4, r0
   1ebfc:	2b06      	cmp	r3, #6
   1ebfe:	d805      	bhi.n	1ec0c <bt_conn_disconnect+0x18>
   1ec00:	e8df f003 	tbb	[pc, r3]
   1ec04:	0e040408 	.word	0x0e040408
   1ec08:	160c      	.short	0x160c
   1ec0a:	0c          	.byte	0x0c
   1ec0b:	00          	.byte	0x00
	switch (conn->state) {
   1ec0c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1ec10:	4628      	mov	r0, r5
   1ec12:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1ec14:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ec16:	2100      	movs	r1, #0
   1ec18:	f7eb f9ae 	bl	9f78 <bt_conn_set_state>
		return 0;
   1ec1c:	2500      	movs	r5, #0
   1ec1e:	e7f7      	b.n	1ec10 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1ec20:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ec22:	2100      	movs	r1, #0
   1ec24:	f7eb f9a8 	bl	9f78 <bt_conn_set_state>
}
   1ec28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   1ec2c:	f7ea bbda 	b.w	93e4 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   1ec30:	8800      	ldrh	r0, [r0, #0]
   1ec32:	f7ff febf 	bl	1e9b4 <bt_hci_disconnect>
	if (err) {
   1ec36:	4605      	mov	r5, r0
   1ec38:	2800      	cmp	r0, #0
   1ec3a:	d1e9      	bne.n	1ec10 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1ec3c:	2107      	movs	r1, #7
   1ec3e:	4620      	mov	r0, r4
   1ec40:	f7eb f99a 	bl	9f78 <bt_conn_set_state>
	return 0;
   1ec44:	e7e4      	b.n	1ec10 <bt_conn_disconnect+0x1c>

0001ec46 <bt_conn_le_conn_update>:
{
   1ec46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec48:	4607      	mov	r7, r0
   1ec4a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ec4c:	f242 0013 	movw	r0, #8211	; 0x2013
   1ec50:	210e      	movs	r1, #14
   1ec52:	f7e9 f861 	bl	7d18 <bt_hci_cmd_create>
	if (!buf) {
   1ec56:	4606      	mov	r6, r0
   1ec58:	b1d0      	cbz	r0, 1ec90 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1ec5a:	210e      	movs	r1, #14
   1ec5c:	3008      	adds	r0, #8
   1ec5e:	f001 fa70 	bl	20142 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ec62:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1ec64:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ec66:	2100      	movs	r1, #0
   1ec68:	f7ff fc69 	bl	1e53e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ec6c:	883b      	ldrh	r3, [r7, #0]
   1ec6e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ec70:	882b      	ldrh	r3, [r5, #0]
   1ec72:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ec74:	886b      	ldrh	r3, [r5, #2]
   1ec76:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ec78:	88ab      	ldrh	r3, [r5, #4]
   1ec7a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ec7c:	88eb      	ldrh	r3, [r5, #6]
   1ec7e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ec80:	4631      	mov	r1, r6
   1ec82:	2200      	movs	r2, #0
}
   1ec84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ec88:	f242 0013 	movw	r0, #8211	; 0x2013
   1ec8c:	f7e9 b99e 	b.w	7fcc <bt_hci_cmd_send_sync>
}
   1ec90:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ec94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ec96 <l2cap_connected>:
}
   1ec96:	4770      	bx	lr

0001ec98 <l2cap_disconnected>:
   1ec98:	4770      	bx	lr

0001ec9a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ec9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1ec9c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ec9e:	b17b      	cbz	r3, 1ecc0 <bt_l2cap_chan_remove+0x26>
   1eca0:	3b08      	subs	r3, #8
   1eca2:	2200      	movs	r2, #0
   1eca4:	b163      	cbz	r3, 1ecc0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1eca6:	428b      	cmp	r3, r1
   1eca8:	f103 0408 	add.w	r4, r3, #8
   1ecac:	d10f      	bne.n	1ecce <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1ecae:	688b      	ldr	r3, [r1, #8]
   1ecb0:	b93a      	cbnz	r2, 1ecc2 <bt_l2cap_chan_remove+0x28>
   1ecb2:	6c82      	ldr	r2, [r0, #72]	; 0x48
	list->head = node;
   1ecb4:	6443      	str	r3, [r0, #68]	; 0x44
Z_GENLIST_REMOVE(slist, snode)
   1ecb6:	4294      	cmp	r4, r2
   1ecb8:	d100      	bne.n	1ecbc <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ecba:	6483      	str	r3, [r0, #72]	; 0x48
	parent->next = child;
   1ecbc:	2300      	movs	r3, #0
   1ecbe:	608b      	str	r3, [r1, #8]
}
   1ecc0:	bd10      	pop	{r4, pc}
   1ecc2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ecc4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1ecc6:	429c      	cmp	r4, r3
	list->tail = node;
   1ecc8:	bf08      	it	eq
   1ecca:	6482      	streq	r2, [r0, #72]	; 0x48
}
   1eccc:	e7f6      	b.n	1ecbc <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ecce:	2c00      	cmp	r4, #0
   1ecd0:	d0f6      	beq.n	1ecc0 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ecd2:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d0f3      	beq.n	1ecc0 <bt_l2cap_chan_remove+0x26>
   1ecd8:	3b08      	subs	r3, #8
   1ecda:	4622      	mov	r2, r4
   1ecdc:	e7e2      	b.n	1eca4 <bt_l2cap_chan_remove+0xa>

0001ecde <bt_l2cap_chan_del>:
	if (!chan->conn) {
   1ecde:	6803      	ldr	r3, [r0, #0]
{
   1ece0:	b510      	push	{r4, lr}
   1ece2:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ece4:	b12b      	cbz	r3, 1ecf2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   1ece6:	6843      	ldr	r3, [r0, #4]
   1ece8:	685b      	ldr	r3, [r3, #4]
   1ecea:	b103      	cbz	r3, 1ecee <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   1ecec:	4798      	blx	r3
	chan->conn = NULL;
   1ecee:	2300      	movs	r3, #0
   1ecf0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ecf2:	68e3      	ldr	r3, [r4, #12]
   1ecf4:	b11b      	cbz	r3, 1ecfe <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
   1ecf6:	4620      	mov	r0, r4
}
   1ecf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   1ecfc:	4718      	bx	r3
}
   1ecfe:	bd10      	pop	{r4, pc}

0001ed00 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ed00:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1ed02:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ed04:	b18b      	cbz	r3, 1ed2a <bt_l2cap_disconnected+0x2a>
   1ed06:	f1b3 0008 	subs.w	r0, r3, #8
   1ed0a:	d00e      	beq.n	1ed2a <bt_l2cap_disconnected+0x2a>
   1ed0c:	681c      	ldr	r4, [r3, #0]
   1ed0e:	b104      	cbz	r4, 1ed12 <bt_l2cap_disconnected+0x12>
   1ed10:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ed12:	f7ff ffe4 	bl	1ecde <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ed16:	b144      	cbz	r4, 1ed2a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed18:	f114 0308 	adds.w	r3, r4, #8
   1ed1c:	d002      	beq.n	1ed24 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ed1e:	68a3      	ldr	r3, [r4, #8]
   1ed20:	b103      	cbz	r3, 1ed24 <bt_l2cap_disconnected+0x24>
   1ed22:	3b08      	subs	r3, #8
{
   1ed24:	4620      	mov	r0, r4
   1ed26:	461c      	mov	r4, r3
   1ed28:	e7f3      	b.n	1ed12 <bt_l2cap_disconnected+0x12>
}
   1ed2a:	bd10      	pop	{r4, pc}

0001ed2c <bt_l2cap_encrypt_change>:
{
   1ed2c:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed2e:	6c44      	ldr	r4, [r0, #68]	; 0x44
{
   1ed30:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed32:	b10c      	cbz	r4, 1ed38 <bt_l2cap_encrypt_change+0xc>
   1ed34:	3c08      	subs	r4, #8
   1ed36:	b904      	cbnz	r4, 1ed3a <bt_l2cap_encrypt_change+0xe>
}
   1ed38:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
   1ed3a:	6863      	ldr	r3, [r4, #4]
   1ed3c:	689b      	ldr	r3, [r3, #8]
   1ed3e:	b113      	cbz	r3, 1ed46 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   1ed40:	4629      	mov	r1, r5
   1ed42:	4620      	mov	r0, r4
   1ed44:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed46:	f114 0f08 	cmn.w	r4, #8
   1ed4a:	d0f5      	beq.n	1ed38 <bt_l2cap_encrypt_change+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ed4c:	68a4      	ldr	r4, [r4, #8]
   1ed4e:	e7f0      	b.n	1ed32 <bt_l2cap_encrypt_change+0x6>

0001ed50 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ed50:	3104      	adds	r1, #4
   1ed52:	f7eb bab7 	b.w	a2c4 <bt_conn_create_pdu_timeout>

0001ed56 <bt_l2cap_send_cb>:
{
   1ed56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed5a:	4614      	mov	r4, r2
   1ed5c:	4605      	mov	r5, r0
   1ed5e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1ed60:	f102 0008 	add.w	r0, r2, #8
   1ed64:	2104      	movs	r1, #4
{
   1ed66:	461e      	mov	r6, r3
   1ed68:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1ed6c:	f001 fa00 	bl	20170 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ed70:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1ed72:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ed74:	3a04      	subs	r2, #4
   1ed76:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ed78:	4643      	mov	r3, r8
   1ed7a:	4632      	mov	r2, r6
   1ed7c:	4621      	mov	r1, r4
   1ed7e:	4628      	mov	r0, r5
}
   1ed80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ed84:	f7eb b812 	b.w	9dac <bt_conn_send_cb>

0001ed88 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed88:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1ed8a:	b160      	cbz	r0, 1eda6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ed8c:	3808      	subs	r0, #8
   1ed8e:	b900      	cbnz	r0, 1ed92 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ed90:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ed92:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1ed96:	428b      	cmp	r3, r1
   1ed98:	d005      	beq.n	1eda6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed9a:	f110 0308 	adds.w	r3, r0, #8
   1ed9e:	d001      	beq.n	1eda4 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eda0:	6880      	ldr	r0, [r0, #8]
   1eda2:	e7f2      	b.n	1ed8a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1eda4:	4618      	mov	r0, r3
}
   1eda6:	4770      	bx	lr

0001eda8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eda8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1edaa:	b158      	cbz	r0, 1edc4 <bt_l2cap_le_lookup_rx_cid+0x1c>
   1edac:	3808      	subs	r0, #8
   1edae:	b900      	cbnz	r0, 1edb2 <bt_l2cap_le_lookup_rx_cid+0xa>
   1edb0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1edb2:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1edb4:	428b      	cmp	r3, r1
   1edb6:	d005      	beq.n	1edc4 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1edb8:	f110 0308 	adds.w	r3, r0, #8
   1edbc:	d001      	beq.n	1edc2 <bt_l2cap_le_lookup_rx_cid+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1edbe:	6880      	ldr	r0, [r0, #8]
   1edc0:	e7f3      	b.n	1edaa <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1edc2:	4618      	mov	r0, r3
}
   1edc4:	4770      	bx	lr

0001edc6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1edc6:	4770      	bx	lr

0001edc8 <att_op_get_type>:
	switch (op) {
   1edc8:	281e      	cmp	r0, #30
   1edca:	d816      	bhi.n	1edfa <att_op_get_type+0x32>
   1edcc:	b308      	cbz	r0, 1ee12 <att_op_get_type+0x4a>
   1edce:	1e43      	subs	r3, r0, #1
   1edd0:	2b1d      	cmp	r3, #29
   1edd2:	d81e      	bhi.n	1ee12 <att_op_get_type+0x4a>
   1edd4:	e8df f003 	tbb	[pc, r3]
   1edd8:	23172317 	.word	0x23172317
   1eddc:	23172317 	.word	0x23172317
   1ede0:	23172317 	.word	0x23172317
   1ede4:	23172317 	.word	0x23172317
   1ede8:	1d172317 	.word	0x1d172317
   1edec:	2317231d 	.word	0x2317231d
   1edf0:	1d191d17 	.word	0x1d191d17
   1edf4:	0f1b      	.short	0x0f1b
   1edf6:	2004      	movs	r0, #4
   1edf8:	4770      	bx	lr
   1edfa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1edfe:	2b52      	cmp	r3, #82	; 0x52
   1ee00:	d107      	bne.n	1ee12 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ee02:	2000      	movs	r0, #0
}
   1ee04:	4770      	bx	lr
		return ATT_RESPONSE;
   1ee06:	2002      	movs	r0, #2
   1ee08:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ee0a:	2003      	movs	r0, #3
   1ee0c:	4770      	bx	lr
		return ATT_INDICATION;
   1ee0e:	2005      	movs	r0, #5
   1ee10:	4770      	bx	lr
		return ATT_COMMAND;
   1ee12:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ee16:	bf0c      	ite	eq
   1ee18:	2006      	moveq	r0, #6
   1ee1a:	2000      	movne	r0, #0
   1ee1c:	4770      	bx	lr
		return ATT_REQUEST;
   1ee1e:	2001      	movs	r0, #1
   1ee20:	4770      	bx	lr

0001ee22 <bt_gatt_foreach_attr>:
{
   1ee22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ee24:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ee28:	2300      	movs	r3, #0
   1ee2a:	9300      	str	r3, [sp, #0]
   1ee2c:	461a      	mov	r2, r3
   1ee2e:	f7ed fa4f 	bl	c2d0 <bt_gatt_foreach_attr_type>
}
   1ee32:	b005      	add	sp, #20
   1ee34:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee38 <find_info_cb>:
	if (!data->rsp) {
   1ee38:	688b      	ldr	r3, [r1, #8]
{
   1ee3a:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = data->att;
   1ee3c:	680e      	ldr	r6, [r1, #0]
{
   1ee3e:	4605      	mov	r5, r0
   1ee40:	460c      	mov	r4, r1
	if (!data->rsp) {
   1ee42:	b963      	cbnz	r3, 1ee5e <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ee44:	6848      	ldr	r0, [r1, #4]
   1ee46:	2101      	movs	r1, #1
   1ee48:	3008      	adds	r0, #8
   1ee4a:	f001 f97a 	bl	20142 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ee4e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ee50:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ee52:	781b      	ldrb	r3, [r3, #0]
   1ee54:	2b00      	cmp	r3, #0
   1ee56:	bf0c      	ite	eq
   1ee58:	2301      	moveq	r3, #1
   1ee5a:	2302      	movne	r3, #2
   1ee5c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ee5e:	68a3      	ldr	r3, [r4, #8]
   1ee60:	781b      	ldrb	r3, [r3, #0]
   1ee62:	2b01      	cmp	r3, #1
   1ee64:	d003      	beq.n	1ee6e <find_info_cb+0x36>
   1ee66:	2b02      	cmp	r3, #2
   1ee68:	d01a      	beq.n	1eea0 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ee6a:	2000      	movs	r0, #0
   1ee6c:	e017      	b.n	1ee9e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ee6e:	682b      	ldr	r3, [r5, #0]
   1ee70:	781b      	ldrb	r3, [r3, #0]
   1ee72:	2b00      	cmp	r3, #0
   1ee74:	d1f9      	bne.n	1ee6a <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ee76:	6860      	ldr	r0, [r4, #4]
   1ee78:	2104      	movs	r1, #4
   1ee7a:	3008      	adds	r0, #8
   1ee7c:	f001 f961 	bl	20142 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1ee80:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ee82:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1ee84:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ee86:	682b      	ldr	r3, [r5, #0]
   1ee88:	885b      	ldrh	r3, [r3, #2]
   1ee8a:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   1ee8c:	6863      	ldr	r3, [r4, #4]
   1ee8e:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   1ee92:	899b      	ldrh	r3, [r3, #12]
   1ee94:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ee96:	2804      	cmp	r0, #4
   1ee98:	bf94      	ite	ls
   1ee9a:	2000      	movls	r0, #0
   1ee9c:	2001      	movhi	r0, #1
}
   1ee9e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1eea0:	682b      	ldr	r3, [r5, #0]
   1eea2:	781b      	ldrb	r3, [r3, #0]
   1eea4:	2b02      	cmp	r3, #2
   1eea6:	d1e0      	bne.n	1ee6a <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1eea8:	6860      	ldr	r0, [r4, #4]
   1eeaa:	2112      	movs	r1, #18
   1eeac:	3008      	adds	r0, #8
   1eeae:	f001 f948 	bl	20142 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1eeb2:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1eeb4:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1eeb6:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1eeb8:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1eeba:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1eebe:	3101      	adds	r1, #1
   1eec0:	f7ff fb12 	bl	1e4e8 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   1eec4:	6863      	ldr	r3, [r4, #4]
   1eec6:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   1eeca:	899b      	ldrh	r3, [r3, #12]
   1eecc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1eece:	2812      	cmp	r0, #18
   1eed0:	e7e2      	b.n	1ee98 <find_info_cb+0x60>

0001eed2 <read_group_cb>:
{
   1eed2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1eed6:	680e      	ldr	r6, [r1, #0]
{
   1eed8:	4605      	mov	r5, r0
   1eeda:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1eedc:	f04f 0800 	mov.w	r8, #0
   1eee0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1eee4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1eee6:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1eee8:	f88d 8008 	strb.w	r8, [sp, #8]
   1eeec:	a902      	add	r1, sp, #8
   1eeee:	f8ad 300a 	strh.w	r3, [sp, #10]
   1eef2:	f7ff fc6d 	bl	1e7d0 <bt_uuid_cmp>
   1eef6:	b198      	cbz	r0, 1ef20 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1eef8:	f642 0301 	movw	r3, #10241	; 0x2801
   1eefc:	6828      	ldr	r0, [r5, #0]
   1eefe:	f88d 800c 	strb.w	r8, [sp, #12]
   1ef02:	a903      	add	r1, sp, #12
   1ef04:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ef08:	f7ff fc62 	bl	1e7d0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ef0c:	b140      	cbz	r0, 1ef20 <read_group_cb+0x4e>
		if (data->group &&
   1ef0e:	6923      	ldr	r3, [r4, #16]
   1ef10:	b123      	cbz	r3, 1ef1c <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1ef12:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   1ef14:	8859      	ldrh	r1, [r3, #2]
   1ef16:	4291      	cmp	r1, r2
   1ef18:	d200      	bcs.n	1ef1c <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ef1a:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ef1c:	2001      	movs	r0, #1
   1ef1e:	e012      	b.n	1ef46 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ef20:	6861      	ldr	r1, [r4, #4]
   1ef22:	6828      	ldr	r0, [r5, #0]
   1ef24:	f7ff fc54 	bl	1e7d0 <bt_uuid_cmp>
   1ef28:	b110      	cbz	r0, 1ef30 <read_group_cb+0x5e>
		data->group = NULL;
   1ef2a:	2300      	movs	r3, #0
   1ef2c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1ef2e:	e7f5      	b.n	1ef1c <read_group_cb+0x4a>
	if (data->rsp->len &&
   1ef30:	68e3      	ldr	r3, [r4, #12]
   1ef32:	68a0      	ldr	r0, [r4, #8]
   1ef34:	781a      	ldrb	r2, [r3, #0]
   1ef36:	b14a      	cbz	r2, 1ef4c <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ef38:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   1ef3c:	8981      	ldrh	r1, [r0, #12]
   1ef3e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1ef40:	4293      	cmp	r3, r2
   1ef42:	da03      	bge.n	1ef4c <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1ef44:	2000      	movs	r0, #0
}
   1ef46:	b004      	add	sp, #16
   1ef48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ef4c:	2104      	movs	r1, #4
   1ef4e:	3008      	adds	r0, #8
   1ef50:	f001 f8f7 	bl	20142 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ef54:	68a1      	ldr	r1, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ef56:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ef58:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ef5a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ef5c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ef5e:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ef60:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
   1ef64:	6889      	ldr	r1, [r1, #8]
   1ef66:	2600      	movs	r6, #0
   1ef68:	1a9b      	subs	r3, r3, r2
   1ef6a:	9600      	str	r6, [sp, #0]
   1ef6c:	440a      	add	r2, r1
   1ef6e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1ef72:	4629      	mov	r1, r5
   1ef74:	b29b      	uxth	r3, r3
   1ef76:	4638      	mov	r0, r7
   1ef78:	47c0      	blx	r8
	if (read < 0) {
   1ef7a:	1e01      	subs	r1, r0, #0
   1ef7c:	dbe2      	blt.n	1ef44 <read_group_cb+0x72>
	if (!data->rsp->len) {
   1ef7e:	68e5      	ldr	r5, [r4, #12]
   1ef80:	68a0      	ldr	r0, [r4, #8]
   1ef82:	782a      	ldrb	r2, [r5, #0]
   1ef84:	1d0b      	adds	r3, r1, #4
   1ef86:	b922      	cbnz	r2, 1ef92 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
   1ef88:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   1ef8a:	3008      	adds	r0, #8
   1ef8c:	f001 f8d9 	bl	20142 <net_buf_simple_add>
   1ef90:	e7c4      	b.n	1ef1c <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ef92:	429a      	cmp	r2, r3
   1ef94:	d0f9      	beq.n	1ef8a <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   1ef96:	8983      	ldrh	r3, [r0, #12]
   1ef98:	3b04      	subs	r3, #4
   1ef9a:	8183      	strh	r3, [r0, #12]
		return false;
   1ef9c:	e7d2      	b.n	1ef44 <read_group_cb+0x72>

0001ef9e <read_type_cb>:
{
   1ef9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   1efa2:	f8d1 8000 	ldr.w	r8, [r1]
{
   1efa6:	4606      	mov	r6, r0
   1efa8:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1efaa:	6800      	ldr	r0, [r0, #0]
   1efac:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   1efae:	f8d8 9000 	ldr.w	r9, [r8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1efb2:	f7ff fc0d 	bl	1e7d0 <bt_uuid_cmp>
   1efb6:	4607      	mov	r7, r0
   1efb8:	2800      	cmp	r0, #0
   1efba:	d14a      	bne.n	1f052 <read_type_cb+0xb4>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1efbc:	2215      	movs	r2, #21
   1efbe:	4631      	mov	r1, r6
   1efc0:	4648      	mov	r0, r9
   1efc2:	f000 fc87 	bl	1f8d4 <bt_gatt_check_perm>
   1efc6:	4604      	mov	r4, r0
   1efc8:	7528      	strb	r0, [r5, #20]
	if (data->err) {
   1efca:	b140      	cbz	r0, 1efde <read_type_cb+0x40>
		if (data->rsp->len) {
   1efcc:	68eb      	ldr	r3, [r5, #12]
   1efce:	781c      	ldrb	r4, [r3, #0]
   1efd0:	b10c      	cbz	r4, 1efd6 <read_type_cb+0x38>
			data->err = 0x00;
   1efd2:	752f      	strb	r7, [r5, #20]
		return BT_GATT_ITER_STOP;
   1efd4:	463c      	mov	r4, r7
}
   1efd6:	4620      	mov	r0, r4
   1efd8:	b003      	add	sp, #12
   1efda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1efde:	68a8      	ldr	r0, [r5, #8]
   1efe0:	2102      	movs	r1, #2
   1efe2:	3008      	adds	r0, #8
   1efe4:	f001 f8ad 	bl	20142 <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1efe8:	68a9      	ldr	r1, [r5, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1efea:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1efec:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1efee:	6128      	str	r0, [r5, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1eff0:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1eff2:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
   1eff6:	6889      	ldr	r1, [r1, #8]
   1eff8:	9400      	str	r4, [sp, #0]
   1effa:	1a9b      	subs	r3, r3, r2
   1effc:	6877      	ldr	r7, [r6, #4]
   1effe:	440a      	add	r2, r1
   1f000:	b29b      	uxth	r3, r3
   1f002:	4631      	mov	r1, r6
   1f004:	4648      	mov	r0, r9
   1f006:	47b8      	blx	r7
	if (read < 0) {
   1f008:	1e01      	subs	r1, r0, #0
   1f00a:	da07      	bge.n	1f01c <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1f00c:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1f010:	bf26      	itte	cs
   1f012:	4249      	negcs	r1, r1
   1f014:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1f016:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1f018:	7529      	strb	r1, [r5, #20]
		return BT_GATT_ITER_STOP;
   1f01a:	e7dc      	b.n	1efd6 <read_type_cb+0x38>
	if (!data->rsp->len) {
   1f01c:	68ee      	ldr	r6, [r5, #12]
   1f01e:	68a8      	ldr	r0, [r5, #8]
   1f020:	7832      	ldrb	r2, [r6, #0]
   1f022:	1c8b      	adds	r3, r1, #2
   1f024:	b97a      	cbnz	r2, 1f046 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   1f026:	7033      	strb	r3, [r6, #0]
	net_buf_add(data->buf, read);
   1f028:	3008      	adds	r0, #8
   1f02a:	f001 f88a 	bl	20142 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   1f02e:	68ab      	ldr	r3, [r5, #8]
   1f030:	f8b8 4042 	ldrh.w	r4, [r8, #66]	; 0x42
   1f034:	8998      	ldrh	r0, [r3, #12]
   1f036:	68eb      	ldr	r3, [r5, #12]
   1f038:	1a24      	subs	r4, r4, r0
   1f03a:	7818      	ldrb	r0, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1f03c:	4284      	cmp	r4, r0
   1f03e:	bfd4      	ite	le
   1f040:	2400      	movle	r4, #0
   1f042:	2401      	movgt	r4, #1
   1f044:	e7c7      	b.n	1efd6 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1f046:	429a      	cmp	r2, r3
   1f048:	d0ee      	beq.n	1f028 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   1f04a:	8983      	ldrh	r3, [r0, #12]
   1f04c:	3b02      	subs	r3, #2
   1f04e:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   1f050:	e7c1      	b.n	1efd6 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1f052:	2401      	movs	r4, #1
   1f054:	e7bf      	b.n	1efd6 <read_type_cb+0x38>

0001f056 <att_send_req>:
{
   1f056:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f058:	4605      	mov	r5, r0
   1f05a:	460c      	mov	r4, r1
	att->req = req;
   1f05c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return z_impl_k_sem_take(sem, timeout);
   1f060:	2100      	movs	r1, #0
   1f062:	30c0      	adds	r0, #192	; 0xc0
   1f064:	f7fc fbca 	bl	1b7fc <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   1f068:	2800      	cmp	r0, #0
   1f06a:	da08      	bge.n	1f07e <att_send_req+0x28>
		k_fifo_put(&att->tx_queue, req->buf);
   1f06c:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
   1f070:	6921      	ldr	r1, [r4, #16]
   1f072:	f001 fadb 	bl	2062c <k_queue_append>
		return 0;
   1f076:	2500      	movs	r5, #0
}
   1f078:	4628      	mov	r0, r5
   1f07a:	b002      	add	sp, #8
   1f07c:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
   1f07e:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   1f080:	f106 0008 	add.w	r0, r6, #8
   1f084:	f001 f894 	bl	201b0 <net_buf_simple_headroom>
	state->len = buf->len;
   1f088:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1f08a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1f08c:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
   1f08e:	6920      	ldr	r0, [r4, #16]
   1f090:	682d      	ldr	r5, [r5, #0]
   1f092:	f001 f852 	bl	2013a <net_buf_ref>
   1f096:	6923      	ldr	r3, [r4, #16]
   1f098:	4601      	mov	r1, r0
   1f09a:	6898      	ldr	r0, [r3, #8]
   1f09c:	f7eb fc4e 	bl	a93c <att_cb.isra.0>
   1f0a0:	2600      	movs	r6, #0
   1f0a2:	4603      	mov	r3, r0
   1f0a4:	460a      	mov	r2, r1
   1f0a6:	4628      	mov	r0, r5
   1f0a8:	9600      	str	r6, [sp, #0]
   1f0aa:	2104      	movs	r1, #4
   1f0ac:	f7ff fe53 	bl	1ed56 <bt_l2cap_send_cb>
	if (err) {
   1f0b0:	4605      	mov	r5, r0
   1f0b2:	2800      	cmp	r0, #0
   1f0b4:	d0e0      	beq.n	1f078 <att_send_req+0x22>
		net_buf_unref(req->buf);
   1f0b6:	6920      	ldr	r0, [r4, #16]
   1f0b8:	f7fa fd9e 	bl	19bf8 <net_buf_unref>
		req->buf = NULL;
   1f0bc:	6126      	str	r6, [r4, #16]
		return err;
   1f0be:	e7db      	b.n	1f078 <att_send_req+0x22>

0001f0c0 <att_pdu_sent>:
{
   1f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f0c4:	2104      	movs	r1, #4
{
   1f0c6:	4607      	mov	r7, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f0c8:	f7ff fe5e 	bl	1ed88 <bt_l2cap_le_lookup_tx_cid>
   1f0cc:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1f0ce:	f100 08d8 	add.w	r8, r0, #216	; 0xd8
   1f0d2:	2100      	movs	r1, #0
   1f0d4:	4640      	mov	r0, r8
   1f0d6:	f001 f806 	bl	200e6 <net_buf_get>
   1f0da:	4604      	mov	r4, r0
   1f0dc:	b928      	cbnz	r0, 1f0ea <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   1f0de:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
}
   1f0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f0e6:	f7fc bb63 	b.w	1b7b0 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   1f0ea:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
   1f0ee:	b14e      	cbz	r6, 1f104 <att_pdu_sent+0x44>
   1f0f0:	6933      	ldr	r3, [r6, #16]
   1f0f2:	42a3      	cmp	r3, r4
   1f0f4:	d106      	bne.n	1f104 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   1f0f6:	f104 0008 	add.w	r0, r4, #8
   1f0fa:	f001 f859 	bl	201b0 <net_buf_simple_headroom>
	state->len = buf->len;
   1f0fe:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1f100:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
   1f102:	81f3      	strh	r3, [r6, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   1f104:	2300      	movs	r3, #0
   1f106:	461a      	mov	r2, r3
   1f108:	4621      	mov	r1, r4
   1f10a:	4638      	mov	r0, r7
   1f10c:	f7eb fc28 	bl	a960 <att_send>
   1f110:	2800      	cmp	r0, #0
   1f112:	d1de      	bne.n	1f0d2 <att_pdu_sent+0x12>
}
   1f114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f118 <att_rsp_sent>:
{
   1f118:	b538      	push	{r3, r4, r5, lr}
   1f11a:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f11c:	2104      	movs	r1, #4
{
   1f11e:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f120:	f7ff fe32 	bl	1ed88 <bt_l2cap_le_lookup_tx_cid>
   1f124:	f3bf 8f5b 	dmb	ish
   1f128:	f100 0390 	add.w	r3, r0, #144	; 0x90
   1f12c:	e853 2f00 	ldrex	r2, [r3]
   1f130:	f022 0201 	bic.w	r2, r2, #1
   1f134:	e843 2100 	strex	r1, r2, [r3]
   1f138:	2900      	cmp	r1, #0
   1f13a:	d1f7      	bne.n	1f12c <att_rsp_sent+0x14>
   1f13c:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1f140:	4629      	mov	r1, r5
   1f142:	4620      	mov	r0, r4
}
   1f144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   1f148:	f7ff bfba 	b.w	1f0c0 <att_pdu_sent>

0001f14c <att_cfm_sent>:
{
   1f14c:	b538      	push	{r3, r4, r5, lr}
   1f14e:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f150:	2104      	movs	r1, #4
{
   1f152:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f154:	f7ff fe18 	bl	1ed88 <bt_l2cap_le_lookup_tx_cid>
   1f158:	f3bf 8f5b 	dmb	ish
   1f15c:	f100 0390 	add.w	r3, r0, #144	; 0x90
   1f160:	e853 2f00 	ldrex	r2, [r3]
   1f164:	f022 0202 	bic.w	r2, r2, #2
   1f168:	e843 2100 	strex	r1, r2, [r3]
   1f16c:	2900      	cmp	r1, #0
   1f16e:	d1f7      	bne.n	1f160 <att_cfm_sent+0x14>
   1f170:	f3bf 8f5b 	dmb	ish
	att_pdu_sent(conn, user_data);
   1f174:	4629      	mov	r1, r5
   1f176:	4620      	mov	r0, r4
}
   1f178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   1f17c:	f7ff bfa0 	b.w	1f0c0 <att_pdu_sent>

0001f180 <write_cb>:
{
   1f180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f182:	460c      	mov	r4, r1
   1f184:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f186:	4601      	mov	r1, r0
   1f188:	222a      	movs	r2, #42	; 0x2a
   1f18a:	6820      	ldr	r0, [r4, #0]
   1f18c:	f000 fba2 	bl	1f8d4 <bt_gatt_check_perm>
   1f190:	4605      	mov	r5, r0
   1f192:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f194:	bb00      	cbnz	r0, 1f1d8 <write_cb+0x58>
	if (!data->req) {
   1f196:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1f198:	68b7      	ldr	r7, [r6, #8]
   1f19a:	68e2      	ldr	r2, [r4, #12]
   1f19c:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1f19e:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f1a0:	bf14      	ite	ne
   1f1a2:	2300      	movne	r3, #0
   1f1a4:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f1a6:	9301      	str	r3, [sp, #4]
   1f1a8:	8a63      	ldrh	r3, [r4, #18]
   1f1aa:	9300      	str	r3, [sp, #0]
   1f1ac:	4631      	mov	r1, r6
   1f1ae:	8a23      	ldrh	r3, [r4, #16]
   1f1b0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f1b2:	1e03      	subs	r3, r0, #0
   1f1b4:	db05      	blt.n	1f1c2 <write_cb+0x42>
   1f1b6:	8a22      	ldrh	r2, [r4, #16]
   1f1b8:	4293      	cmp	r3, r2
   1f1ba:	d10b      	bne.n	1f1d4 <write_cb+0x54>
	data->err = 0U;
   1f1bc:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f1be:	2501      	movs	r5, #1
   1f1c0:	e005      	b.n	1f1ce <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1f1c2:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f1c6:	d305      	bcc.n	1f1d4 <write_cb+0x54>
		return -err;
   1f1c8:	425b      	negs	r3, r3
   1f1ca:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f1cc:	7523      	strb	r3, [r4, #20]
}
   1f1ce:	4628      	mov	r0, r5
   1f1d0:	b003      	add	sp, #12
   1f1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f1d4:	230e      	movs	r3, #14
   1f1d6:	e7f9      	b.n	1f1cc <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1f1d8:	2500      	movs	r5, #0
   1f1da:	e7f8      	b.n	1f1ce <write_cb+0x4e>

0001f1dc <read_cb>:
{
   1f1dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f1e0:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f1e2:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1f1e4:	f8d1 9000 	ldr.w	r9, [r1]
{
   1f1e8:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f1ea:	3008      	adds	r0, #8
   1f1ec:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   1f1ee:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f1f2:	f000 ffa6 	bl	20142 <net_buf_simple_add>
	data->err = 0x00;
   1f1f6:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f1f8:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   1f1fa:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f1fc:	2215      	movs	r2, #21
   1f1fe:	4631      	mov	r1, r6
   1f200:	4640      	mov	r0, r8
   1f202:	f000 fb67 	bl	1f8d4 <bt_gatt_check_perm>
   1f206:	4605      	mov	r5, r0
   1f208:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1f20a:	bb00      	cbnz	r0, 1f24e <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1f20c:	68a1      	ldr	r1, [r4, #8]
   1f20e:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   1f212:	898a      	ldrh	r2, [r1, #12]
   1f214:	6889      	ldr	r1, [r1, #8]
   1f216:	88a0      	ldrh	r0, [r4, #4]
   1f218:	9000      	str	r0, [sp, #0]
   1f21a:	1a9b      	subs	r3, r3, r2
   1f21c:	6877      	ldr	r7, [r6, #4]
   1f21e:	440a      	add	r2, r1
   1f220:	b29b      	uxth	r3, r3
   1f222:	4631      	mov	r1, r6
   1f224:	4640      	mov	r0, r8
   1f226:	47b8      	blx	r7
	if (read < 0) {
   1f228:	1e01      	subs	r1, r0, #0
   1f22a:	da0a      	bge.n	1f242 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   1f22c:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1f230:	bf26      	itte	cs
   1f232:	4249      	negcs	r1, r1
   1f234:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1f236:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1f238:	7421      	strb	r1, [r4, #16]
}
   1f23a:	4628      	mov	r0, r5
   1f23c:	b003      	add	sp, #12
   1f23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   1f242:	68a0      	ldr	r0, [r4, #8]
   1f244:	3008      	adds	r0, #8
   1f246:	f000 ff7c 	bl	20142 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1f24a:	2501      	movs	r5, #1
   1f24c:	e7f5      	b.n	1f23a <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   1f24e:	463d      	mov	r5, r7
   1f250:	e7f3      	b.n	1f23a <read_cb+0x5e>

0001f252 <att_write_cmd>:
{
   1f252:	b530      	push	{r4, r5, lr}
   1f254:	460c      	mov	r4, r1
   1f256:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   1f258:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1f25a:	f101 0008 	add.w	r0, r1, #8
   1f25e:	f000 ff9f 	bl	201a0 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   1f262:	89a2      	ldrh	r2, [r4, #12]
   1f264:	9202      	str	r2, [sp, #8]
   1f266:	68a2      	ldr	r2, [r4, #8]
   1f268:	9201      	str	r2, [sp, #4]
   1f26a:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1f26c:	4603      	mov	r3, r0
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   1f26e:	9200      	str	r2, [sp, #0]
   1f270:	4611      	mov	r1, r2
   1f272:	4628      	mov	r0, r5
   1f274:	f7eb fdca 	bl	ae0c <att_write_rsp>
}
   1f278:	b005      	add	sp, #20
   1f27a:	bd30      	pop	{r4, r5, pc}

0001f27c <att_write_req>:
{
   1f27c:	b530      	push	{r4, r5, lr}
   1f27e:	460c      	mov	r4, r1
   1f280:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   1f282:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1f284:	f101 0008 	add.w	r0, r1, #8
   1f288:	f000 ff8a 	bl	201a0 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f28c:	89a2      	ldrh	r2, [r4, #12]
   1f28e:	9202      	str	r2, [sp, #8]
   1f290:	68a2      	ldr	r2, [r4, #8]
   1f292:	9201      	str	r2, [sp, #4]
   1f294:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1f296:	4603      	mov	r3, r0
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f298:	9200      	str	r2, [sp, #0]
   1f29a:	2112      	movs	r1, #18
   1f29c:	2213      	movs	r2, #19
   1f29e:	4628      	mov	r0, r5
   1f2a0:	f7eb fdb4 	bl	ae0c <att_write_rsp>
}
   1f2a4:	b005      	add	sp, #20
   1f2a6:	bd30      	pop	{r4, r5, pc}

0001f2a8 <att_read_blob_req>:
{
   1f2a8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f2aa:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   1f2ac:	8813      	ldrh	r3, [r2, #0]
   1f2ae:	8852      	ldrh	r2, [r2, #2]
   1f2b0:	9200      	str	r2, [sp, #0]
   1f2b2:	210c      	movs	r1, #12
   1f2b4:	220d      	movs	r2, #13
   1f2b6:	f7eb ffcd 	bl	b254 <att_read_rsp>
}
   1f2ba:	b003      	add	sp, #12
   1f2bc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f2c0 <att_read_req>:
{
   1f2c0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f2c2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f2c4:	2200      	movs	r2, #0
   1f2c6:	881b      	ldrh	r3, [r3, #0]
   1f2c8:	9200      	str	r2, [sp, #0]
   1f2ca:	210a      	movs	r1, #10
   1f2cc:	220b      	movs	r2, #11
   1f2ce:	f7eb ffc1 	bl	b254 <att_read_rsp>
}
   1f2d2:	b003      	add	sp, #12
   1f2d4:	f85d fb04 	ldr.w	pc, [sp], #4

0001f2d8 <bt_att_init>:
	bt_gatt_init();
   1f2d8:	f7ec bf94 	b.w	c204 <bt_gatt_init>

0001f2dc <att_req_destroy>:
{
   1f2dc:	b510      	push	{r4, lr}
   1f2de:	4604      	mov	r4, r0
	if (req->buf) {
   1f2e0:	6900      	ldr	r0, [r0, #16]
   1f2e2:	b108      	cbz	r0, 1f2e8 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1f2e4:	f7fa fc88 	bl	19bf8 <net_buf_unref>
	if (req->destroy) {
   1f2e8:	68a3      	ldr	r3, [r4, #8]
   1f2ea:	b10b      	cbz	r3, 1f2f0 <att_req_destroy+0x14>
		req->destroy(req);
   1f2ec:	4620      	mov	r0, r4
   1f2ee:	4798      	blx	r3
	bt_att_req_free(req);
   1f2f0:	4620      	mov	r0, r4
}
   1f2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1f2f6:	f7ec b927 	b.w	b548 <bt_att_req_free>

0001f2fa <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   1f2fa:	898a      	ldrh	r2, [r1, #12]
   1f2fc:	6889      	ldr	r1, [r1, #8]
   1f2fe:	2300      	movs	r3, #0
   1f300:	f7ec b92e 	b.w	b560 <att_handle_rsp>

0001f304 <att_reset>:
{
   1f304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f306:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   1f308:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
	return z_impl_k_queue_get(queue, timeout);
   1f30c:	2100      	movs	r1, #0
   1f30e:	4628      	mov	r0, r5
   1f310:	f001 f9bb 	bl	2068a <z_impl_k_queue_get>
   1f314:	bb50      	cbnz	r0, 1f36c <att_reset+0x68>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   1f316:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   1f31a:	2100      	movs	r1, #0
   1f31c:	4628      	mov	r0, r5
   1f31e:	f001 f9b4 	bl	2068a <z_impl_k_queue_get>
   1f322:	bb30      	cbnz	r0, 1f372 <att_reset+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f324:	f3bf 8f5b 	dmb	ish
   1f328:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1f32c:	e853 2f00 	ldrex	r2, [r3]
   1f330:	f042 0204 	orr.w	r2, r2, #4
   1f334:	e843 2100 	strex	r1, r2, [r3]
   1f338:	2900      	cmp	r1, #0
   1f33a:	d1f7      	bne.n	1f32c <att_reset+0x28>
   1f33c:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   1f340:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
	z_impl_k_sem_give(sem);
   1f344:	4628      	mov	r0, r5
   1f346:	f7fc fa33 	bl	1b7b0 <z_impl_k_sem_give>
   1f34a:	4628      	mov	r0, r5
   1f34c:	f7fc fa30 	bl	1b7b0 <z_impl_k_sem_give>
   1f350:	4628      	mov	r0, r5
   1f352:	f7fc fa2d 	bl	1b7b0 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1f356:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   1f35a:	b96e      	cbnz	r6, 1f378 <att_reset+0x74>
	if (!att->req) {
   1f35c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	list->head = NULL;
   1f360:	2200      	movs	r2, #0
	list->tail = NULL;
   1f362:	e9c4 2226 	strd	r2, r2, [r4, #152]	; 0x98
   1f366:	b9fb      	cbnz	r3, 1f3a8 <att_reset+0xa4>
}
   1f368:	b003      	add	sp, #12
   1f36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1f36c:	f7fa fc44 	bl	19bf8 <net_buf_unref>
   1f370:	e7cc      	b.n	1f30c <att_reset+0x8>
		net_buf_unref(buf);
   1f372:	f7fa fc41 	bl	19bf8 <net_buf_unref>
   1f376:	e7d0      	b.n	1f31a <att_reset+0x16>
	return node->next;
   1f378:	6835      	ldr	r5, [r6, #0]
   1f37a:	2d00      	cmp	r5, #0
   1f37c:	bf38      	it	cc
   1f37e:	2500      	movcc	r5, #0
		if (req->func) {
   1f380:	6877      	ldr	r7, [r6, #4]
   1f382:	b12f      	cbz	r7, 1f390 <att_reset+0x8c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   1f384:	2300      	movs	r3, #0
   1f386:	9600      	str	r6, [sp, #0]
   1f388:	461a      	mov	r2, r3
   1f38a:	210e      	movs	r1, #14
   1f38c:	4618      	mov	r0, r3
   1f38e:	47b8      	blx	r7
		att_req_destroy(req);
   1f390:	4630      	mov	r0, r6
   1f392:	f7ff ffa3 	bl	1f2dc <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1f396:	2d00      	cmp	r5, #0
   1f398:	d0e0      	beq.n	1f35c <att_reset+0x58>
   1f39a:	682b      	ldr	r3, [r5, #0]
   1f39c:	2b00      	cmp	r3, #0
   1f39e:	bf38      	it	cc
   1f3a0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f3a2:	462e      	mov	r6, r5
   1f3a4:	461d      	mov	r5, r3
   1f3a6:	e7eb      	b.n	1f380 <att_reset+0x7c>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f3a8:	230e      	movs	r3, #14
   1f3aa:	4611      	mov	r1, r2
   1f3ac:	4620      	mov	r0, r4
}
   1f3ae:	b003      	add	sp, #12
   1f3b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f3b4:	f7ec b8d4 	b.w	b560 <att_handle_rsp>

0001f3b8 <bt_att_disconnected>:
{
   1f3b8:	b510      	push	{r4, lr}
   1f3ba:	4604      	mov	r4, r0
	att_reset(att);
   1f3bc:	f7ff ffa2 	bl	1f304 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f3c0:	6820      	ldr	r0, [r4, #0]
}
   1f3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1f3c6:	f7ed bb81 	b.w	cacc <bt_gatt_disconnected>

0001f3ca <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1f3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3ce:	4607      	mov	r7, r0
   1f3d0:	460d      	mov	r5, r1
   1f3d2:	4614      	mov	r4, r2
   1f3d4:	4698      	mov	r8, r3
	int err;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_chan_get(conn);
   1f3d6:	f7eb fb43 	bl	aa60 <att_chan_get>
	if (!att) {
   1f3da:	4606      	mov	r6, r0
   1f3dc:	b938      	cbnz	r0, 1f3ee <bt_att_send+0x24>
		net_buf_unref(buf);
   1f3de:	4628      	mov	r0, r5
   1f3e0:	f7fa fc0a 	bl	19bf8 <net_buf_unref>
		return -ENOTCONN;
   1f3e4:	f06f 0538 	mvn.w	r5, #56	; 0x38
		}
		return err;
	}

	return 0;
}
   1f3e8:	4628      	mov	r0, r5
   1f3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
   1f3ee:	b964      	cbnz	r4, 1f40a <bt_att_send+0x40>
	return z_impl_k_sem_take(sem, timeout);
   1f3f0:	4621      	mov	r1, r4
   1f3f2:	30c0      	adds	r0, #192	; 0xc0
   1f3f4:	f7fc fa02 	bl	1b7fc <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
   1f3f8:	2800      	cmp	r0, #0
   1f3fa:	da06      	bge.n	1f40a <bt_att_send+0x40>
			k_fifo_put(&att->tx_queue, buf);
   1f3fc:	4629      	mov	r1, r5
   1f3fe:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
   1f402:	f001 f913 	bl	2062c <k_queue_append>
			return 0;
   1f406:	4625      	mov	r5, r4
   1f408:	e7ee      	b.n	1f3e8 <bt_att_send+0x1e>
	err = att_send(conn, buf, cb, user_data);
   1f40a:	4629      	mov	r1, r5
   1f40c:	4643      	mov	r3, r8
   1f40e:	4622      	mov	r2, r4
   1f410:	4638      	mov	r0, r7
   1f412:	f7eb faa5 	bl	a960 <att_send>
	if (err) {
   1f416:	4605      	mov	r5, r0
   1f418:	2800      	cmp	r0, #0
   1f41a:	d0e5      	beq.n	1f3e8 <bt_att_send+0x1e>
		if (!cb) {
   1f41c:	2c00      	cmp	r4, #0
   1f41e:	d1e3      	bne.n	1f3e8 <bt_att_send+0x1e>
	z_impl_k_sem_give(sem);
   1f420:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1f424:	f7fc f9c4 	bl	1b7b0 <z_impl_k_sem_give>
}
   1f428:	e7de      	b.n	1f3e8 <bt_att_send+0x1e>

0001f42a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f42a:	b538      	push	{r3, r4, r5, lr}
   1f42c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_chan_get(conn);
   1f42e:	f7eb fb17 	bl	aa60 <att_chan_get>
	if (!att) {
   1f432:	4605      	mov	r5, r0
   1f434:	b930      	cbnz	r0, 1f444 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1f436:	6920      	ldr	r0, [r4, #16]
   1f438:	f7fa fbde 	bl	19bf8 <net_buf_unref>
		req->buf = NULL;
   1f43c:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1f43e:	f06f 0038 	mvn.w	r0, #56	; 0x38
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
   1f442:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
   1f444:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1f448:	b163      	cbz	r3, 1f464 <bt_att_req_send+0x3a>
	parent->next = child;
   1f44a:	2000      	movs	r0, #0
   1f44c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1f44e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1f452:	b91b      	cbnz	r3, 1f45c <bt_att_req_send+0x32>
	list->head = node;
   1f454:	e9c5 4426 	strd	r4, r4, [r5, #152]	; 0x98
		return 0;
   1f458:	4618      	mov	r0, r3
}
   1f45a:	e7f2      	b.n	1f442 <bt_att_req_send+0x18>
	parent->next = child;
   1f45c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f45e:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   1f462:	e7ee      	b.n	1f442 <bt_att_req_send+0x18>
	return att_send_req(att, req);
   1f464:	4621      	mov	r1, r4
}
   1f466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
   1f46a:	f7ff bdf4 	b.w	1f056 <att_send_req>

0001f46e <gatt_ccc_changed>:
{
   1f46e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1f470:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1f472:	895a      	ldrh	r2, [r3, #10]
   1f474:	428a      	cmp	r2, r1
   1f476:	d003      	beq.n	1f480 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1f478:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1f47a:	68db      	ldr	r3, [r3, #12]
   1f47c:	b103      	cbz	r3, 1f480 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1f47e:	4718      	bx	r3
}
   1f480:	4770      	bx	lr

0001f482 <gatt_indicate_rsp>:
{
   1f482:	b410      	push	{r4}
   1f484:	9b01      	ldr	r3, [sp, #4]
   1f486:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   1f488:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   1f48c:	4623      	mov	r3, r4
}
   1f48e:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   1f490:	4718      	bx	r3

0001f492 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f492:	2207      	movs	r2, #7
   1f494:	f7ff b828 	b.w	1e4e8 <memcpy>

0001f498 <clear_ccc_cfg>:
{
   1f498:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f49a:	2500      	movs	r5, #0
{
   1f49c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f49e:	4669      	mov	r1, sp
   1f4a0:	3001      	adds	r0, #1
   1f4a2:	9500      	str	r5, [sp, #0]
   1f4a4:	f8cd 5003 	str.w	r5, [sp, #3]
   1f4a8:	f7ff fff3 	bl	1f492 <bt_addr_le_copy>
	cfg->id = 0U;
   1f4ac:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f4ae:	8125      	strh	r5, [r4, #8]
}
   1f4b0:	b003      	add	sp, #12
   1f4b2:	bd30      	pop	{r4, r5, pc}

0001f4b4 <write_name>:
{
   1f4b4:	b570      	push	{r4, r5, r6, lr}
   1f4b6:	b092      	sub	sp, #72	; 0x48
   1f4b8:	4615      	mov	r5, r2
   1f4ba:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4be:	2100      	movs	r1, #0
   1f4c0:	223d      	movs	r2, #61	; 0x3d
   1f4c2:	a802      	add	r0, sp, #8
{
   1f4c4:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f4c6:	9101      	str	r1, [sp, #4]
   1f4c8:	f7ff f839 	bl	1e53e <memset>
	if (offset) {
   1f4cc:	b966      	cbnz	r6, 1f4e8 <write_name+0x34>
	if (len >= sizeof(value)) {
   1f4ce:	2c40      	cmp	r4, #64	; 0x40
   1f4d0:	d80d      	bhi.n	1f4ee <write_name+0x3a>
	memcpy(value, buf, len);
   1f4d2:	4622      	mov	r2, r4
   1f4d4:	4629      	mov	r1, r5
   1f4d6:	a801      	add	r0, sp, #4
   1f4d8:	f7ff f806 	bl	1e4e8 <memcpy>
	bt_set_name(value);
   1f4dc:	a801      	add	r0, sp, #4
   1f4de:	f7e9 fc73 	bl	8dc8 <bt_set_name>
	return len;
   1f4e2:	4620      	mov	r0, r4
}
   1f4e4:	b012      	add	sp, #72	; 0x48
   1f4e6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f4e8:	f06f 0006 	mvn.w	r0, #6
   1f4ec:	e7fa      	b.n	1f4e4 <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f4ee:	f06f 000c 	mvn.w	r0, #12
   1f4f2:	e7f7      	b.n	1f4e4 <write_name+0x30>

0001f4f4 <gen_hash_m>:
{
   1f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f4f6:	6807      	ldr	r7, [r0, #0]
   1f4f8:	783e      	ldrb	r6, [r7, #0]
{
   1f4fa:	b089      	sub	sp, #36	; 0x24
   1f4fc:	4605      	mov	r5, r0
   1f4fe:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f500:	b10e      	cbz	r6, 1f506 <gen_hash_m+0x12>
	switch (u16->val) {
   1f502:	2601      	movs	r6, #1
   1f504:	e015      	b.n	1f532 <gen_hash_m+0x3e>
   1f506:	887b      	ldrh	r3, [r7, #2]
   1f508:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f50c:	d004      	beq.n	1f518 <gen_hash_m+0x24>
   1f50e:	d813      	bhi.n	1f538 <gen_hash_m+0x44>
   1f510:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f514:	2b03      	cmp	r3, #3
   1f516:	d8f4      	bhi.n	1f502 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1f518:	8a2b      	ldrh	r3, [r5, #16]
   1f51a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f51e:	2202      	movs	r2, #2
   1f520:	f10d 010e 	add.w	r1, sp, #14
   1f524:	4620      	mov	r0, r4
   1f526:	f7fd ffdb 	bl	1d4e0 <tc_cmac_update>
   1f52a:	b9e8      	cbnz	r0, 1f568 <gen_hash_m+0x74>
			state->err = -EINVAL;
   1f52c:	f06f 0315 	mvn.w	r3, #21
   1f530:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f532:	4630      	mov	r0, r6
   1f534:	b009      	add	sp, #36	; 0x24
   1f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f538:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f53c:	33ff      	adds	r3, #255	; 0xff
   1f53e:	b29b      	uxth	r3, r3
   1f540:	2b04      	cmp	r3, #4
   1f542:	d8de      	bhi.n	1f502 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1f544:	8a03      	ldrh	r3, [r0, #16]
   1f546:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f54a:	2202      	movs	r2, #2
   1f54c:	f10d 010e 	add.w	r1, sp, #14
   1f550:	4620      	mov	r0, r4
   1f552:	f7fd ffc5 	bl	1d4e0 <tc_cmac_update>
   1f556:	2800      	cmp	r0, #0
   1f558:	d0e8      	beq.n	1f52c <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   1f55a:	887b      	ldrh	r3, [r7, #2]
   1f55c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f560:	2202      	movs	r2, #2
   1f562:	f10d 010e 	add.w	r1, sp, #14
   1f566:	e017      	b.n	1f598 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   1f568:	887b      	ldrh	r3, [r7, #2]
   1f56a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f56e:	2202      	movs	r2, #2
   1f570:	f10d 010e 	add.w	r1, sp, #14
   1f574:	4620      	mov	r0, r4
   1f576:	f7fd ffb3 	bl	1d4e0 <tc_cmac_update>
   1f57a:	2800      	cmp	r0, #0
   1f57c:	d0d6      	beq.n	1f52c <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f57e:	2000      	movs	r0, #0
   1f580:	2310      	movs	r3, #16
   1f582:	eb0d 0203 	add.w	r2, sp, r3
   1f586:	686f      	ldr	r7, [r5, #4]
   1f588:	9000      	str	r0, [sp, #0]
   1f58a:	4629      	mov	r1, r5
   1f58c:	47b8      	blx	r7
		if (len < 0) {
   1f58e:	1e02      	subs	r2, r0, #0
   1f590:	da01      	bge.n	1f596 <gen_hash_m+0xa2>
			state->err = len;
   1f592:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f594:	e7cd      	b.n	1f532 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   1f596:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f598:	4620      	mov	r0, r4
   1f59a:	f7fd ffa1 	bl	1d4e0 <tc_cmac_update>
   1f59e:	2800      	cmp	r0, #0
   1f5a0:	d1af      	bne.n	1f502 <gen_hash_m+0xe>
   1f5a2:	e7c3      	b.n	1f52c <gen_hash_m+0x38>

0001f5a4 <clear_cf_cfg>:
{
   1f5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f5a6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f5a8:	2500      	movs	r5, #0
   1f5aa:	4669      	mov	r1, sp
   1f5ac:	3001      	adds	r0, #1
   1f5ae:	9500      	str	r5, [sp, #0]
   1f5b0:	f8cd 5003 	str.w	r5, [sp, #3]
   1f5b4:	f7ff ff6d 	bl	1f492 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f5b8:	f104 0008 	add.w	r0, r4, #8
   1f5bc:	2201      	movs	r2, #1
   1f5be:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f5c0:	340c      	adds	r4, #12
   1f5c2:	f7fe ffbc 	bl	1e53e <memset>
   1f5c6:	f3bf 8f5b 	dmb	ish
   1f5ca:	e854 3f00 	ldrex	r3, [r4]
   1f5ce:	e844 5200 	strex	r2, r5, [r4]
   1f5d2:	2a00      	cmp	r2, #0
   1f5d4:	d1f9      	bne.n	1f5ca <clear_cf_cfg+0x26>
   1f5d6:	f3bf 8f5b 	dmb	ish
}
   1f5da:	b003      	add	sp, #12
   1f5dc:	bd30      	pop	{r4, r5, pc}

0001f5de <match_uuid>:
   1f5de:	6008      	str	r0, [r1, #0]
   1f5e0:	2000      	movs	r0, #0
   1f5e2:	4770      	bx	lr

0001f5e4 <ccc_find_cfg>:
{
   1f5e4:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1f5e6:	7803      	ldrb	r3, [r0, #0]
   1f5e8:	4293      	cmp	r3, r2
{
   1f5ea:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1f5ec:	d001      	beq.n	1f5f2 <ccc_find_cfg+0xe>
	return NULL;
   1f5ee:	2000      	movs	r0, #0
}
   1f5f0:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1f5f2:	2207      	movs	r2, #7
   1f5f4:	3001      	adds	r0, #1
   1f5f6:	f7fe ff67 	bl	1e4c8 <memcmp>
		if (id == ccc->cfg[i].id &&
   1f5fa:	2800      	cmp	r0, #0
   1f5fc:	d1f7      	bne.n	1f5ee <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   1f5fe:	4620      	mov	r0, r4
   1f600:	e7f6      	b.n	1f5f0 <ccc_find_cfg+0xc>

0001f602 <find_ccc_cfg>:
{
   1f602:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f604:	460c      	mov	r4, r1
   1f606:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1f608:	b148      	cbz	r0, 1f61e <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f60a:	7809      	ldrb	r1, [r1, #0]
   1f60c:	462a      	mov	r2, r5
   1f60e:	f7ff facc 	bl	1ebaa <bt_conn_is_peer_addr_le>
   1f612:	2800      	cmp	r0, #0
	return NULL;
   1f614:	bf08      	it	eq
   1f616:	2400      	moveq	r4, #0
}
   1f618:	4620      	mov	r0, r4
   1f61a:	b003      	add	sp, #12
   1f61c:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f61e:	9000      	str	r0, [sp, #0]
   1f620:	2207      	movs	r2, #7
   1f622:	f8cd 0003 	str.w	r0, [sp, #3]
   1f626:	4669      	mov	r1, sp
   1f628:	4628      	mov	r0, r5
   1f62a:	f7fe ff4d 	bl	1e4c8 <memcmp>
   1f62e:	2800      	cmp	r0, #0
	return NULL;
   1f630:	bf18      	it	ne
   1f632:	2400      	movne	r4, #0
   1f634:	e7f0      	b.n	1f618 <find_ccc_cfg+0x16>

0001f636 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f636:	2301      	movs	r3, #1
   1f638:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f63a:	f3bf 8f5b 	dmb	ish
   1f63e:	e850 2f00 	ldrex	r2, [r0]
   1f642:	431a      	orrs	r2, r3
   1f644:	e840 2100 	strex	r1, r2, [r0]
   1f648:	2900      	cmp	r1, #0
   1f64a:	d1f8      	bne.n	1f63e <atomic_set_bit+0x8>
   1f64c:	f3bf 8f5b 	dmb	ish
}
   1f650:	4770      	bx	lr

0001f652 <sc_clear_by_conn>:
{
   1f652:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f654:	f100 0170 	add.w	r1, r0, #112	; 0x70
   1f658:	7a00      	ldrb	r0, [r0, #8]
   1f65a:	f7ec facd 	bl	bbf8 <find_sc_cfg>
	if (cfg) {
   1f65e:	b118      	cbz	r0, 1f668 <sc_clear_by_conn+0x16>
}
   1f660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sc_clear(cfg);
   1f664:	f7ec b8da 	b.w	b81c <sc_clear>
}
   1f668:	bd08      	pop	{r3, pc}

0001f66a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f66a:	2a02      	cmp	r2, #2
{
   1f66c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f66e:	d108      	bne.n	1f682 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f670:	2300      	movs	r3, #0
   1f672:	f100 0170 	add.w	r1, r0, #112	; 0x70
   1f676:	461a      	mov	r2, r3
   1f678:	7a00      	ldrb	r0, [r0, #8]
   1f67a:	f7ec fadf 	bl	bc3c <sc_save>
}
   1f67e:	2002      	movs	r0, #2
   1f680:	bd10      	pop	{r4, pc}
		sc_clear_by_conn(conn);
   1f682:	f7ff ffe6 	bl	1f652 <sc_clear_by_conn>
   1f686:	e7fa      	b.n	1f67e <sc_ccc_cfg_write+0x14>

0001f688 <sc_restore_rsp>:
{
   1f688:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f68a:	f7ec fc73 	bl	bf74 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f68e:	b140      	cbz	r0, 1f6a2 <sc_restore_rsp+0x1a>
   1f690:	7a03      	ldrb	r3, [r0, #8]
   1f692:	07db      	lsls	r3, r3, #31
   1f694:	d505      	bpl.n	1f6a2 <sc_restore_rsp+0x1a>
}
   1f696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f69a:	2100      	movs	r1, #0
   1f69c:	300c      	adds	r0, #12
   1f69e:	f7ff bfca 	b.w	1f636 <atomic_set_bit>
}
   1f6a2:	bd08      	pop	{r3, pc}

0001f6a4 <read_appearance>:
{
   1f6a4:	b513      	push	{r0, r1, r4, lr}
   1f6a6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f6aa:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f6ac:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f6ae:	f240 3241 	movw	r2, #833	; 0x341
   1f6b2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f6b6:	d80d      	bhi.n	1f6d4 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1f6b8:	f1c1 0402 	rsb	r4, r1, #2
   1f6bc:	429c      	cmp	r4, r3
   1f6be:	bfa8      	it	ge
   1f6c0:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1f6c2:	f10d 0306 	add.w	r3, sp, #6
   1f6c6:	4622      	mov	r2, r4
   1f6c8:	4419      	add	r1, r3
   1f6ca:	f7fe ff0d 	bl	1e4e8 <memcpy>
}
   1f6ce:	4620      	mov	r0, r4
   1f6d0:	b002      	add	sp, #8
   1f6d2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f6d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f6d8:	e7f9      	b.n	1f6ce <read_appearance+0x2a>

0001f6da <read_name>:
{
   1f6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6de:	4698      	mov	r8, r3
   1f6e0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f6e4:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f6e6:	f7e9 fbbd 	bl	8e64 <bt_get_name>
   1f6ea:	4607      	mov	r7, r0
				 strlen(name));
   1f6ec:	f7fe feca 	bl	1e484 <strlen>
	if (offset > value_len) {
   1f6f0:	b283      	uxth	r3, r0
   1f6f2:	42b3      	cmp	r3, r6
   1f6f4:	d30c      	bcc.n	1f710 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f6f6:	1b9c      	subs	r4, r3, r6
   1f6f8:	4544      	cmp	r4, r8
   1f6fa:	bfa8      	it	ge
   1f6fc:	4644      	movge	r4, r8
   1f6fe:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1f700:	4622      	mov	r2, r4
   1f702:	19b9      	adds	r1, r7, r6
   1f704:	4628      	mov	r0, r5
   1f706:	f7fe feef 	bl	1e4e8 <memcpy>
}
   1f70a:	4620      	mov	r0, r4
   1f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f710:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f714:	e7f9      	b.n	1f70a <read_name+0x30>

0001f716 <cf_read>:
{
   1f716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f718:	461f      	mov	r7, r3
	u8_t data[1] = {};
   1f71a:	2300      	movs	r3, #0
{
   1f71c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	u8_t data[1] = {};
   1f720:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f724:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f726:	f7ec fc25 	bl	bf74 <find_cf_cfg>
	if (cfg) {
   1f72a:	b128      	cbz	r0, 1f738 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f72c:	f100 0108 	add.w	r1, r0, #8
   1f730:	2201      	movs	r2, #1
   1f732:	a801      	add	r0, sp, #4
   1f734:	f7fe fed8 	bl	1e4e8 <memcpy>
	if (offset > value_len) {
   1f738:	2e01      	cmp	r6, #1
   1f73a:	d80d      	bhi.n	1f758 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f73c:	f1c6 0401 	rsb	r4, r6, #1
   1f740:	42bc      	cmp	r4, r7
   1f742:	bfa8      	it	ge
   1f744:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   1f746:	ab01      	add	r3, sp, #4
   1f748:	4622      	mov	r2, r4
   1f74a:	1999      	adds	r1, r3, r6
   1f74c:	4628      	mov	r0, r5
   1f74e:	f7fe fecb 	bl	1e4e8 <memcpy>
}
   1f752:	4620      	mov	r0, r4
   1f754:	b003      	add	sp, #12
   1f756:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f758:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f75c:	e7f9      	b.n	1f752 <cf_read+0x3c>

0001f75e <bt_gatt_attr_read_ccc>:
{
   1f75e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f760:	68c9      	ldr	r1, [r1, #12]
{
   1f762:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f766:	4615      	mov	r5, r2
   1f768:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f76a:	f7ff ff4a 	bl	1f602 <find_ccc_cfg>
	if (cfg) {
   1f76e:	b100      	cbz	r0, 1f772 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f770:	8900      	ldrh	r0, [r0, #8]
   1f772:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f776:	2e02      	cmp	r6, #2
   1f778:	d80e      	bhi.n	1f798 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f77a:	f1c6 0402 	rsb	r4, r6, #2
   1f77e:	42bc      	cmp	r4, r7
   1f780:	bfa8      	it	ge
   1f782:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   1f784:	f10d 0306 	add.w	r3, sp, #6
   1f788:	4622      	mov	r2, r4
   1f78a:	1999      	adds	r1, r3, r6
   1f78c:	4628      	mov	r0, r5
   1f78e:	f7fe feab 	bl	1e4e8 <memcpy>
}
   1f792:	4620      	mov	r0, r4
   1f794:	b003      	add	sp, #12
   1f796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f798:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f79c:	e7f9      	b.n	1f792 <bt_gatt_attr_read_ccc+0x34>

0001f79e <bt_gatt_attr_read_service>:
{
   1f79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f7a0:	68c9      	ldr	r1, [r1, #12]
{
   1f7a2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f7a6:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f7a8:	780b      	ldrb	r3, [r1, #0]
{
   1f7aa:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f7ac:	b993      	cbnz	r3, 1f7d4 <bt_gatt_attr_read_service+0x36>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f7ae:	884b      	ldrh	r3, [r1, #2]
   1f7b0:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f7b4:	2d02      	cmp	r5, #2
   1f7b6:	d819      	bhi.n	1f7ec <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f7b8:	f1c5 0202 	rsb	r2, r5, #2
   1f7bc:	4294      	cmp	r4, r2
   1f7be:	bfa8      	it	ge
   1f7c0:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   1f7c2:	f10d 0306 	add.w	r3, sp, #6
   1f7c6:	4622      	mov	r2, r4
   1f7c8:	1959      	adds	r1, r3, r5
   1f7ca:	f7fe fe8d 	bl	1e4e8 <memcpy>
}
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	b003      	add	sp, #12
   1f7d2:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f7d4:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f7d6:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f7da:	d807      	bhi.n	1f7ec <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f7dc:	f1c5 0210 	rsb	r2, r5, #16
   1f7e0:	4294      	cmp	r4, r2
   1f7e2:	bfa8      	it	ge
   1f7e4:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   1f7e6:	4622      	mov	r2, r4
   1f7e8:	4429      	add	r1, r5
   1f7ea:	e7ee      	b.n	1f7ca <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7ec:	f06f 0406 	mvn.w	r4, #6
   1f7f0:	e7ed      	b.n	1f7ce <bt_gatt_attr_read_service+0x30>

0001f7f2 <bt_gatt_attr_read>:
{
   1f7f2:	b538      	push	{r3, r4, r5, lr}
   1f7f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f7f8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f7fc:	42a9      	cmp	r1, r5
{
   1f7fe:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f800:	d80b      	bhi.n	1f81a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f802:	1a6d      	subs	r5, r5, r1
   1f804:	429d      	cmp	r5, r3
   1f806:	bfa8      	it	ge
   1f808:	461d      	movge	r5, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1f80a:	9b05      	ldr	r3, [sp, #20]
   1f80c:	b2ad      	uxth	r5, r5
   1f80e:	462a      	mov	r2, r5
   1f810:	4419      	add	r1, r3
   1f812:	f7fe fe69 	bl	1e4e8 <memcpy>
}
   1f816:	4628      	mov	r0, r5
   1f818:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f81a:	f06f 0506 	mvn.w	r5, #6
   1f81e:	e7fa      	b.n	1f816 <bt_gatt_attr_read+0x24>

0001f820 <bt_gatt_attr_read_chrc>:
{
   1f820:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f822:	68cf      	ldr	r7, [r1, #12]
{
   1f824:	b087      	sub	sp, #28
   1f826:	4608      	mov	r0, r1
   1f828:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f82a:	79bb      	ldrb	r3, [r7, #6]
   1f82c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f830:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f832:	f7ec fd35 	bl	c2a0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f836:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f838:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f83c:	780b      	ldrb	r3, [r1, #0]
{
   1f83e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f842:	b99b      	cbnz	r3, 1f86c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f844:	884b      	ldrh	r3, [r1, #2]
   1f846:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f84a:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f84c:	42b1      	cmp	r1, r6
   1f84e:	d315      	bcc.n	1f87c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f850:	1b89      	subs	r1, r1, r6
   1f852:	42a1      	cmp	r1, r4
   1f854:	bfa8      	it	ge
   1f856:	4621      	movge	r1, r4
   1f858:	b28c      	uxth	r4, r1
	memcpy(buf, (u8_t *)value + offset, len);
   1f85a:	ab01      	add	r3, sp, #4
   1f85c:	4622      	mov	r2, r4
   1f85e:	1999      	adds	r1, r3, r6
   1f860:	4628      	mov	r0, r5
   1f862:	f7fe fe41 	bl	1e4e8 <memcpy>
}
   1f866:	4620      	mov	r0, r4
   1f868:	b007      	add	sp, #28
   1f86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f86c:	3101      	adds	r1, #1
   1f86e:	2210      	movs	r2, #16
   1f870:	f10d 0007 	add.w	r0, sp, #7
   1f874:	f7fe fe38 	bl	1e4e8 <memcpy>
		value_len += 16U;
   1f878:	2113      	movs	r1, #19
   1f87a:	e7e7      	b.n	1f84c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f87c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f880:	e7f1      	b.n	1f866 <bt_gatt_attr_read_chrc+0x46>

0001f882 <bt_gatt_foreach_attr>:
{
   1f882:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f884:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f888:	2300      	movs	r3, #0
   1f88a:	9300      	str	r3, [sp, #0]
   1f88c:	461a      	mov	r2, r3
   1f88e:	f7ec fd1f 	bl	c2d0 <bt_gatt_foreach_attr_type>
}
   1f892:	b005      	add	sp, #20
   1f894:	f85d fb04 	ldr.w	pc, [sp], #4

0001f898 <db_hash_process>:
	db_hash_gen(true);
   1f898:	2001      	movs	r0, #1
   1f89a:	f7ec bd79 	b.w	c390 <db_hash_gen>

0001f89e <bt_gatt_attr_read_cep>:
{
   1f89e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f8a0:	4610      	mov	r0, r2
   1f8a2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	u16_t props = sys_cpu_to_le16(value->properties);
   1f8a6:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   1f8a8:	2d02      	cmp	r5, #2
	u16_t props = sys_cpu_to_le16(value->properties);
   1f8aa:	8812      	ldrh	r2, [r2, #0]
   1f8ac:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f8b0:	d80d      	bhi.n	1f8ce <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   1f8b2:	f1c5 0402 	rsb	r4, r5, #2
   1f8b6:	429c      	cmp	r4, r3
   1f8b8:	bfa8      	it	ge
   1f8ba:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1f8bc:	f10d 0306 	add.w	r3, sp, #6
   1f8c0:	4622      	mov	r2, r4
   1f8c2:	1959      	adds	r1, r3, r5
   1f8c4:	f7fe fe10 	bl	1e4e8 <memcpy>
}
   1f8c8:	4620      	mov	r0, r4
   1f8ca:	b003      	add	sp, #12
   1f8cc:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   1f8d2:	e7f9      	b.n	1f8c8 <bt_gatt_attr_read_cep+0x2a>

0001f8d4 <bt_gatt_check_perm>:
{
   1f8d4:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1f8d6:	07d4      	lsls	r4, r2, #31
{
   1f8d8:	4605      	mov	r5, r0
   1f8da:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f8dc:	d504      	bpl.n	1f8e8 <bt_gatt_check_perm+0x14>
   1f8de:	f010 0f15 	tst.w	r0, #21
   1f8e2:	d01e      	beq.n	1f922 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f8e4:	684b      	ldr	r3, [r1, #4]
   1f8e6:	b1e3      	cbz	r3, 1f922 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f8e8:	0793      	lsls	r3, r2, #30
   1f8ea:	d504      	bpl.n	1f8f6 <bt_gatt_check_perm+0x22>
   1f8ec:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1f8f0:	d019      	beq.n	1f926 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f8f2:	688b      	ldr	r3, [r1, #8]
   1f8f4:	b1bb      	cbz	r3, 1f926 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1f8f6:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f8fa:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f8fe:	d103      	bne.n	1f908 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1f900:	f014 000c 	ands.w	r0, r4, #12
   1f904:	d107      	bne.n	1f916 <bt_gatt_check_perm+0x42>
}
   1f906:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f908:	4628      	mov	r0, r5
   1f90a:	f7ff f94c 	bl	1eba6 <bt_conn_get_security>
   1f90e:	2802      	cmp	r0, #2
   1f910:	d8f6      	bhi.n	1f900 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1f912:	2005      	movs	r0, #5
   1f914:	e7f7      	b.n	1f906 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1f916:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f918:	2b00      	cmp	r3, #0
   1f91a:	bf14      	ite	ne
   1f91c:	2000      	movne	r0, #0
   1f91e:	200f      	moveq	r0, #15
   1f920:	e7f1      	b.n	1f906 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f922:	2002      	movs	r0, #2
   1f924:	e7ef      	b.n	1f906 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f926:	2003      	movs	r0, #3
   1f928:	e7ed      	b.n	1f906 <bt_gatt_check_perm+0x32>

0001f92a <bt_gatt_change_aware>:
{
   1f92a:	b510      	push	{r4, lr}
   1f92c:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1f92e:	f7ec fb21 	bl	bf74 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f932:	4603      	mov	r3, r0
   1f934:	b910      	cbnz	r0, 1f93c <bt_gatt_change_aware+0x12>
		return true;
   1f936:	2401      	movs	r4, #1
}
   1f938:	4620      	mov	r0, r4
   1f93a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f93c:	7a02      	ldrb	r2, [r0, #8]
   1f93e:	07d2      	lsls	r2, r2, #31
   1f940:	d5f9      	bpl.n	1f936 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f942:	f3bf 8f5b 	dmb	ish
   1f946:	68d9      	ldr	r1, [r3, #12]
   1f948:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f94c:	f011 0101 	ands.w	r1, r1, #1
   1f950:	f100 000c 	add.w	r0, r0, #12
   1f954:	d1ef      	bne.n	1f936 <bt_gatt_change_aware+0xc>
	if (!req) {
   1f956:	2c00      	cmp	r4, #0
   1f958:	d0ee      	beq.n	1f938 <bt_gatt_change_aware+0xe>
   1f95a:	f3bf 8f5b 	dmb	ish
   1f95e:	68db      	ldr	r3, [r3, #12]
   1f960:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f964:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f968:	079b      	lsls	r3, r3, #30
   1f96a:	d50e      	bpl.n	1f98a <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f96c:	f3bf 8f5b 	dmb	ish
   1f970:	e850 3f00 	ldrex	r3, [r0]
   1f974:	f023 0302 	bic.w	r3, r3, #2
   1f978:	e840 3200 	strex	r2, r3, [r0]
   1f97c:	2a00      	cmp	r2, #0
   1f97e:	d1f7      	bne.n	1f970 <bt_gatt_change_aware+0x46>
   1f980:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f984:	f7ff fe57 	bl	1f636 <atomic_set_bit>
	return false;
   1f988:	e7d6      	b.n	1f938 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f98a:	2101      	movs	r1, #1
   1f98c:	e7fa      	b.n	1f984 <bt_gatt_change_aware+0x5a>

0001f98e <sys_memcpy_swap>:
	psrc += length - 1;
   1f98e:	1e53      	subs	r3, r2, #1
   1f990:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1f992:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1f994:	f811 3901 	ldrb.w	r3, [r1], #-1
   1f998:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1f99c:	4290      	cmp	r0, r2
   1f99e:	d1f9      	bne.n	1f994 <sys_memcpy_swap+0x6>
}
   1f9a0:	4770      	bx	lr

0001f9a2 <sys_mem_swap>:
{
   1f9a2:	b510      	push	{r4, lr}
   1f9a4:	1843      	adds	r3, r0, r1
   1f9a6:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   1f9aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		u8_t tmp = ((u8_t *)buf)[i];
   1f9ae:	7802      	ldrb	r2, [r0, #0]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   1f9b0:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   1f9b4:	4288      	cmp	r0, r1
		((u8_t *)buf)[length - 1 - i] = tmp;
   1f9b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1f9b8:	d1f7      	bne.n	1f9aa <sys_mem_swap+0x8>
	}
}
   1f9ba:	bd10      	pop	{r4, pc}

0001f9bc <smp_pairing_rsp>:
}
   1f9bc:	2007      	movs	r0, #7
   1f9be:	4770      	bx	lr

0001f9c0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f9c0:	2301      	movs	r3, #1
   1f9c2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f9c4:	f3bf 8f5b 	dmb	ish
   1f9c8:	e850 2f00 	ldrex	r2, [r0]
   1f9cc:	431a      	orrs	r2, r3
   1f9ce:	e840 2100 	strex	r1, r2, [r0]
   1f9d2:	2900      	cmp	r1, #0
   1f9d4:	d1f8      	bne.n	1f9c8 <atomic_set_bit+0x8>
   1f9d6:	f3bf 8f5b 	dmb	ish
}
   1f9da:	4770      	bx	lr

0001f9dc <bt_smp_aes_cmac>:
{
   1f9dc:	b570      	push	{r4, r5, r6, lr}
   1f9de:	b0c2      	sub	sp, #264	; 0x108
   1f9e0:	460d      	mov	r5, r1
   1f9e2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f9e4:	4601      	mov	r1, r0
   1f9e6:	aa16      	add	r2, sp, #88	; 0x58
   1f9e8:	4668      	mov	r0, sp
{
   1f9ea:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f9ec:	f7fd fd4d 	bl	1d48a <tc_cmac_setup>
   1f9f0:	b150      	cbz	r0, 1fa08 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1f9f2:	4632      	mov	r2, r6
   1f9f4:	4629      	mov	r1, r5
   1f9f6:	4668      	mov	r0, sp
   1f9f8:	f7fd fd72 	bl	1d4e0 <tc_cmac_update>
   1f9fc:	b120      	cbz	r0, 1fa08 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1f9fe:	4669      	mov	r1, sp
   1fa00:	4620      	mov	r0, r4
   1fa02:	f7fd fdd9 	bl	1d5b8 <tc_cmac_final>
   1fa06:	b918      	cbnz	r0, 1fa10 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1fa08:	f06f 0004 	mvn.w	r0, #4
}
   1fa0c:	b042      	add	sp, #264	; 0x108
   1fa0e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fa10:	2000      	movs	r0, #0
   1fa12:	e7fb      	b.n	1fa0c <bt_smp_aes_cmac+0x30>

0001fa14 <smp_f4>:
{
   1fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa16:	b097      	sub	sp, #92	; 0x5c
   1fa18:	4614      	mov	r4, r2
   1fa1a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1fa1c:	2220      	movs	r2, #32
   1fa1e:	4601      	mov	r1, r0
   1fa20:	a805      	add	r0, sp, #20
{
   1fa22:	461d      	mov	r5, r3
   1fa24:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1fa26:	f7ff ffb2 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1fa2a:	2220      	movs	r2, #32
   1fa2c:	4631      	mov	r1, r6
   1fa2e:	a80d      	add	r0, sp, #52	; 0x34
   1fa30:	f7ff ffad 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1fa34:	4621      	mov	r1, r4
   1fa36:	2210      	movs	r2, #16
   1fa38:	a801      	add	r0, sp, #4
	m[64] = z;
   1fa3a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1fa3e:	f7ff ffa6 	bl	1f98e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1fa42:	463b      	mov	r3, r7
   1fa44:	2241      	movs	r2, #65	; 0x41
   1fa46:	a905      	add	r1, sp, #20
   1fa48:	a801      	add	r0, sp, #4
   1fa4a:	f7ff ffc7 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
   1fa4e:	4604      	mov	r4, r0
   1fa50:	b918      	cbnz	r0, 1fa5a <smp_f4+0x46>
	sys_mem_swap(res, 16);
   1fa52:	2110      	movs	r1, #16
   1fa54:	4638      	mov	r0, r7
   1fa56:	f7ff ffa4 	bl	1f9a2 <sys_mem_swap>
}
   1fa5a:	4620      	mov	r0, r4
   1fa5c:	b017      	add	sp, #92	; 0x5c
   1fa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fa60 <smp_f6>:
{
   1fa60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa62:	b097      	sub	sp, #92	; 0x5c
   1fa64:	4605      	mov	r5, r0
   1fa66:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1fa68:	a805      	add	r0, sp, #20
   1fa6a:	2210      	movs	r2, #16
{
   1fa6c:	461c      	mov	r4, r3
   1fa6e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1fa70:	f7ff ff8d 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1fa74:	2210      	movs	r2, #16
   1fa76:	4631      	mov	r1, r6
   1fa78:	a809      	add	r0, sp, #36	; 0x24
   1fa7a:	f7ff ff88 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1fa7e:	4621      	mov	r1, r4
   1fa80:	2210      	movs	r2, #16
   1fa82:	a80d      	add	r0, sp, #52	; 0x34
   1fa84:	f7ff ff83 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1fa88:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fa8a:	2203      	movs	r2, #3
   1fa8c:	a811      	add	r0, sp, #68	; 0x44
   1fa8e:	f7ff ff7e 	bl	1f98e <sys_memcpy_swap>
	m[51] = a1->type;
   1fa92:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1fa94:	f814 3b01 	ldrb.w	r3, [r4], #1
   1fa98:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1fa9c:	4621      	mov	r1, r4
   1fa9e:	2206      	movs	r2, #6
   1faa0:	a812      	add	r0, sp, #72	; 0x48
   1faa2:	f7fe fd21 	bl	1e4e8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1faa6:	4621      	mov	r1, r4
   1faa8:	2206      	movs	r2, #6
   1faaa:	a812      	add	r0, sp, #72	; 0x48
   1faac:	f7ff ff6f 	bl	1f98e <sys_memcpy_swap>
	m[58] = a2->type;
   1fab0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1fab2:	f814 3b01 	ldrb.w	r3, [r4], #1
   1fab6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1faba:	4621      	mov	r1, r4
   1fabc:	2206      	movs	r2, #6
   1fabe:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fac2:	f7fe fd11 	bl	1e4e8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1fac6:	4621      	mov	r1, r4
   1fac8:	2206      	movs	r2, #6
   1faca:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1face:	f7ff ff5e 	bl	1f98e <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1fad2:	2210      	movs	r2, #16
   1fad4:	4629      	mov	r1, r5
   1fad6:	a801      	add	r0, sp, #4
   1fad8:	f7ff ff59 	bl	1f98e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1fadc:	463b      	mov	r3, r7
   1fade:	2241      	movs	r2, #65	; 0x41
   1fae0:	a905      	add	r1, sp, #20
   1fae2:	a801      	add	r0, sp, #4
   1fae4:	f7ff ff7a 	bl	1f9dc <bt_smp_aes_cmac>
	if (err) {
   1fae8:	4604      	mov	r4, r0
   1faea:	b918      	cbnz	r0, 1faf4 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   1faec:	2110      	movs	r1, #16
   1faee:	4638      	mov	r0, r7
   1faf0:	f7ff ff57 	bl	1f9a2 <sys_mem_swap>
}
   1faf4:	4620      	mov	r0, r4
   1faf6:	b017      	add	sp, #92	; 0x5c
   1faf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fafa <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fafa:	2301      	movs	r3, #1
   1fafc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fafe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fb00:	f3bf 8f5b 	dmb	ish
   1fb04:	e850 2f00 	ldrex	r2, [r0]
   1fb08:	401a      	ands	r2, r3
   1fb0a:	e840 2100 	strex	r1, r2, [r0]
   1fb0e:	2900      	cmp	r1, #0
   1fb10:	d1f8      	bne.n	1fb04 <atomic_clear_bit+0xa>
   1fb12:	f3bf 8f5b 	dmb	ish
}
   1fb16:	4770      	bx	lr

0001fb18 <bt_smp_disconnected>:
{
   1fb18:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1fb1a:	6803      	ldr	r3, [r0, #0]
   1fb1c:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
{
   1fb20:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1fb22:	f500 70be 	add.w	r0, r0, #380	; 0x17c
   1fb26:	f000 ffb1 	bl	20a8c <k_delayed_work_cancel>
	if (keys) {
   1fb2a:	b13d      	cbz	r5, 1fb3c <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fb2c:	896b      	ldrh	r3, [r5, #10]
   1fb2e:	b113      	cbz	r3, 1fb36 <bt_smp_disconnected+0x1e>
   1fb30:	7a6b      	ldrb	r3, [r5, #9]
   1fb32:	079b      	lsls	r3, r3, #30
   1fb34:	d502      	bpl.n	1fb3c <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1fb36:	4628      	mov	r0, r5
   1fb38:	f7ee fe2a 	bl	e790 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1fb3c:	4620      	mov	r0, r4
   1fb3e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
}
   1fb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1fb46:	2100      	movs	r1, #0
   1fb48:	f7fe bcf9 	b.w	1e53e <memset>

0001fb4c <smp_security_request>:
   1fb4c:	2007      	movs	r0, #7
   1fb4e:	4770      	bx	lr

0001fb50 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fb50:	f3bf 8f5b 	dmb	ish
   1fb54:	6800      	ldr	r0, [r0, #0]
   1fb56:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fb5a:	4108      	asrs	r0, r1
}
   1fb5c:	f000 0001 	and.w	r0, r0, #1
   1fb60:	4770      	bx	lr

0001fb62 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   1fb62:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fb64:	f100 0594 	add.w	r5, r0, #148	; 0x94
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   1fb68:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fb6a:	4628      	mov	r0, r5
   1fb6c:	2104      	movs	r1, #4
   1fb6e:	f7ff ffef 	bl	1fb50 <atomic_test_bit>
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fb72:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1fb74:	2800      	cmp	r0, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fb76:	f247 5230 	movw	r2, #30000	; 0x7530
   1fb7a:	4608      	mov	r0, r1
   1fb7c:	bf18      	it	ne
   1fb7e:	2200      	movne	r2, #0
   1fb80:	f7ff f8e6 	bl	1ed50 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1fb84:	4604      	mov	r4, r0
   1fb86:	b928      	cbnz	r0, 1fb94 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1fb88:	2104      	movs	r1, #4
   1fb8a:	4628      	mov	r0, r5
   1fb8c:	f7ff ff18 	bl	1f9c0 <atomic_set_bit>
}
   1fb90:	4620      	mov	r0, r4
   1fb92:	bd70      	pop	{r4, r5, r6, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1fb94:	2101      	movs	r1, #1
   1fb96:	3008      	adds	r0, #8
   1fb98:	f000 fad3 	bl	20142 <net_buf_simple_add>
	hdr->code = op;
   1fb9c:	7006      	strb	r6, [r0, #0]
	return buf;
   1fb9e:	e7f7      	b.n	1fb90 <smp_create_pdu.isra.0+0x2e>

0001fba0 <smp_send_pairing_random>:
{
   1fba0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fba2:	2104      	movs	r1, #4
{
   1fba4:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fba6:	f7ff ffdc 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1fbaa:	4604      	mov	r4, r0
   1fbac:	b178      	cbz	r0, 1fbce <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   1fbae:	2110      	movs	r1, #16
   1fbb0:	3008      	adds	r0, #8
   1fbb2:	f000 fac6 	bl	20142 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1fbb6:	2210      	movs	r2, #16
   1fbb8:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
   1fbbc:	f7fe fc94 	bl	1e4e8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fbc0:	4628      	mov	r0, r5
   1fbc2:	2200      	movs	r2, #0
   1fbc4:	4621      	mov	r1, r4
   1fbc6:	f7ed f923 	bl	ce10 <smp_send.isra.0>
	return 0;
   1fbca:	2000      	movs	r0, #0
}
   1fbcc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fbce:	2008      	movs	r0, #8
   1fbd0:	e7fc      	b.n	1fbcc <smp_send_pairing_random+0x2c>

0001fbd2 <send_pairing_rsp>:
{
   1fbd2:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fbd4:	2102      	movs	r1, #2
{
   1fbd6:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fbd8:	f7ff ffc3 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1fbdc:	4604      	mov	r4, r0
   1fbde:	b178      	cbz	r0, 1fc00 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   1fbe0:	2106      	movs	r1, #6
   1fbe2:	3008      	adds	r0, #8
   1fbe4:	f000 faad 	bl	20142 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1fbe8:	2206      	movs	r2, #6
   1fbea:	f105 01a1 	add.w	r1, r5, #161	; 0xa1
   1fbee:	f7fe fc7b 	bl	1e4e8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fbf2:	4628      	mov	r0, r5
   1fbf4:	2200      	movs	r2, #0
   1fbf6:	4621      	mov	r1, r4
   1fbf8:	f7ed f90a 	bl	ce10 <smp_send.isra.0>
	return 0;
   1fbfc:	2000      	movs	r0, #0
}
   1fbfe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fc00:	2008      	movs	r0, #8
   1fc02:	e7fc      	b.n	1fbfe <send_pairing_rsp+0x2c>

0001fc04 <smp_dhkey_check>:
{
   1fc04:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1fc06:	6803      	ldr	r3, [r0, #0]
   1fc08:	78db      	ldrb	r3, [r3, #3]
   1fc0a:	2b01      	cmp	r3, #1
{
   1fc0c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1fc0e:	d115      	bne.n	1fc3c <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1fc10:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1fc12:	f100 0594 	add.w	r5, r0, #148	; 0x94
   1fc16:	210f      	movs	r1, #15
   1fc18:	4628      	mov	r0, r5
   1fc1a:	f7ff ff6e 	bl	1fafa <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1fc1e:	4631      	mov	r1, r6
   1fc20:	2210      	movs	r2, #16
   1fc22:	f204 1047 	addw	r0, r4, #327	; 0x147
   1fc26:	f7fe fc5f 	bl	1e4e8 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1fc2a:	2107      	movs	r1, #7
   1fc2c:	4628      	mov	r0, r5
   1fc2e:	f7ff ff8f 	bl	1fb50 <atomic_test_bit>
   1fc32:	b128      	cbz	r0, 1fc40 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fc34:	2108      	movs	r1, #8
   1fc36:	4628      	mov	r0, r5
   1fc38:	f7ff fec2 	bl	1f9c0 <atomic_set_bit>
}
   1fc3c:	2000      	movs	r0, #0
   1fc3e:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fc40:	2109      	movs	r1, #9
   1fc42:	4628      	mov	r0, r5
   1fc44:	f7ff ff84 	bl	1fb50 <atomic_test_bit>
   1fc48:	2800      	cmp	r0, #0
   1fc4a:	d1f3      	bne.n	1fc34 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1fc4c:	4620      	mov	r0, r4
}
   1fc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1fc52:	f7ed b997 	b.w	cf84 <compute_and_check_and_send_slave_dhcheck>

0001fc56 <atomic_test_and_clear_bit>:
{
   1fc56:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fc58:	2301      	movs	r3, #1
   1fc5a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fc5e:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fc60:	f3bf 8f5b 	dmb	ish
   1fc64:	e850 3f00 	ldrex	r3, [r0]
   1fc68:	ea03 0c02 	and.w	ip, r3, r2
   1fc6c:	e840 ce00 	strex	lr, ip, [r0]
   1fc70:	f1be 0f00 	cmp.w	lr, #0
   1fc74:	d1f6      	bne.n	1fc64 <atomic_test_and_clear_bit+0xe>
   1fc76:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1fc7a:	420b      	tst	r3, r1
}
   1fc7c:	bf14      	ite	ne
   1fc7e:	2001      	movne	r0, #1
   1fc80:	2000      	moveq	r0, #0
   1fc82:	f85d fb04 	ldr.w	pc, [sp], #4

0001fc86 <smp_reset>:
{
   1fc86:	b538      	push	{r3, r4, r5, lr}
   1fc88:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fc8a:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1fc8c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
   1fc90:	f000 fefc 	bl	20a8c <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1fc94:	2300      	movs	r3, #0
   1fc96:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	atomic_set(&smp->allowed_cmds, 0);
   1fc9a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fc9e:	f3bf 8f5b 	dmb	ish
   1fca2:	e850 2f00 	ldrex	r2, [r0]
   1fca6:	e840 3100 	strex	r1, r3, [r0]
   1fcaa:	2900      	cmp	r1, #0
   1fcac:	d1f9      	bne.n	1fca2 <smp_reset+0x1c>
   1fcae:	f3bf 8f5b 	dmb	ish
   1fcb2:	f3bf 8f5b 	dmb	ish
   1fcb6:	3494      	adds	r4, #148	; 0x94
   1fcb8:	e854 2f00 	ldrex	r2, [r4]
   1fcbc:	e844 3100 	strex	r1, r3, [r4]
   1fcc0:	2900      	cmp	r1, #0
   1fcc2:	d1f9      	bne.n	1fcb8 <smp_reset+0x32>
   1fcc4:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   1fcc8:	7a6b      	ldrb	r3, [r5, #9]
   1fcca:	7aaa      	ldrb	r2, [r5, #10]
   1fccc:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1fcce:	bf18      	it	ne
   1fcd0:	72ab      	strbne	r3, [r5, #10]
}
   1fcd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1fcd6:	2101      	movs	r1, #1
   1fcd8:	f7ff be72 	b.w	1f9c0 <atomic_set_bit>

0001fcdc <smp_error>:
{
   1fcdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fcde:	4606      	mov	r6, r0
   1fce0:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1fce2:	f7ed fc99 	bl	d618 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fce6:	2105      	movs	r1, #5
   1fce8:	4630      	mov	r0, r6
   1fcea:	f7ff ff3a 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!buf) {
   1fcee:	4605      	mov	r5, r0
   1fcf0:	b178      	cbz	r0, 1fd12 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1fcf2:	2101      	movs	r1, #1
   1fcf4:	3008      	adds	r0, #8
   1fcf6:	f000 fa24 	bl	20142 <net_buf_simple_add>
	rsp->reason = reason;
   1fcfa:	7004      	strb	r4, [r0, #0]
   1fcfc:	2400      	movs	r4, #0
   1fcfe:	6830      	ldr	r0, [r6, #0]
   1fd00:	9400      	str	r4, [sp, #0]
   1fd02:	4623      	mov	r3, r4
   1fd04:	462a      	mov	r2, r5
   1fd06:	2106      	movs	r1, #6
   1fd08:	f7ff f825 	bl	1ed56 <bt_l2cap_send_cb>
	return 0;
   1fd0c:	4620      	mov	r0, r4
}
   1fd0e:	b002      	add	sp, #8
   1fd10:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1fd12:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fd16:	e7fa      	b.n	1fd0e <smp_error+0x32>

0001fd18 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
   1fd18:	b510      	push	{r4, lr}
   1fd1a:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1fd1c:	2106      	movs	r1, #6
   1fd1e:	f7ff f833 	bl	1ed88 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1fd22:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
   1fd26:	ea22 0104 	bic.w	r1, r2, r4
   1fd2a:	f880 1178 	strb.w	r1, [r0, #376]	; 0x178
		if (!smp->local_dist && !smp->remote_dist) {
   1fd2e:	f8b0 1178 	ldrh.w	r1, [r0, #376]	; 0x178
   1fd32:	b919      	cbnz	r1, 1fd3c <smp_check_complete.part.0+0x24>
}
   1fd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1fd38:	f7ed bc6e 	b.w	d618 <smp_pairing_complete>
}
   1fd3c:	bd10      	pop	{r4, pc}

0001fd3e <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1fd3e:	7881      	ldrb	r1, [r0, #2]
   1fd40:	2901      	cmp	r1, #1
   1fd42:	d101      	bne.n	1fd48 <smp_ident_sent+0xa>
   1fd44:	f7ff bfe8 	b.w	1fd18 <smp_check_complete.part.0>
}
   1fd48:	4770      	bx	lr

0001fd4a <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1fd4a:	7883      	ldrb	r3, [r0, #2]
   1fd4c:	2b01      	cmp	r3, #1
   1fd4e:	d102      	bne.n	1fd56 <smp_id_sent+0xc>
   1fd50:	2102      	movs	r1, #2
   1fd52:	f7ff bfe1 	b.w	1fd18 <smp_check_complete.part.0>
}
   1fd56:	4770      	bx	lr

0001fd58 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1fd58:	7883      	ldrb	r3, [r0, #2]
   1fd5a:	2b01      	cmp	r3, #1
   1fd5c:	d102      	bne.n	1fd64 <smp_sign_info_sent+0xc>
   1fd5e:	2104      	movs	r1, #4
   1fd60:	f7ff bfda 	b.w	1fd18 <smp_check_complete.part.0>
}
   1fd64:	4770      	bx	lr

0001fd66 <smp_c1>:
{
   1fd66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd6a:	b089      	sub	sp, #36	; 0x24
   1fd6c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1fd70:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1fd72:	783b      	ldrb	r3, [r7, #0]
{
   1fd74:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1fd76:	f88d 3000 	strb.w	r3, [sp]
{
   1fd7a:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1fd7c:	f898 3000 	ldrb.w	r3, [r8]
   1fd80:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1fd84:	4611      	mov	r1, r2
   1fd86:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1fd88:	2207      	movs	r2, #7
   1fd8a:	f10d 0002 	add.w	r0, sp, #2
   1fd8e:	f7fe fbab 	bl	1e4e8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1fd92:	2207      	movs	r2, #7
   1fd94:	4649      	mov	r1, r9
   1fd96:	f10d 0009 	add.w	r0, sp, #9
   1fd9a:	f7fe fba5 	bl	1e4e8 <memcpy>
	while (len--) {
   1fd9e:	f104 0010 	add.w	r0, r4, #16
   1fda2:	4629      	mov	r1, r5
   1fda4:	466a      	mov	r2, sp
   1fda6:	4284      	cmp	r4, r0
   1fda8:	d127      	bne.n	1fdfa <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1fdaa:	462a      	mov	r2, r5
   1fdac:	4629      	mov	r1, r5
   1fdae:	4630      	mov	r0, r6
   1fdb0:	f7f1 fa9c 	bl	112ec <bt_encrypt_le>
	if (err) {
   1fdb4:	4604      	mov	r4, r0
   1fdb6:	b9e0      	cbnz	r0, 1fdf2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1fdb8:	2206      	movs	r2, #6
   1fdba:	f108 0101 	add.w	r1, r8, #1
   1fdbe:	a804      	add	r0, sp, #16
   1fdc0:	f7fe fb92 	bl	1e4e8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1fdc4:	2206      	movs	r2, #6
   1fdc6:	1c79      	adds	r1, r7, #1
   1fdc8:	f10d 0016 	add.w	r0, sp, #22
   1fdcc:	f7fe fb8c 	bl	1e4e8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1fdd0:	2204      	movs	r2, #4
   1fdd2:	4621      	mov	r1, r4
   1fdd4:	a807      	add	r0, sp, #28
   1fdd6:	f7fe fbb2 	bl	1e53e <memset>
	while (len--) {
   1fdda:	f105 0010 	add.w	r0, r5, #16
   1fdde:	462a      	mov	r2, r5
   1fde0:	ab04      	add	r3, sp, #16
   1fde2:	4282      	cmp	r2, r0
   1fde4:	d112      	bne.n	1fe0c <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1fde6:	462a      	mov	r2, r5
   1fde8:	4629      	mov	r1, r5
   1fdea:	4630      	mov	r0, r6
   1fdec:	f7f1 fa7e 	bl	112ec <bt_encrypt_le>
   1fdf0:	4604      	mov	r4, r0
}
   1fdf2:	4620      	mov	r0, r4
   1fdf4:	b009      	add	sp, #36	; 0x24
   1fdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1fdfa:	f814 3b01 	ldrb.w	r3, [r4], #1
   1fdfe:	f812 cb01 	ldrb.w	ip, [r2], #1
   1fe02:	ea83 030c 	eor.w	r3, r3, ip
   1fe06:	f801 3b01 	strb.w	r3, [r1], #1
   1fe0a:	e7cc      	b.n	1fda6 <smp_c1+0x40>
   1fe0c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1fe10:	f813 4b01 	ldrb.w	r4, [r3], #1
   1fe14:	4061      	eors	r1, r4
   1fe16:	f802 1c01 	strb.w	r1, [r2, #-1]
   1fe1a:	e7e2      	b.n	1fde2 <smp_c1+0x7c>

0001fe1c <legacy_pairing_confirm>:
{
   1fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fe1e:	f100 0794 	add.w	r7, r0, #148	; 0x94
{
   1fe22:	b085      	sub	sp, #20
   1fe24:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fe26:	2109      	movs	r1, #9
   1fe28:	4638      	mov	r0, r7
   1fe2a:	f7ff fe91 	bl	1fb50 <atomic_test_bit>
   1fe2e:	bb90      	cbnz	r0, 1fe96 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   1fe30:	2104      	movs	r1, #4
   1fe32:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1fe36:	f7ff fdc3 	bl	1f9c0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1fe3a:	2103      	movs	r1, #3
   1fe3c:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe3e:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1fe40:	f7ff fe8f 	bl	1fb62 <smp_create_pdu.isra.0>
	if (!buf) {
   1fe44:	4606      	mov	r6, r0
   1fe46:	b1c0      	cbz	r0, 1fe7a <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   1fe48:	2110      	movs	r1, #16
   1fe4a:	3008      	adds	r0, #8
   1fe4c:	f000 f979 	bl	20142 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1fe50:	f104 037e 	add.w	r3, r4, #126	; 0x7e
   1fe54:	3477      	adds	r4, #119	; 0x77
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1fe56:	9002      	str	r0, [sp, #8]
   1fe58:	9301      	str	r3, [sp, #4]
   1fe5a:	9400      	str	r4, [sp, #0]
   1fe5c:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
   1fe60:	f105 0299 	add.w	r2, r5, #153	; 0x99
   1fe64:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
   1fe68:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
   1fe6c:	f7ff ff7b 	bl	1fd66 <smp_c1>
   1fe70:	4604      	mov	r4, r0
   1fe72:	b120      	cbz	r0, 1fe7e <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   1fe74:	4630      	mov	r0, r6
   1fe76:	f7f9 febf 	bl	19bf8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1fe7a:	2008      	movs	r0, #8
   1fe7c:	e009      	b.n	1fe92 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   1fe7e:	4602      	mov	r2, r0
   1fe80:	4631      	mov	r1, r6
   1fe82:	4628      	mov	r0, r5
   1fe84:	f7ec ffc4 	bl	ce10 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1fe88:	4621      	mov	r1, r4
   1fe8a:	4638      	mov	r0, r7
   1fe8c:	f7ff fe35 	bl	1fafa <atomic_clear_bit>
	return 0;
   1fe90:	2000      	movs	r0, #0
}
   1fe92:	b005      	add	sp, #20
   1fe94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1fe96:	2100      	movs	r1, #0
   1fe98:	4638      	mov	r0, r7
   1fe9a:	f7ff fd91 	bl	1f9c0 <atomic_set_bit>
   1fe9e:	e7f7      	b.n	1fe90 <legacy_pairing_confirm+0x74>

0001fea0 <smp_pairing_confirm>:
{
   1fea0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1fea2:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1fea4:	f100 0594 	add.w	r5, r0, #148	; 0x94
{
   1fea8:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1feaa:	210a      	movs	r1, #10
   1feac:	4628      	mov	r0, r5
   1feae:	f7ff fe24 	bl	1fafa <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1feb2:	4631      	mov	r1, r6
   1feb4:	2210      	movs	r2, #16
   1feb6:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
   1feba:	f7fe fb15 	bl	1e4e8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1febe:	2105      	movs	r1, #5
   1fec0:	4628      	mov	r0, r5
   1fec2:	f7ff fe45 	bl	1fb50 <atomic_test_bit>
   1fec6:	b920      	cbnz	r0, 1fed2 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1fec8:	4620      	mov	r0, r4
}
   1feca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1fece:	f7ff bfa5 	b.w	1fe1c <legacy_pairing_confirm>
	switch (smp->method) {
   1fed2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   1fed6:	2b01      	cmp	r3, #1
   1fed8:	d00b      	beq.n	1fef2 <smp_pairing_confirm+0x52>
   1feda:	2b02      	cmp	r3, #2
   1fedc:	d115      	bne.n	1ff0a <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1fede:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1fee2:	2104      	movs	r1, #4
   1fee4:	f7ff fd6c 	bl	1f9c0 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1fee8:	4620      	mov	r0, r4
}
   1feea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1feee:	f7ec bfa5 	b.w	ce3c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fef2:	2109      	movs	r1, #9
   1fef4:	4628      	mov	r0, r5
   1fef6:	f7ff fe2b 	bl	1fb50 <atomic_test_bit>
   1fefa:	2800      	cmp	r0, #0
   1fefc:	d0ef      	beq.n	1fede <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1fefe:	4628      	mov	r0, r5
   1ff00:	2100      	movs	r1, #0
   1ff02:	f7ff fd5d 	bl	1f9c0 <atomic_set_bit>
			return 0;
   1ff06:	2000      	movs	r0, #0
}
   1ff08:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1ff0a:	2008      	movs	r0, #8
   1ff0c:	e7fc      	b.n	1ff08 <smp_pairing_confirm+0x68>

0001ff0e <bt_smp_request_ltk>:
{
   1ff0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ff12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1ff14:	e9cd 2300 	strd	r2, r3, [sp]
   1ff18:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1ff1a:	f7ec ff21 	bl	cd60 <smp_chan_get>
	if (!smp) {
   1ff1e:	4604      	mov	r4, r0
   1ff20:	2800      	cmp	r0, #0
   1ff22:	f000 809c 	beq.w	2005e <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   1ff26:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1ff2a:	f1b9 0f00 	cmp.w	r9, #0
   1ff2e:	d12d      	bne.n	1ff8c <bt_smp_request_ltk+0x7e>
   1ff30:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ff34:	4313      	orrs	r3, r2
   1ff36:	d129      	bne.n	1ff8c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1ff38:	f100 0894 	add.w	r8, r0, #148	; 0x94
   1ff3c:	2103      	movs	r1, #3
   1ff3e:	4640      	mov	r0, r8
   1ff40:	f7ff fe06 	bl	1fb50 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1ff44:	b310      	cbz	r0, 1ff8c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ff46:	2101      	movs	r1, #1
   1ff48:	4640      	mov	r0, r8
   1ff4a:	f7ff fe01 	bl	1fb50 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1ff4e:	4606      	mov	r6, r0
   1ff50:	b1e0      	cbz	r0, 1ff8c <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ff52:	f894 50a4 	ldrb.w	r5, [r4, #164]	; 0xa4
   1ff56:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1ff5a:	429d      	cmp	r5, r3
   1ff5c:	bf28      	it	cs
   1ff5e:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   1ff60:	462a      	mov	r2, r5
   1ff62:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
   1ff66:	4638      	mov	r0, r7
   1ff68:	f7fe fabe 	bl	1e4e8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1ff6c:	2d0f      	cmp	r5, #15
   1ff6e:	d805      	bhi.n	1ff7c <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   1ff70:	f1c5 0210 	rsb	r2, r5, #16
   1ff74:	4649      	mov	r1, r9
   1ff76:	1978      	adds	r0, r7, r5
   1ff78:	f7fe fae1 	bl	1e53e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ff7c:	2101      	movs	r1, #1
   1ff7e:	4640      	mov	r0, r8
   1ff80:	f7ff fd1e 	bl	1f9c0 <atomic_set_bit>
}
   1ff84:	4630      	mov	r0, r6
   1ff86:	b003      	add	sp, #12
   1ff88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1ff8c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1ff90:	b983      	cbnz	r3, 1ffb4 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   1ff92:	f105 0670 	add.w	r6, r5, #112	; 0x70
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1ff96:	7a29      	ldrb	r1, [r5, #8]
   1ff98:	4632      	mov	r2, r6
   1ff9a:	2020      	movs	r0, #32
   1ff9c:	f7ee fb98 	bl	e6d0 <bt_keys_find>
   1ffa0:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
		if (!conn->le.keys) {
   1ffa4:	b930      	cbnz	r0, 1ffb4 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1ffa6:	7a29      	ldrb	r1, [r5, #8]
   1ffa8:	4632      	mov	r2, r6
   1ffaa:	2001      	movs	r0, #1
   1ffac:	f7ee fb90 	bl	e6d0 <bt_keys_find>
   1ffb0:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	if (ediv == 0U && rand == 0U &&
   1ffb4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1ffb8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1ffbc:	b9ce      	cbnz	r6, 1fff2 <bt_smp_request_ltk+0xe4>
   1ffbe:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ffc2:	4313      	orrs	r3, r2
   1ffc4:	d115      	bne.n	1fff2 <bt_smp_request_ltk+0xe4>
   1ffc6:	2800      	cmp	r0, #0
   1ffc8:	d03c      	beq.n	20044 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1ffca:	8943      	ldrh	r3, [r0, #10]
   1ffcc:	069a      	lsls	r2, r3, #26
   1ffce:	d511      	bpl.n	1fff4 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   1ffd0:	7a04      	ldrb	r4, [r0, #8]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1ffd2:	f100 0116 	add.w	r1, r0, #22
   1ffd6:	4622      	mov	r2, r4
   1ffd8:	4638      	mov	r0, r7
   1ffda:	f7fe fa85 	bl	1e4e8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1ffde:	2c0f      	cmp	r4, #15
   1ffe0:	d805      	bhi.n	1ffee <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   1ffe2:	f1c4 0210 	rsb	r2, r4, #16
   1ffe6:	4631      	mov	r1, r6
   1ffe8:	1938      	adds	r0, r7, r4
   1ffea:	f7fe faa8 	bl	1e53e <memset>
		return true;
   1ffee:	2601      	movs	r6, #1
   1fff0:	e7c8      	b.n	1ff84 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1fff2:	b338      	cbz	r0, 20044 <bt_smp_request_ltk+0x136>
   1fff4:	8943      	ldrh	r3, [r0, #10]
   1fff6:	07db      	lsls	r3, r3, #31
   1fff8:	d524      	bpl.n	20044 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1fffa:	2208      	movs	r2, #8
   1fffc:	4669      	mov	r1, sp
   1fffe:	3064      	adds	r0, #100	; 0x64
   20000:	f7fe fa62 	bl	1e4c8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   20004:	b9f0      	cbnz	r0, 20044 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   20006:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   2000a:	2202      	movs	r2, #2
   2000c:	a90a      	add	r1, sp, #40	; 0x28
   2000e:	306c      	adds	r0, #108	; 0x6c
   20010:	f7fe fa5a 	bl	1e4c8 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   20014:	4606      	mov	r6, r0
   20016:	b9a8      	cbnz	r0, 20044 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   20018:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
   2001c:	7a0d      	ldrb	r5, [r1, #8]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2001e:	4638      	mov	r0, r7
   20020:	462a      	mov	r2, r5
   20022:	316e      	adds	r1, #110	; 0x6e
   20024:	f7fe fa60 	bl	1e4e8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20028:	2d0f      	cmp	r5, #15
   2002a:	d805      	bhi.n	20038 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   2002c:	f1c5 0210 	rsb	r2, r5, #16
   20030:	4631      	mov	r1, r6
   20032:	1978      	adds	r0, r7, r5
   20034:	f7fe fa83 	bl	1e53e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20038:	2101      	movs	r1, #1
   2003a:	f104 0094 	add.w	r0, r4, #148	; 0x94
   2003e:	f7ff fcbf 	bl	1f9c0 <atomic_set_bit>
		return true;
   20042:	e7d4      	b.n	1ffee <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   20044:	210e      	movs	r1, #14
   20046:	f104 0094 	add.w	r0, r4, #148	; 0x94
   2004a:	f7ff fd81 	bl	1fb50 <atomic_test_bit>
   2004e:	b118      	cbz	r0, 20058 <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   20050:	6820      	ldr	r0, [r4, #0]
   20052:	2102      	movs	r1, #2
   20054:	f7e9 fdec 	bl	9c30 <bt_conn_security_changed>
	smp_reset(smp);
   20058:	4620      	mov	r0, r4
   2005a:	f7ff fe14 	bl	1fc86 <smp_reset>
	return false;
   2005e:	2600      	movs	r6, #0
   20060:	e790      	b.n	1ff84 <bt_smp_request_ltk+0x76>

00020062 <bt_smp_irk_get>:
{
   20062:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t invalid_ir[16] = { 0 };
   20064:	2500      	movs	r5, #0
{
   20066:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   20068:	2210      	movs	r2, #16
   2006a:	4669      	mov	r1, sp
	u8_t invalid_ir[16] = { 0 };
   2006c:	e9cd 5500 	strd	r5, r5, [sp]
   20070:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   20074:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   20076:	f7fe fa27 	bl	1e4c8 <memcmp>
   2007a:	b180      	cbz	r0, 2009e <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2007c:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2007e:	220c      	movs	r2, #12
   20080:	4629      	mov	r1, r5
   20082:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   20084:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   20086:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   20088:	70e5      	strb	r5, [r4, #3]
   2008a:	1d20      	adds	r0, r4, #4
   2008c:	f7fe fa57 	bl	1e53e <memset>
	err = bt_encrypt_le(key, res, res);
   20090:	4622      	mov	r2, r4
   20092:	4621      	mov	r1, r4
   20094:	4630      	mov	r0, r6
   20096:	f7f1 f929 	bl	112ec <bt_encrypt_le>
}
   2009a:	b004      	add	sp, #16
   2009c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2009e:	f06f 0015 	mvn.w	r0, #21
   200a2:	e7fa      	b.n	2009a <bt_smp_irk_get+0x38>

000200a4 <id_add>:
	bt_id_add(keys);
   200a4:	f7e8 bada 	b.w	865c <bt_id_add>

000200a8 <bt_keys_get_type>:
{
   200a8:	b570      	push	{r4, r5, r6, lr}
   200aa:	4604      	mov	r4, r0
   200ac:	460d      	mov	r5, r1
   200ae:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   200b0:	f7ee fb0e 	bl	e6d0 <bt_keys_find>
	if (keys) {
   200b4:	b938      	cbnz	r0, 200c6 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   200b6:	4631      	mov	r1, r6
   200b8:	4628      	mov	r0, r5
   200ba:	f7ee fa9b 	bl	e5f4 <bt_keys_get_addr>
	if (!keys) {
   200be:	b110      	cbz	r0, 200c6 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   200c0:	8943      	ldrh	r3, [r0, #10]
   200c2:	431c      	orrs	r4, r3
   200c4:	8144      	strh	r4, [r0, #10]
}
   200c6:	bd70      	pop	{r4, r5, r6, pc}

000200c8 <bt_keys_add_type>:
	keys->keys |= type;
   200c8:	8943      	ldrh	r3, [r0, #10]
   200ca:	4319      	orrs	r1, r3
   200cc:	8141      	strh	r1, [r0, #10]
}
   200ce:	4770      	bx	lr

000200d0 <fixed_data_unref>:
}
   200d0:	4770      	bx	lr

000200d2 <k_uptime_get_32>:
{
   200d2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   200d4:	f000 fd33 	bl	20b3e <z_impl_k_uptime_get>
}
   200d8:	bd08      	pop	{r3, pc}

000200da <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   200da:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   200dc:	685b      	ldr	r3, [r3, #4]
{
   200de:	460a      	mov	r2, r1
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   200e0:	6819      	ldr	r1, [r3, #0]
   200e2:	f7f9 bd17 	b.w	19b14 <net_buf_alloc_len>

000200e6 <net_buf_get>:
{
   200e6:	b570      	push	{r4, r5, r6, lr}
   200e8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   200ea:	f000 face 	bl	2068a <z_impl_k_queue_get>
	if (!buf) {
   200ee:	4605      	mov	r5, r0
   200f0:	b128      	cbz	r0, 200fe <net_buf_get+0x18>
   200f2:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   200f4:	7963      	ldrb	r3, [r4, #5]
   200f6:	f013 0301 	ands.w	r3, r3, #1
   200fa:	d102      	bne.n	20102 <net_buf_get+0x1c>
	frag->frags = NULL;
   200fc:	6023      	str	r3, [r4, #0]
}
   200fe:	4628      	mov	r0, r5
   20100:	bd70      	pop	{r4, r5, r6, pc}
   20102:	2100      	movs	r1, #0
   20104:	4630      	mov	r0, r6
   20106:	f000 fac0 	bl	2068a <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2010a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2010c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2010e:	f023 0301 	bic.w	r3, r3, #1
   20112:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   20114:	4604      	mov	r4, r0
   20116:	e7ed      	b.n	200f4 <net_buf_get+0xe>

00020118 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   20118:	6883      	ldr	r3, [r0, #8]
   2011a:	440b      	add	r3, r1
   2011c:	6003      	str	r3, [r0, #0]
}
   2011e:	4770      	bx	lr

00020120 <net_buf_put>:
{
   20120:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   20122:	460a      	mov	r2, r1
   20124:	6814      	ldr	r4, [r2, #0]
   20126:	b914      	cbnz	r4, 2012e <net_buf_put+0xe>
}
   20128:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2012a:	f000 ba89 	b.w	20640 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2012e:	7953      	ldrb	r3, [r2, #5]
   20130:	f043 0301 	orr.w	r3, r3, #1
   20134:	7153      	strb	r3, [r2, #5]
   20136:	4622      	mov	r2, r4
   20138:	e7f4      	b.n	20124 <net_buf_put+0x4>

0002013a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2013a:	7902      	ldrb	r2, [r0, #4]
   2013c:	3201      	adds	r2, #1
   2013e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   20140:	4770      	bx	lr

00020142 <net_buf_simple_add>:
	return buf->data + buf->len;
   20142:	8883      	ldrh	r3, [r0, #4]
   20144:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   20146:	4419      	add	r1, r3
   20148:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2014a:	18d0      	adds	r0, r2, r3
   2014c:	4770      	bx	lr

0002014e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2014e:	b430      	push	{r4, r5}
   20150:	8884      	ldrh	r4, [r0, #4]
   20152:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   20154:	18a3      	adds	r3, r4, r2
   20156:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   20158:	1928      	adds	r0, r5, r4
}
   2015a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2015c:	f7fe b9c4 	b.w	1e4e8 <memcpy>

00020160 <net_buf_simple_add_u8>:
   20160:	8883      	ldrh	r3, [r0, #4]
   20162:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   20164:	b510      	push	{r4, lr}
	buf->len += len;
   20166:	1c5c      	adds	r4, r3, #1
   20168:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2016a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2016c:	18d0      	adds	r0, r2, r3
   2016e:	bd10      	pop	{r4, pc}

00020170 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20170:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   20172:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   20174:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   20176:	1a40      	subs	r0, r0, r1
	buf->len += len;
   20178:	4411      	add	r1, r2
	buf->data -= len;
   2017a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2017c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2017e:	4770      	bx	lr

00020180 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20180:	8882      	ldrh	r2, [r0, #4]
   20182:	1a52      	subs	r2, r2, r1
{
   20184:	4603      	mov	r3, r0
	buf->len -= len;
   20186:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20188:	6800      	ldr	r0, [r0, #0]
   2018a:	4408      	add	r0, r1
   2018c:	6018      	str	r0, [r3, #0]
}
   2018e:	4770      	bx	lr

00020190 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   20190:	4603      	mov	r3, r0
	void *data = buf->data;
   20192:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20194:	889a      	ldrh	r2, [r3, #4]
   20196:	1a52      	subs	r2, r2, r1
	buf->data += len;
   20198:	4401      	add	r1, r0
	buf->len -= len;
   2019a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2019c:	6019      	str	r1, [r3, #0]

	return data;
}
   2019e:	4770      	bx	lr

000201a0 <net_buf_simple_pull_le16>:

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   201a0:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   201a2:	6803      	ldr	r3, [r0, #0]
   201a4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   201a6:	2102      	movs	r1, #2
   201a8:	f7ff ffea 	bl	20180 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   201ac:	4620      	mov	r0, r4
   201ae:	bd10      	pop	{r4, pc}

000201b0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   201b0:	6802      	ldr	r2, [r0, #0]
   201b2:	6880      	ldr	r0, [r0, #8]
}
   201b4:	1a10      	subs	r0, r2, r0
   201b6:	4770      	bx	lr

000201b8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   201b8:	8883      	ldrh	r3, [r0, #4]
   201ba:	88c2      	ldrh	r2, [r0, #6]
   201bc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   201be:	6803      	ldr	r3, [r0, #0]
   201c0:	6880      	ldr	r0, [r0, #8]
   201c2:	1a18      	subs	r0, r3, r0
}
   201c4:	1a10      	subs	r0, r2, r0
   201c6:	4770      	bx	lr

000201c8 <gpio_nrfx_port_get_raw>:
	return port->config->config_info;
   201c8:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201ca:	689b      	ldr	r3, [r3, #8]
   201cc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   201ce:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   201d2:	600b      	str	r3, [r1, #0]
}
   201d4:	2000      	movs	r0, #0
   201d6:	4770      	bx	lr

000201d8 <gpio_nrfx_port_set_masked_raw>:
	return port->config->config_info;
   201d8:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201da:	689b      	ldr	r3, [r3, #8]
   201dc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   201de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   201e2:	4042      	eors	r2, r0
   201e4:	400a      	ands	r2, r1
   201e6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   201e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   201ec:	2000      	movs	r0, #0
   201ee:	4770      	bx	lr

000201f0 <gpio_nrfx_port_set_bits_raw>:
	return port->config->config_info;
   201f0:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   201f2:	689b      	ldr	r3, [r3, #8]
   201f4:	685b      	ldr	r3, [r3, #4]
}
   201f6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   201f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   201fc:	4770      	bx	lr

000201fe <gpio_nrfx_port_clear_bits_raw>:
	return port->config->config_info;
   201fe:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20200:	689b      	ldr	r3, [r3, #8]
   20202:	685b      	ldr	r3, [r3, #4]
}
   20204:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   20206:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2020a:	4770      	bx	lr

0002020c <gpio_nrfx_port_toggle_bits>:
	return port->config->config_info;
   2020c:	6803      	ldr	r3, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2020e:	689b      	ldr	r3, [r3, #8]
   20210:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20212:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   20216:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20218:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2021c:	2000      	movs	r0, #0
   2021e:	4770      	bx	lr

00020220 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20220:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   20222:	6858      	ldr	r0, [r3, #4]
{
   20224:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   20226:	b158      	cbz	r0, 20240 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20228:	2400      	movs	r4, #0
   2022a:	4281      	cmp	r1, r0
   2022c:	d113      	bne.n	20256 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2022e:	6808      	ldr	r0, [r1, #0]
   20230:	b95c      	cbnz	r4, 2024a <gpio_nrfx_manage_callback+0x2a>
   20232:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   20234:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20236:	42a1      	cmp	r1, r4
   20238:	d100      	bne.n	2023c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2023a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2023c:	2000      	movs	r0, #0
   2023e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   20240:	b972      	cbnz	r2, 20260 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   20242:	2000      	movs	r0, #0
}
   20244:	bd30      	pop	{r4, r5, pc}
   20246:	4628      	mov	r0, r5
   20248:	e7ef      	b.n	2022a <gpio_nrfx_manage_callback+0xa>
   2024a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2024c:	6898      	ldr	r0, [r3, #8]
   2024e:	4281      	cmp	r1, r0
	list->tail = node;
   20250:	bf08      	it	eq
   20252:	609c      	streq	r4, [r3, #8]
}
   20254:	e7f2      	b.n	2023c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20256:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20258:	4604      	mov	r4, r0
   2025a:	2d00      	cmp	r5, #0
   2025c:	d1f3      	bne.n	20246 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2025e:	b13a      	cbz	r2, 20270 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   20260:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   20262:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20264:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   20266:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20268:	2800      	cmp	r0, #0
   2026a:	d1ea      	bne.n	20242 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2026c:	6099      	str	r1, [r3, #8]
}
   2026e:	e7e9      	b.n	20244 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   20270:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20274:	e7e6      	b.n	20244 <gpio_nrfx_manage_callback+0x24>

00020276 <fire_callbacks>:
{
   20276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   20278:	6887      	ldr	r7, [r0, #8]
{
   2027a:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2027c:	6879      	ldr	r1, [r7, #4]
{
   2027e:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20280:	b1a1      	cbz	r1, 202ac <fire_callbacks+0x36>
	return node->next;
   20282:	680c      	ldr	r4, [r1, #0]
   20284:	2c00      	cmp	r4, #0
   20286:	bf38      	it	cc
   20288:	2400      	movcc	r4, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   2028a:	693b      	ldr	r3, [r7, #16]
   2028c:	688a      	ldr	r2, [r1, #8]
   2028e:	4033      	ands	r3, r6
   20290:	4213      	tst	r3, r2
   20292:	d003      	beq.n	2029c <fire_callbacks+0x26>
			cb->handler(port, cb, pins);
   20294:	684b      	ldr	r3, [r1, #4]
   20296:	4632      	mov	r2, r6
   20298:	4628      	mov	r0, r5
   2029a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2029c:	b134      	cbz	r4, 202ac <fire_callbacks+0x36>
   2029e:	6823      	ldr	r3, [r4, #0]
   202a0:	2b00      	cmp	r3, #0
   202a2:	bf38      	it	cc
   202a4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   202a6:	4621      	mov	r1, r4
   202a8:	461c      	mov	r4, r3
   202aa:	e7ee      	b.n	2028a <fire_callbacks+0x14>
}
   202ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000202ae <check_level_trigger_pins>:
{
   202ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->config->config_info;
   202b0:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   202b2:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
   202b4:	6897      	ldr	r7, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   202b6:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
   202ba:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   202bc:	e9d3 1006 	ldrd	r1, r0, [r3, #24]
   202c0:	4301      	orrs	r1, r0
   202c2:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   202c6:	6879      	ldr	r1, [r7, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   202c8:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   202ca:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   202ce:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   202d0:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   202d4:	2501      	movs	r5, #1
	u32_t pin = 0U;
   202d6:	2600      	movs	r6, #0
	while (level_pins) {
   202d8:	b90a      	cbnz	r2, 202de <check_level_trigger_pins+0x30>
}
   202da:	4620      	mov	r0, r4
   202dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   202de:	422a      	tst	r2, r5
   202e0:	d009      	beq.n	202f6 <check_level_trigger_pins+0x48>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   202e2:	7a3b      	ldrb	r3, [r7, #8]
   202e4:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   202e8:	2100      	movs	r1, #0
   202ea:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   202ee:	f7f9 fd2f 	bl	19d50 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   202f2:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   202f6:	3601      	adds	r6, #1
		bit <<= 1;
   202f8:	006d      	lsls	r5, r5, #1
   202fa:	e7ed      	b.n	202d8 <check_level_trigger_pins+0x2a>

000202fc <gpio_nrfx_pin_disable_callback>:
{
   202fc:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   202fe:	6884      	ldr	r4, [r0, #8]
	WRITE_BIT(data->int_en, pin, enable);
   20300:	2301      	movs	r3, #1
   20302:	fa03 f201 	lsl.w	r2, r3, r1
   20306:	6923      	ldr	r3, [r4, #16]
   20308:	ea23 0302 	bic.w	r3, r3, r2
   2030c:	6123      	str	r3, [r4, #16]
}
   2030e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   20310:	f7f9 bd32 	b.w	19d78 <gpiote_pin_int_cfg>

00020314 <cfg_level_pins>:
{
   20314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   20316:	6884      	ldr	r4, [r0, #8]
	return port->config->config_info;
   20318:	6803      	ldr	r3, [r0, #0]
   2031a:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2031c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20320:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   20322:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
   20326:	430b      	orrs	r3, r1
   20328:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
   2032c:	2601      	movs	r6, #1
	u32_t pin = 0U;
   2032e:	2500      	movs	r5, #0
	while (level_pins) {
   20330:	b902      	cbnz	r2, 20334 <cfg_level_pins+0x20>
}
   20332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   20334:	4216      	tst	r6, r2
   20336:	d00f      	beq.n	20358 <cfg_level_pins+0x44>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   20338:	6961      	ldr	r1, [r4, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2033a:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2033c:	40e9      	lsrs	r1, r5
   2033e:	f001 0101 	and.w	r1, r1, #1
   20342:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20346:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2034a:	b2c9      	uxtb	r1, r1
   2034c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20350:	f7f9 fcfe 	bl	19d50 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20354:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   20358:	3501      	adds	r5, #1
		bit <<= 1;
   2035a:	0076      	lsls	r6, r6, #1
   2035c:	e7e8      	b.n	20330 <cfg_level_pins+0x1c>

0002035e <gpio_nrfx_pin_enable_callback>:
{
   2035e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   20360:	6884      	ldr	r4, [r0, #8]
	WRITE_BIT(data->int_en, pin, enable);
   20362:	2301      	movs	r3, #1
   20364:	fa03 f201 	lsl.w	r2, r3, r1
   20368:	6923      	ldr	r3, [r4, #16]
   2036a:	4313      	orrs	r3, r2
   2036c:	6123      	str	r3, [r4, #16]
}
   2036e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   20370:	f7f9 bd02 	b.w	19d78 <gpiote_pin_int_cfg>

00020374 <flash_nrf_write_protection>:
}
   20374:	2000      	movs	r0, #0
   20376:	4770      	bx	lr

00020378 <is_regular_addr_valid>:
{
   20378:	b538      	push	{r3, r4, r5, lr}
   2037a:	4604      	mov	r4, r0
   2037c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2037e:	f000 f89c 	bl	204ba <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   20382:	4284      	cmp	r4, r0
   20384:	d209      	bcs.n	2039a <is_regular_addr_valid+0x22>
   20386:	2c00      	cmp	r4, #0
   20388:	db07      	blt.n	2039a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2038a:	42a8      	cmp	r0, r5
   2038c:	d305      	bcc.n	2039a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2038e:	442c      	add	r4, r5
	    len > flash_size ||
   20390:	4284      	cmp	r4, r0
   20392:	bf8c      	ite	hi
   20394:	2000      	movhi	r0, #0
   20396:	2001      	movls	r0, #1
}
   20398:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2039a:	2000      	movs	r0, #0
   2039c:	e7fc      	b.n	20398 <is_regular_addr_valid+0x20>

0002039e <flash_nrf_read>:
{
   2039e:	b570      	push	{r4, r5, r6, lr}
   203a0:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   203a2:	4628      	mov	r0, r5
   203a4:	4619      	mov	r1, r3
{
   203a6:	4616      	mov	r6, r2
   203a8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   203aa:	f7ff ffe5 	bl	20378 <is_regular_addr_valid>
   203ae:	b138      	cbz	r0, 203c0 <flash_nrf_read+0x22>
	if (!len) {
   203b0:	b14c      	cbz	r4, 203c6 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   203b2:	4622      	mov	r2, r4
   203b4:	4629      	mov	r1, r5
   203b6:	4630      	mov	r0, r6
   203b8:	f7fe f896 	bl	1e4e8 <memcpy>
	return 0;
   203bc:	2000      	movs	r0, #0
}
   203be:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   203c0:	f06f 0015 	mvn.w	r0, #21
   203c4:	e7fb      	b.n	203be <flash_nrf_read+0x20>
		return 0;
   203c6:	4620      	mov	r0, r4
   203c8:	e7f9      	b.n	203be <flash_nrf_read+0x20>

000203ca <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   203ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   203ce:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   203d0:	6843      	ldr	r3, [r0, #4]
{
   203d2:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   203d4:	691b      	ldr	r3, [r3, #16]
   203d6:	4669      	mov	r1, sp
{
   203d8:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   203da:	aa01      	add	r2, sp, #4
   203dc:	4798      	blx	r3

	while (layout_size--) {
   203de:	e9dd 1000 	ldrd	r1, r0, [sp]
   203e2:	2300      	movs	r3, #0
   203e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
   203e8:	461d      	mov	r5, r3
	off_t group_offs = 0;
   203ea:	469e      	mov	lr, r3
	size_t page_count = 0;
   203ec:	469c      	mov	ip, r3
	while (layout_size--) {
   203ee:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   203f2:	d102      	bne.n	203fa <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   203f4:	f06f 0015 	mvn.w	r0, #21
   203f8:	e018      	b.n	2042c <flash_get_page_info+0x62>
		if (use_addr) {
   203fa:	680a      	ldr	r2, [r1, #0]
   203fc:	b1cf      	cbz	r7, 20432 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   203fe:	6848      	ldr	r0, [r1, #4]
   20400:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   20404:	42a5      	cmp	r5, r4
   20406:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2040a:	dd17      	ble.n	2043c <flash_get_page_info+0x72>
   2040c:	b103      	cbz	r3, 20410 <flash_get_page_info+0x46>
   2040e:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   20410:	9b00      	ldr	r3, [sp, #0]
   20412:	685b      	ldr	r3, [r3, #4]
   20414:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   20416:	b177      	cbz	r7, 20436 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   20418:	eba4 040e 	sub.w	r4, r4, lr
   2041c:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   20420:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   20424:	4464      	add	r4, ip
			info->start_offset = group_offs +
   20426:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   20428:	60b4      	str	r4, [r6, #8]
			return 0;
   2042a:	2000      	movs	r0, #0
}
   2042c:	b002      	add	sp, #8
   2042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   20432:	4415      	add	r5, r2
   20434:	e7e6      	b.n	20404 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   20436:	eba4 040c 	sub.w	r4, r4, ip
   2043a:	e7f1      	b.n	20420 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   2043c:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2043e:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   20440:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   20444:	3108      	adds	r1, #8
   20446:	2301      	movs	r3, #1
   20448:	e7d1      	b.n	203ee <flash_get_page_info+0x24>

0002044a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   2044a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   2044c:	2201      	movs	r2, #1
   2044e:	f7ff bfbc 	b.w	203ca <flash_get_page_info>

00020452 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   20452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   20456:	6843      	ldr	r3, [r0, #4]
{
   20458:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2045a:	691b      	ldr	r3, [r3, #16]
{
   2045c:	4688      	mov	r8, r1
   2045e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   20460:	a901      	add	r1, sp, #4
   20462:	aa02      	add	r2, sp, #8
   20464:	4798      	blx	r3
	off_t off = 0;
   20466:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   20468:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2046a:	4625      	mov	r5, r4
   2046c:	9b02      	ldr	r3, [sp, #8]
   2046e:	42ab      	cmp	r3, r5
   20470:	d802      	bhi.n	20478 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   20472:	b006      	add	sp, #24
   20474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   20478:	9f01      	ldr	r7, [sp, #4]
   2047a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2047e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   20480:	687b      	ldr	r3, [r7, #4]
   20482:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20484:	683a      	ldr	r2, [r7, #0]
   20486:	42b2      	cmp	r2, r6
   20488:	eb0a 0306 	add.w	r3, sl, r6
   2048c:	d802      	bhi.n	20494 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2048e:	3501      	adds	r5, #1
   20490:	469a      	mov	sl, r3
   20492:	e7eb      	b.n	2046c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   20494:	4649      	mov	r1, r9
   20496:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   20498:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2049a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2049c:	47c0      	blx	r8
   2049e:	2800      	cmp	r0, #0
   204a0:	d0e7      	beq.n	20472 <flash_page_foreach+0x20>
			off += page_info.size;
   204a2:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   204a4:	3601      	adds	r6, #1
			off += page_info.size;
   204a6:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   204a8:	e7ec      	b.n	20484 <flash_page_foreach+0x32>

000204aa <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   204aa:	6882      	ldr	r2, [r0, #8]
{
   204ac:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   204ae:	e892 0003 	ldmia.w	r2, {r0, r1}
   204b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   204b6:	2000      	movs	r0, #0
   204b8:	4770      	bx	lr

000204ba <nrfx_nvmc_flash_size_get>:
   204ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   204be:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   204c0:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   204c2:	4350      	muls	r0, r2
   204c4:	4770      	bx	lr

000204c6 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   204c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   204ca:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   204cc:	4770      	bx	lr

000204ce <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   204ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   204d2:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   204d4:	4770      	bx	lr

000204d6 <arch_system_halt>:
	__asm__ volatile(
   204d6:	f04f 0220 	mov.w	r2, #32
   204da:	f3ef 8311 	mrs	r3, BASEPRI
   204de:	f382 8811 	msr	BASEPRI, r2
   204e2:	f3bf 8f6f 	isb	sy
	for (;;) {
   204e6:	e7fe      	b.n	204e6 <arch_system_halt+0x10>

000204e8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   204e8:	f7fd bf16 	b.w	1e318 <z_clock_idle_exit>

000204ec <k_mem_slab_init>:
{
   204ec:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   204ee:	2400      	movs	r4, #0
   204f0:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   204f2:	ea41 0402 	orr.w	r4, r1, r2
   204f6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   204fa:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   204fe:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20500:	d10c      	bne.n	2051c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   20502:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20504:	42a3      	cmp	r3, r4
   20506:	d103      	bne.n	20510 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   20508:	e9c0 0000 	strd	r0, r0, [r0]
}
   2050c:	2000      	movs	r0, #0
}
   2050e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   20510:	6945      	ldr	r5, [r0, #20]
   20512:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20514:	3401      	adds	r4, #1
		slab->free_list = p;
   20516:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20518:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2051a:	e7f3      	b.n	20504 <k_mem_slab_init+0x18>
		return -EINVAL;
   2051c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20520:	e7f5      	b.n	2050e <k_mem_slab_init+0x22>

00020522 <k_mem_pool_malloc>:
{
   20522:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20524:	2404      	movs	r4, #4
   20526:	190a      	adds	r2, r1, r4
   20528:	d204      	bcs.n	20534 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2052a:	2300      	movs	r3, #0
   2052c:	4669      	mov	r1, sp
   2052e:	f7fa fc71 	bl	1ae14 <k_mem_pool_alloc>
   20532:	b110      	cbz	r0, 2053a <k_mem_pool_malloc+0x18>
		return NULL;
   20534:	2000      	movs	r0, #0
}
   20536:	b002      	add	sp, #8
   20538:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   2053a:	9800      	ldr	r0, [sp, #0]
   2053c:	4622      	mov	r2, r4
   2053e:	a901      	add	r1, sp, #4
   20540:	f7fd ffd2 	bl	1e4e8 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   20544:	9800      	ldr	r0, [sp, #0]
   20546:	3004      	adds	r0, #4
   20548:	e7f5      	b.n	20536 <k_mem_pool_malloc+0x14>

0002054a <k_free>:
	if (ptr != NULL) {
   2054a:	b110      	cbz	r0, 20552 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2054c:	3804      	subs	r0, #4
   2054e:	f7fa bcab 	b.w	1aea8 <k_mem_pool_free_id>
}
   20552:	4770      	bx	lr

00020554 <z_impl_k_mutex_init>:
{
   20554:	4603      	mov	r3, r0
	mutex->owner = NULL;
   20556:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   20558:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2055c:	e9c3 3300 	strd	r3, r3, [r3]
}
   20560:	4770      	bx	lr

00020562 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   20562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20566:	4604      	mov	r4, r0
   20568:	460d      	mov	r5, r1
   2056a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2056c:	f100 0708 	add.w	r7, r0, #8
   20570:	f04f 0220 	mov.w	r2, #32
   20574:	f3ef 8611 	mrs	r6, BASEPRI
   20578:	f382 8811 	msr	BASEPRI, r2
   2057c:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   20580:	b1db      	cbz	r3, 205ba <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   20582:	2008      	movs	r0, #8
   20584:	f7fa fcbc 	bl	1af00 <z_thread_malloc>
		if (anode == NULL) {
   20588:	b938      	cbnz	r0, 2059a <queue_insert+0x38>
	__asm__ volatile(
   2058a:	f386 8811 	msr	BASEPRI, r6
   2058e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   20592:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   20596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2059a:	2301      	movs	r3, #1
		anode->data = data;
   2059c:	f8c0 8004 	str.w	r8, [r0, #4]
   205a0:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   205a2:	6803      	ldr	r3, [r0, #0]
   205a4:	f003 0203 	and.w	r2, r3, #3
   205a8:	b95d      	cbnz	r5, 205c2 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   205aa:	6823      	ldr	r3, [r4, #0]
   205ac:	4313      	orrs	r3, r2
   205ae:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   205b0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   205b2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   205b4:	b973      	cbnz	r3, 205d4 <queue_insert+0x72>
	list->tail = node;
   205b6:	6060      	str	r0, [r4, #4]
}
   205b8:	e00c      	b.n	205d4 <queue_insert+0x72>
	node->next_and_flags = flags;
   205ba:	f8c8 3000 	str.w	r3, [r8]
}
   205be:	4640      	mov	r0, r8
   205c0:	e7ef      	b.n	205a2 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   205c2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   205c4:	f033 0303 	bics.w	r3, r3, #3
   205c8:	d114      	bne.n	205f4 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   205ca:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   205cc:	6862      	ldr	r2, [r4, #4]
   205ce:	b95a      	cbnz	r2, 205e8 <queue_insert+0x86>
	list->head = node;
   205d0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   205d4:	2104      	movs	r1, #4
   205d6:	4638      	mov	r0, r7
   205d8:	f000 fbfc 	bl	20dd4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   205dc:	4638      	mov	r0, r7
   205de:	4631      	mov	r1, r6
   205e0:	f000 f8ea 	bl	207b8 <z_reschedule>
	return 0;
   205e4:	2000      	movs	r0, #0
   205e6:	e7d6      	b.n	20596 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   205e8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   205ea:	f003 0303 	and.w	r3, r3, #3
   205ee:	4303      	orrs	r3, r0
   205f0:	6013      	str	r3, [r2, #0]
   205f2:	e7e0      	b.n	205b6 <queue_insert+0x54>
   205f4:	4313      	orrs	r3, r2
   205f6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   205f8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   205fa:	f003 0303 	and.w	r3, r3, #3
   205fe:	4318      	orrs	r0, r3
   20600:	6028      	str	r0, [r5, #0]
}
   20602:	e7e7      	b.n	205d4 <queue_insert+0x72>

00020604 <z_queue_node_peek>:
{
   20604:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   20606:	4604      	mov	r4, r0
   20608:	b130      	cbz	r0, 20618 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2060a:	6802      	ldr	r2, [r0, #0]
   2060c:	0793      	lsls	r3, r2, #30
   2060e:	d003      	beq.n	20618 <z_queue_node_peek+0x14>
		ret = anode->data;
   20610:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20612:	b109      	cbz	r1, 20618 <z_queue_node_peek+0x14>
			k_free(anode);
   20614:	f7ff ff99 	bl	2054a <k_free>
}
   20618:	4620      	mov	r0, r4
   2061a:	bd10      	pop	{r4, pc}

0002061c <z_impl_k_queue_init>:
	list->head = NULL;
   2061c:	2300      	movs	r3, #0
	list->tail = NULL;
   2061e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   20622:	f100 0308 	add.w	r3, r0, #8
   20626:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2062a:	4770      	bx	lr

0002062c <k_queue_append>:
{
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
   2062c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2062e:	2300      	movs	r3, #0
   20630:	6841      	ldr	r1, [r0, #4]
   20632:	f7ff bf96 	b.w	20562 <queue_insert>

00020636 <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   20636:	2300      	movs	r3, #0
{
   20638:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   2063a:	4619      	mov	r1, r3
   2063c:	f7ff bf91 	b.w	20562 <queue_insert>

00020640 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   20640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20642:	4603      	mov	r3, r0
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   20644:	b1f1      	cbz	r1, 20684 <k_queue_append_list+0x44>
   20646:	b1ea      	cbz	r2, 20684 <k_queue_append_list+0x44>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20648:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2064c:	f04f 0020 	mov.w	r0, #32
   20650:	f3ef 8711 	mrs	r7, BASEPRI
   20654:	f380 8811 	msr	BASEPRI, r0
   20658:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2065c:	685c      	ldr	r4, [r3, #4]
   2065e:	b95c      	cbnz	r4, 20678 <k_queue_append_list+0x38>
	list->head = node;
   20660:	6019      	str	r1, [r3, #0]
	list->tail = node;
   20662:	605a      	str	r2, [r3, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20664:	2104      	movs	r1, #4
   20666:	4630      	mov	r0, r6
   20668:	f000 fbb4 	bl	20dd4 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   2066c:	4630      	mov	r0, r6
   2066e:	4639      	mov	r1, r7
   20670:	f000 f8a2 	bl	207b8 <z_reschedule>

	return 0;
   20674:	2000      	movs	r0, #0
}
   20676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20678:	6825      	ldr	r5, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2067a:	f005 0503 	and.w	r5, r5, #3
   2067e:	4329      	orrs	r1, r5
   20680:	6021      	str	r1, [r4, #0]
}
   20682:	e7ee      	b.n	20662 <k_queue_append_list+0x22>
		return -EINVAL;
   20684:	f06f 0015 	mvn.w	r0, #21
   20688:	e7f5      	b.n	20676 <k_queue_append_list+0x36>

0002068a <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2068a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2068e:	4604      	mov	r4, r0
   20690:	b086      	sub	sp, #24
   20692:	460d      	mov	r5, r1
   20694:	f04f 0320 	mov.w	r3, #32
   20698:	f3ef 8611 	mrs	r6, BASEPRI
   2069c:	f383 8811 	msr	BASEPRI, r3
   206a0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   206a4:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   206a6:	b188      	cbz	r0, 206cc <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   206a8:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   206aa:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   206ac:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   206b0:	4290      	cmp	r0, r2
	list->head = node;
   206b2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   206b4:	bf08      	it	eq
   206b6:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   206b8:	2101      	movs	r1, #1
   206ba:	f7ff ffa3 	bl	20604 <z_queue_node_peek>
	__asm__ volatile(
   206be:	f386 8811 	msr	BASEPRI, r6
   206c2:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   206c6:	b006      	add	sp, #24
   206c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   206cc:	2900      	cmp	r1, #0
   206ce:	d0f6      	beq.n	206be <z_impl_k_queue_get+0x34>
   206d0:	f386 8811 	msr	BASEPRI, r6
   206d4:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   206d8:	2104      	movs	r1, #4
   206da:	4602      	mov	r2, r0
   206dc:	4623      	mov	r3, r4
   206de:	eb0d 0001 	add.w	r0, sp, r1
   206e2:	f000 fb68 	bl	20db6 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   206e6:	1c6a      	adds	r2, r5, #1
   206e8:	d002      	beq.n	206f0 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   206ea:	f000 fa28 	bl	20b3e <z_impl_k_uptime_get>
   206ee:	4607      	mov	r7, r0
{
   206f0:	2600      	movs	r6, #0
		event.state = K_POLL_STATE_NOT_READY;
   206f2:	9b04      	ldr	r3, [sp, #16]
   206f4:	f36f 3310 	bfc	r3, #12, #5
   206f8:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
   206fa:	2101      	movs	r1, #1
   206fc:	1baa      	subs	r2, r5, r6
   206fe:	a801      	add	r0, sp, #4
   20700:	f7fb fb20 	bl	1bd44 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   20704:	b118      	cbz	r0, 2070e <z_impl_k_queue_get+0x84>
   20706:	300b      	adds	r0, #11
   20708:	d001      	beq.n	2070e <z_impl_k_queue_get+0x84>
			return NULL;
   2070a:	2000      	movs	r0, #0
   2070c:	e7db      	b.n	206c6 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   2070e:	f04f 0320 	mov.w	r3, #32
   20712:	f3ef 8811 	mrs	r8, BASEPRI
   20716:	f383 8811 	msr	BASEPRI, r3
   2071a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   2071e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   20720:	b138      	cbz	r0, 20732 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20722:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20724:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20726:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2072a:	4290      	cmp	r0, r2
	list->head = node;
   2072c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2072e:	bf08      	it	eq
   20730:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   20732:	2101      	movs	r1, #1
   20734:	f7ff ff66 	bl	20604 <z_queue_node_peek>
	__asm__ volatile(
   20738:	f388 8811 	msr	BASEPRI, r8
   2073c:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   20740:	2800      	cmp	r0, #0
   20742:	d1c0      	bne.n	206c6 <z_impl_k_queue_get+0x3c>
   20744:	1c6b      	adds	r3, r5, #1
   20746:	d0d4      	beq.n	206f2 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   20748:	f000 f9f9 	bl	20b3e <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   2074c:	1bc6      	subs	r6, r0, r7
	} while (!val && !done);
   2074e:	42b5      	cmp	r5, r6
   20750:	dacf      	bge.n	206f2 <z_impl_k_queue_get+0x68>
   20752:	e7da      	b.n	2070a <z_impl_k_queue_get+0x80>

00020754 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   20754:	f990 000e 	ldrsb.w	r0, [r0, #14]
   20758:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2075c:	4298      	cmp	r0, r3
   2075e:	bfac      	ite	ge
   20760:	2000      	movge	r0, #0
   20762:	2001      	movlt	r0, #1
   20764:	4770      	bx	lr

00020766 <z_find_first_thread_to_unpend>:
{
   20766:	b510      	push	{r4, lr}
	__asm__ volatile(
   20768:	f04f 0320 	mov.w	r3, #32
   2076c:	f3ef 8411 	mrs	r4, BASEPRI
   20770:	f383 8811 	msr	BASEPRI, r3
   20774:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20778:	f000 f85c 	bl	20834 <z_priq_dumb_best>
	__asm__ volatile(
   2077c:	f384 8811 	msr	BASEPRI, r4
   20780:	f3bf 8f6f 	isb	sy
}
   20784:	bd10      	pop	{r4, pc}

00020786 <z_unpend_thread_no_timeout>:
{
   20786:	b538      	push	{r3, r4, r5, lr}
   20788:	4604      	mov	r4, r0
	__asm__ volatile(
   2078a:	f04f 0320 	mov.w	r3, #32
   2078e:	f3ef 8511 	mrs	r5, BASEPRI
   20792:	f383 8811 	msr	BASEPRI, r3
   20796:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2079a:	4601      	mov	r1, r0
   2079c:	6880      	ldr	r0, [r0, #8]
   2079e:	f7fa fccf 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   207a2:	7b63      	ldrb	r3, [r4, #13]
   207a4:	f023 0302 	bic.w	r3, r3, #2
   207a8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   207aa:	2300      	movs	r3, #0
   207ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   207ae:	f385 8811 	msr	BASEPRI, r5
   207b2:	f3bf 8f6f 	isb	sy
}
   207b6:	bd38      	pop	{r3, r4, r5, pc}

000207b8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   207b8:	b921      	cbnz	r1, 207c4 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   207ba:	f3ef 8005 	mrs	r0, IPSR
   207be:	b908      	cbnz	r0, 207c4 <z_reschedule+0xc>
   207c0:	f7e5 b90c 	b.w	59dc <arch_swap>
   207c4:	f381 8811 	msr	BASEPRI, r1
   207c8:	f3bf 8f6f 	isb	sy
}
   207cc:	4770      	bx	lr

000207ce <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   207ce:	4603      	mov	r3, r0
   207d0:	b920      	cbnz	r0, 207dc <z_reschedule_irqlock+0xe>
   207d2:	f3ef 8205 	mrs	r2, IPSR
   207d6:	b90a      	cbnz	r2, 207dc <z_reschedule_irqlock+0xe>
   207d8:	f7e5 b900 	b.w	59dc <arch_swap>
   207dc:	f383 8811 	msr	BASEPRI, r3
   207e0:	f3bf 8f6f 	isb	sy
}
   207e4:	4770      	bx	lr

000207e6 <z_reschedule_unlocked>:
	__asm__ volatile(
   207e6:	f04f 0320 	mov.w	r3, #32
   207ea:	f3ef 8011 	mrs	r0, BASEPRI
   207ee:	f383 8811 	msr	BASEPRI, r3
   207f2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   207f6:	f7ff bfea 	b.w	207ce <z_reschedule_irqlock>

000207fa <z_unpend_thread>:
{
   207fa:	b510      	push	{r4, lr}
   207fc:	4601      	mov	r1, r0
   207fe:	f04f 0320 	mov.w	r3, #32
   20802:	f3ef 8411 	mrs	r4, BASEPRI
   20806:	f383 8811 	msr	BASEPRI, r3
   2080a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2080e:	6880      	ldr	r0, [r0, #8]
   20810:	f7fa fc96 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20814:	7b4b      	ldrb	r3, [r1, #13]
   20816:	f023 0302 	bic.w	r3, r3, #2
   2081a:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   2081c:	2300      	movs	r3, #0
   2081e:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   20820:	f384 8811 	msr	BASEPRI, r4
   20824:	f3bf 8f6f 	isb	sy
}
   20828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   2082c:	f101 0018 	add.w	r0, r1, #24
   20830:	f000 b941 	b.w	20ab6 <z_abort_timeout>

00020834 <z_priq_dumb_best>:
{
   20834:	4603      	mov	r3, r0
	return list->head == list;
   20836:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20838:	4283      	cmp	r3, r0
   2083a:	d003      	beq.n	20844 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2083c:	2800      	cmp	r0, #0
   2083e:	bf38      	it	cc
   20840:	2000      	movcc	r0, #0
   20842:	4770      	bx	lr
	struct k_thread *thread = NULL;
   20844:	2000      	movs	r0, #0
}
   20846:	4770      	bx	lr

00020848 <z_ready_thread>:
{
   20848:	b510      	push	{r4, lr}
	__asm__ volatile(
   2084a:	f04f 0320 	mov.w	r3, #32
   2084e:	f3ef 8411 	mrs	r4, BASEPRI
   20852:	f383 8811 	msr	BASEPRI, r3
   20856:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2085a:	f7fa fcc7 	bl	1b1ec <ready_thread>
	__asm__ volatile(
   2085e:	f384 8811 	msr	BASEPRI, r4
   20862:	f3bf 8f6f 	isb	sy
}
   20866:	bd10      	pop	{r4, pc}

00020868 <z_thread_timeout>:
{
   20868:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   2086a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2086e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   20870:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   20874:	b1c3      	cbz	r3, 208a8 <z_thread_timeout+0x40>
	__asm__ volatile(
   20876:	f04f 0320 	mov.w	r3, #32
   2087a:	f3ef 8511 	mrs	r5, BASEPRI
   2087e:	f383 8811 	msr	BASEPRI, r3
   20882:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20886:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2088a:	f7fa fc59 	bl	1b140 <z_priq_dumb_remove>
   2088e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   20892:	f023 0302 	bic.w	r3, r3, #2
   20896:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   2089a:	2300      	movs	r3, #0
   2089c:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   208a0:	f385 8811 	msr	BASEPRI, r5
   208a4:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   208a8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   208ac:	f023 0314 	bic.w	r3, r3, #20
   208b0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   208b4:	4608      	mov	r0, r1
}
   208b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   208ba:	f7ff bfc5 	b.w	20848 <z_ready_thread>

000208be <z_remove_thread_from_ready_q>:
{
   208be:	b510      	push	{r4, lr}
	__asm__ volatile(
   208c0:	f04f 0320 	mov.w	r3, #32
   208c4:	f3ef 8411 	mrs	r4, BASEPRI
   208c8:	f383 8811 	msr	BASEPRI, r3
   208cc:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   208d0:	f7fa fdd0 	bl	1b474 <unready_thread>
	__asm__ volatile(
   208d4:	f384 8811 	msr	BASEPRI, r4
   208d8:	f3bf 8f6f 	isb	sy
}
   208dc:	bd10      	pop	{r4, pc}

000208de <z_unpend_first_thread>:
{
   208de:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   208e0:	f04f 0320 	mov.w	r3, #32
   208e4:	f3ef 8211 	mrs	r2, BASEPRI
   208e8:	f383 8811 	msr	BASEPRI, r3
   208ec:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   208f0:	f7ff ffa0 	bl	20834 <z_priq_dumb_best>
   208f4:	4604      	mov	r4, r0
	__asm__ volatile(
   208f6:	f382 8811 	msr	BASEPRI, r2
   208fa:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   208fe:	b1c8      	cbz	r0, 20934 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   20900:	f04f 0320 	mov.w	r3, #32
   20904:	f3ef 8511 	mrs	r5, BASEPRI
   20908:	f383 8811 	msr	BASEPRI, r3
   2090c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20910:	4601      	mov	r1, r0
   20912:	6880      	ldr	r0, [r0, #8]
   20914:	f7fa fc14 	bl	1b140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20918:	7b63      	ldrb	r3, [r4, #13]
   2091a:	f023 0302 	bic.w	r3, r3, #2
   2091e:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   20920:	2300      	movs	r3, #0
   20922:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   20924:	f385 8811 	msr	BASEPRI, r5
   20928:	f3bf 8f6f 	isb	sy
   2092c:	f104 0018 	add.w	r0, r4, #24
   20930:	f000 f8c1 	bl	20ab6 <z_abort_timeout>
}
   20934:	4620      	mov	r0, r4
   20936:	bd38      	pop	{r3, r4, r5, pc}

00020938 <z_unpend_all>:
{
   20938:	b538      	push	{r3, r4, r5, lr}
   2093a:	4605      	mov	r5, r0
	int need_sched = 0;
   2093c:	2000      	movs	r0, #0
	return list->head == list;
   2093e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20940:	42a5      	cmp	r5, r4
   20942:	d000      	beq.n	20946 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20944:	b904      	cbnz	r4, 20948 <z_unpend_all+0x10>
}
   20946:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20948:	4620      	mov	r0, r4
   2094a:	f7ff ff56 	bl	207fa <z_unpend_thread>
		z_ready_thread(thread);
   2094e:	4620      	mov	r0, r4
   20950:	f7ff ff7a 	bl	20848 <z_ready_thread>
		need_sched = 1;
   20954:	2001      	movs	r0, #1
   20956:	e7f2      	b.n	2093e <z_unpend_all+0x6>

00020958 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   20958:	b15a      	cbz	r2, 20972 <z_impl_k_sem_init+0x1a>
   2095a:	428a      	cmp	r2, r1
   2095c:	d309      	bcc.n	20972 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2095e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   20962:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   20966:	e9c0 0000 	strd	r0, r0, [r0]
   2096a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2096e:	2000      	movs	r0, #0
   20970:	4770      	bx	lr
		return -EINVAL;
   20972:	f06f 0015 	mvn.w	r0, #21
}
   20976:	4770      	bx	lr

00020978 <k_is_in_isr>:
   20978:	f3ef 8005 	mrs	r0, IPSR
}
   2097c:	3800      	subs	r0, #0
   2097e:	bf18      	it	ne
   20980:	2001      	movne	r0, #1
   20982:	4770      	bx	lr

00020984 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   20984:	f7e6 b9de 	b.w	6d44 <arch_busy_wait>

00020988 <z_impl_k_thread_name_set>:
}
   20988:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2098c:	4770      	bx	lr

0002098e <k_thread_name_get>:
}
   2098e:	2000      	movs	r0, #0
   20990:	4770      	bx	lr

00020992 <z_new_thread_init>:
{
   20992:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   20994:	9c02      	ldr	r4, [sp, #8]
   20996:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   20998:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
   2099a:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
   2099c:	2300      	movs	r3, #0
	node->prev = NULL;
   2099e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   209a2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   209a6:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
	thread_base->thread_state = (u8_t)initial_state;
   209aa:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   209ac:	73c3      	strb	r3, [r0, #15]
}
   209ae:	bd10      	pop	{r4, pc}

000209b0 <k_work_submit_to_queue>:
{
   209b0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   209b2:	f101 0308 	add.w	r3, r1, #8
   209b6:	f3bf 8f5b 	dmb	ish
   209ba:	e853 2f00 	ldrex	r2, [r3]
   209be:	f042 0c01 	orr.w	ip, r2, #1
   209c2:	e843 ce00 	strex	lr, ip, [r3]
   209c6:	f1be 0f00 	cmp.w	lr, #0
   209ca:	d1f6      	bne.n	209ba <k_work_submit_to_queue+0xa>
   209cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   209d0:	07d3      	lsls	r3, r2, #31
   209d2:	d403      	bmi.n	209dc <k_work_submit_to_queue+0x2c>
}
   209d4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   209d8:	f7ff be28 	b.w	2062c <k_queue_append>
}
   209dc:	f85d fb04 	ldr.w	pc, [sp], #4

000209e0 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   209e0:	f1a0 010c 	sub.w	r1, r0, #12
   209e4:	6900      	ldr	r0, [r0, #16]
   209e6:	f7ff bfe3 	b.w	209b0 <k_work_submit_to_queue>

000209ea <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   209ea:	69c3      	ldr	r3, [r0, #28]
{
   209ec:	b570      	push	{r4, r5, r6, lr}
   209ee:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   209f0:	b913      	cbnz	r3, 209f8 <work_cancel+0xe>
		return -EALREADY;
   209f2:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   209f6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   209f8:	f3bf 8f5b 	dmb	ish
   209fc:	6883      	ldr	r3, [r0, #8]
   209fe:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   20a02:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   20a04:	f100 0508 	add.w	r5, r0, #8
   20a08:	d532      	bpl.n	20a70 <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20a0a:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20a0c:	6813      	ldr	r3, [r2, #0]
   20a0e:	2100      	movs	r1, #0
   20a10:	b913      	cbnz	r3, 20a18 <work_cancel+0x2e>
			return -EINVAL;
   20a12:	f06f 0015 	mvn.w	r0, #21
   20a16:	e7ee      	b.n	209f6 <work_cancel+0xc>
   20a18:	429c      	cmp	r4, r3
   20a1a:	d124      	bne.n	20a66 <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   20a1c:	6823      	ldr	r3, [r4, #0]
   20a1e:	6856      	ldr	r6, [r2, #4]
   20a20:	f023 0003 	bic.w	r0, r3, #3
   20a24:	b9b1      	cbnz	r1, 20a54 <work_cancel+0x6a>
   20a26:	42b4      	cmp	r4, r6
	list->head = node;
   20a28:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20a2a:	d100      	bne.n	20a2e <work_cancel+0x44>
	list->tail = node;
   20a2c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20a2e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a30:	f003 0303 	and.w	r3, r3, #3
   20a34:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   20a36:	2000      	movs	r0, #0
   20a38:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20a3a:	f3bf 8f5b 	dmb	ish
   20a3e:	e855 3f00 	ldrex	r3, [r5]
   20a42:	f023 0301 	bic.w	r3, r3, #1
   20a46:	e845 3200 	strex	r2, r3, [r5]
   20a4a:	2a00      	cmp	r2, #0
   20a4c:	d1f7      	bne.n	20a3e <work_cancel+0x54>
   20a4e:	f3bf 8f5b 	dmb	ish
   20a52:	e7d0      	b.n	209f6 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20a54:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a56:	f003 0303 	and.w	r3, r3, #3
   20a5a:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   20a5c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a5e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20a60:	bf08      	it	eq
   20a62:	6051      	streq	r1, [r2, #4]
}
   20a64:	e7e3      	b.n	20a2e <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20a66:	6818      	ldr	r0, [r3, #0]
   20a68:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20a6a:	f020 0303 	bic.w	r3, r0, #3
   20a6e:	e7cf      	b.n	20a10 <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   20a70:	300c      	adds	r0, #12
   20a72:	f000 f820 	bl	20ab6 <z_abort_timeout>
		if (err) {
   20a76:	2800      	cmp	r0, #0
   20a78:	d0dd      	beq.n	20a36 <work_cancel+0x4c>
   20a7a:	e7ba      	b.n	209f2 <work_cancel+0x8>

00020a7c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20a7c:	2300      	movs	r3, #0
   20a7e:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   20a82:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   20a86:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   20a88:	61c3      	str	r3, [r0, #28]
}
   20a8a:	4770      	bx	lr

00020a8c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   20a8c:	69c3      	ldr	r3, [r0, #28]
{
   20a8e:	b510      	push	{r4, lr}
	if (!work->work_q) {
   20a90:	b173      	cbz	r3, 20ab0 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   20a92:	f04f 0320 	mov.w	r3, #32
   20a96:	f3ef 8411 	mrs	r4, BASEPRI
   20a9a:	f383 8811 	msr	BASEPRI, r3
   20a9e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   20aa2:	f7ff ffa2 	bl	209ea <work_cancel>
	__asm__ volatile(
   20aa6:	f384 8811 	msr	BASEPRI, r4
   20aaa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   20aae:	bd10      	pop	{r4, pc}
		return -EINVAL;
   20ab0:	f06f 0015 	mvn.w	r0, #21
   20ab4:	e7fb      	b.n	20aae <k_delayed_work_cancel+0x22>

00020ab6 <z_abort_timeout>:
{
   20ab6:	b510      	push	{r4, lr}
	__asm__ volatile(
   20ab8:	f04f 0220 	mov.w	r2, #32
   20abc:	f3ef 8411 	mrs	r4, BASEPRI
   20ac0:	f382 8811 	msr	BASEPRI, r2
   20ac4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20ac8:	6803      	ldr	r3, [r0, #0]
   20aca:	b13b      	cbz	r3, 20adc <z_abort_timeout+0x26>
			remove_timeout(to);
   20acc:	f7fb f808 	bl	1bae0 <remove_timeout>
			ret = 0;
   20ad0:	2000      	movs	r0, #0
	__asm__ volatile(
   20ad2:	f384 8811 	msr	BASEPRI, r4
   20ad6:	f3bf 8f6f 	isb	sy
}
   20ada:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20adc:	f06f 0015 	mvn.w	r0, #21
   20ae0:	e7f7      	b.n	20ad2 <z_abort_timeout+0x1c>

00020ae2 <z_get_next_timeout_expiry>:
{
   20ae2:	b510      	push	{r4, lr}
	__asm__ volatile(
   20ae4:	f04f 0320 	mov.w	r3, #32
   20ae8:	f3ef 8411 	mrs	r4, BASEPRI
   20aec:	f383 8811 	msr	BASEPRI, r3
   20af0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20af4:	f7fb f808 	bl	1bb08 <next_timeout>
	__asm__ volatile(
   20af8:	f384 8811 	msr	BASEPRI, r4
   20afc:	f3bf 8f6f 	isb	sy
}
   20b00:	bd10      	pop	{r4, pc}

00020b02 <z_set_timeout_expiry>:
{
   20b02:	b570      	push	{r4, r5, r6, lr}
   20b04:	4604      	mov	r4, r0
   20b06:	460d      	mov	r5, r1
	__asm__ volatile(
   20b08:	f04f 0320 	mov.w	r3, #32
   20b0c:	f3ef 8611 	mrs	r6, BASEPRI
   20b10:	f383 8811 	msr	BASEPRI, r3
   20b14:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   20b18:	f7fa fff6 	bl	1bb08 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20b1c:	2801      	cmp	r0, #1
   20b1e:	dd05      	ble.n	20b2c <z_set_timeout_expiry+0x2a>
   20b20:	42a0      	cmp	r0, r4
   20b22:	dd03      	ble.n	20b2c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   20b24:	4629      	mov	r1, r5
   20b26:	4620      	mov	r0, r4
   20b28:	f7e4 fe3a 	bl	57a0 <z_clock_set_timeout>
	__asm__ volatile(
   20b2c:	f386 8811 	msr	BASEPRI, r6
   20b30:	f3bf 8f6f 	isb	sy
}
   20b34:	bd70      	pop	{r4, r5, r6, pc}

00020b36 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   20b36:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   20b38:	f7fb f898 	bl	1bc6c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   20b3c:	bd08      	pop	{r3, pc}

00020b3e <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   20b3e:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   20b40:	f7fb f894 	bl	1bc6c <z_tick_get>
			return (t * to_hz + off) / from_hz;
   20b44:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   20b48:	fba0 2304 	umull	r2, r3, r0, r4
   20b4c:	fb04 3301 	mla	r3, r4, r1, r3
   20b50:	0bd0      	lsrs	r0, r2, #15
}
   20b52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   20b56:	0bd9      	lsrs	r1, r3, #15
   20b58:	bd10      	pop	{r4, pc}

00020b5a <k_timer_init>:
	timer->status = 0U;
   20b5a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   20b5c:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   20b60:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   20b64:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   20b68:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20b6c:	6243      	str	r3, [r0, #36]	; 0x24
	timer->user_data = NULL;
   20b6e:	6283      	str	r3, [r0, #40]	; 0x28
}
   20b70:	4770      	bx	lr

00020b72 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   20b72:	b510      	push	{r4, lr}
   20b74:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20b76:	f7ff ff9e 	bl	20ab6 <z_abort_timeout>

	if (inactive) {
   20b7a:	b9d8      	cbnz	r0, 20bb4 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   20b7c:	69e3      	ldr	r3, [r4, #28]
   20b7e:	b10b      	cbz	r3, 20b84 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   20b80:	4620      	mov	r0, r4
   20b82:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   20b84:	f104 0010 	add.w	r0, r4, #16
   20b88:	2100      	movs	r1, #0
   20b8a:	f7ff fdec 	bl	20766 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   20b8e:	4604      	mov	r4, r0
   20b90:	b180      	cbz	r0, 20bb4 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   20b92:	f7ff fdf8 	bl	20786 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   20b96:	4620      	mov	r0, r4
   20b98:	f7ff fe56 	bl	20848 <z_ready_thread>
	__asm__ volatile(
   20b9c:	f04f 0320 	mov.w	r3, #32
   20ba0:	f3ef 8011 	mrs	r0, BASEPRI
   20ba4:	f383 8811 	msr	BASEPRI, r3
   20ba8:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   20bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   20bb0:	f7ff be0d 	b.w	207ce <z_reschedule_irqlock>
   20bb4:	bd10      	pop	{r4, pc}

00020bb6 <clear_event_registrations>:
	while (num_events--) {
   20bb6:	2314      	movs	r3, #20
{
   20bb8:	b530      	push	{r4, r5, lr}
   20bba:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   20bbe:	2400      	movs	r4, #0
	while (num_events--) {
   20bc0:	4281      	cmp	r1, r0
   20bc2:	d100      	bne.n	20bc6 <clear_event_registrations+0x10>
}
   20bc4:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   20bc6:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   20bca:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   20bce:	f003 030f 	and.w	r3, r3, #15
   20bd2:	2b02      	cmp	r3, #2
   20bd4:	d80a      	bhi.n	20bec <clear_event_registrations+0x36>
   20bd6:	b15b      	cbz	r3, 20bf0 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   20bd8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   20bdc:	b143      	cbz	r3, 20bf0 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   20bde:	f851 5c10 	ldr.w	r5, [r1, #-16]
   20be2:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   20be4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20be6:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   20bea:	e001      	b.n	20bf0 <clear_event_registrations+0x3a>
	switch (event->type) {
   20bec:	2b04      	cmp	r3, #4
   20bee:	d0f3      	beq.n	20bd8 <clear_event_registrations+0x22>
	__asm__ volatile(
   20bf0:	f382 8811 	msr	BASEPRI, r2
   20bf4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20bf8:	f04f 0320 	mov.w	r3, #32
   20bfc:	f3ef 8211 	mrs	r2, BASEPRI
   20c00:	f383 8811 	msr	BASEPRI, r3
   20c04:	f3bf 8f6f 	isb	sy
   20c08:	3914      	subs	r1, #20
   20c0a:	e7d9      	b.n	20bc0 <clear_event_registrations+0xa>

00020c0c <signal_poll_event>:
{
   20c0c:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   20c0e:	6884      	ldr	r4, [r0, #8]
{
   20c10:	4605      	mov	r5, r0
   20c12:	460e      	mov	r6, r1
	if (poller) {
   20c14:	b19c      	cbz	r4, 20c3e <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   20c16:	68a3      	ldr	r3, [r4, #8]
   20c18:	b95b      	cbnz	r3, 20c32 <signal_poll_event+0x26>
		poller->is_polling = false;
   20c1a:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   20c1c:	4618      	mov	r0, r3
	event->poller = NULL;
   20c1e:	2300      	movs	r3, #0
   20c20:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   20c22:	68eb      	ldr	r3, [r5, #12]
   20c24:	f3c3 3104 	ubfx	r1, r3, #12, #5
   20c28:	430e      	orrs	r6, r1
   20c2a:	f366 3310 	bfi	r3, r6, #12, #5
   20c2e:	60eb      	str	r3, [r5, #12]
	return retcode;
   20c30:	e004      	b.n	20c3c <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   20c32:	4798      	blx	r3
		poller->is_polling = false;
   20c34:	2300      	movs	r3, #0
		if (retcode < 0) {
   20c36:	2800      	cmp	r0, #0
		poller->is_polling = false;
   20c38:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   20c3a:	daf0      	bge.n	20c1e <signal_poll_event+0x12>
}
   20c3c:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   20c3e:	4620      	mov	r0, r4
   20c40:	e7ed      	b.n	20c1e <signal_poll_event+0x12>

00020c42 <k_poll_poller_cb>:
{
   20c42:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   20c44:	6883      	ldr	r3, [r0, #8]
   20c46:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   20c48:	7b63      	ldrb	r3, [r4, #13]
   20c4a:	079a      	lsls	r2, r3, #30
{
   20c4c:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   20c4e:	d50e      	bpl.n	20c6e <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
   20c50:	6a23      	ldr	r3, [r4, #32]
   20c52:	3302      	adds	r3, #2
   20c54:	d014      	beq.n	20c80 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   20c56:	4620      	mov	r0, r4
   20c58:	f7ff fdcf 	bl	207fa <z_unpend_thread>
	arch_thread_return_value_set(thread,
   20c5c:	2d08      	cmp	r5, #8
   20c5e:	bf0c      	ite	eq
   20c60:	f06f 0303 	mvneq.w	r3, #3
   20c64:	2300      	movne	r3, #0
   20c66:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20c68:	7b63      	ldrb	r3, [r4, #13]
   20c6a:	06db      	lsls	r3, r3, #27
   20c6c:	d001      	beq.n	20c72 <k_poll_poller_cb+0x30>
		return 0;
   20c6e:	2000      	movs	r0, #0
}
   20c70:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   20c72:	69a5      	ldr	r5, [r4, #24]
   20c74:	2d00      	cmp	r5, #0
   20c76:	d1fa      	bne.n	20c6e <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
   20c78:	4620      	mov	r0, r4
   20c7a:	f7ff fde5 	bl	20848 <z_ready_thread>
	return 0;
   20c7e:	e7f6      	b.n	20c6e <k_poll_poller_cb+0x2c>
		return -EAGAIN;
   20c80:	f06f 000a 	mvn.w	r0, #10
   20c84:	e7f4      	b.n	20c70 <k_poll_poller_cb+0x2e>

00020c86 <add_event>:
{
   20c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c88:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20c8a:	e9d0 2300 	ldrd	r2, r3, [r0]
   20c8e:	4290      	cmp	r0, r2
   20c90:	4604      	mov	r4, r0
   20c92:	460d      	mov	r5, r1
   20c94:	d106      	bne.n	20ca4 <add_event+0x1e>
	node->prev = list->tail;
   20c96:	6863      	ldr	r3, [r4, #4]
   20c98:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   20c9a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   20c9c:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   20c9e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20ca0:	6065      	str	r5, [r4, #4]
}
   20ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   20ca4:	2b00      	cmp	r3, #0
   20ca6:	d0f6      	beq.n	20c96 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   20ca8:	689b      	ldr	r3, [r3, #8]
   20caa:	6879      	ldr	r1, [r7, #4]
   20cac:	6858      	ldr	r0, [r3, #4]
   20cae:	f7ff fd51 	bl	20754 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   20cb2:	2800      	cmp	r0, #0
   20cb4:	d1ef      	bne.n	20c96 <add_event+0x10>
	return list->head == list;
   20cb6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20cb8:	42b4      	cmp	r4, r6
   20cba:	d0ec      	beq.n	20c96 <add_event+0x10>
   20cbc:	2e00      	cmp	r6, #0
   20cbe:	bf38      	it	cc
   20cc0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20cc2:	2e00      	cmp	r6, #0
   20cc4:	d0e7      	beq.n	20c96 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   20cc6:	68b3      	ldr	r3, [r6, #8]
   20cc8:	6878      	ldr	r0, [r7, #4]
   20cca:	6859      	ldr	r1, [r3, #4]
   20ccc:	f7ff fd42 	bl	20754 <z_is_t1_higher_prio_than_t2>
   20cd0:	b128      	cbz	r0, 20cde <add_event+0x58>
	node->prev = successor->prev;
   20cd2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20cd4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   20cd8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20cda:	6075      	str	r5, [r6, #4]
			return;
   20cdc:	e7e1      	b.n	20ca2 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   20cde:	6863      	ldr	r3, [r4, #4]
   20ce0:	42b3      	cmp	r3, r6
   20ce2:	d0d8      	beq.n	20c96 <add_event+0x10>
   20ce4:	6836      	ldr	r6, [r6, #0]
   20ce6:	e7ec      	b.n	20cc2 <add_event+0x3c>

00020ce8 <register_events>:
{
   20ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20cec:	f04f 0a00 	mov.w	sl, #0
{
   20cf0:	460e      	mov	r6, r1
   20cf2:	4614      	mov	r4, r2
   20cf4:	461f      	mov	r7, r3
   20cf6:	4683      	mov	fp, r0
	int events_registered = 0;
   20cf8:	4655      	mov	r5, sl
	event->poller = NULL;
   20cfa:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   20cfc:	45b2      	cmp	sl, r6
   20cfe:	db02      	blt.n	20d06 <register_events+0x1e>
}
   20d00:	4628      	mov	r0, r5
   20d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d06:	f04f 0320 	mov.w	r3, #32
   20d0a:	f3ef 8911 	mrs	r9, BASEPRI
   20d0e:	f383 8811 	msr	BASEPRI, r3
   20d12:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20d16:	f89b 200d 	ldrb.w	r2, [fp, #13]
   20d1a:	f002 020f 	and.w	r2, r2, #15
   20d1e:	2a02      	cmp	r2, #2
   20d20:	d006      	beq.n	20d30 <register_events+0x48>
   20d22:	2a04      	cmp	r2, #4
   20d24:	d008      	beq.n	20d38 <register_events+0x50>
   20d26:	2a01      	cmp	r2, #1
   20d28:	d120      	bne.n	20d6c <register_events+0x84>
		if (event->signal->signaled != 0U) {
   20d2a:	f8db 3010 	ldr.w	r3, [fp, #16]
   20d2e:	e001      	b.n	20d34 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   20d30:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   20d34:	689b      	ldr	r3, [r3, #8]
   20d36:	e002      	b.n	20d3e <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   20d38:	f8db 3010 	ldr.w	r3, [fp, #16]
   20d3c:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   20d3e:	b1ab      	cbz	r3, 20d6c <register_events+0x84>
	event->state |= state;
   20d40:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   20d44:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   20d48:	f3c3 3104 	ubfx	r1, r3, #12, #5
   20d4c:	430a      	orrs	r2, r1
   20d4e:	f362 3310 	bfi	r3, r2, #12, #5
   20d52:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   20d56:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   20d5a:	f389 8811 	msr	BASEPRI, r9
   20d5e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20d62:	f10a 0a01 	add.w	sl, sl, #1
   20d66:	f10b 0b14 	add.w	fp, fp, #20
   20d6a:	e7c7      	b.n	20cfc <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   20d6c:	2f00      	cmp	r7, #0
   20d6e:	d1f4      	bne.n	20d5a <register_events+0x72>
   20d70:	7823      	ldrb	r3, [r4, #0]
   20d72:	2b00      	cmp	r3, #0
   20d74:	d0f1      	beq.n	20d5a <register_events+0x72>
	switch (event->type) {
   20d76:	f89b 300d 	ldrb.w	r3, [fp, #13]
   20d7a:	f003 030f 	and.w	r3, r3, #15
   20d7e:	2b02      	cmp	r3, #2
   20d80:	d008      	beq.n	20d94 <register_events+0xac>
   20d82:	2b04      	cmp	r3, #4
   20d84:	d011      	beq.n	20daa <register_events+0xc2>
   20d86:	2b01      	cmp	r3, #1
   20d88:	d10b      	bne.n	20da2 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   20d8a:	f8db 0010 	ldr.w	r0, [fp, #16]
   20d8e:	4622      	mov	r2, r4
   20d90:	4659      	mov	r1, fp
   20d92:	e004      	b.n	20d9e <register_events+0xb6>
		add_event(&event->sem->poll_events, event, poller);
   20d94:	f8db 0010 	ldr.w	r0, [fp, #16]
   20d98:	4622      	mov	r2, r4
   20d9a:	4659      	mov	r1, fp
   20d9c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   20d9e:	f7ff ff72 	bl	20c86 <add_event>
	event->poller = poller;
   20da2:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   20da6:	3501      	adds	r5, #1
   20da8:	e7d7      	b.n	20d5a <register_events+0x72>
		add_event(&event->queue->poll_events, event, poller);
   20daa:	f8db 0010 	ldr.w	r0, [fp, #16]
   20dae:	4622      	mov	r2, r4
   20db0:	4659      	mov	r1, fp
   20db2:	3008      	adds	r0, #8
   20db4:	e7f3      	b.n	20d9e <register_events+0xb6>

00020db6 <k_poll_event_init>:
{
   20db6:	b510      	push	{r4, lr}
	event->type = type;
   20db8:	0452      	lsls	r2, r2, #17
   20dba:	0209      	lsls	r1, r1, #8
   20dbc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   20dc0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   20dc4:	430a      	orrs	r2, r1
   20dc6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20dc8:	2400      	movs	r4, #0
	event->type = type;
   20dca:	430a      	orrs	r2, r1
	event->obj = obj;
   20dcc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20dd0:	6084      	str	r4, [r0, #8]
}
   20dd2:	bd10      	pop	{r4, pc}

00020dd4 <z_handle_obj_poll_events>:
{
   20dd4:	4603      	mov	r3, r0
	return list->head == list;
   20dd6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20dd8:	4283      	cmp	r3, r0
   20dda:	d008      	beq.n	20dee <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20ddc:	e9d0 3200 	ldrd	r3, r2, [r0]
   20de0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20de2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20de4:	2300      	movs	r3, #0
	node->prev = NULL;
   20de6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20dea:	f7ff bf0f 	b.w	20c0c <signal_poll_event>
}
   20dee:	4770      	bx	lr

00020df0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   20df0:	4770      	bx	lr
